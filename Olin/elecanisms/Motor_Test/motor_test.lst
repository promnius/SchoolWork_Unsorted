
motor_test.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	8f c2 20    	mov.w     #0xc28, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	00 49 23    	mov.w     #0x3490, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	06 34 02    	call      0x3406 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	20 00 20    	mov.w     #0x2, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	10 00 20    	mov.w     #0x1, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	6c 2d 04    	goto      0x2d6c <___digitalRead>
    11e4:	00 00 00 
    11e6:	28 2d 04    	goto      0x2d28 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	90 2d 04    	goto      0x2d90 <___analogRead>
    11ec:	00 00 00 
    11ee:	62 28 04    	goto      0x2862 <___pwmWrite>
    11f0:	00 00 00 
    11f2:	30 28 04    	goto      0x2830 <___pwmRead>
    11f4:	00 00 00 
    11f6:	d4 28 04    	goto      0x28d4 <___servoWrite>
    11f8:	00 00 00 
    11fa:	9e 28 04    	goto      0x289e <___servoRead>
    11fc:	00 00 00 
    11fe:	52 15 04    	goto      0x1552 <___putc_nobuffer>
    1200:	00 00 00 
    1202:	96 15 04    	goto      0x1596 <___putc_buffer>
    1204:	00 00 00 
    1206:	76 15 04    	goto      0x1576 <___getc_nobuffer>
    1208:	00 00 00 
    120a:	84 16 04    	goto      0x1684 <___getc_buffer>
    120c:	00 00 00 

0000120e <___subsf3>:
    120e:	03 f0 a2    	btg.w     w3, #0xf

00001210 <___addsf3>:
    1210:	88 9f be    	mov.d     w8, [w15++]
    1212:	8a 9f be    	mov.d     w10, [w15++]
    1214:	8c 1f 78    	mov.w     w12, [w15++]
    1216:	f7 00 07    	rcall     0x1406 <__funpack2>
    1218:	fe 00 33    	bra       N, 0x1416 <__fPropagateNaN>
    121a:	64 50 e1    	cp.w      w10, #0x4
    121c:	4f 00 32    	bra       Z, 0x12bc <aisinfinite>

0000121e <checkspecialb>:
    121e:	64 20 e1    	cp.w      w4, #0x4
    1220:	52 00 32    	bra       Z, 0x12c6 <return2>
    1222:	03 82 6c    	xor.w     w9, w3, w4
    1224:	07 00 3b    	bra       NN, 0x1234 <getsign>
    1226:	09 05 d0    	sl.w      w9, w10
    1228:	03 06 d0    	sl.w      w3, w12
    122a:	82 0f 54    	sub.w     w8, w2, [w15]
    122c:	0c 06 5d    	subb.w    w10, w12, w12
    122e:	02 00 39    	bra       NC, 0x1234 <getsign>
    1230:	02 00 32    	bra       Z, 0x1236 <gotsign>
    1232:	89 01 78    	mov.w     w9, w3

00001234 <getsign>:
    1234:	03 06 78    	mov.w     w3, w12

00001236 <gotsign>:
    1236:	85 82 55    	sub.w     w11, w5, w5
    1238:	04 00 3d    	bra       GE, 0x1242 <expcanonical>
    123a:	00 03 fd    	exch      w0, w6
    123c:	81 03 fd    	exch      w1, w7
    123e:	85 02 ea    	neg.w     w5, w5
    1240:	8b 85 42    	add.w     w5, w11, w11

00001242 <expcanonical>:
    1242:	84 0f 72    	ior.w     w4, w4, [w15]
    1244:	02 00 3b    	bra       NN, 0x124a <nonegate>
    1246:	60 00 10    	subr.w    w0, #0x0, w0
    1248:	e0 80 18    	subbr.w   w1, #0x0, w1

0000124a <nonegate>:
    124a:	60 11 b8    	mul.uu    w2, #0x0, w2
    124c:	00 05 eb    	clr.w     w10
    124e:	7a 28 e1    	cp.w      w5, #0x1a
    1250:	0a 00 39    	bra       NC, 0x1266 <aligniter>
    1252:	06 00 78    	mov.w     w6, w0
    1254:	c7 5d dd    	sl.w      w11, #0x7, w11
    1256:	f7 07 b2    	and.w     #0x7f, w7
    1258:	87 80 75    	ior.w     w11, w7, w1
    125a:	2d 00 37    	bra       0x12b6 <signoff>

0000125c <align>:
    125c:	82 81 71    	ior.w     w3, w2, w3
    125e:	0a 01 78    	mov.w     w10, w2
    1260:	61 05 60    	and.w     w0, #0x1, w10
    1262:	81 80 d1    	asr.w     w1, w1
    1264:	00 80 d3    	rrc.w     w0, w0

00001266 <aligniter>:
    1266:	85 02 e9    	dec.w     w5, w5
    1268:	f9 ff 3b    	bra       NN, 0x125c <align>

0000126a <aligned>:
    126a:	06 04 40    	add.w     w0, w6, w8
    126c:	87 84 48    	addc.w    w1, w7, w9
    126e:	02 00 3b    	bra       NN, 0x1274 <normalizesum>
    1270:	60 04 14    	subr.w    w8, #0x0, w8
    1272:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001274 <normalizesum>:
    1274:	09 88 a3    	btst.z    w9, #0x8
    1276:	07 00 32    	bra       Z, 0x1286 <checknormal>
    1278:	8a 81 71    	ior.w     w3, w10, w3
    127a:	82 81 71    	ior.w     w3, w2, w3
    127c:	61 01 64    	and.w     w8, #0x1, w2
    127e:	89 04 d1    	lsr.w     w9, w9
    1280:	08 84 d3    	rrc.w     w8, w8
    1282:	8b 05 e8    	inc.w     w11, w11
    1284:	17 00 37    	bra       0x12b4 <round>

00001286 <checknormal>:
    1286:	09 78 a3    	btst.z    w9, #0x7
    1288:	13 00 3a    	bra       NZ, 0x12b0 <discardguard>

0000128a <underflow>:
    128a:	0b 00 e0    	cp0.w     w11
    128c:	13 00 34    	bra       LE, 0x12b4 <round>
    128e:	8b 05 e9    	dec.w     w11, w11
    1290:	08 04 44    	add.w     w8, w8, w8
    1292:	89 84 4c    	addc.w    w9, w9, w9
    1294:	0a 44 74    	ior.b     w8, w10, w8
    1296:	09 78 a3    	btst.z    w9, #0x7
    1298:	0d 00 3a    	bra       NZ, 0x12b4 <round>

0000129a <normalizeloop>:
    129a:	0b 00 e0    	cp0.w     w11
    129c:	07 00 34    	bra       LE, 0x12ac <normalizeexit>
    129e:	8b 05 e9    	dec.w     w11, w11
    12a0:	08 04 44    	add.w     w8, w8, w8
    12a2:	89 84 4c    	addc.w    w9, w9, w9
    12a4:	01 00 3a    	bra       NZ, 0x12a8 <normalizetest>
    12a6:	0b 00 20    	mov.w     #0x0, w11

000012a8 <normalizetest>:
    12a8:	09 78 a3    	btst.z    w9, #0x7
    12aa:	f7 ff 32    	bra       Z, 0x129a <normalizeloop>

000012ac <normalizeexit>:
    12ac:	00 01 eb    	clr.w     w2
    12ae:	02 00 37    	bra       0x12b4 <round>

000012b0 <discardguard>:
    12b0:	82 81 71    	ior.w     w3, w2, w3
    12b2:	0a 01 78    	mov.w     w10, w2

000012b4 <round>:
    12b4:	6d 00 07    	rcall     0x1390 <__fpack>

000012b6 <signoff>:
    12b6:	0c f0 a7    	btsc.w    w12, #0xf
    12b8:	01 f0 a0    	bset.w    w1, #0xf
    12ba:	b6 00 37    	bra       0x1428 <__fbopExit>

000012bc <aisinfinite>:
    12bc:	64 20 e1    	cp.w      w4, #0x4
    12be:	02 00 3a    	bra       NZ, 0x12c4 <return8>
    12c0:	83 8f 6c    	xor.w     w9, w3, [w15]
    12c2:	b6 00 33    	bra       N, 0x1430 <__fbopReturnNaN>

000012c4 <return8>:
    12c4:	08 01 be    	mov.d     w8, w2

000012c6 <return2>:
    12c6:	02 00 be    	mov.d     w2, w0
    12c8:	af 00 37    	bra       0x1428 <__fbopExit>

000012ca <___divsf3>:
    12ca:	88 9f be    	mov.d     w8, [w15++]
    12cc:	8a 9f be    	mov.d     w10, [w15++]
    12ce:	8c 1f 78    	mov.w     w12, [w15++]
    12d0:	9a 00 07    	rcall     0x1406 <__funpack2>
    12d2:	a1 00 33    	bra       N, 0x1416 <__fPropagateNaN>
    12d4:	03 86 6c    	xor.w     w9, w3, w12
    12d6:	64 50 e1    	cp.w      w10, #0x4
    12d8:	2e 00 32    	bra       Z, 0x1336 <aisinfinite>
    12da:	64 20 e1    	cp.w      w4, #0x4
    12dc:	33 00 32    	bra       Z, 0x1344 <returnZero>
    12de:	61 50 e1    	cp.w      w10, #0x1
    12e0:	2f 00 32    	bra       Z, 0x1340 <aiszero>
    12e2:	61 20 e1    	cp.w      w4, #0x1
    12e4:	31 00 32    	bra       Z, 0x1348 <returnInf>

000012e6 <finitenonzero>:
    12e6:	85 85 55    	sub.w     w11, w5, w11
    12e8:	eb 07 b0    	add.w     #0x7e, w11
    12ea:	09 00 20    	mov.w     #0x0, w9
    12ec:	08 04 20    	mov.w     #0x40, w8
    12ee:	05 00 37    	bra       0x12fa <diventry>

000012f0 <divnext>:
    12f0:	08 04 44    	add.w     w8, w8, w8
    12f2:	89 84 4c    	addc.w    w9, w9, w9
    12f4:	0a 00 31    	bra       C, 0x130a <divdone>

000012f6 <divloop>:
    12f6:	06 03 43    	add.w     w6, w6, w6
    12f8:	87 83 4b    	addc.w    w7, w7, w7

000012fa <diventry>:
    12fa:	00 01 53    	sub.w     w6, w0, w2
    12fc:	81 81 5b    	subb.w    w7, w1, w3
    12fe:	f8 ff 33    	bra       N, 0x12f0 <divnext>
    1300:	02 03 be    	mov.d     w2, w6
    1302:	08 00 a0    	bset.w    w8, #0x0
    1304:	08 04 44    	add.w     w8, w8, w8
    1306:	89 84 4c    	addc.w    w9, w9, w9
    1308:	f6 ff 39    	bra       NC, 0x12f6 <divloop>

0000130a <divdone>:
    130a:	c6 39 dd    	sl.w      w7, #0x6, w3
    130c:	83 01 73    	ior.w     w6, w3, w3
    130e:	01 00 32    	bra       Z, 0x1312 <stickyok>
    1310:	13 00 20    	mov.w     #0x1, w3

00001312 <stickyok>:
    1312:	89 04 d1    	lsr.w     w9, w9
    1314:	08 84 d3    	rrc.w     w8, w8
    1316:	09 98 a3    	btst.z    w9, #0x9
    1318:	05 00 32    	bra       Z, 0x1324 <guardused>
    131a:	08 00 a7    	btsc.w    w8, #0x0
    131c:	03 00 a0    	bset.w    w3, #0x0
    131e:	89 04 d1    	lsr.w     w9, w9
    1320:	08 84 d3    	rrc.w     w8, w8
    1322:	8b 05 e8    	inc.w     w11, w11

00001324 <guardused>:
    1324:	89 04 d1    	lsr.w     w9, w9
    1326:	08 84 d3    	rrc.w     w8, w8
    1328:	00 01 eb    	clr.w     w2
    132a:	02 81 d2    	rlc.w     w2, w2
    132c:	31 00 07    	rcall     0x1390 <__fpack>

0000132e <return0>:
    132e:	01 f0 a1    	bclr.w    w1, #0xf
    1330:	0c f0 a7    	btsc.w    w12, #0xf
    1332:	01 f0 a0    	bset.w    w1, #0xf
    1334:	79 00 37    	bra       0x1428 <__fbopExit>

00001336 <aisinfinite>:
    1336:	64 20 e1    	cp.w      w4, #0x4
    1338:	7b 00 32    	bra       Z, 0x1430 <__fbopReturnNaN>

0000133a <return8>:
    133a:	08 01 be    	mov.d     w8, w2

0000133c <return2>:
    133c:	02 00 be    	mov.d     w2, w0
    133e:	f7 ff 37    	bra       0x132e <return0>

00001340 <aiszero>:
    1340:	61 20 e1    	cp.w      w4, #0x1
    1342:	76 00 32    	bra       Z, 0x1430 <__fbopReturnNaN>

00001344 <returnZero>:
    1344:	60 00 b8    	mul.uu    w0, #0x0, w0
    1346:	f3 ff 37    	bra       0x132e <return0>

00001348 <returnInf>:
    1348:	00 00 20    	mov.w     #0x0, w0
    134a:	01 f8 27    	mov.w     #0x7f80, w1
    134c:	f0 ff 37    	bra       0x132e <return0>

0000134e <___eqsf2>:
    134e:	14 00 20    	mov.w     #0x1, w4
    1350:	b6 00 37    	bra       0x14be <__fcompare>

00001352 <___gesf2>:
    1352:	f4 ff 2f    	mov.w     #0xffff, w4
    1354:	b4 00 37    	bra       0x14be <__fcompare>

00001356 <___fixunssfsi>:
    1356:	00 01 be    	mov.d     w0, w2
    1358:	41 00 07    	rcall     0x13dc <__funpack>
    135a:	04 70 a7    	btsc.w    w4, #0x7
    135c:	03 f0 a1    	bclr.w    w3, #0xf
    135e:	03 f8 a3    	btst.z    w3, #0xf
    1360:	13 00 3a    	bra       NZ, 0x1388 <returnzero>
    1362:	65 09 b1    	sub.w     #0x96, w5
    1364:	10 00 32    	bra       Z, 0x1386 <exit>
    1366:	09 00 35    	bra       LT, 0x137a <shiftright>
    1368:	69 28 e1    	cp.w      w5, #0x9
    136a:	02 00 35    	bra       LT, 0x1370 <shiftleft>
    136c:	01 00 28    	mov.w     #0x8000, w1
    136e:	00 00 05    	retlw.w   #0x0, w0

00001370 <shiftleft>:
    1370:	00 00 40    	add.w     w0, w0, w0
    1372:	81 80 48    	addc.w    w1, w1, w1
    1374:	85 02 e9    	dec.w     w5, w5
    1376:	fc ff 3a    	bra       NZ, 0x1370 <shiftleft>
    1378:	00 00 06    	return    

0000137a <shiftright>:
    137a:	f8 8f 42    	add.w     w5, #0x18, [w15]
    137c:	05 00 35    	bra       LT, 0x1388 <returnzero>

0000137e <shiftrightloop>:
    137e:	81 00 d1    	lsr.w     w1, w1
    1380:	00 80 d3    	rrc.w     w0, w0
    1382:	85 02 e8    	inc.w     w5, w5
    1384:	fc ff 3a    	bra       NZ, 0x137e <shiftrightloop>

00001386 <exit>:
    1386:	00 00 06    	return    

00001388 <returnzero>:
    1388:	80 00 eb    	clr.w     w1
    138a:	00 00 05    	retlw.w   #0x0, w0

0000138c <___floatunsisf>:
    138c:	60 11 b8    	mul.uu    w2, #0x0, w2
    138e:	b2 00 37    	bra       0x14f4 <___floatundisf>

00001390 <__fpack>:
    1390:	81 00 20    	mov.w     #0x8, w1
    1392:	61 80 55    	sub.w     w11, #0x1, w0
    1394:	0b 00 3d    	bra       GE, 0x13ac <notsubnormal>
    1396:	0b 00 20    	mov.w     #0x0, w11
    1398:	61 fe 2f    	mov.w     #0xffe6, w1
    139a:	01 00 e1    	cp.w      w0, w1
    139c:	1d 00 34    	bra       LE, 0x13d8 <zerosig>

0000139e <subnormal>:
    139e:	82 81 71    	ior.w     w3, w2, w3
    13a0:	61 01 64    	and.w     w8, #0x1, w2
    13a2:	89 04 d1    	lsr.w     w9, w9
    13a4:	08 84 d3    	rrc.w     w8, w8
    13a6:	00 00 e8    	inc.w     w0, w0
    13a8:	fa ff 3a    	bra       NZ, 0x139e <subnormal>
    13aa:	71 00 20    	mov.w     #0x7, w1

000013ac <notsubnormal>:
    13ac:	61 00 64    	and.w     w8, #0x1, w0
    13ae:	03 00 70    	ior.w     w0, w3, w0
    13b0:	02 00 60    	and.w     w0, w2, w0
    13b2:	09 00 32    	bra       Z, 0x13c6 <packupandgo>
    13b4:	61 04 44    	add.w     w8, #0x1, w8
    13b6:	e0 84 4c    	addc.w    w9, #0x0, w9
    13b8:	09 88 a5    	btst.z    w9, w1
    13ba:	05 00 32    	bra       Z, 0x13c6 <packupandgo>
    13bc:	8b 05 e8    	inc.w     w11, w11
    13be:	68 08 e1    	cp.w      w1, #0x8
    13c0:	02 00 3a    	bra       NZ, 0x13c6 <packupandgo>
    13c2:	89 04 d1    	lsr.w     w9, w9
    13c4:	08 84 d3    	rrc.w     w8, w8

000013c6 <packupandgo>:
    13c6:	f2 0f 20    	mov.w     #0xff, w2
    13c8:	02 58 e1    	cp.w      w11, w2
    13ca:	05 00 3d    	bra       GE, 0x13d6 <overflow>
    13cc:	c7 5d dd    	sl.w      w11, #0x7, w11
    13ce:	f9 07 b2    	and.w     #0x7f, w9
    13d0:	89 80 75    	ior.w     w11, w9, w1
    13d2:	08 00 78    	mov.w     w8, w0
    13d4:	00 00 06    	return    

000013d6 <overflow>:
    13d6:	0b f8 27    	mov.w     #0x7f80, w11

000013d8 <zerosig>:
    13d8:	8b 00 78    	mov.w     w11, w1
    13da:	00 00 05    	retlw.w   #0x0, w0

000013dc <__funpack>:
    13dc:	c7 0a de    	lsr.w     w1, #0x7, w5
    13de:	f1 07 b2    	and.w     #0x7f, w1
    13e0:	f5 0f b2    	and.w     #0xff, w5
    13e2:	08 00 32    	bra       Z, 0x13f4 <zeroorsub>
    13e4:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13e6:	02 00 32    	bra       Z, 0x13ec <nanorinf>

000013e8 <finitereturn>:
    13e8:	01 70 a0    	bset.w    w1, #0x7
    13ea:	24 00 05    	retlw.w   #0x2, w4

000013ec <nanorinf>:
    13ec:	81 0f 70    	ior.w     w0, w1, [w15]
    13ee:	01 00 32    	bra       Z, 0x13f2 <infinite>
    13f0:	04 08 05    	retlw.w   #0x80, w4

000013f2 <infinite>:
    13f2:	44 00 05    	retlw.w   #0x4, w4

000013f4 <zeroorsub>:
    13f4:	81 0f 70    	ior.w     w0, w1, [w15]
    13f6:	02 00 3a    	bra       NZ, 0x13fc <subnormal>
    13f8:	14 00 05    	retlw.w   #0x1, w4

000013fa <normalize>:
    13fa:	85 02 e9    	dec.w     w5, w5

000013fc <subnormal>:
    13fc:	00 00 40    	add.w     w0, w0, w0
    13fe:	81 c0 48    	addc.b    w1, w1, w1
    1400:	fc ff 3b    	bra       NN, 0x13fa <normalize>
    1402:	01 70 a0    	bset.w    w1, #0x7
    1404:	24 00 05    	retlw.w   #0x2, w4

00001406 <__funpack2>:
    1406:	00 04 be    	mov.d     w0, w8
    1408:	e9 ff 07    	rcall     0x13dc <__funpack>
    140a:	00 03 be    	mov.d     w0, w6
    140c:	04 05 be    	mov.d     w4, w10
    140e:	02 00 be    	mov.d     w2, w0
    1410:	e5 ff 07    	rcall     0x13dc <__funpack>
    1412:	84 4f 75    	ior.b     w10, w4, [w15]
    1414:	00 00 06    	return    

00001416 <__fPropagateNaN>:
    1416:	02 00 be    	mov.d     w2, w0
    1418:	64 50 e1    	cp.w      w10, #0x4
    141a:	05 00 36    	bra       LEU, 0x1426 <return0>
    141c:	64 20 e1    	cp.w      w4, #0x4
    141e:	02 00 36    	bra       LEU, 0x1424 <return8>
    1420:	09 68 a3    	btst.z    w9, #0x6
    1422:	01 00 3a    	bra       NZ, 0x1426 <return0>

00001424 <return8>:
    1424:	08 00 be    	mov.d     w8, w0

00001426 <return0>:
    1426:	01 60 a0    	bset.w    w1, #0x6

00001428 <__fbopExit>:
    1428:	4f 06 78    	mov.w     [--w15], w12
    142a:	4f 05 be    	mov.d     [--w15], w10
    142c:	4f 04 be    	mov.d     [--w15], w8
    142e:	00 00 06    	return    

00001430 <__fbopReturnNaN>:
    1430:	f0 ff 2f    	mov.w     #0xffff, w0
    1432:	f1 ff 27    	mov.w     #0x7fff, w1
    1434:	f9 ff 37    	bra       0x1428 <__fbopExit>

00001436 <___mulsf3>:
    1436:	88 9f be    	mov.d     w8, [w15++]
    1438:	8a 9f be    	mov.d     w10, [w15++]
    143a:	8c 1f 78    	mov.w     w12, [w15++]
    143c:	e4 ff 07    	rcall     0x1406 <__funpack2>
    143e:	eb ff 33    	bra       N, 0x1416 <__fPropagateNaN>
    1440:	03 86 6c    	xor.w     w9, w3, w12
    1442:	64 50 e1    	cp.w      w10, #0x4
    1444:	24 00 32    	bra       Z, 0x148e <aisinfinite>
    1446:	64 20 e1    	cp.w      w4, #0x4
    1448:	27 00 32    	bra       Z, 0x1498 <bisinfinite>
    144a:	61 50 e1    	cp.w      w10, #0x1
    144c:	22 00 32    	bra       Z, 0x1492 <return8>
    144e:	61 20 e1    	cp.w      w4, #0x1
    1450:	21 00 32    	bra       Z, 0x1494 <return2>
    1452:	8b 85 42    	add.w     w5, w11, w11
    1454:	eb 07 b1    	sub.w     #0x7e, w11
    1456:	01 34 b8    	mul.uu    w6, w1, w8
    1458:	00 3a b8    	mul.uu    w7, w0, w4
    145a:	08 04 42    	add.w     w4, w8, w8
    145c:	89 84 4a    	addc.w    w5, w9, w9
    145e:	01 3a b8    	mul.uu    w7, w1, w4
    1460:	00 30 b8    	mul.uu    w6, w0, w0
    1462:	88 80 40    	add.w     w1, w8, w1
    1464:	09 01 4a    	addc.w    w4, w9, w2
    1466:	04 00 33    	bra       N, 0x1470 <formsticky>
    1468:	00 00 40    	add.w     w0, w0, w0
    146a:	81 80 48    	addc.w    w1, w1, w1
    146c:	02 01 49    	addc.w    w2, w2, w2
    146e:	8b 05 e9    	dec.w     w11, w11

00001470 <formsticky>:
    1470:	c9 09 dd    	sl.w      w1, #0x9, w3
    1472:	83 01 70    	ior.w     w0, w3, w3
    1474:	01 00 32    	bra       Z, 0x1478 <formRandSig>
    1476:	13 00 20    	mov.w     #0x1, w3

00001478 <formRandSig>:
    1478:	c8 14 de    	lsr.w     w2, #0x8, w9
    147a:	48 14 dd    	sl.w      w2, #0x8, w8
    147c:	47 09 de    	lsr.w     w1, #0x7, w2
    147e:	12 00 b2    	and.w     #0x1, w2
    1480:	c8 08 de    	lsr.w     w1, #0x8, w1
    1482:	08 84 70    	ior.w     w1, w8, w8
    1484:	85 ff 07    	rcall     0x1390 <__fpack>

00001486 <return0>:
    1486:	01 f0 a1    	bclr.w    w1, #0xf
    1488:	0c f0 a7    	btsc.w    w12, #0xf
    148a:	01 f0 a0    	bset.w    w1, #0xf
    148c:	cd ff 37    	bra       0x1428 <__fbopExit>

0000148e <aisinfinite>:
    148e:	61 20 e1    	cp.w      w4, #0x1
    1490:	cf ff 32    	bra       Z, 0x1430 <__fbopReturnNaN>

00001492 <return8>:
    1492:	08 01 be    	mov.d     w8, w2

00001494 <return2>:
    1494:	02 00 be    	mov.d     w2, w0
    1496:	f7 ff 37    	bra       0x1486 <return0>

00001498 <bisinfinite>:
    1498:	61 50 e1    	cp.w      w10, #0x1
    149a:	fc ff 3a    	bra       NZ, 0x1494 <return2>
    149c:	c9 ff 37    	bra       0x1430 <__fbopReturnNaN>

0000149e <___udivsi3>:
    149e:	60 22 b8    	mul.uu    w4, #0x0, w4
    14a0:	06 02 20    	mov.w     #0x20, w6

000014a2 <nextbit>:
    14a2:	00 00 d0    	sl.w      w0, w0
    14a4:	81 80 d2    	rlc.w     w1, w1
    14a6:	04 82 d2    	rlc.w     w4, w4
    14a8:	85 82 d2    	rlc.w     w5, w5
    14aa:	00 00 a0    	bset.w    w0, #0x0
    14ac:	02 02 52    	sub.w     w4, w2, w4
    14ae:	83 82 5a    	subb.w    w5, w3, w5
    14b0:	03 00 31    	bra       C, 0x14b8 <iterate>
    14b2:	02 02 42    	add.w     w4, w2, w4
    14b4:	83 82 4a    	addc.w    w5, w3, w5
    14b6:	00 00 a1    	bclr.w    w0, #0x0

000014b8 <iterate>:
    14b8:	06 03 e9    	dec.w     w6, w6
    14ba:	f3 ff 3a    	bra       NZ, 0x14a2 <nextbit>
    14bc:	00 00 06    	return    

000014be <__fcompare>:
    14be:	88 9f be    	mov.d     w8, [w15++]
    14c0:	8a 9f be    	mov.d     w10, [w15++]
    14c2:	84 1f 78    	mov.w     w4, [w15++]
    14c4:	a0 ff 07    	rcall     0x1406 <__funpack2>
    14c6:	4f 00 78    	mov.w     [--w15], w0
    14c8:	11 00 33    	bra       N, 0x14ec <exit>
    14ca:	f0 ff 2f    	mov.w     #0xffff, w0
    14cc:	83 8f 6c    	xor.w     w9, w3, [w15]
    14ce:	06 00 3b    	bra       NN, 0x14dc <comparemag>
    14d0:	04 05 65    	and.w     w10, w4, w10
    14d2:	0a 00 a7    	btsc.w    w10, #0x0
    14d4:	08 00 37    	bra       0x14e6 <returnEqual>
    14d6:	09 f0 a6    	btss.w    w9, #0xf
    14d8:	10 00 20    	mov.w     #0x1, w0
    14da:	08 00 37    	bra       0x14ec <exit>

000014dc <comparemag>:
    14dc:	82 0f 54    	sub.w     w8, w2, [w15]
    14de:	83 8f 5c    	subb.w    w9, w3, [w15]
    14e0:	03 00 39    	bra       NC, 0x14e8 <adjust>
    14e2:	10 00 20    	mov.w     #0x1, w0
    14e4:	01 00 3e    	bra       GTU, 0x14e8 <adjust>

000014e6 <returnEqual>:
    14e6:	00 00 20    	mov.w     #0x0, w0

000014e8 <adjust>:
    14e8:	09 f0 a7    	btsc.w    w9, #0xf
    14ea:	00 00 ea    	neg.w     w0, w0

000014ec <exit>:
    14ec:	4f 05 be    	mov.d     [--w15], w10
    14ee:	4f 04 be    	mov.d     [--w15], w8
    14f0:	00 00 e0    	cp0.w     w0
    14f2:	00 00 06    	return    

000014f4 <___floatundisf>:
    14f4:	88 9f be    	mov.d     w8, [w15++]
    14f6:	8a 9f be    	mov.d     w10, [w15++]
    14f8:	00 82 70    	ior.w     w1, w0, w4
    14fa:	04 02 71    	ior.w     w2, w4, w4
    14fc:	04 82 71    	ior.w     w3, w4, w4
    14fe:	26 00 32    	bra       Z, 0x154c <return0>
    1500:	00 04 be    	mov.d     w0, w8
    1502:	02 00 be    	mov.d     w2, w0
    1504:	60 11 b8    	mul.uu    w2, #0x0, w2
    1506:	6b 09 20    	mov.w     #0x96, w11
    1508:	95 02 20    	mov.w     #0x29, w5
    150a:	01 82 cf    	ff1l      w1, w4
    150c:	0a 00 39    	bra       NC, 0x1522 <fixshift>
    150e:	05 41 b1    	sub.b     #0x10, w5
    1510:	00 82 cf    	ff1l      w0, w4
    1512:	07 00 39    	bra       NC, 0x1522 <fixshift>
    1514:	05 41 b1    	sub.b     #0x10, w5
    1516:	09 82 cf    	ff1l      w9, w4
    1518:	04 00 39    	bra       NC, 0x1522 <fixshift>
    151a:	05 41 b1    	sub.b     #0x10, w5
    151c:	08 82 cf    	ff1l      w8, w4
    151e:	01 00 39    	bra       NC, 0x1522 <fixshift>
    1520:	05 41 b1    	sub.b     #0x10, w5

00001522 <fixshift>:
    1522:	05 42 52    	sub.b     w4, w5, w4
    1524:	12 00 32    	bra       Z, 0x154a <round>
    1526:	0a 00 3b    	bra       NN, 0x153c <shiftleft>

00001528 <shiftright>:
    1528:	82 81 71    	ior.w     w3, w2, w3
    152a:	61 01 64    	and.w     w8, #0x1, w2
    152c:	81 00 d1    	lsr.w     w1, w1
    152e:	00 80 d3    	rrc.w     w0, w0
    1530:	89 84 d3    	rrc.w     w9, w9
    1532:	08 84 d3    	rrc.w     w8, w8
    1534:	8b 05 e8    	inc.w     w11, w11
    1536:	04 42 e8    	inc.b     w4, w4
    1538:	f7 ff 3a    	bra       NZ, 0x1528 <shiftright>
    153a:	07 00 37    	bra       0x154a <round>

0000153c <shiftleft>:
    153c:	08 04 44    	add.w     w8, w8, w8
    153e:	89 84 4c    	addc.w    w9, w9, w9
    1540:	00 00 48    	addc.w    w0, w0, w0
    1542:	81 80 48    	addc.w    w1, w1, w1
    1544:	8b 05 e9    	dec.w     w11, w11
    1546:	04 42 e9    	dec.b     w4, w4
    1548:	f9 ff 3a    	bra       NZ, 0x153c <shiftleft>

0000154a <round>:
    154a:	22 ff 07    	rcall     0x1390 <__fpack>

0000154c <return0>:
    154c:	4f 05 be    	mov.d     [--w15], w10
    154e:	4f 04 be    	mov.d     [--w15], w8
    1550:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	5a 23 04    	goto      0x235a <__T1Interrupt>
    1026:	00 00 00 
    1028:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	80 23 04    	goto      0x2380 <__T2Interrupt>
    1032:	00 00 00 
    1034:	a6 23 04    	goto      0x23a6 <__T3Interrupt>
    1036:	00 00 00 
    1038:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	5e 17 04    	goto      0x175e <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	38 17 04    	goto      0x1738 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	cc 23 04    	goto      0x23cc <__T4Interrupt>
    1072:	00 00 00 
    1074:	f2 23 04    	goto      0x23f2 <__T5Interrupt>
    1076:	00 00 00 
    1078:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	aa 17 04    	goto      0x17aa <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	84 17 04    	goto      0x1784 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	f6 17 04    	goto      0x17f6 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	d0 17 04    	goto      0x17d0 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	42 18 04    	goto      0x1842 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	1c 18 04    	goto      0x181c <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	c2 34 04    	goto      0x34c2 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .text:

00001552 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    1552:	04 00 fa    	lnk       #0x4
    1554:	00 0f 78    	mov.w     w0, [w14]
    1556:	21 47 98    	mov.b     w1, [w14+2]

00001558 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    1558:	00 00 00    	nop       

0000155a <.L2>:
    155a:	1e 02 78    	mov.w     [w14], w4
    155c:	14 02 90    	mov.w     [w4+2], w4
    155e:	94 02 78    	mov.w     [w4], w5
    1560:	04 20 20    	mov.w     #0x200, w4
    1562:	04 82 62    	and.w     w5, w4, w4
    1564:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1566:	f9 ff 3a    	bra       NZ, 0x155a <.L2>

00001568 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    1568:	1e 02 78    	mov.w     [w14], w4
    156a:	24 02 90    	mov.w     [w4+4], w4
    156c:	ae 42 90    	mov.b     [w14+2], w5
    156e:	85 82 fb    	ze        w5, w5
    1570:	05 0a 78    	mov.w     w5, [w4]

00001572 <.LSM3>:
}
    1572:	00 80 fa    	ulnk      
    1574:	00 00 06    	return    

00001576 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    1576:	02 00 fa    	lnk       #0x2
    1578:	00 0f 78    	mov.w     w0, [w14]

0000157a <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    157a:	00 00 00    	nop       

0000157c <.L4>:
    157c:	1e 02 78    	mov.w     [w14], w4
    157e:	14 02 90    	mov.w     [w4+2], w4
    1580:	14 02 78    	mov.w     [w4], w4
    1582:	61 02 62    	and.w     w4, #0x1, w4
    1584:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1586:	fa ff 32    	bra       Z, 0x157c <.L4>

00001588 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    1588:	1e 02 78    	mov.w     [w14], w4
    158a:	34 02 90    	mov.w     [w4+6], w4
    158c:	14 02 78    	mov.w     [w4], w4
    158e:	04 42 78    	mov.b     w4, w4

00001590 <.LSM7>:
}
    1590:	04 40 78    	mov.b     w4, w0
    1592:	00 80 fa    	ulnk      
    1594:	00 00 06    	return    

00001596 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    1596:	04 00 fa    	lnk       #0x4
    1598:	00 0f 78    	mov.w     w0, [w14]
    159a:	21 47 98    	mov.b     w1, [w14+2]

0000159c <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    159c:	00 00 00    	nop       

0000159e <.L6>:
    159e:	1e 02 78    	mov.w     [w14], w4
    15a0:	d4 12 90    	mov.w     [w4+42], w5
    15a2:	1e 02 78    	mov.w     [w14], w4
    15a4:	24 12 90    	mov.w     [w4+36], w4
    15a6:	84 8f 52    	sub.w     w5, w4, [w15]
    15a8:	fa ff 32    	bra       Z, 0x159e <.L6>

000015aa <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    15aa:	1e 02 78    	mov.w     [w14], w4
    15ac:	94 12 90    	mov.w     [w4+34], w5
    15ae:	1e 02 78    	mov.w     [w14], w4
    15b0:	44 12 90    	mov.w     [w4+40], w4
    15b2:	04 82 42    	add.w     w5, w4, w4
    15b4:	2e 40 90    	mov.b     [w14+2], w0
    15b6:	00 4a 78    	mov.b     w0, [w4]

000015b8 <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    15b8:	1e 02 78    	mov.w     [w14], w4
    15ba:	44 12 90    	mov.w     [w4+40], w4
    15bc:	84 02 e8    	inc.w     w4, w5
    15be:	1e 02 78    	mov.w     [w14], w4
    15c0:	24 12 90    	mov.w     [w4+36], w4
    15c2:	11 00 09    	repeat    #0x11
    15c4:	84 82 d8    	div.uw    w5, w4
    15c6:	01 02 78    	mov.w     w1, w4
    15c8:	84 02 78    	mov.w     w4, w5
    15ca:	1e 02 78    	mov.w     [w14], w4
    15cc:	45 12 98    	mov.w     w5, [w4+40]

000015ce <.LSM12>:
    self->TXbuffer.count++;
    15ce:	1e 02 78    	mov.w     [w14], w4
    15d0:	54 12 90    	mov.w     [w4+42], w4
    15d2:	84 02 e8    	inc.w     w4, w5
    15d4:	1e 02 78    	mov.w     [w14], w4
    15d6:	55 12 98    	mov.w     w5, [w4+42]

000015d8 <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    15d8:	1e 02 78    	mov.w     [w14], w4
    15da:	d4 12 90    	mov.w     [w4+42], w5
    15dc:	1e 02 78    	mov.w     [w14], w4
    15de:	34 1a 90    	mov.w     [w4+54], w4
    15e0:	84 8f 52    	sub.w     w5, w4, [w15]
    15e2:	08 00 39    	bra       NC, 0x15f4 <.L5>

000015e4 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    15e4:	1e 02 78    	mov.w     [w14], w4
    15e6:	14 02 90    	mov.w     [w4+2], w4
    15e8:	9e 02 78    	mov.w     [w14], w5
    15ea:	95 02 90    	mov.w     [w5+2], w5
    15ec:	15 03 78    	mov.w     [w5], w6
    15ee:	05 40 20    	mov.w     #0x400, w5
    15f0:	86 82 72    	ior.w     w5, w6, w5
    15f2:	05 0a 78    	mov.w     w5, [w4]

000015f4 <.L5>:
                                                    // transmission
}
    15f4:	00 80 fa    	ulnk      
    15f6:	00 00 06    	return    

000015f8 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    15f8:	04 00 fa    	lnk       #0x4
    15fa:	10 07 98    	mov.w     w0, [w14+2]

000015fc <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    15fc:	1e 02 90    	mov.w     [w14+2], w4
    15fe:	54 02 90    	mov.w     [w4+10], w4
    1600:	9e 02 90    	mov.w     [w14+2], w5
    1602:	d5 02 90    	mov.w     [w5+10], w5
    1604:	15 03 78    	mov.w     [w5], w6
    1606:	9e 02 90    	mov.w     [w14+2], w5
    1608:	e5 4a 90    	mov.b     [w5+14], w5
    160a:	85 82 fb    	ze        w5, w5
    160c:	17 00 20    	mov.w     #0x1, w7
    160e:	85 3a dd    	sl.w      w7, w5, w5
    1610:	85 82 ea    	com.w     w5, w5
    1612:	85 02 63    	and.w     w6, w5, w5
    1614:	05 0a 78    	mov.w     w5, [w4]

00001616 <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    1616:	1e 02 90    	mov.w     [w14+2], w4
    1618:	54 12 90    	mov.w     [w4+42], w4
    161a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    161c:	25 00 3a    	bra       NZ, 0x1668 <.L13>

0000161e <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    161e:	1e 02 90    	mov.w     [w14+2], w4
    1620:	14 02 90    	mov.w     [w4+2], w4
    1622:	9e 02 90    	mov.w     [w14+2], w5
    1624:	95 02 90    	mov.w     [w5+2], w5
    1626:	15 03 78    	mov.w     [w5], w6
    1628:	f5 bf 2f    	mov.w     #0xfbff, w5
    162a:	85 02 63    	and.w     w6, w5, w5
    162c:	05 0a 78    	mov.w     w5, [w4]

0000162e <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    162e:	1d 00 37    	bra       0x166a <.L10>

00001630 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    1630:	1e 02 90    	mov.w     [w14+2], w4
    1632:	94 12 90    	mov.w     [w4+34], w5
    1634:	1e 02 90    	mov.w     [w14+2], w4
    1636:	34 12 90    	mov.w     [w4+38], w4
    1638:	04 82 42    	add.w     w5, w4, w4
    163a:	14 4f 78    	mov.b     [w4], [w14]

0000163c <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    163c:	1e 02 90    	mov.w     [w14+2], w4
    163e:	34 12 90    	mov.w     [w4+38], w4
    1640:	84 02 e8    	inc.w     w4, w5
    1642:	1e 02 90    	mov.w     [w14+2], w4
    1644:	24 12 90    	mov.w     [w4+36], w4
    1646:	11 00 09    	repeat    #0x11
    1648:	84 82 d8    	div.uw    w5, w4
    164a:	01 02 78    	mov.w     w1, w4
    164c:	84 02 78    	mov.w     w4, w5
    164e:	1e 02 90    	mov.w     [w14+2], w4
    1650:	35 12 98    	mov.w     w5, [w4+38]

00001652 <.LSM23>:
        self->TXbuffer.count--;
    1652:	1e 02 90    	mov.w     [w14+2], w4
    1654:	54 12 90    	mov.w     [w4+42], w4
    1656:	84 02 e9    	dec.w     w4, w5
    1658:	1e 02 90    	mov.w     [w14+2], w4
    165a:	55 12 98    	mov.w     w5, [w4+42]

0000165c <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    165c:	1e 02 90    	mov.w     [w14+2], w4
    165e:	24 02 90    	mov.w     [w4+4], w4
    1660:	1e 43 78    	mov.b     [w14], w6
    1662:	86 82 fb    	ze        w6, w5
    1664:	05 0a 78    	mov.w     w5, [w4]
    1666:	01 00 37    	bra       0x166a <.L10>

00001668 <.L13>:
    1668:	00 00 00    	nop       

0000166a <.L10>:
    166a:	1e 02 90    	mov.w     [w14+2], w4
    166c:	14 02 90    	mov.w     [w4+2], w4
    166e:	94 02 78    	mov.w     [w4], w5
    1670:	04 20 20    	mov.w     #0x200, w4
    1672:	04 82 62    	and.w     w5, w4, w4
    1674:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1676:	04 00 3a    	bra       NZ, 0x1680 <.L8>
    1678:	1e 02 90    	mov.w     [w14+2], w4
    167a:	54 12 90    	mov.w     [w4+42], w4
    167c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    167e:	d8 ff 3a    	bra       NZ, 0x1630 <.L12>

00001680 <.L8>:
    }
}
    1680:	00 80 fa    	ulnk      
    1682:	00 00 06    	return    

00001684 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    1684:	04 00 fa    	lnk       #0x4
    1686:	10 07 98    	mov.w     w0, [w14+2]

00001688 <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    1688:	00 00 00    	nop       

0000168a <.L15>:
    168a:	1e 02 90    	mov.w     [w14+2], w4
    168c:	24 1a 90    	mov.w     [w4+52], w4
    168e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1690:	fc ff 32    	bra       Z, 0x168a <.L15>

00001692 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    1692:	1e 02 90    	mov.w     [w14+2], w4
    1694:	e4 12 90    	mov.w     [w4+44], w5
    1696:	1e 02 90    	mov.w     [w14+2], w4
    1698:	04 1a 90    	mov.w     [w4+48], w4
    169a:	04 82 42    	add.w     w5, w4, w4
    169c:	14 4f 78    	mov.b     [w4], [w14]

0000169e <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    169e:	1e 02 90    	mov.w     [w14+2], w4
    16a0:	04 1a 90    	mov.w     [w4+48], w4
    16a2:	84 02 e8    	inc.w     w4, w5
    16a4:	1e 02 90    	mov.w     [w14+2], w4
    16a6:	74 12 90    	mov.w     [w4+46], w4
    16a8:	11 00 09    	repeat    #0x11
    16aa:	84 82 d8    	div.uw    w5, w4
    16ac:	01 02 78    	mov.w     w1, w4
    16ae:	84 02 78    	mov.w     w4, w5
    16b0:	1e 02 90    	mov.w     [w14+2], w4
    16b2:	05 1a 98    	mov.w     w5, [w4+48]

000016b4 <.LSM31>:
    self->RXbuffer.count--;
    16b4:	1e 02 90    	mov.w     [w14+2], w4
    16b6:	24 1a 90    	mov.w     [w4+52], w4
    16b8:	84 02 e9    	dec.w     w4, w5
    16ba:	1e 02 90    	mov.w     [w14+2], w4
    16bc:	25 1a 98    	mov.w     w5, [w4+52]

000016be <.LSM32>:
    return ch;
    16be:	1e 42 78    	mov.b     [w14], w4

000016c0 <.LSM33>:
}
    16c0:	04 40 78    	mov.b     w4, w0
    16c2:	00 80 fa    	ulnk      
    16c4:	00 00 06    	return    

000016c6 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    16c6:	02 00 fa    	lnk       #0x2
    16c8:	00 0f 78    	mov.w     w0, [w14]

000016ca <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    16ca:	1e 02 78    	mov.w     [w14], w4
    16cc:	54 02 90    	mov.w     [w4+10], w4
    16ce:	9e 02 78    	mov.w     [w14], w5
    16d0:	d5 02 90    	mov.w     [w5+10], w5
    16d2:	15 03 78    	mov.w     [w5], w6
    16d4:	9e 02 78    	mov.w     [w14], w5
    16d6:	f5 4a 90    	mov.b     [w5+15], w5
    16d8:	85 82 fb    	ze        w5, w5
    16da:	17 00 20    	mov.w     #0x1, w7
    16dc:	85 3a dd    	sl.w      w7, w5, w5
    16de:	85 82 ea    	com.w     w5, w5
    16e0:	85 02 63    	and.w     w6, w5, w5
    16e2:	05 0a 78    	mov.w     w5, [w4]

000016e4 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    16e4:	1a 00 37    	bra       0x171a <.L17>

000016e6 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    16e6:	1e 02 78    	mov.w     [w14], w4
    16e8:	e4 12 90    	mov.w     [w4+44], w5
    16ea:	1e 02 78    	mov.w     [w14], w4
    16ec:	14 1a 90    	mov.w     [w4+50], w4
    16ee:	04 82 42    	add.w     w5, w4, w4
    16f0:	9e 02 78    	mov.w     [w14], w5
    16f2:	b5 02 90    	mov.w     [w5+6], w5
    16f4:	95 02 78    	mov.w     [w5], w5
    16f6:	85 42 78    	mov.b     w5, w5
    16f8:	05 4a 78    	mov.b     w5, [w4]

000016fa <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    16fa:	1e 02 78    	mov.w     [w14], w4
    16fc:	14 1a 90    	mov.w     [w4+50], w4
    16fe:	84 02 e8    	inc.w     w4, w5
    1700:	1e 02 78    	mov.w     [w14], w4
    1702:	74 12 90    	mov.w     [w4+46], w4
    1704:	11 00 09    	repeat    #0x11
    1706:	84 82 d8    	div.uw    w5, w4
    1708:	01 02 78    	mov.w     w1, w4
    170a:	84 02 78    	mov.w     w4, w5
    170c:	1e 02 78    	mov.w     [w14], w4
    170e:	15 1a 98    	mov.w     w5, [w4+50]

00001710 <.LSM39>:
        self->RXbuffer.count++;
    1710:	1e 02 78    	mov.w     [w14], w4
    1712:	24 1a 90    	mov.w     [w4+52], w4
    1714:	84 02 e8    	inc.w     w4, w5
    1716:	1e 02 78    	mov.w     [w14], w4
    1718:	25 1a 98    	mov.w     w5, [w4+52]

0000171a <.L17>:
    171a:	1e 02 78    	mov.w     [w14], w4
    171c:	14 02 90    	mov.w     [w4+2], w4
    171e:	14 02 78    	mov.w     [w4], w4
    1720:	61 02 62    	and.w     w4, #0x1, w4
    1722:	04 42 78    	mov.b     w4, w4
    1724:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    1726:	06 00 32    	bra       Z, 0x1734 <.L16>

00001728 <.LSM41>:
    1728:	1e 02 78    	mov.w     [w14], w4
    172a:	a4 1a 90    	mov.w     [w4+52], w5
    172c:	1e 02 78    	mov.w     [w14], w4
    172e:	74 12 90    	mov.w     [w4+46], w4

00001730 <.LSM42>:
    1730:	84 8f 52    	sub.w     w5, w4, [w15]
    1732:	d9 ff 3a    	bra       NZ, 0x16e6 <.L19>

00001734 <.L16>:
    }
}
    1734:	00 80 fa    	ulnk      
    1736:	00 00 06    	return    

00001738 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    1738:	36 00 f8    	push      0x36
    173a:	80 9f be    	mov.d     w0, [w15++]
    173c:	82 9f be    	mov.d     w2, [w15++]
    173e:	84 9f be    	mov.d     w4, [w15++]
    1740:	86 9f be    	mov.d     w6, [w15++]
    1742:	32 00 f8    	push      0x32
    1744:	10 00 20    	mov.w     #0x1, w0
    1746:	90 01 88    	mov.w     w0, 0x32
    1748:	00 00 fa    	lnk       #0x0

0000174a <.LSM45>:
    __serviceTxInterrupt(&uart1);
    174a:	80 9b 20    	mov.w     #0x9b8, w0
    174c:	55 ff 07    	rcall     0x15f8 <___serviceTxInterrupt>

0000174e <.LSM46>:
}
    174e:	00 80 fa    	ulnk      
    1750:	32 00 f9    	pop       0x32
    1752:	4f 03 be    	mov.d     [--w15], w6
    1754:	4f 02 be    	mov.d     [--w15], w4
    1756:	4f 01 be    	mov.d     [--w15], w2
    1758:	4f 00 be    	mov.d     [--w15], w0
    175a:	36 00 f9    	pop       0x36
    175c:	00 40 06    	retfie    

0000175e <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    175e:	36 00 f8    	push      0x36
    1760:	80 9f be    	mov.d     w0, [w15++]
    1762:	82 9f be    	mov.d     w2, [w15++]
    1764:	84 9f be    	mov.d     w4, [w15++]
    1766:	86 9f be    	mov.d     w6, [w15++]
    1768:	32 00 f8    	push      0x32
    176a:	10 00 20    	mov.w     #0x1, w0
    176c:	90 01 88    	mov.w     w0, 0x32
    176e:	00 00 fa    	lnk       #0x0

00001770 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    1770:	80 9b 20    	mov.w     #0x9b8, w0
    1772:	a9 ff 07    	rcall     0x16c6 <___serviceRxInterrupt>

00001774 <.LSM49>:
}
    1774:	00 80 fa    	ulnk      
    1776:	32 00 f9    	pop       0x32
    1778:	4f 03 be    	mov.d     [--w15], w6
    177a:	4f 02 be    	mov.d     [--w15], w4
    177c:	4f 01 be    	mov.d     [--w15], w2
    177e:	4f 00 be    	mov.d     [--w15], w0
    1780:	36 00 f9    	pop       0x36
    1782:	00 40 06    	retfie    

00001784 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    1784:	36 00 f8    	push      0x36
    1786:	80 9f be    	mov.d     w0, [w15++]
    1788:	82 9f be    	mov.d     w2, [w15++]
    178a:	84 9f be    	mov.d     w4, [w15++]
    178c:	86 9f be    	mov.d     w6, [w15++]
    178e:	32 00 f8    	push      0x32
    1790:	10 00 20    	mov.w     #0x1, w0
    1792:	90 01 88    	mov.w     w0, 0x32
    1794:	00 00 fa    	lnk       #0x0

00001796 <.LSM51>:
    __serviceTxInterrupt(&uart2);
    1796:	40 9f 20    	mov.w     #0x9f4, w0
    1798:	2f ff 07    	rcall     0x15f8 <___serviceTxInterrupt>

0000179a <.LSM52>:
}
    179a:	00 80 fa    	ulnk      
    179c:	32 00 f9    	pop       0x32
    179e:	4f 03 be    	mov.d     [--w15], w6
    17a0:	4f 02 be    	mov.d     [--w15], w4
    17a2:	4f 01 be    	mov.d     [--w15], w2
    17a4:	4f 00 be    	mov.d     [--w15], w0
    17a6:	36 00 f9    	pop       0x36
    17a8:	00 40 06    	retfie    

000017aa <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    17aa:	36 00 f8    	push      0x36
    17ac:	80 9f be    	mov.d     w0, [w15++]
    17ae:	82 9f be    	mov.d     w2, [w15++]
    17b0:	84 9f be    	mov.d     w4, [w15++]
    17b2:	86 9f be    	mov.d     w6, [w15++]
    17b4:	32 00 f8    	push      0x32
    17b6:	10 00 20    	mov.w     #0x1, w0
    17b8:	90 01 88    	mov.w     w0, 0x32
    17ba:	00 00 fa    	lnk       #0x0

000017bc <.LSM54>:
    __serviceRxInterrupt(&uart2);
    17bc:	40 9f 20    	mov.w     #0x9f4, w0
    17be:	83 ff 07    	rcall     0x16c6 <___serviceRxInterrupt>

000017c0 <.LSM55>:
}
    17c0:	00 80 fa    	ulnk      
    17c2:	32 00 f9    	pop       0x32
    17c4:	4f 03 be    	mov.d     [--w15], w6
    17c6:	4f 02 be    	mov.d     [--w15], w4
    17c8:	4f 01 be    	mov.d     [--w15], w2
    17ca:	4f 00 be    	mov.d     [--w15], w0
    17cc:	36 00 f9    	pop       0x36
    17ce:	00 40 06    	retfie    

000017d0 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    17d0:	36 00 f8    	push      0x36
    17d2:	80 9f be    	mov.d     w0, [w15++]
    17d4:	82 9f be    	mov.d     w2, [w15++]
    17d6:	84 9f be    	mov.d     w4, [w15++]
    17d8:	86 9f be    	mov.d     w6, [w15++]
    17da:	32 00 f8    	push      0x32
    17dc:	10 00 20    	mov.w     #0x1, w0
    17de:	90 01 88    	mov.w     w0, 0x32
    17e0:	00 00 fa    	lnk       #0x0

000017e2 <.LSM57>:
    __serviceTxInterrupt(&uart3);
    17e2:	00 a3 20    	mov.w     #0xa30, w0
    17e4:	09 ff 07    	rcall     0x15f8 <___serviceTxInterrupt>

000017e6 <.LSM58>:
}
    17e6:	00 80 fa    	ulnk      
    17e8:	32 00 f9    	pop       0x32
    17ea:	4f 03 be    	mov.d     [--w15], w6
    17ec:	4f 02 be    	mov.d     [--w15], w4
    17ee:	4f 01 be    	mov.d     [--w15], w2
    17f0:	4f 00 be    	mov.d     [--w15], w0
    17f2:	36 00 f9    	pop       0x36
    17f4:	00 40 06    	retfie    

000017f6 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    17f6:	36 00 f8    	push      0x36
    17f8:	80 9f be    	mov.d     w0, [w15++]
    17fa:	82 9f be    	mov.d     w2, [w15++]
    17fc:	84 9f be    	mov.d     w4, [w15++]
    17fe:	86 9f be    	mov.d     w6, [w15++]
    1800:	32 00 f8    	push      0x32
    1802:	10 00 20    	mov.w     #0x1, w0
    1804:	90 01 88    	mov.w     w0, 0x32
    1806:	00 00 fa    	lnk       #0x0

00001808 <.LSM60>:
    __serviceRxInterrupt(&uart3);
    1808:	00 a3 20    	mov.w     #0xa30, w0
    180a:	5d ff 07    	rcall     0x16c6 <___serviceRxInterrupt>

0000180c <.LSM61>:
}
    180c:	00 80 fa    	ulnk      
    180e:	32 00 f9    	pop       0x32
    1810:	4f 03 be    	mov.d     [--w15], w6
    1812:	4f 02 be    	mov.d     [--w15], w4
    1814:	4f 01 be    	mov.d     [--w15], w2
    1816:	4f 00 be    	mov.d     [--w15], w0
    1818:	36 00 f9    	pop       0x36
    181a:	00 40 06    	retfie    

0000181c <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    181c:	36 00 f8    	push      0x36
    181e:	80 9f be    	mov.d     w0, [w15++]
    1820:	82 9f be    	mov.d     w2, [w15++]
    1822:	84 9f be    	mov.d     w4, [w15++]
    1824:	86 9f be    	mov.d     w6, [w15++]
    1826:	32 00 f8    	push      0x32
    1828:	10 00 20    	mov.w     #0x1, w0
    182a:	90 01 88    	mov.w     w0, 0x32
    182c:	00 00 fa    	lnk       #0x0

0000182e <.LSM63>:
    __serviceTxInterrupt(&uart4);
    182e:	c0 a6 20    	mov.w     #0xa6c, w0
    1830:	e3 fe 07    	rcall     0x15f8 <___serviceTxInterrupt>

00001832 <.LSM64>:
}
    1832:	00 80 fa    	ulnk      
    1834:	32 00 f9    	pop       0x32
    1836:	4f 03 be    	mov.d     [--w15], w6
    1838:	4f 02 be    	mov.d     [--w15], w4
    183a:	4f 01 be    	mov.d     [--w15], w2
    183c:	4f 00 be    	mov.d     [--w15], w0
    183e:	36 00 f9    	pop       0x36
    1840:	00 40 06    	retfie    

00001842 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    1842:	36 00 f8    	push      0x36
    1844:	80 9f be    	mov.d     w0, [w15++]
    1846:	82 9f be    	mov.d     w2, [w15++]
    1848:	84 9f be    	mov.d     w4, [w15++]
    184a:	86 9f be    	mov.d     w6, [w15++]
    184c:	32 00 f8    	push      0x32
    184e:	10 00 20    	mov.w     #0x1, w0
    1850:	90 01 88    	mov.w     w0, 0x32
    1852:	00 00 fa    	lnk       #0x0

00001854 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    1854:	c0 a6 20    	mov.w     #0xa6c, w0
    1856:	37 ff 07    	rcall     0x16c6 <___serviceRxInterrupt>

00001858 <.LSM67>:
}
    1858:	00 80 fa    	ulnk      
    185a:	32 00 f9    	pop       0x32
    185c:	4f 03 be    	mov.d     [--w15], w6
    185e:	4f 02 be    	mov.d     [--w15], w4
    1860:	4f 01 be    	mov.d     [--w15], w2
    1862:	4f 00 be    	mov.d     [--w15], w0
    1864:	36 00 f9    	pop       0x36
    1866:	00 40 06    	retfie    

00001868 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    1868:	08 00 fa    	lnk       #0x8
    186a:	10 07 98    	mov.w     w0, [w14+2]
    186c:	21 07 98    	mov.w     w1, [w14+4]
    186e:	32 07 98    	mov.w     w2, [w14+6]

00001870 <.LSM69>:
    int16_t i;

    switch (handle) {
    1870:	1e 02 90    	mov.w     [w14+2], w4
    1872:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1874:	29 00 35    	bra       LT, 0x18c8 <.L37>
    1876:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    1878:	03 00 34    	bra       LE, 0x1880 <.L30>
    187a:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    187c:	13 00 32    	bra       Z, 0x18a4 <.L31>

0000187e <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    187e:	25 00 37    	bra       0x18ca <.L34>

00001880 <.L30>:
    1880:	00 02 eb    	clr.w     w4
    1882:	04 0f 78    	mov.w     w4, [w14]
    1884:	0a 00 37    	bra       0x189a <.L32>

00001886 <.L33>:
    1886:	2e 02 90    	mov.w     [w14+4], w4
    1888:	94 42 78    	mov.b     [w4], w5
    188a:	2e 02 90    	mov.w     [w14+4], w4
    188c:	04 02 e8    	inc.w     w4, w4
    188e:	24 07 98    	mov.w     w4, [w14+4]
    1890:	44 55 80    	mov.w     0xaa8, w4
    1892:	85 40 78    	mov.b     w5, w1
    1894:	04 00 78    	mov.w     w4, w0
    1896:	61 04 07    	rcall     0x215a <_uart_putc>

00001898 <.LSM73>:
    1898:	1e 0f e8    	inc.w     [w14], [w14]

0000189a <.L32>:
    189a:	9e 02 78    	mov.w     [w14], w5
    189c:	3e 02 90    	mov.w     [w14+6], w4
    189e:	84 8f 52    	sub.w     w5, w4, [w15]
    18a0:	f2 ff 39    	bra       NC, 0x1886 <.L33>

000018a2 <.LSM74>:
    18a2:	13 00 37    	bra       0x18ca <.L34>

000018a4 <.L31>:
    18a4:	00 02 eb    	clr.w     w4
    18a6:	04 0f 78    	mov.w     w4, [w14]
    18a8:	0a 00 37    	bra       0x18be <.L35>

000018aa <.L36>:
    18aa:	2e 02 90    	mov.w     [w14+4], w4
    18ac:	94 42 78    	mov.b     [w4], w5
    18ae:	2e 02 90    	mov.w     [w14+4], w4
    18b0:	04 02 e8    	inc.w     w4, w4
    18b2:	24 07 98    	mov.w     w4, [w14+4]
    18b4:	54 55 80    	mov.w     0xaaa, w4
    18b6:	85 40 78    	mov.b     w5, w1
    18b8:	04 00 78    	mov.w     w4, w0
    18ba:	4f 04 07    	rcall     0x215a <_uart_putc>

000018bc <.LSM77>:
    18bc:	1e 0f e8    	inc.w     [w14], [w14]

000018be <.L35>:
    18be:	9e 02 78    	mov.w     [w14], w5
    18c0:	3e 02 90    	mov.w     [w14+6], w4
    18c2:	84 8f 52    	sub.w     w5, w4, [w15]
    18c4:	f2 ff 39    	bra       NC, 0x18aa <.L36>

000018c6 <.LSM78>:
    18c6:	01 00 37    	bra       0x18ca <.L34>

000018c8 <.L37>:
    18c8:	00 00 00    	nop       

000018ca <.L34>:
    }
    return len;
    18ca:	3e 02 90    	mov.w     [w14+6], w4

000018cc <.LSM81>:
}
    18cc:	04 00 78    	mov.w     w4, w0
    18ce:	00 80 fa    	ulnk      
    18d0:	00 00 06    	return    

000018d2 <_init_uart>:

void init_uart(void) {
    18d2:	00 00 fa    	lnk       #0x0

000018d4 <.LSM83>:
    init_pin();
    18d4:	6c 0a 07    	rcall     0x2dae <_init_pin>

000018d6 <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    18d6:	44 6d 20    	mov.w     #0x6d4, w4
    18d8:	84 1f 78    	mov.w     w4, [w15++]
    18da:	57 01 20    	mov.w     #0x15, w7
    18dc:	86 c0 b3    	mov.b     #0x8, w6
    18de:	80 82 eb    	setm.w    w5
    18e0:	64 c0 b3    	mov.b     #0x6, w4
    18e2:	80 01 eb    	clr.w     w3
    18e4:	02 2f 20    	mov.w     #0x2f0, w2
    18e6:	21 2f 20    	mov.w     #0x2f2, w1
    18e8:	c0 aa 20    	mov.w     #0xaac, w0
    18ea:	79 0b 07    	rcall     0x2fde <_pin_init>
    18ec:	8f 87 e9    	dec2.w    w15, w15

000018ee <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    18ee:	a4 6d 20    	mov.w     #0x6da, w4
    18f0:	84 1f 78    	mov.w     w4, [w15++]
    18f2:	a7 01 20    	mov.w     #0x1a, w7
    18f4:	00 43 eb    	clr.b     w6
    18f6:	80 82 eb    	setm.w    w5
    18f8:	74 c0 b3    	mov.b     #0x7, w4
    18fa:	80 01 eb    	clr.w     w3
    18fc:	02 2f 20    	mov.w     #0x2f0, w2
    18fe:	21 2f 20    	mov.w     #0x2f2, w1
    1900:	20 ac 20    	mov.w     #0xac2, w0
    1902:	6d 0b 07    	rcall     0x2fde <_pin_init>
    1904:	8f 87 e9    	dec2.w    w15, w15

00001906 <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    1906:	44 00 20    	mov.w     #0x4, w4
    1908:	84 1f 78    	mov.w     w4, [w15++]
    190a:	34 00 20    	mov.w     #0x3, w4
    190c:	84 1f 78    	mov.w     w4, [w15++]
    190e:	84 c0 b3    	mov.b     #0x8, w4
    1910:	84 1f 78    	mov.w     w4, [w15++]
    1912:	00 42 eb    	clr.b     w4
    1914:	84 1f 78    	mov.w     w4, [w15++]
    1916:	44 6a 20    	mov.w     #0x6a4, w4
    1918:	84 1f 78    	mov.w     w4, [w15++]
    191a:	44 6a 20    	mov.w     #0x6a4, w4
    191c:	84 1f 78    	mov.w     w4, [w15++]
    191e:	b4 c0 b3    	mov.b     #0xb, w4
    1920:	84 1f 78    	mov.w     w4, [w15++]
    1922:	c4 c0 b3    	mov.b     #0xc, w4
    1924:	84 1f 78    	mov.w     w4, [w15++]
    1926:	47 09 20    	mov.w     #0x94, w7
    1928:	46 08 20    	mov.w     #0x84, w6
    192a:	85 22 20    	mov.w     #0x228, w5
    192c:	64 22 20    	mov.w     #0x226, w4
    192e:	43 22 20    	mov.w     #0x224, w3
    1930:	22 22 20    	mov.w     #0x222, w2
    1932:	01 22 20    	mov.w     #0x220, w1
    1934:	80 9b 20    	mov.w     #0x9b8, w0
    1936:	6b 00 07    	rcall     0x1a0e <_uart_init>
    1938:	f0 87 57    	sub.w     w15, #0x10, w15

0000193a <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    193a:	64 00 20    	mov.w     #0x6, w4
    193c:	84 1f 78    	mov.w     w4, [w15++]
    193e:	54 00 20    	mov.w     #0x5, w4
    1940:	84 1f 78    	mov.w     w4, [w15++]
    1942:	84 c0 b3    	mov.b     #0x8, w4
    1944:	84 1f 78    	mov.w     w4, [w15++]
    1946:	00 42 eb    	clr.b     w4
    1948:	84 1f 78    	mov.w     w4, [w15++]
    194a:	64 6a 20    	mov.w     #0x6a6, w4
    194c:	84 1f 78    	mov.w     w4, [w15++]
    194e:	64 6a 20    	mov.w     #0x6a6, w4
    1950:	84 1f 78    	mov.w     w4, [w15++]
    1952:	e4 c0 b3    	mov.b     #0xe, w4
    1954:	84 1f 78    	mov.w     w4, [w15++]
    1956:	f4 c0 b3    	mov.b     #0xf, w4
    1958:	84 1f 78    	mov.w     w4, [w15++]
    195a:	67 09 20    	mov.w     #0x96, w7
    195c:	66 08 20    	mov.w     #0x86, w6
    195e:	85 23 20    	mov.w     #0x238, w5
    1960:	64 23 20    	mov.w     #0x236, w4
    1962:	43 23 20    	mov.w     #0x234, w3
    1964:	22 23 20    	mov.w     #0x232, w2
    1966:	01 23 20    	mov.w     #0x230, w1
    1968:	40 9f 20    	mov.w     #0x9f4, w0
    196a:	51 00 07    	rcall     0x1a0e <_uart_init>
    196c:	f0 87 57    	sub.w     w15, #0x10, w15

0000196e <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    196e:	d4 01 20    	mov.w     #0x1d, w4
    1970:	84 1f 78    	mov.w     w4, [w15++]
    1972:	c4 01 20    	mov.w     #0x1c, w4
    1974:	84 1f 78    	mov.w     w4, [w15++]
    1976:	84 c0 b3    	mov.b     #0x8, w4
    1978:	84 1f 78    	mov.w     w4, [w15++]
    197a:	84 c0 b3    	mov.b     #0x8, w4
    197c:	84 1f 78    	mov.w     w4, [w15++]
    197e:	a4 6a 20    	mov.w     #0x6aa, w4
    1980:	84 1f 78    	mov.w     w4, [w15++]
    1982:	24 6a 20    	mov.w     #0x6a2, w4
    1984:	84 1f 78    	mov.w     w4, [w15++]
    1986:	24 c0 b3    	mov.b     #0x2, w4
    1988:	84 1f 78    	mov.w     w4, [w15++]
    198a:	34 c0 b3    	mov.b     #0x3, w4
    198c:	84 1f 78    	mov.w     w4, [w15++]
    198e:	e7 09 20    	mov.w     #0x9e, w7
    1990:	e6 08 20    	mov.w     #0x8e, w6
    1992:	85 25 20    	mov.w     #0x258, w5
    1994:	64 25 20    	mov.w     #0x256, w4
    1996:	43 25 20    	mov.w     #0x254, w3
    1998:	22 25 20    	mov.w     #0x252, w2
    199a:	01 25 20    	mov.w     #0x250, w1
    199c:	00 a3 20    	mov.w     #0xa30, w0
    199e:	37 00 07    	rcall     0x1a0e <_uart_init>
    19a0:	f0 87 57    	sub.w     w15, #0x10, w15

000019a2 <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    19a2:	f4 01 20    	mov.w     #0x1f, w4
    19a4:	84 1f 78    	mov.w     w4, [w15++]
    19a6:	e4 01 20    	mov.w     #0x1e, w4
    19a8:	84 1f 78    	mov.w     w4, [w15++]
    19aa:	84 c0 b3    	mov.b     #0x8, w4
    19ac:	84 1f 78    	mov.w     w4, [w15++]
    19ae:	00 42 eb    	clr.b     w4
    19b0:	84 1f 78    	mov.w     w4, [w15++]
    19b2:	64 6b 20    	mov.w     #0x6b6, w4
    19b4:	84 1f 78    	mov.w     w4, [w15++]
    19b6:	64 6b 20    	mov.w     #0x6b6, w4
    19b8:	84 1f 78    	mov.w     w4, [w15++]
    19ba:	84 c0 b3    	mov.b     #0x8, w4
    19bc:	84 1f 78    	mov.w     w4, [w15++]
    19be:	94 c0 b3    	mov.b     #0x9, w4
    19c0:	84 1f 78    	mov.w     w4, [w15++]
    19c2:	e7 09 20    	mov.w     #0x9e, w7
    19c4:	e6 08 20    	mov.w     #0x8e, w6
    19c6:	85 2b 20    	mov.w     #0x2b8, w5
    19c8:	64 2b 20    	mov.w     #0x2b6, w4
    19ca:	43 2b 20    	mov.w     #0x2b4, w3
    19cc:	22 2b 20    	mov.w     #0x2b2, w2
    19ce:	01 2b 20    	mov.w     #0x2b0, w1
    19d0:	c0 a6 20    	mov.w     #0xa6c, w0
    19d2:	1d 00 07    	rcall     0x1a0e <_uart_init>
    19d4:	f0 87 57    	sub.w     w15, #0x10, w15

000019d6 <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    19d6:	00 02 eb    	clr.w     w4
    19d8:	84 1f 78    	mov.w     w4, [w15++]
    19da:	00 02 eb    	clr.w     w4
    19dc:	84 1f 78    	mov.w     w4, [w15++]
    19de:	00 02 eb    	clr.w     w4
    19e0:	84 1f 78    	mov.w     w4, [w15++]
    19e2:	00 02 eb    	clr.w     w4
    19e4:	84 1f 78    	mov.w     w4, [w15++]
    19e6:	00 02 eb    	clr.w     w4
    19e8:	84 1f 78    	mov.w     w4, [w15++]
    19ea:	14 00 20    	mov.w     #0x1, w4
    19ec:	84 1f 78    	mov.w     w4, [w15++]
    19ee:	e5 c4 b3    	mov.b     #0x4e, w5
    19f0:	06 00 20    	mov.w     #0x0, w6
    19f2:	67 69 24    	mov.w     #0x4696, w7
    19f4:	00 02 eb    	clr.w     w4
    19f6:	80 01 eb    	clr.w     w3
    19f8:	22 ac 20    	mov.w     #0xac2, w2
    19fa:	c1 aa 20    	mov.w     #0xaac, w1
    19fc:	80 9b 20    	mov.w     #0x9b8, w0
    19fe:	72 00 07    	rcall     0x1ae4 <_uart_open>
    1a00:	ec 87 57    	sub.w     w15, #0xc, w15

00001a02 <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    1a02:	84 9b 20    	mov.w     #0x9b8, w4
    1a04:	44 55 88    	mov.w     w4, 0xaa8

00001a06 <.LSM92>:
    _stderr = &uart1;
    1a06:	84 9b 20    	mov.w     #0x9b8, w4
    1a08:	54 55 88    	mov.w     w4, 0xaaa

00001a0a <.LSM93>:
}
    1a0a:	00 80 fa    	ulnk      
    1a0c:	00 00 06    	return    

00001a0e <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    1a0e:	10 00 fa    	lnk       #0x10
    1a10:	00 0f 78    	mov.w     w0, [w14]
    1a12:	11 07 98    	mov.w     w1, [w14+2]
    1a14:	22 07 98    	mov.w     w2, [w14+4]
    1a16:	33 07 98    	mov.w     w3, [w14+6]
    1a18:	44 07 98    	mov.w     w4, [w14+8]
    1a1a:	55 07 98    	mov.w     w5, [w14+10]
    1a1c:	66 07 98    	mov.w     w6, [w14+12]
    1a1e:	77 07 98    	mov.w     w7, [w14+14]

00001a20 <.LSM95>:
    self->UxMODE = UxMODE;
    1a20:	1e 02 78    	mov.w     [w14], w4
    1a22:	9e 02 90    	mov.w     [w14+2], w5
    1a24:	05 0a 78    	mov.w     w5, [w4]

00001a26 <.LSM96>:
    self->UxSTA = UxSTA;
    1a26:	1e 02 78    	mov.w     [w14], w4
    1a28:	ae 02 90    	mov.w     [w14+4], w5
    1a2a:	15 02 98    	mov.w     w5, [w4+2]

00001a2c <.LSM97>:
    self->UxTXREG = UxTXREG;
    1a2c:	1e 02 78    	mov.w     [w14], w4
    1a2e:	be 02 90    	mov.w     [w14+6], w5
    1a30:	25 02 98    	mov.w     w5, [w4+4]

00001a32 <.LSM98>:
    self->UxRXREG = UxRXREG;
    1a32:	1e 02 78    	mov.w     [w14], w4
    1a34:	ce 02 90    	mov.w     [w14+8], w5
    1a36:	35 02 98    	mov.w     w5, [w4+6]

00001a38 <.LSM99>:
    self->UxBRG = UxBRG;
    1a38:	1e 02 78    	mov.w     [w14], w4
    1a3a:	de 02 90    	mov.w     [w14+10], w5
    1a3c:	45 02 98    	mov.w     w5, [w4+8]

00001a3e <.LSM100>:
    self->IFSy = IFSy;
    1a3e:	1e 02 78    	mov.w     [w14], w4
    1a40:	ee 02 90    	mov.w     [w14+12], w5
    1a42:	55 02 98    	mov.w     w5, [w4+10]

00001a44 <.LSM101>:
    self->IECy = IECy;
    1a44:	1e 02 78    	mov.w     [w14], w4
    1a46:	fe 02 90    	mov.w     [w14+14], w5
    1a48:	65 02 98    	mov.w     w5, [w4+12]

00001a4a <.LSM102>:
    self->UxTXIF = UxTXIF;
    1a4a:	1e 02 78    	mov.w     [w14], w4
    1a4c:	8e fa 97    	mov.b     [w14-8], w5
    1a4e:	65 4a 98    	mov.b     w5, [w4+14]

00001a50 <.LSM103>:
    self->UxRXIF = UxRXIF;
    1a50:	1e 02 78    	mov.w     [w14], w4
    1a52:	ee f2 97    	mov.b     [w14-10], w5
    1a54:	75 4a 98    	mov.b     w5, [w4+15]

00001a56 <.LSM104>:
    self->RXrpinr = RXrpinr;
    1a56:	1e 02 78    	mov.w     [w14], w4
    1a58:	ae ba 97    	mov.w     [w14-12], w5
    1a5a:	05 0a 98    	mov.w     w5, [w4+16]

00001a5c <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    1a5c:	1e 02 78    	mov.w     [w14], w4
    1a5e:	9e ba 97    	mov.w     [w14-14], w5
    1a60:	15 0a 98    	mov.w     w5, [w4+18]

00001a62 <.LSM106>:
    self->RXrpshift = RXrpshift;
    1a62:	1e 02 78    	mov.w     [w14], w4
    1a64:	8e f2 97    	mov.b     [w14-16], w5
    1a66:	45 52 98    	mov.b     w5, [w4+20]

00001a68 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    1a68:	1e 02 78    	mov.w     [w14], w4
    1a6a:	ee ea 97    	mov.b     [w14-18], w5
    1a6c:	55 52 98    	mov.b     w5, [w4+21]

00001a6e <.LSM108>:
    self->TXrpnum = TXrpnum;
    1a6e:	1e 02 78    	mov.w     [w14], w4
    1a70:	ee b2 97    	mov.w     [w14-20], w5
    1a72:	35 0a 98    	mov.w     w5, [w4+22]

00001a74 <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    1a74:	1e 02 78    	mov.w     [w14], w4
    1a76:	de b2 97    	mov.w     [w14-22], w5
    1a78:	45 0a 98    	mov.w     w5, [w4+24]

00001a7a <.LSM110>:
    self->TX = NULL;
    1a7a:	1e 02 78    	mov.w     [w14], w4
    1a7c:	80 02 eb    	clr.w     w5
    1a7e:	55 0a 98    	mov.w     w5, [w4+26]

00001a80 <.LSM111>:
    self->RX = NULL;
    1a80:	1e 02 78    	mov.w     [w14], w4
    1a82:	80 02 eb    	clr.w     w5
    1a84:	65 0a 98    	mov.w     w5, [w4+28]

00001a86 <.LSM112>:
    self->RTS = NULL;
    1a86:	1e 02 78    	mov.w     [w14], w4
    1a88:	80 02 eb    	clr.w     w5
    1a8a:	75 0a 98    	mov.w     w5, [w4+30]

00001a8c <.LSM113>:
    self->CTS = NULL;
    1a8c:	1e 02 78    	mov.w     [w14], w4
    1a8e:	80 02 eb    	clr.w     w5
    1a90:	05 12 98    	mov.w     w5, [w4+32]

00001a92 <.LSM114>:
    self->TXbuffer.data = NULL;
    1a92:	1e 02 78    	mov.w     [w14], w4
    1a94:	80 02 eb    	clr.w     w5
    1a96:	15 12 98    	mov.w     w5, [w4+34]

00001a98 <.LSM115>:
    self->TXbuffer.length = 0;
    1a98:	1e 02 78    	mov.w     [w14], w4
    1a9a:	80 02 eb    	clr.w     w5
    1a9c:	25 12 98    	mov.w     w5, [w4+36]

00001a9e <.LSM116>:
    self->TXbuffer.head = 0;
    1a9e:	1e 02 78    	mov.w     [w14], w4
    1aa0:	80 02 eb    	clr.w     w5
    1aa2:	35 12 98    	mov.w     w5, [w4+38]

00001aa4 <.LSM117>:
    self->TXbuffer.tail = 0;
    1aa4:	1e 02 78    	mov.w     [w14], w4
    1aa6:	80 02 eb    	clr.w     w5
    1aa8:	45 12 98    	mov.w     w5, [w4+40]

00001aaa <.LSM118>:
    self->TXbuffer.count = 0;
    1aaa:	1e 02 78    	mov.w     [w14], w4
    1aac:	80 02 eb    	clr.w     w5
    1aae:	55 12 98    	mov.w     w5, [w4+42]

00001ab0 <.LSM119>:
    self->RXbuffer.data = NULL;
    1ab0:	1e 02 78    	mov.w     [w14], w4
    1ab2:	80 02 eb    	clr.w     w5
    1ab4:	65 12 98    	mov.w     w5, [w4+44]

00001ab6 <.LSM120>:
    self->RXbuffer.length = 0;
    1ab6:	1e 02 78    	mov.w     [w14], w4
    1ab8:	80 02 eb    	clr.w     w5
    1aba:	75 12 98    	mov.w     w5, [w4+46]

00001abc <.LSM121>:
    self->RXbuffer.head = 0;
    1abc:	1e 02 78    	mov.w     [w14], w4
    1abe:	80 02 eb    	clr.w     w5
    1ac0:	05 1a 98    	mov.w     w5, [w4+48]

00001ac2 <.LSM122>:
    self->RXbuffer.tail = 0;
    1ac2:	1e 02 78    	mov.w     [w14], w4
    1ac4:	80 02 eb    	clr.w     w5
    1ac6:	15 1a 98    	mov.w     w5, [w4+50]

00001ac8 <.LSM123>:
    self->RXbuffer.count = 0;
    1ac8:	1e 02 78    	mov.w     [w14], w4
    1aca:	80 02 eb    	clr.w     w5
    1acc:	25 1a 98    	mov.w     w5, [w4+52]

00001ace <.LSM124>:
    self->TXthreshold = 1;
    1ace:	1e 02 78    	mov.w     [w14], w4
    1ad0:	15 00 20    	mov.w     #0x1, w5
    1ad2:	35 1a 98    	mov.w     w5, [w4+54]

00001ad4 <.LSM125>:
    self->putc = NULL;
    1ad4:	1e 02 78    	mov.w     [w14], w4
    1ad6:	80 02 eb    	clr.w     w5
    1ad8:	45 1a 98    	mov.w     w5, [w4+56]

00001ada <.LSM126>:
    self->getc = NULL;
    1ada:	1e 02 78    	mov.w     [w14], w4
    1adc:	80 02 eb    	clr.w     w5
    1ade:	55 1a 98    	mov.w     w5, [w4+58]

00001ae0 <.LSM127>:
}
    1ae0:	00 80 fa    	ulnk      
    1ae2:	00 00 06    	return    

00001ae4 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    1ae4:	10 00 fa    	lnk       #0x10
    1ae6:	88 1f 78    	mov.w     w8, [w15++]
    1ae8:	00 0f 78    	mov.w     w0, [w14]
    1aea:	11 07 98    	mov.w     w1, [w14+2]
    1aec:	22 07 98    	mov.w     w2, [w14+4]
    1aee:	33 07 98    	mov.w     w3, [w14+6]
    1af0:	44 07 98    	mov.w     w4, [w14+8]
    1af2:	56 07 98    	mov.w     w6, [w14+10]
    1af4:	67 07 98    	mov.w     w7, [w14+12]
    1af6:	65 4f 98    	mov.b     w5, [w14+14]

00001af8 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    1af8:	1e 02 78    	mov.w     [w14], w4
    1afa:	14 02 78    	mov.w     [w4], w4
    1afc:	80 02 eb    	clr.w     w5
    1afe:	05 0a 78    	mov.w     w5, [w4]

00001b00 <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    1b00:	1e 02 90    	mov.w     [w14+2], w4
    1b02:	64 02 90    	mov.w     [w4+12], w4
    1b04:	e1 0f 42    	add.w     w4, #0x1, [w15]
    1b06:	1b 02 32    	bra       Z, 0x1f3e <.L73>
    1b08:	2e 02 90    	mov.w     [w14+4], w4
    1b0a:	64 02 90    	mov.w     [w4+12], w4
    1b0c:	e1 0f 42    	add.w     w4, #0x1, [w15]
    1b0e:	19 02 32    	bra       Z, 0x1f42 <.L74>

00001b10 <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    1b10:	1e 02 90    	mov.w     [w14+2], w4
    1b12:	04 0a 90    	mov.w     [w4+16], w4
    1b14:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b16:	69 00 3a    	bra       NZ, 0x1bea <.L44>
    1b18:	2e 02 90    	mov.w     [w14+4], w4
    1b1a:	04 0a 90    	mov.w     [w4+16], w4
    1b1c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b1e:	65 00 3a    	bra       NZ, 0x1bea <.L44>

00001b20 <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    1b20:	1e 00 90    	mov.w     [w14+2], w0
    1b22:	b0 0a 07    	rcall     0x3084 <_pin_digitalOut>

00001b24 <.LSM133>:
        pin_set(TX);
    1b24:	1e 00 90    	mov.w     [w14+2], w0
    1b26:	0b 0b 07    	rcall     0x313e <_pin_set>

00001b28 <.LSM134>:
        pin_digitalIn(RX);
    1b28:	2e 00 90    	mov.w     [w14+4], w0
    1b2a:	85 0a 07    	rcall     0x3036 <_pin_digitalIn>

00001b2c <.LSM135>:
        self->TX = TX;
    1b2c:	1e 02 78    	mov.w     [w14], w4
    1b2e:	9e 02 90    	mov.w     [w14+2], w5
    1b30:	55 0a 98    	mov.w     w5, [w4+26]

00001b32 <.LSM136>:
        TX->owner = (void *)self;
    1b32:	1e 02 90    	mov.w     [w14+2], w4
    1b34:	9e 02 78    	mov.w     [w14], w5
    1b36:	05 0a 98    	mov.w     w5, [w4+16]

00001b38 <.LSM137>:
        TX->write = NULL;
    1b38:	1e 02 90    	mov.w     [w14+2], w4
    1b3a:	80 02 eb    	clr.w     w5
    1b3c:	15 0a 98    	mov.w     w5, [w4+18]

00001b3e <.LSM138>:
        TX->read = NULL;
    1b3e:	1e 02 90    	mov.w     [w14+2], w4
    1b40:	80 02 eb    	clr.w     w5
    1b42:	25 0a 98    	mov.w     w5, [w4+20]

00001b44 <.LSM139>:
        self->RX = RX;
    1b44:	1e 02 78    	mov.w     [w14], w4
    1b46:	ae 02 90    	mov.w     [w14+4], w5
    1b48:	65 0a 98    	mov.w     w5, [w4+28]

00001b4a <.LSM140>:
        RX->owner = (void *)self;
    1b4a:	2e 02 90    	mov.w     [w14+4], w4
    1b4c:	9e 02 78    	mov.w     [w14], w5
    1b4e:	05 0a 98    	mov.w     w5, [w4+16]

00001b50 <.LSM141>:
        RX->write = NULL;
    1b50:	2e 02 90    	mov.w     [w14+4], w4
    1b52:	80 02 eb    	clr.w     w5
    1b54:	15 0a 98    	mov.w     w5, [w4+18]

00001b56 <.LSM142>:
        RX->read = NULL;
    1b56:	2e 02 90    	mov.w     [w14+4], w4
    1b58:	80 02 eb    	clr.w     w5
    1b5a:	25 0a 98    	mov.w     w5, [w4+20]

00001b5c <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1b5c:	15 3a 80    	mov.w     0x742, w5
    1b5e:	f4 0b 20    	mov.w     #0xbf, w4
    1b60:	04 83 62    	and.w     w5, w4, w6
    1b62:	64 04 20    	mov.w     #0x46, w4
    1b64:	75 05 20    	mov.w     #0x57, w5
    1b66:	27 74 20    	mov.w     #0x742, w7
    1b68:	84 4b 78    	mov.b     w4, [w7]
    1b6a:	85 4b 78    	mov.b     w5, [w7]
    1b6c:	86 4b 78    	mov.b     w6, [w7]

00001b6e <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    1b6e:	1e 02 90    	mov.w     [w14+2], w4
    1b70:	74 02 90    	mov.w     [w4+14], w4
    1b72:	9e 02 90    	mov.w     [w14+2], w5
    1b74:	f5 02 90    	mov.w     [w5+14], w5
    1b76:	15 03 78    	mov.w     [w5], w6
    1b78:	9e 02 90    	mov.w     [w14+2], w5
    1b7a:	a5 4a 90    	mov.b     [w5+10], w5
    1b7c:	85 82 fb    	ze        w5, w5
    1b7e:	f7 03 20    	mov.w     #0x3f, w7
    1b80:	85 3a dd    	sl.w      w7, w5, w5
    1b82:	85 82 ea    	com.w     w5, w5
    1b84:	85 02 63    	and.w     w6, w5, w5
    1b86:	05 0a 78    	mov.w     w5, [w4]

00001b88 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    1b88:	1e 02 90    	mov.w     [w14+2], w4
    1b8a:	74 02 90    	mov.w     [w4+14], w4
    1b8c:	9e 02 90    	mov.w     [w14+2], w5
    1b8e:	f5 02 90    	mov.w     [w5+14], w5
    1b90:	15 03 78    	mov.w     [w5], w6
    1b92:	9e 02 78    	mov.w     [w14], w5
    1b94:	b5 0b 90    	mov.w     [w5+22], w7
    1b96:	9e 02 90    	mov.w     [w14+2], w5
    1b98:	a5 4a 90    	mov.b     [w5+10], w5
    1b9a:	85 82 fb    	ze        w5, w5
    1b9c:	85 3a dd    	sl.w      w7, w5, w5
    1b9e:	86 82 72    	ior.w     w5, w6, w5
    1ba0:	05 0a 78    	mov.w     w5, [w4]

00001ba2 <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    1ba2:	1e 02 78    	mov.w     [w14], w4
    1ba4:	04 0a 90    	mov.w     [w4+16], w4
    1ba6:	9e 02 78    	mov.w     [w14], w5
    1ba8:	85 0a 90    	mov.w     [w5+16], w5
    1baa:	15 03 78    	mov.w     [w5], w6
    1bac:	9e 02 78    	mov.w     [w14], w5
    1bae:	c5 52 90    	mov.b     [w5+20], w5
    1bb0:	85 82 fb    	ze        w5, w5
    1bb2:	f7 03 20    	mov.w     #0x3f, w7
    1bb4:	85 3a dd    	sl.w      w7, w5, w5
    1bb6:	85 82 ea    	com.w     w5, w5
    1bb8:	85 02 63    	and.w     w6, w5, w5
    1bba:	05 0a 78    	mov.w     w5, [w4]

00001bbc <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    1bbc:	1e 02 78    	mov.w     [w14], w4
    1bbe:	04 0a 90    	mov.w     [w4+16], w4
    1bc0:	9e 02 78    	mov.w     [w14], w5
    1bc2:	85 0a 90    	mov.w     [w5+16], w5
    1bc4:	15 03 78    	mov.w     [w5], w6
    1bc6:	ae 02 90    	mov.w     [w14+4], w5
    1bc8:	e5 03 90    	mov.w     [w5+12], w7
    1bca:	9e 02 78    	mov.w     [w14], w5
    1bcc:	c5 52 90    	mov.b     [w5+20], w5
    1bce:	85 82 fb    	ze        w5, w5
    1bd0:	85 3a dd    	sl.w      w7, w5, w5
    1bd2:	86 82 72    	ior.w     w5, w6, w5
    1bd4:	05 0a 78    	mov.w     w5, [w4]

00001bd6 <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    1bd6:	15 3a 80    	mov.w     0x742, w5
    1bd8:	04 04 20    	mov.w     #0x40, w4
    1bda:	05 03 72    	ior.w     w4, w5, w6
    1bdc:	64 04 20    	mov.w     #0x46, w4
    1bde:	75 05 20    	mov.w     #0x57, w5
    1be0:	27 74 20    	mov.w     #0x742, w7
    1be2:	84 4b 78    	mov.b     w4, [w7]
    1be4:	85 4b 78    	mov.b     w5, [w7]
    1be6:	86 4b 78    	mov.b     w6, [w7]
    1be8:	0a 00 37    	bra       0x1bfe <.L45>

00001bea <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    1bea:	1e 02 78    	mov.w     [w14], w4
    1bec:	d4 0a 90    	mov.w     [w4+26], w5
    1bee:	1e 02 90    	mov.w     [w14+2], w4
    1bf0:	84 8f 52    	sub.w     w5, w4, [w15]
    1bf2:	a9 01 3a    	bra       NZ, 0x1f46 <.L75>
    1bf4:	1e 02 78    	mov.w     [w14], w4
    1bf6:	e4 0a 90    	mov.w     [w4+28], w5
    1bf8:	2e 02 90    	mov.w     [w14+4], w4
    1bfa:	84 8f 52    	sub.w     w5, w4, [w15]
    1bfc:	a6 01 3a    	bra       NZ, 0x1f4a <.L76>

00001bfe <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    1bfe:	3e 02 90    	mov.w     [w14+6], w4
    1c00:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1c02:	87 00 32    	bra       Z, 0x1d12 <.L47>
    1c04:	4e 02 90    	mov.w     [w14+8], w4
    1c06:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1c08:	84 00 32    	bra       Z, 0x1d12 <.L47>

00001c0a <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    1c0a:	3e 02 90    	mov.w     [w14+6], w4
    1c0c:	64 02 90    	mov.w     [w4+12], w4
    1c0e:	e1 0f 42    	add.w     w4, #0x1, [w15]
    1c10:	9e 01 32    	bra       Z, 0x1f4e <.L77>
    1c12:	4e 02 90    	mov.w     [w14+8], w4
    1c14:	64 02 90    	mov.w     [w4+12], w4
    1c16:	e1 0f 42    	add.w     w4, #0x1, [w15]
    1c18:	9c 01 32    	bra       Z, 0x1f52 <.L78>

00001c1a <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    1c1a:	3e 02 90    	mov.w     [w14+6], w4
    1c1c:	04 0a 90    	mov.w     [w4+16], w4
    1c1e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1c20:	69 00 3a    	bra       NZ, 0x1cf4 <.L50>
    1c22:	4e 02 90    	mov.w     [w14+8], w4
    1c24:	04 0a 90    	mov.w     [w4+16], w4
    1c26:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1c28:	65 00 3a    	bra       NZ, 0x1cf4 <.L50>

00001c2a <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    1c2a:	3e 00 90    	mov.w     [w14+6], w0
    1c2c:	2b 0a 07    	rcall     0x3084 <_pin_digitalOut>

00001c2e <.LSM154>:
            pin_set(RTS);
    1c2e:	3e 00 90    	mov.w     [w14+6], w0
    1c30:	86 0a 07    	rcall     0x313e <_pin_set>

00001c32 <.LSM155>:
            pin_digitalIn(CTS);
    1c32:	4e 00 90    	mov.w     [w14+8], w0
    1c34:	00 0a 07    	rcall     0x3036 <_pin_digitalIn>

00001c36 <.LSM156>:
            self->RTS = RTS;
    1c36:	1e 02 78    	mov.w     [w14], w4
    1c38:	be 02 90    	mov.w     [w14+6], w5
    1c3a:	75 0a 98    	mov.w     w5, [w4+30]

00001c3c <.LSM157>:
            RTS->owner = (void *)self;
    1c3c:	3e 02 90    	mov.w     [w14+6], w4
    1c3e:	9e 02 78    	mov.w     [w14], w5
    1c40:	05 0a 98    	mov.w     w5, [w4+16]

00001c42 <.LSM158>:
            RTS->write = NULL;
    1c42:	3e 02 90    	mov.w     [w14+6], w4
    1c44:	80 02 eb    	clr.w     w5
    1c46:	15 0a 98    	mov.w     w5, [w4+18]

00001c48 <.LSM159>:
            RTS->read = NULL;
    1c48:	3e 02 90    	mov.w     [w14+6], w4
    1c4a:	80 02 eb    	clr.w     w5
    1c4c:	25 0a 98    	mov.w     w5, [w4+20]

00001c4e <.LSM160>:
            self->CTS = CTS;
    1c4e:	1e 02 78    	mov.w     [w14], w4
    1c50:	ce 02 90    	mov.w     [w14+8], w5
    1c52:	05 12 98    	mov.w     w5, [w4+32]

00001c54 <.LSM161>:
            CTS->owner = (void *)self;
    1c54:	4e 02 90    	mov.w     [w14+8], w4
    1c56:	9e 02 78    	mov.w     [w14], w5
    1c58:	05 0a 98    	mov.w     w5, [w4+16]

00001c5a <.LSM162>:
            CTS->write = NULL;
    1c5a:	4e 02 90    	mov.w     [w14+8], w4
    1c5c:	80 02 eb    	clr.w     w5
    1c5e:	15 0a 98    	mov.w     w5, [w4+18]

00001c60 <.LSM163>:
            CTS->read = NULL;
    1c60:	4e 02 90    	mov.w     [w14+8], w4
    1c62:	80 02 eb    	clr.w     w5
    1c64:	25 0a 98    	mov.w     w5, [w4+20]

00001c66 <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    1c66:	15 3a 80    	mov.w     0x742, w5
    1c68:	f4 0b 20    	mov.w     #0xbf, w4
    1c6a:	04 83 62    	and.w     w5, w4, w6
    1c6c:	64 04 20    	mov.w     #0x46, w4
    1c6e:	75 05 20    	mov.w     #0x57, w5
    1c70:	27 74 20    	mov.w     #0x742, w7
    1c72:	84 4b 78    	mov.b     w4, [w7]
    1c74:	85 4b 78    	mov.b     w5, [w7]
    1c76:	86 4b 78    	mov.b     w6, [w7]

00001c78 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    1c78:	3e 02 90    	mov.w     [w14+6], w4
    1c7a:	74 02 90    	mov.w     [w4+14], w4
    1c7c:	be 02 90    	mov.w     [w14+6], w5
    1c7e:	f5 02 90    	mov.w     [w5+14], w5
    1c80:	15 03 78    	mov.w     [w5], w6
    1c82:	be 02 90    	mov.w     [w14+6], w5
    1c84:	a5 4a 90    	mov.b     [w5+10], w5
    1c86:	85 82 fb    	ze        w5, w5
    1c88:	f7 03 20    	mov.w     #0x3f, w7
    1c8a:	85 3a dd    	sl.w      w7, w5, w5
    1c8c:	85 82 ea    	com.w     w5, w5
    1c8e:	85 02 63    	and.w     w6, w5, w5
    1c90:	05 0a 78    	mov.w     w5, [w4]

00001c92 <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    1c92:	3e 02 90    	mov.w     [w14+6], w4
    1c94:	74 02 90    	mov.w     [w4+14], w4
    1c96:	be 02 90    	mov.w     [w14+6], w5
    1c98:	f5 02 90    	mov.w     [w5+14], w5
    1c9a:	15 03 78    	mov.w     [w5], w6
    1c9c:	9e 02 78    	mov.w     [w14], w5
    1c9e:	c5 0b 90    	mov.w     [w5+24], w7
    1ca0:	be 02 90    	mov.w     [w14+6], w5
    1ca2:	a5 4a 90    	mov.b     [w5+10], w5
    1ca4:	85 82 fb    	ze        w5, w5
    1ca6:	85 3a dd    	sl.w      w7, w5, w5
    1ca8:	86 82 72    	ior.w     w5, w6, w5
    1caa:	05 0a 78    	mov.w     w5, [w4]

00001cac <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    1cac:	1e 02 78    	mov.w     [w14], w4
    1cae:	14 0a 90    	mov.w     [w4+18], w4
    1cb0:	9e 02 78    	mov.w     [w14], w5
    1cb2:	95 0a 90    	mov.w     [w5+18], w5
    1cb4:	15 03 78    	mov.w     [w5], w6
    1cb6:	9e 02 78    	mov.w     [w14], w5
    1cb8:	d5 52 90    	mov.b     [w5+21], w5
    1cba:	85 82 fb    	ze        w5, w5
    1cbc:	f7 03 20    	mov.w     #0x3f, w7
    1cbe:	85 3a dd    	sl.w      w7, w5, w5
    1cc0:	85 82 ea    	com.w     w5, w5
    1cc2:	85 02 63    	and.w     w6, w5, w5
    1cc4:	05 0a 78    	mov.w     w5, [w4]

00001cc6 <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    1cc6:	1e 02 78    	mov.w     [w14], w4
    1cc8:	14 0a 90    	mov.w     [w4+18], w4
    1cca:	9e 02 78    	mov.w     [w14], w5
    1ccc:	95 0a 90    	mov.w     [w5+18], w5
    1cce:	15 03 78    	mov.w     [w5], w6
    1cd0:	ce 02 90    	mov.w     [w14+8], w5
    1cd2:	e5 03 90    	mov.w     [w5+12], w7
    1cd4:	9e 02 78    	mov.w     [w14], w5
    1cd6:	d5 52 90    	mov.b     [w5+21], w5
    1cd8:	85 82 fb    	ze        w5, w5
    1cda:	85 3a dd    	sl.w      w7, w5, w5
    1cdc:	86 82 72    	ior.w     w5, w6, w5
    1cde:	05 0a 78    	mov.w     w5, [w4]

00001ce0 <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    1ce0:	15 3a 80    	mov.w     0x742, w5
    1ce2:	04 04 20    	mov.w     #0x40, w4
    1ce4:	05 03 72    	ior.w     w4, w5, w6
    1ce6:	64 04 20    	mov.w     #0x46, w4
    1ce8:	75 05 20    	mov.w     #0x57, w5
    1cea:	27 74 20    	mov.w     #0x742, w7
    1cec:	84 4b 78    	mov.b     w4, [w7]
    1cee:	85 4b 78    	mov.b     w5, [w7]
    1cf0:	86 4b 78    	mov.b     w6, [w7]
    1cf2:	0a 00 37    	bra       0x1d08 <.L51>

00001cf4 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    1cf4:	1e 02 78    	mov.w     [w14], w4
    1cf6:	f4 0a 90    	mov.w     [w4+30], w5
    1cf8:	3e 02 90    	mov.w     [w14+6], w4
    1cfa:	84 8f 52    	sub.w     w5, w4, [w15]
    1cfc:	2c 01 3a    	bra       NZ, 0x1f56 <.L79>
    1cfe:	1e 02 78    	mov.w     [w14], w4
    1d00:	84 12 90    	mov.w     [w4+32], w5
    1d02:	4e 02 90    	mov.w     [w14+8], w4
    1d04:	84 8f 52    	sub.w     w5, w4, [w15]
    1d06:	29 01 3a    	bra       NZ, 0x1f5a <.L80>

00001d08 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    1d08:	1e 02 78    	mov.w     [w14], w4
    1d0a:	14 02 78    	mov.w     [w4], w4
    1d0c:	05 20 20    	mov.w     #0x200, w5
    1d0e:	05 0a 78    	mov.w     w5, [w4]
    1d10:	06 00 37    	bra       0x1d1e <.L53>

00001d12 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    1d12:	3e 02 90    	mov.w     [w14+6], w4
    1d14:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1d16:	23 01 3a    	bra       NZ, 0x1f5e <.L81>
    1d18:	4e 02 90    	mov.w     [w14+8], w4
    1d1a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1d1c:	22 01 3a    	bra       NZ, 0x1f62 <.L82>

00001d1e <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    1d1e:	18 c0 b3    	mov.b     #0x1, w8
    1d20:	02 40 22    	mov.w     #0x2400, w2
    1d22:	43 a7 24    	mov.w     #0x4a74, w3
    1d24:	5e 00 90    	mov.w     [w14+10], w0
    1d26:	ee 00 90    	mov.w     [w14+12], w1
    1d28:	14 fb 07    	rcall     0x1352 <___gesf2>
    1d2a:	00 02 78    	mov.w     w0, w4
    1d2c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1d2e:	01 00 3c    	bra       GT, 0x1d32 <.L55>
    1d30:	00 44 eb    	clr.b     w8

00001d32 <.L55>:
    1d32:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    1d34:	04 00 32    	bra       Z, 0x1d3e <.L56>

00001d36 <.LSM174>:
        baudrate = FCY/4.;
    1d36:	04 40 22    	mov.w     #0x2400, w4
    1d38:	45 a7 24    	mov.w     #0x4a74, w5
    1d3a:	54 07 98    	mov.w     w4, [w14+10]
    1d3c:	65 07 98    	mov.w     w5, [w14+12]

00001d3e <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    1d3e:	18 c0 b3    	mov.b     #0x1, w8
    1d40:	02 40 22    	mov.w     #0x2400, w2
    1d42:	43 17 24    	mov.w     #0x4174, w3
    1d44:	5e 00 90    	mov.w     [w14+10], w0
    1d46:	ee 00 90    	mov.w     [w14+12], w1
    1d48:	02 fb 07    	rcall     0x134e <___eqsf2>
    1d4a:	00 02 78    	mov.w     w0, w4
    1d4c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1d4e:	01 00 35    	bra       LT, 0x1d52 <.L57>
    1d50:	00 44 eb    	clr.b     w8

00001d52 <.L57>:
    1d52:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    1d54:	04 00 32    	bra       Z, 0x1d5e <.L58>

00001d56 <.LSM176>:
        baudrate = FCY/(16.*65536.);
    1d56:	04 40 22    	mov.w     #0x2400, w4
    1d58:	45 17 24    	mov.w     #0x4174, w5
    1d5a:	54 07 98    	mov.w     w4, [w14+10]
    1d5c:	65 07 98    	mov.w     w5, [w14+12]

00001d5e <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    1d5e:	18 c0 b3    	mov.b     #0x1, w8
    1d60:	02 40 22    	mov.w     #0x2400, w2
    1d62:	43 27 24    	mov.w     #0x4274, w3
    1d64:	5e 00 90    	mov.w     [w14+10], w0
    1d66:	ee 00 90    	mov.w     [w14+12], w1
    1d68:	f2 fa 07    	rcall     0x134e <___eqsf2>
    1d6a:	00 02 78    	mov.w     w0, w4
    1d6c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1d6e:	01 00 34    	bra       LE, 0x1d72 <.L59>
    1d70:	00 44 eb    	clr.b     w8

00001d72 <.L59>:
    1d72:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    1d74:	14 00 32    	bra       Z, 0x1d9e <.L60>

00001d76 <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    1d76:	1e 02 78    	mov.w     [w14], w4
    1d78:	44 04 90    	mov.w     [w4+8], w8
    1d7a:	5e 01 90    	mov.w     [w14+10], w2
    1d7c:	ee 01 90    	mov.w     [w14+12], w3
    1d7e:	00 40 22    	mov.w     #0x2400, w0
    1d80:	41 97 24    	mov.w     #0x4974, w1
    1d82:	a3 fa 07    	rcall     0x12ca <___divsf3>
    1d84:	00 02 be    	mov.d     w0, w4
    1d86:	02 00 20    	mov.w     #0x0, w2
    1d88:	03 f0 23    	mov.w     #0x3f00, w3
    1d8a:	04 00 be    	mov.d     w4, w0
    1d8c:	41 fa 07    	rcall     0x1210 <___addsf3>
    1d8e:	00 02 be    	mov.d     w0, w4
    1d90:	04 00 be    	mov.d     w4, w0
    1d92:	e1 fa 07    	rcall     0x1356 <___fixunssfsi>
    1d94:	00 02 be    	mov.d     w0, w4
    1d96:	04 02 78    	mov.w     w4, w4
    1d98:	04 02 e9    	dec.w     w4, w4
    1d9a:	04 0c 78    	mov.w     w4, [w8]
    1d9c:	1a 00 37    	bra       0x1dd2 <.L61>

00001d9e <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    1d9e:	1e 02 78    	mov.w     [w14], w4
    1da0:	14 02 78    	mov.w     [w4], w4
    1da2:	9e 02 78    	mov.w     [w14], w5
    1da4:	95 02 78    	mov.w     [w5], w5
    1da6:	95 02 78    	mov.w     [w5], w5
    1da8:	05 30 a0    	bset.w    w5, #0x3
    1daa:	05 0a 78    	mov.w     w5, [w4]

00001dac <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    1dac:	1e 02 78    	mov.w     [w14], w4
    1dae:	44 04 90    	mov.w     [w4+8], w8
    1db0:	5e 01 90    	mov.w     [w14+10], w2
    1db2:	ee 01 90    	mov.w     [w14+12], w3
    1db4:	00 40 22    	mov.w     #0x2400, w0
    1db6:	41 a7 24    	mov.w     #0x4a74, w1
    1db8:	88 fa 07    	rcall     0x12ca <___divsf3>
    1dba:	00 02 be    	mov.d     w0, w4
    1dbc:	02 00 20    	mov.w     #0x0, w2
    1dbe:	03 f0 23    	mov.w     #0x3f00, w3
    1dc0:	04 00 be    	mov.d     w4, w0
    1dc2:	26 fa 07    	rcall     0x1210 <___addsf3>
    1dc4:	00 02 be    	mov.d     w0, w4
    1dc6:	04 00 be    	mov.d     w4, w0
    1dc8:	c6 fa 07    	rcall     0x1356 <___fixunssfsi>
    1dca:	00 02 be    	mov.d     w0, w4
    1dcc:	04 02 78    	mov.w     w4, w4
    1dce:	04 02 e9    	dec.w     w4, w4
    1dd0:	04 0c 78    	mov.w     w4, [w8]

00001dd2 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    1dd2:	ee 4a 90    	mov.b     [w14+14], w5
    1dd4:	54 c4 b3    	mov.b     #0x45, w4
    1dd6:	84 cf 52    	sub.b     w5, w4, [w15]
    1dd8:	04 00 32    	bra       Z, 0x1de2 <.L62>
    1dda:	ee 4a 90    	mov.b     [w14+14], w5
    1ddc:	54 c6 b3    	mov.b     #0x65, w4
    1dde:	84 cf 52    	sub.b     w5, w4, [w15]
    1de0:	08 00 3a    	bra       NZ, 0x1df2 <.L63>

00001de2 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    1de2:	1e 02 78    	mov.w     [w14], w4
    1de4:	14 02 78    	mov.w     [w4], w4
    1de6:	9e 02 78    	mov.w     [w14], w5
    1de8:	95 02 78    	mov.w     [w5], w5
    1dea:	95 02 78    	mov.w     [w5], w5
    1dec:	05 10 a0    	bset.w    w5, #0x1
    1dee:	05 0a 78    	mov.w     w5, [w4]
    1df0:	18 00 37    	bra       0x1e22 <.L64>

00001df2 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    1df2:	ee 4a 90    	mov.b     [w14+14], w5
    1df4:	f4 c4 b3    	mov.b     #0x4f, w4
    1df6:	84 cf 52    	sub.b     w5, w4, [w15]
    1df8:	04 00 32    	bra       Z, 0x1e02 <.L65>
    1dfa:	ee 4a 90    	mov.b     [w14+14], w5
    1dfc:	f4 c6 b3    	mov.b     #0x6f, w4
    1dfe:	84 cf 52    	sub.b     w5, w4, [w15]
    1e00:	08 00 3a    	bra       NZ, 0x1e12 <.L66>

00001e02 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    1e02:	1e 02 78    	mov.w     [w14], w4
    1e04:	14 02 78    	mov.w     [w4], w4
    1e06:	9e 02 78    	mov.w     [w14], w5
    1e08:	95 02 78    	mov.w     [w5], w5
    1e0a:	95 02 78    	mov.w     [w5], w5
    1e0c:	05 20 a0    	bset.w    w5, #0x2
    1e0e:	05 0a 78    	mov.w     w5, [w4]
    1e10:	08 00 37    	bra       0x1e22 <.L64>

00001e12 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    1e12:	ee 4a 90    	mov.b     [w14+14], w5
    1e14:	e4 c4 b3    	mov.b     #0x4e, w4
    1e16:	84 cf 52    	sub.b     w5, w4, [w15]
    1e18:	04 00 32    	bra       Z, 0x1e22 <.L64>
    1e1a:	ee 4a 90    	mov.b     [w14+14], w5
    1e1c:	e4 c6 b3    	mov.b     #0x6e, w4
    1e1e:	84 cf 52    	sub.b     w5, w4, [w15]
    1e20:	a2 00 3a    	bra       NZ, 0x1f66 <.L83>

00001e22 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    1e22:	4e ba 97    	mov.w     [w14-8], w4
    1e24:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    1e26:	08 00 3a    	bra       NZ, 0x1e38 <.L67>

00001e28 <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    1e28:	1e 02 78    	mov.w     [w14], w4
    1e2a:	14 02 78    	mov.w     [w4], w4
    1e2c:	9e 02 78    	mov.w     [w14], w5
    1e2e:	95 02 78    	mov.w     [w5], w5
    1e30:	95 02 78    	mov.w     [w5], w5
    1e32:	05 00 a0    	bset.w    w5, #0x0
    1e34:	05 0a 78    	mov.w     w5, [w4]
    1e36:	03 00 37    	bra       0x1e3e <.L68>

00001e38 <.L67>:
    } else if (stopbits!=1) {
    1e38:	4e ba 97    	mov.w     [w14-8], w4
    1e3a:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    1e3c:	96 00 3a    	bra       NZ, 0x1f6a <.L84>

00001e3e <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    1e3e:	2e ba 97    	mov.w     [w14-12], w4
    1e40:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1e42:	04 00 3a    	bra       NZ, 0x1e4c <.L69>

00001e44 <.LSM190>:
        self->putc = __putc_nobuffer;
    1e44:	1e 02 78    	mov.w     [w14], w4
    1e46:	25 55 21    	mov.w     #0x1552, w5
    1e48:	45 1a 98    	mov.w     w5, [w4+56]
    1e4a:	36 00 37    	bra       0x1eb8 <.L70>

00001e4c <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    1e4c:	1e 02 78    	mov.w     [w14], w4
    1e4e:	14 02 90    	mov.w     [w4+2], w4
    1e50:	9e 02 78    	mov.w     [w14], w5
    1e52:	95 02 90    	mov.w     [w5+2], w5
    1e54:	15 03 78    	mov.w     [w5], w6
    1e56:	05 00 22    	mov.w     #0x2000, w5
    1e58:	86 82 72    	ior.w     w5, w6, w5
    1e5a:	05 0a 78    	mov.w     w5, [w4]

00001e5c <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    1e5c:	1e 02 78    	mov.w     [w14], w4
    1e5e:	ae ba 97    	mov.w     [w14-12], w5
    1e60:	15 12 98    	mov.w     w5, [w4+34]

00001e62 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    1e62:	1e 02 78    	mov.w     [w14], w4
    1e64:	9e ba 97    	mov.w     [w14-14], w5
    1e66:	25 12 98    	mov.w     w5, [w4+36]

00001e68 <.LSM194>:
        self->TXbuffer.head = 0;
    1e68:	1e 02 78    	mov.w     [w14], w4
    1e6a:	80 02 eb    	clr.w     w5
    1e6c:	35 12 98    	mov.w     w5, [w4+38]

00001e6e <.LSM195>:
        self->TXbuffer.tail = 0;
    1e6e:	1e 02 78    	mov.w     [w14], w4
    1e70:	80 02 eb    	clr.w     w5
    1e72:	45 12 98    	mov.w     w5, [w4+40]

00001e74 <.LSM196>:
        self->TXbuffer.count = 0;
    1e74:	1e 02 78    	mov.w     [w14], w4
    1e76:	80 02 eb    	clr.w     w5
    1e78:	55 12 98    	mov.w     w5, [w4+42]

00001e7a <.LSM197>:
        self->TXthreshold = TXthreshold;
    1e7a:	1e 02 78    	mov.w     [w14], w4
    1e7c:	be ba 97    	mov.w     [w14-10], w5
    1e7e:	35 1a 98    	mov.w     w5, [w4+54]

00001e80 <.LSM198>:
        self->putc = __putc_buffer;
    1e80:	1e 02 78    	mov.w     [w14], w4
    1e82:	65 59 21    	mov.w     #0x1596, w5
    1e84:	45 1a 98    	mov.w     w5, [w4+56]

00001e86 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    1e86:	1e 02 78    	mov.w     [w14], w4
    1e88:	54 02 90    	mov.w     [w4+10], w4
    1e8a:	9e 02 78    	mov.w     [w14], w5
    1e8c:	d5 02 90    	mov.w     [w5+10], w5
    1e8e:	15 03 78    	mov.w     [w5], w6
    1e90:	9e 02 78    	mov.w     [w14], w5
    1e92:	e5 4a 90    	mov.b     [w5+14], w5
    1e94:	85 82 fb    	ze        w5, w5
    1e96:	17 00 20    	mov.w     #0x1, w7
    1e98:	85 3a dd    	sl.w      w7, w5, w5
    1e9a:	85 82 ea    	com.w     w5, w5
    1e9c:	85 02 63    	and.w     w6, w5, w5
    1e9e:	05 0a 78    	mov.w     w5, [w4]

00001ea0 <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    1ea0:	1e 02 78    	mov.w     [w14], w4
    1ea2:	64 02 90    	mov.w     [w4+12], w4
    1ea4:	9e 02 78    	mov.w     [w14], w5
    1ea6:	e5 02 90    	mov.w     [w5+12], w5
    1ea8:	15 03 78    	mov.w     [w5], w6
    1eaa:	9e 02 78    	mov.w     [w14], w5
    1eac:	e5 4a 90    	mov.b     [w5+14], w5
    1eae:	85 82 fb    	ze        w5, w5
    1eb0:	17 00 20    	mov.w     #0x1, w7
    1eb2:	85 3a dd    	sl.w      w7, w5, w5
    1eb4:	86 82 72    	ior.w     w5, w6, w5
    1eb6:	05 0a 78    	mov.w     w5, [w4]

00001eb8 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    1eb8:	0e ba 97    	mov.w     [w14-16], w4
    1eba:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1ebc:	04 00 3a    	bra       NZ, 0x1ec6 <.L71>

00001ebe <.LSM202>:
        self->getc = __getc_nobuffer;
    1ebe:	1e 02 78    	mov.w     [w14], w4
    1ec0:	65 57 21    	mov.w     #0x1576, w5
    1ec2:	55 1a 98    	mov.w     w5, [w4+58]
    1ec4:	2b 00 37    	bra       0x1f1c <.L72>

00001ec6 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    1ec6:	1e 02 78    	mov.w     [w14], w4
    1ec8:	8e ba 97    	mov.w     [w14-16], w5
    1eca:	65 12 98    	mov.w     w5, [w4+44]

00001ecc <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    1ecc:	1e 02 78    	mov.w     [w14], w4
    1ece:	fe b2 97    	mov.w     [w14-18], w5
    1ed0:	75 12 98    	mov.w     w5, [w4+46]

00001ed2 <.LSM205>:
        self->RXbuffer.head = 0;
    1ed2:	1e 02 78    	mov.w     [w14], w4
    1ed4:	80 02 eb    	clr.w     w5
    1ed6:	05 1a 98    	mov.w     w5, [w4+48]

00001ed8 <.LSM206>:
        self->RXbuffer.tail = 0;
    1ed8:	1e 02 78    	mov.w     [w14], w4
    1eda:	80 02 eb    	clr.w     w5
    1edc:	15 1a 98    	mov.w     w5, [w4+50]

00001ede <.LSM207>:
        self->RXbuffer.count = 0;
    1ede:	1e 02 78    	mov.w     [w14], w4
    1ee0:	80 02 eb    	clr.w     w5
    1ee2:	25 1a 98    	mov.w     w5, [w4+52]

00001ee4 <.LSM208>:
        self->getc = __getc_buffer;
    1ee4:	1e 02 78    	mov.w     [w14], w4
    1ee6:	45 68 21    	mov.w     #0x1684, w5
    1ee8:	55 1a 98    	mov.w     w5, [w4+58]

00001eea <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    1eea:	1e 02 78    	mov.w     [w14], w4
    1eec:	54 02 90    	mov.w     [w4+10], w4
    1eee:	9e 02 78    	mov.w     [w14], w5
    1ef0:	d5 02 90    	mov.w     [w5+10], w5
    1ef2:	15 03 78    	mov.w     [w5], w6
    1ef4:	9e 02 78    	mov.w     [w14], w5
    1ef6:	f5 4a 90    	mov.b     [w5+15], w5
    1ef8:	85 82 fb    	ze        w5, w5
    1efa:	17 00 20    	mov.w     #0x1, w7
    1efc:	85 3a dd    	sl.w      w7, w5, w5
    1efe:	85 82 ea    	com.w     w5, w5
    1f00:	85 02 63    	and.w     w6, w5, w5
    1f02:	05 0a 78    	mov.w     w5, [w4]

00001f04 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    1f04:	1e 02 78    	mov.w     [w14], w4
    1f06:	64 02 90    	mov.w     [w4+12], w4
    1f08:	9e 02 78    	mov.w     [w14], w5
    1f0a:	e5 02 90    	mov.w     [w5+12], w5
    1f0c:	15 03 78    	mov.w     [w5], w6
    1f0e:	9e 02 78    	mov.w     [w14], w5
    1f10:	f5 4a 90    	mov.b     [w5+15], w5
    1f12:	85 82 fb    	ze        w5, w5
    1f14:	17 00 20    	mov.w     #0x1, w7
    1f16:	85 3a dd    	sl.w      w7, w5, w5
    1f18:	86 82 72    	ior.w     w5, w6, w5
    1f1a:	05 0a 78    	mov.w     w5, [w4]

00001f1c <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    1f1c:	1e 02 78    	mov.w     [w14], w4
    1f1e:	14 02 78    	mov.w     [w4], w4
    1f20:	9e 02 78    	mov.w     [w14], w5
    1f22:	95 02 78    	mov.w     [w5], w5
    1f24:	15 03 78    	mov.w     [w5], w6
    1f26:	05 00 28    	mov.w     #0x8000, w5
    1f28:	86 82 72    	ior.w     w5, w6, w5
    1f2a:	05 0a 78    	mov.w     w5, [w4]

00001f2c <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    1f2c:	1e 02 78    	mov.w     [w14], w4
    1f2e:	14 02 90    	mov.w     [w4+2], w4
    1f30:	9e 02 78    	mov.w     [w14], w5
    1f32:	95 02 90    	mov.w     [w5+2], w5
    1f34:	15 03 78    	mov.w     [w5], w6
    1f36:	05 40 20    	mov.w     #0x400, w5
    1f38:	86 82 72    	ior.w     w5, w6, w5
    1f3a:	05 0a 78    	mov.w     w5, [w4]
    1f3c:	17 00 37    	bra       0x1f6c <.L40>

00001f3e <.L73>:
    1f3e:	00 00 00    	nop       
    1f40:	15 00 37    	bra       0x1f6c <.L40>

00001f42 <.L74>:
    1f42:	00 00 00    	nop       
    1f44:	13 00 37    	bra       0x1f6c <.L40>

00001f46 <.L75>:
    1f46:	00 00 00    	nop       
    1f48:	11 00 37    	bra       0x1f6c <.L40>

00001f4a <.L76>:
    1f4a:	00 00 00    	nop       
    1f4c:	0f 00 37    	bra       0x1f6c <.L40>

00001f4e <.L77>:
    1f4e:	00 00 00    	nop       
    1f50:	0d 00 37    	bra       0x1f6c <.L40>

00001f52 <.L78>:
    1f52:	00 00 00    	nop       
    1f54:	0b 00 37    	bra       0x1f6c <.L40>

00001f56 <.L79>:
    1f56:	00 00 00    	nop       
    1f58:	09 00 37    	bra       0x1f6c <.L40>

00001f5a <.L80>:
    1f5a:	00 00 00    	nop       
    1f5c:	07 00 37    	bra       0x1f6c <.L40>

00001f5e <.L81>:
    1f5e:	00 00 00    	nop       
    1f60:	05 00 37    	bra       0x1f6c <.L40>

00001f62 <.L82>:
    1f62:	00 00 00    	nop       
    1f64:	03 00 37    	bra       0x1f6c <.L40>

00001f66 <.L83>:
    1f66:	00 00 00    	nop       
    1f68:	01 00 37    	bra       0x1f6c <.L40>

00001f6a <.L84>:
    1f6a:	00 00 00    	nop       

00001f6c <.L40>:
}
    1f6c:	4f 04 78    	mov.w     [--w15], w8
    1f6e:	00 80 fa    	ulnk      
    1f70:	00 00 06    	return    

00001f72 <_uart_close>:

void uart_close(_UART *self) {
    1f72:	02 00 fa    	lnk       #0x2
    1f74:	00 0f 78    	mov.w     w0, [w14]

00001f76 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    1f76:	1e 02 78    	mov.w     [w14], w4
    1f78:	14 02 90    	mov.w     [w4+2], w4
    1f7a:	9e 02 78    	mov.w     [w14], w5
    1f7c:	95 02 90    	mov.w     [w5+2], w5
    1f7e:	15 03 78    	mov.w     [w5], w6
    1f80:	f5 bf 2f    	mov.w     #0xfbff, w5
    1f82:	85 02 63    	and.w     w6, w5, w5
    1f84:	05 0a 78    	mov.w     w5, [w4]

00001f86 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    1f86:	1e 02 78    	mov.w     [w14], w4
    1f88:	14 02 78    	mov.w     [w4], w4
    1f8a:	80 02 eb    	clr.w     w5
    1f8c:	05 0a 78    	mov.w     w5, [w4]

00001f8e <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    1f8e:	1e 02 78    	mov.w     [w14], w4
    1f90:	64 02 90    	mov.w     [w4+12], w4
    1f92:	9e 02 78    	mov.w     [w14], w5
    1f94:	e5 02 90    	mov.w     [w5+12], w5
    1f96:	15 03 78    	mov.w     [w5], w6
    1f98:	9e 02 78    	mov.w     [w14], w5
    1f9a:	e5 4a 90    	mov.b     [w5+14], w5
    1f9c:	85 82 fb    	ze        w5, w5
    1f9e:	17 00 20    	mov.w     #0x1, w7
    1fa0:	85 3a dd    	sl.w      w7, w5, w5
    1fa2:	85 82 ea    	com.w     w5, w5
    1fa4:	85 02 63    	and.w     w6, w5, w5
    1fa6:	05 0a 78    	mov.w     w5, [w4]

00001fa8 <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    1fa8:	1e 02 78    	mov.w     [w14], w4
    1faa:	64 02 90    	mov.w     [w4+12], w4
    1fac:	9e 02 78    	mov.w     [w14], w5
    1fae:	e5 02 90    	mov.w     [w5+12], w5
    1fb0:	15 03 78    	mov.w     [w5], w6
    1fb2:	9e 02 78    	mov.w     [w14], w5
    1fb4:	f5 4a 90    	mov.b     [w5+15], w5
    1fb6:	85 82 fb    	ze        w5, w5
    1fb8:	17 00 20    	mov.w     #0x1, w7
    1fba:	85 3a dd    	sl.w      w7, w5, w5
    1fbc:	85 82 ea    	com.w     w5, w5
    1fbe:	85 02 63    	and.w     w6, w5, w5
    1fc0:	05 0a 78    	mov.w     w5, [w4]

00001fc2 <.LSM226>:
    self->putc = NULL;
    1fc2:	1e 02 78    	mov.w     [w14], w4
    1fc4:	80 02 eb    	clr.w     w5
    1fc6:	45 1a 98    	mov.w     w5, [w4+56]

00001fc8 <.LSM227>:
    self->getc = NULL;
    1fc8:	1e 02 78    	mov.w     [w14], w4
    1fca:	80 02 eb    	clr.w     w5
    1fcc:	55 1a 98    	mov.w     w5, [w4+58]

00001fce <.LSM228>:
    if (self->TX) {
    1fce:	1e 02 78    	mov.w     [w14], w4
    1fd0:	54 0a 90    	mov.w     [w4+26], w4
    1fd2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1fd4:	31 00 32    	bra       Z, 0x2038 <.L86>

00001fd6 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1fd6:	15 3a 80    	mov.w     0x742, w5
    1fd8:	f4 0b 20    	mov.w     #0xbf, w4
    1fda:	04 83 62    	and.w     w5, w4, w6
    1fdc:	64 04 20    	mov.w     #0x46, w4
    1fde:	75 05 20    	mov.w     #0x57, w5
    1fe0:	27 74 20    	mov.w     #0x742, w7
    1fe2:	84 4b 78    	mov.b     w4, [w7]
    1fe4:	85 4b 78    	mov.b     w5, [w7]
    1fe6:	86 4b 78    	mov.b     w6, [w7]

00001fe8 <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    1fe8:	1e 02 78    	mov.w     [w14], w4
    1fea:	54 0a 90    	mov.w     [w4+26], w4
    1fec:	74 02 90    	mov.w     [w4+14], w4
    1fee:	9e 02 78    	mov.w     [w14], w5
    1ff0:	d5 0a 90    	mov.w     [w5+26], w5
    1ff2:	f5 02 90    	mov.w     [w5+14], w5
    1ff4:	15 03 78    	mov.w     [w5], w6
    1ff6:	9e 02 78    	mov.w     [w14], w5
    1ff8:	d5 0a 90    	mov.w     [w5+26], w5
    1ffa:	a5 4a 90    	mov.b     [w5+10], w5
    1ffc:	85 82 fb    	ze        w5, w5
    1ffe:	f7 03 20    	mov.w     #0x3f, w7
    2000:	85 3a dd    	sl.w      w7, w5, w5
    2002:	85 82 ea    	com.w     w5, w5
    2004:	85 02 63    	and.w     w6, w5, w5
    2006:	05 0a 78    	mov.w     w5, [w4]

00002008 <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2008:	15 3a 80    	mov.w     0x742, w5
    200a:	04 04 20    	mov.w     #0x40, w4
    200c:	05 03 72    	ior.w     w4, w5, w6
    200e:	64 04 20    	mov.w     #0x46, w4
    2010:	75 05 20    	mov.w     #0x57, w5
    2012:	27 74 20    	mov.w     #0x742, w7
    2014:	84 4b 78    	mov.b     w4, [w7]
    2016:	85 4b 78    	mov.b     w5, [w7]
    2018:	86 4b 78    	mov.b     w6, [w7]

0000201a <.LSM232>:
        self->TX->owner = NULL;
    201a:	1e 02 78    	mov.w     [w14], w4
    201c:	54 0a 90    	mov.w     [w4+26], w4
    201e:	80 02 eb    	clr.w     w5
    2020:	05 0a 98    	mov.w     w5, [w4+16]

00002022 <.LSM233>:
        pin_digitalOut(self->TX);
    2022:	1e 02 78    	mov.w     [w14], w4
    2024:	54 0a 90    	mov.w     [w4+26], w4
    2026:	04 00 78    	mov.w     w4, w0
    2028:	2d 08 07    	rcall     0x3084 <_pin_digitalOut>

0000202a <.LSM234>:
        pin_set(self->TX);
    202a:	1e 02 78    	mov.w     [w14], w4
    202c:	54 0a 90    	mov.w     [w4+26], w4
    202e:	04 00 78    	mov.w     w4, w0
    2030:	86 08 07    	rcall     0x313e <_pin_set>

00002032 <.LSM235>:
        self->TX = NULL;
    2032:	1e 02 78    	mov.w     [w14], w4
    2034:	80 02 eb    	clr.w     w5
    2036:	55 0a 98    	mov.w     w5, [w4+26]

00002038 <.L86>:
    }
    if (self->RX) {
    2038:	1e 02 78    	mov.w     [w14], w4
    203a:	64 0a 90    	mov.w     [w4+28], w4
    203c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    203e:	29 00 32    	bra       Z, 0x2092 <.L87>

00002040 <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2040:	15 3a 80    	mov.w     0x742, w5
    2042:	f4 0b 20    	mov.w     #0xbf, w4
    2044:	04 83 62    	and.w     w5, w4, w6
    2046:	64 04 20    	mov.w     #0x46, w4
    2048:	75 05 20    	mov.w     #0x57, w5
    204a:	27 74 20    	mov.w     #0x742, w7
    204c:	84 4b 78    	mov.b     w4, [w7]
    204e:	85 4b 78    	mov.b     w5, [w7]
    2050:	86 4b 78    	mov.b     w6, [w7]

00002052 <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2052:	1e 02 78    	mov.w     [w14], w4
    2054:	04 0a 90    	mov.w     [w4+16], w4
    2056:	9e 02 78    	mov.w     [w14], w5
    2058:	85 0a 90    	mov.w     [w5+16], w5
    205a:	15 03 78    	mov.w     [w5], w6
    205c:	9e 02 78    	mov.w     [w14], w5
    205e:	c5 52 90    	mov.b     [w5+20], w5
    2060:	85 82 fb    	ze        w5, w5
    2062:	f7 03 20    	mov.w     #0x3f, w7
    2064:	85 3a dd    	sl.w      w7, w5, w5
    2066:	86 82 72    	ior.w     w5, w6, w5
    2068:	05 0a 78    	mov.w     w5, [w4]

0000206a <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    206a:	15 3a 80    	mov.w     0x742, w5
    206c:	04 04 20    	mov.w     #0x40, w4
    206e:	05 03 72    	ior.w     w4, w5, w6
    2070:	64 04 20    	mov.w     #0x46, w4
    2072:	75 05 20    	mov.w     #0x57, w5
    2074:	27 74 20    	mov.w     #0x742, w7
    2076:	84 4b 78    	mov.b     w4, [w7]
    2078:	85 4b 78    	mov.b     w5, [w7]
    207a:	86 4b 78    	mov.b     w6, [w7]

0000207c <.LSM240>:
        self->RX->owner = NULL;
    207c:	1e 02 78    	mov.w     [w14], w4
    207e:	64 0a 90    	mov.w     [w4+28], w4
    2080:	80 02 eb    	clr.w     w5
    2082:	05 0a 98    	mov.w     w5, [w4+16]

00002084 <.LSM241>:
        pin_digitalIn(self->RX);
    2084:	1e 02 78    	mov.w     [w14], w4
    2086:	64 0a 90    	mov.w     [w4+28], w4
    2088:	04 00 78    	mov.w     w4, w0
    208a:	d5 07 07    	rcall     0x3036 <_pin_digitalIn>

0000208c <.LSM242>:
        self->RX = NULL;
    208c:	1e 02 78    	mov.w     [w14], w4
    208e:	80 02 eb    	clr.w     w5
    2090:	65 0a 98    	mov.w     w5, [w4+28]

00002092 <.L87>:
    }
    if (self->RTS) {
    2092:	1e 02 78    	mov.w     [w14], w4
    2094:	74 0a 90    	mov.w     [w4+30], w4
    2096:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2098:	31 00 32    	bra       Z, 0x20fc <.L88>

0000209a <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    209a:	15 3a 80    	mov.w     0x742, w5
    209c:	f4 0b 20    	mov.w     #0xbf, w4
    209e:	04 83 62    	and.w     w5, w4, w6
    20a0:	64 04 20    	mov.w     #0x46, w4
    20a2:	75 05 20    	mov.w     #0x57, w5
    20a4:	27 74 20    	mov.w     #0x742, w7
    20a6:	84 4b 78    	mov.b     w4, [w7]
    20a8:	85 4b 78    	mov.b     w5, [w7]
    20aa:	86 4b 78    	mov.b     w6, [w7]

000020ac <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    20ac:	1e 02 78    	mov.w     [w14], w4
    20ae:	74 0a 90    	mov.w     [w4+30], w4
    20b0:	74 02 90    	mov.w     [w4+14], w4
    20b2:	9e 02 78    	mov.w     [w14], w5
    20b4:	f5 0a 90    	mov.w     [w5+30], w5
    20b6:	f5 02 90    	mov.w     [w5+14], w5
    20b8:	15 03 78    	mov.w     [w5], w6
    20ba:	9e 02 78    	mov.w     [w14], w5
    20bc:	f5 0a 90    	mov.w     [w5+30], w5
    20be:	a5 4a 90    	mov.b     [w5+10], w5
    20c0:	85 82 fb    	ze        w5, w5
    20c2:	f7 03 20    	mov.w     #0x3f, w7
    20c4:	85 3a dd    	sl.w      w7, w5, w5
    20c6:	85 82 ea    	com.w     w5, w5
    20c8:	85 02 63    	and.w     w6, w5, w5
    20ca:	05 0a 78    	mov.w     w5, [w4]

000020cc <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    20cc:	15 3a 80    	mov.w     0x742, w5
    20ce:	04 04 20    	mov.w     #0x40, w4
    20d0:	05 03 72    	ior.w     w4, w5, w6
    20d2:	64 04 20    	mov.w     #0x46, w4
    20d4:	75 05 20    	mov.w     #0x57, w5
    20d6:	27 74 20    	mov.w     #0x742, w7
    20d8:	84 4b 78    	mov.b     w4, [w7]
    20da:	85 4b 78    	mov.b     w5, [w7]
    20dc:	86 4b 78    	mov.b     w6, [w7]

000020de <.LSM247>:
        self->RTS->owner = NULL;
    20de:	1e 02 78    	mov.w     [w14], w4
    20e0:	74 0a 90    	mov.w     [w4+30], w4
    20e2:	80 02 eb    	clr.w     w5
    20e4:	05 0a 98    	mov.w     w5, [w4+16]

000020e6 <.LSM248>:
        pin_digitalOut(self->RTS);
    20e6:	1e 02 78    	mov.w     [w14], w4
    20e8:	74 0a 90    	mov.w     [w4+30], w4
    20ea:	04 00 78    	mov.w     w4, w0
    20ec:	cb 07 07    	rcall     0x3084 <_pin_digitalOut>

000020ee <.LSM249>:
        pin_set(self->RTS);
    20ee:	1e 02 78    	mov.w     [w14], w4
    20f0:	74 0a 90    	mov.w     [w4+30], w4
    20f2:	04 00 78    	mov.w     w4, w0
    20f4:	24 08 07    	rcall     0x313e <_pin_set>

000020f6 <.LSM250>:
        self->RTS = NULL;
    20f6:	1e 02 78    	mov.w     [w14], w4
    20f8:	80 02 eb    	clr.w     w5
    20fa:	75 0a 98    	mov.w     w5, [w4+30]

000020fc <.L88>:
    }
    if (self->CTS) {
    20fc:	1e 02 78    	mov.w     [w14], w4
    20fe:	04 12 90    	mov.w     [w4+32], w4
    2100:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2102:	29 00 32    	bra       Z, 0x2156 <.L85>

00002104 <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2104:	15 3a 80    	mov.w     0x742, w5
    2106:	f4 0b 20    	mov.w     #0xbf, w4
    2108:	04 83 62    	and.w     w5, w4, w6
    210a:	64 04 20    	mov.w     #0x46, w4
    210c:	75 05 20    	mov.w     #0x57, w5
    210e:	27 74 20    	mov.w     #0x742, w7
    2110:	84 4b 78    	mov.b     w4, [w7]
    2112:	85 4b 78    	mov.b     w5, [w7]
    2114:	86 4b 78    	mov.b     w6, [w7]

00002116 <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2116:	1e 02 78    	mov.w     [w14], w4
    2118:	14 0a 90    	mov.w     [w4+18], w4
    211a:	9e 02 78    	mov.w     [w14], w5
    211c:	95 0a 90    	mov.w     [w5+18], w5
    211e:	15 03 78    	mov.w     [w5], w6
    2120:	9e 02 78    	mov.w     [w14], w5
    2122:	d5 52 90    	mov.b     [w5+21], w5
    2124:	85 82 fb    	ze        w5, w5
    2126:	f7 03 20    	mov.w     #0x3f, w7
    2128:	85 3a dd    	sl.w      w7, w5, w5
    212a:	86 82 72    	ior.w     w5, w6, w5
    212c:	05 0a 78    	mov.w     w5, [w4]

0000212e <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    212e:	15 3a 80    	mov.w     0x742, w5
    2130:	04 04 20    	mov.w     #0x40, w4
    2132:	05 03 72    	ior.w     w4, w5, w6
    2134:	64 04 20    	mov.w     #0x46, w4
    2136:	75 05 20    	mov.w     #0x57, w5
    2138:	27 74 20    	mov.w     #0x742, w7
    213a:	84 4b 78    	mov.b     w4, [w7]
    213c:	85 4b 78    	mov.b     w5, [w7]
    213e:	86 4b 78    	mov.b     w6, [w7]

00002140 <.LSM255>:
        self->CTS->owner = NULL;
    2140:	1e 02 78    	mov.w     [w14], w4
    2142:	04 12 90    	mov.w     [w4+32], w4
    2144:	80 02 eb    	clr.w     w5
    2146:	05 0a 98    	mov.w     w5, [w4+16]

00002148 <.LSM256>:
        pin_digitalIn(self->CTS);
    2148:	1e 02 78    	mov.w     [w14], w4
    214a:	04 12 90    	mov.w     [w4+32], w4
    214c:	04 00 78    	mov.w     w4, w0
    214e:	73 07 07    	rcall     0x3036 <_pin_digitalIn>

00002150 <.LSM257>:
        self->CTS = NULL;
    2150:	1e 02 78    	mov.w     [w14], w4
    2152:	80 02 eb    	clr.w     w5
    2154:	05 12 98    	mov.w     w5, [w4+32]

00002156 <.L85>:
    }
}
    2156:	00 80 fa    	ulnk      
    2158:	00 00 06    	return    

0000215a <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    215a:	04 00 fa    	lnk       #0x4
    215c:	00 0f 78    	mov.w     w0, [w14]
    215e:	21 47 98    	mov.b     w1, [w14+2]

00002160 <.LSM260>:
    if (self->putc)
    2160:	1e 02 78    	mov.w     [w14], w4
    2162:	44 1a 90    	mov.w     [w4+56], w4
    2164:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2166:	05 00 32    	bra       Z, 0x2172 <.L90>

00002168 <.LSM261>:
        self->putc(self, ch);
    2168:	1e 02 78    	mov.w     [w14], w4
    216a:	44 1a 90    	mov.w     [w4+56], w4
    216c:	ae 40 90    	mov.b     [w14+2], w1
    216e:	1e 00 78    	mov.w     [w14], w0
    2170:	04 00 01    	call      w4

00002172 <.L90>:
}
    2172:	00 80 fa    	ulnk      
    2174:	00 00 06    	return    

00002176 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2176:	02 00 fa    	lnk       #0x2
    2178:	00 0f 78    	mov.w     w0, [w14]

0000217a <.LSM264>:
    if (self->getc)
    217a:	1e 02 78    	mov.w     [w14], w4
    217c:	54 1a 90    	mov.w     [w4+58], w4
    217e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2180:	06 00 32    	bra       Z, 0x218e <.L93>

00002182 <.LSM265>:
        return self->getc(self);
    2182:	1e 02 78    	mov.w     [w14], w4
    2184:	54 1a 90    	mov.w     [w4+58], w4
    2186:	1e 00 78    	mov.w     [w14], w0
    2188:	04 00 01    	call      w4
    218a:	00 42 78    	mov.b     w0, w4
    218c:	01 00 37    	bra       0x2190 <.L94>

0000218e <.L93>:
    else
        return 0xFF;
    218e:	00 c2 eb    	setm.b    w4

00002190 <.L94>:
}
    2190:	04 40 78    	mov.b     w4, w0
    2192:	00 80 fa    	ulnk      
    2194:	00 00 06    	return    

00002196 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2196:	02 00 fa    	lnk       #0x2
    2198:	00 0f 78    	mov.w     w0, [w14]

0000219a <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    219a:	1e 02 78    	mov.w     [w14], w4
    219c:	14 02 90    	mov.w     [w4+2], w4
    219e:	94 02 78    	mov.w     [w4], w5
    21a0:	04 40 20    	mov.w     #0x400, w4
    21a2:	04 82 62    	and.w     w5, w4, w4
    21a4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    21a6:	08 00 3a    	bra       NZ, 0x21b8 <.L95>

000021a8 <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    21a8:	1e 02 78    	mov.w     [w14], w4
    21aa:	14 02 90    	mov.w     [w4+2], w4
    21ac:	9e 02 78    	mov.w     [w14], w5
    21ae:	95 02 90    	mov.w     [w5+2], w5
    21b0:	15 03 78    	mov.w     [w5], w6
    21b2:	05 40 20    	mov.w     #0x400, w5
    21b4:	86 82 72    	ior.w     w5, w6, w5
    21b6:	05 0a 78    	mov.w     w5, [w4]

000021b8 <.L95>:
}
    21b8:	00 80 fa    	ulnk      
    21ba:	00 00 06    	return    

000021bc <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    21bc:	04 00 fa    	lnk       #0x4
    21be:	00 0f 78    	mov.w     w0, [w14]
    21c0:	11 07 98    	mov.w     w1, [w14+2]

000021c2 <.LSM273>:
    while (*str)
    21c2:	08 00 37    	bra       0x21d4 <.L98>

000021c4 <.L99>:
        uart_putc(self, *str++);
    21c4:	1e 02 90    	mov.w     [w14+2], w4
    21c6:	14 42 78    	mov.b     [w4], w4
    21c8:	9e 02 90    	mov.w     [w14+2], w5
    21ca:	85 02 e8    	inc.w     w5, w5
    21cc:	15 07 98    	mov.w     w5, [w14+2]
    21ce:	84 40 78    	mov.b     w4, w1
    21d0:	1e 00 78    	mov.w     [w14], w0
    21d2:	c3 ff 07    	rcall     0x215a <_uart_putc>

000021d4 <.L98>:
    21d4:	1e 02 90    	mov.w     [w14+2], w4
    21d6:	14 42 78    	mov.b     [w4], w4
    21d8:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    21da:	f4 ff 3a    	bra       NZ, 0x21c4 <.L99>

000021dc <.LSM276>:
    uart_flushTxBuffer(self);
    21dc:	1e 00 78    	mov.w     [w14], w0
    21de:	db ff 07    	rcall     0x2196 <_uart_flushTxBuffer>

000021e0 <.LSM277>:
}
    21e0:	00 80 fa    	ulnk      
    21e2:	00 00 06    	return    

000021e4 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    21e4:	0a 00 fa    	lnk       #0xa
    21e6:	20 07 98    	mov.w     w0, [w14+4]
    21e8:	31 07 98    	mov.w     w1, [w14+6]
    21ea:	42 07 98    	mov.w     w2, [w14+8]

000021ec <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    21ec:	4e 02 90    	mov.w     [w14+8], w4
    21ee:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    21f0:	88 00 32    	bra       Z, 0x2302 <.L113>

000021f2 <.LSM280>:
        return;

    if (len==1) {
    21f2:	4e 02 90    	mov.w     [w14+8], w4
    21f4:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    21f6:	04 00 3a    	bra       NZ, 0x2200 <.L103>

000021f8 <.LSM281>:
        *str = '\0';
    21f8:	3e 02 90    	mov.w     [w14+6], w4
    21fa:	80 42 eb    	clr.b     w5
    21fc:	05 4a 78    	mov.b     w5, [w4]

000021fe <.LSM282>:
        return;
    21fe:	82 00 37    	bra       0x2304 <.L100>

00002200 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2200:	b1 c1 b3    	mov.b     #0x1b, w1
    2202:	2e 00 90    	mov.w     [w14+4], w0
    2204:	aa ff 07    	rcall     0x215a <_uart_putc>

00002206 <.LSM284>:
    uart_putc(self, '7');
    2206:	71 c3 b3    	mov.b     #0x37, w1
    2208:	2e 00 90    	mov.w     [w14+4], w0
    220a:	a7 ff 07    	rcall     0x215a <_uart_putc>

0000220c <.LSM285>:
    uart_flushTxBuffer(self);
    220c:	2e 00 90    	mov.w     [w14+4], w0
    220e:	c3 ff 07    	rcall     0x2196 <_uart_flushTxBuffer>

00002210 <.LSM286>:
    start = str;
    2210:	3e 02 90    	mov.w     [w14+6], w4
    2212:	14 07 98    	mov.w     w4, [w14+2]

00002214 <.LSM287>:
    left = len;
    2214:	4e 02 90    	mov.w     [w14+8], w4
    2216:	04 0f 78    	mov.w     w4, [w14]
    2218:	03 00 37    	bra       0x2220 <.L112>

0000221a <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    221a:	00 00 00    	nop       
    221c:	01 00 37    	bra       0x2220 <.L112>

0000221e <.L115>:
    221e:	00 00 00    	nop       

00002220 <.L112>:
    2220:	2e 00 90    	mov.w     [w14+4], w0
    2222:	a9 ff 07    	rcall     0x2176 <_uart_getc>
    2224:	00 42 78    	mov.b     w0, w4
    2226:	be 02 90    	mov.w     [w14+6], w5
    2228:	84 4a 78    	mov.b     w4, [w5]

0000222a <.LSM290>:
    222a:	3e 02 90    	mov.w     [w14+6], w4
    222c:	14 42 78    	mov.b     [w4], w4
    222e:	ed 4f 52    	sub.b     w4, #0xd, [w15]
    2230:	0c 00 3a    	bra       NZ, 0x224a <.L104>

00002232 <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    2232:	3e 02 90    	mov.w     [w14+6], w4
    2234:	80 42 eb    	clr.b     w5
    2236:	05 4a 78    	mov.b     w5, [w4]

00002238 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2238:	a1 c0 b3    	mov.b     #0xa, w1
    223a:	2e 00 90    	mov.w     [w14+4], w0
    223c:	8e ff 07    	rcall     0x215a <_uart_putc>

0000223e <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    223e:	d1 c0 b3    	mov.b     #0xd, w1
    2240:	2e 00 90    	mov.w     [w14+4], w0
    2242:	8b ff 07    	rcall     0x215a <_uart_putc>

00002244 <.LSM294>:
    uart_flushTxBuffer(self);
    2244:	2e 00 90    	mov.w     [w14+4], w0
    2246:	a7 ff 07    	rcall     0x2196 <_uart_flushTxBuffer>
    2248:	5d 00 37    	bra       0x2304 <.L100>

0000224a <.L104>:
    224a:	3e 02 90    	mov.w     [w14+6], w4
    224c:	14 42 78    	mov.b     [w4], w4
    224e:	fb 4f 52    	sub.b     w4, #0x1b, [w15]
    2250:	16 00 3a    	bra       NZ, 0x227e <.L105>

00002252 <.LSM296>:
    2252:	b1 c1 b3    	mov.b     #0x1b, w1
    2254:	2e 00 90    	mov.w     [w14+4], w0
    2256:	81 ff 07    	rcall     0x215a <_uart_putc>

00002258 <.LSM297>:
    2258:	81 c3 b3    	mov.b     #0x38, w1
    225a:	2e 00 90    	mov.w     [w14+4], w0
    225c:	7e ff 07    	rcall     0x215a <_uart_putc>

0000225e <.LSM298>:
    225e:	b1 c1 b3    	mov.b     #0x1b, w1
    2260:	2e 00 90    	mov.w     [w14+4], w0
    2262:	7b ff 07    	rcall     0x215a <_uart_putc>

00002264 <.LSM299>:
    2264:	b1 c5 b3    	mov.b     #0x5b, w1
    2266:	2e 00 90    	mov.w     [w14+4], w0
    2268:	78 ff 07    	rcall     0x215a <_uart_putc>

0000226a <.LSM300>:
    226a:	b1 c4 b3    	mov.b     #0x4b, w1
    226c:	2e 00 90    	mov.w     [w14+4], w0
    226e:	75 ff 07    	rcall     0x215a <_uart_putc>

00002270 <.LSM301>:
    2270:	2e 00 90    	mov.w     [w14+4], w0
    2272:	91 ff 07    	rcall     0x2196 <_uart_flushTxBuffer>

00002274 <.LSM302>:
    2274:	1e 02 90    	mov.w     [w14+2], w4
    2276:	34 07 98    	mov.w     w4, [w14+6]

00002278 <.LSM303>:
    2278:	4e 02 90    	mov.w     [w14+8], w4
    227a:	04 0f 78    	mov.w     w4, [w14]

0000227c <.LSM304>:
    227c:	41 00 37    	bra       0x2300 <.L106>

0000227e <.L105>:
    227e:	3e 02 90    	mov.w     [w14+6], w4
    2280:	14 42 78    	mov.b     [w4], w4
    2282:	e8 4f 52    	sub.b     w4, #0x8, [w15]
    2284:	05 00 32    	bra       Z, 0x2290 <.L107>

00002286 <.LSM306>:
    2286:	3e 02 90    	mov.w     [w14+6], w4
    2288:	94 42 78    	mov.b     [w4], w5

0000228a <.LSM307>:
    228a:	f4 c7 b3    	mov.b     #0x7f, w4
    228c:	84 cf 52    	sub.b     w5, w4, [w15]
    228e:	1a 00 3a    	bra       NZ, 0x22c4 <.L108>

00002290 <.L107>:
    2290:	be 02 90    	mov.w     [w14+6], w5
    2292:	1e 02 90    	mov.w     [w14+2], w4
    2294:	84 8f 52    	sub.w     w5, w4, [w15]
    2296:	10 00 36    	bra       LEU, 0x22b8 <.L109>

00002298 <.LSM309>:
    2298:	81 c0 b3    	mov.b     #0x8, w1
    229a:	2e 00 90    	mov.w     [w14+4], w0
    229c:	5e ff 07    	rcall     0x215a <_uart_putc>

0000229e <.LSM310>:
    229e:	01 c2 b3    	mov.b     #0x20, w1
    22a0:	2e 00 90    	mov.w     [w14+4], w0
    22a2:	5b ff 07    	rcall     0x215a <_uart_putc>

000022a4 <.LSM311>:
    22a4:	81 c0 b3    	mov.b     #0x8, w1
    22a6:	2e 00 90    	mov.w     [w14+4], w0
    22a8:	58 ff 07    	rcall     0x215a <_uart_putc>

000022aa <.LSM312>:
    22aa:	2e 00 90    	mov.w     [w14+4], w0
    22ac:	74 ff 07    	rcall     0x2196 <_uart_flushTxBuffer>

000022ae <.LSM313>:
    22ae:	3e 02 90    	mov.w     [w14+6], w4
    22b0:	04 02 e9    	dec.w     w4, w4
    22b2:	34 07 98    	mov.w     w4, [w14+6]

000022b4 <.LSM314>:
    22b4:	1e 0f e8    	inc.w     [w14], [w14]
    22b6:	05 00 37    	bra       0x22c2 <.L110>

000022b8 <.L109>:
    22b8:	71 c0 b3    	mov.b     #0x7, w1
    22ba:	2e 00 90    	mov.w     [w14+4], w0
    22bc:	4e ff 07    	rcall     0x215a <_uart_putc>

000022be <.LSM316>:
    22be:	2e 00 90    	mov.w     [w14+4], w0
    22c0:	6a ff 07    	rcall     0x2196 <_uart_flushTxBuffer>

000022c2 <.L110>:
    22c2:	1e 00 37    	bra       0x2300 <.L106>

000022c4 <.L108>:
    22c4:	1e 02 78    	mov.w     [w14], w4
    22c6:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    22c8:	06 00 3a    	bra       NZ, 0x22d6 <.L111>

000022ca <.LSM319>:
    22ca:	71 c0 b3    	mov.b     #0x7, w1
    22cc:	2e 00 90    	mov.w     [w14+4], w0
    22ce:	45 ff 07    	rcall     0x215a <_uart_putc>

000022d0 <.LSM320>:
    22d0:	2e 00 90    	mov.w     [w14+4], w0
    22d2:	61 ff 07    	rcall     0x2196 <_uart_flushTxBuffer>

000022d4 <.LSM321>:
    22d4:	15 00 37    	bra       0x2300 <.L106>

000022d6 <.L111>:
    22d6:	3e 02 90    	mov.w     [w14+6], w4
    22d8:	14 42 78    	mov.b     [w4], w4
    22da:	ff 4f 52    	sub.b     w4, #0x1f, [w15]
    22dc:	9e ff 36    	bra       LEU, 0x221a <.L114>
    22de:	3e 02 90    	mov.w     [w14+6], w4
    22e0:	94 42 78    	mov.b     [w4], w5
    22e2:	e4 c7 b3    	mov.b     #0x7e, w4
    22e4:	84 cf 52    	sub.b     w5, w4, [w15]
    22e6:	9b ff 3e    	bra       GTU, 0x221e <.L115>

000022e8 <.LSM323>:
    22e8:	3e 02 90    	mov.w     [w14+6], w4
    22ea:	14 42 78    	mov.b     [w4], w4
    22ec:	84 40 78    	mov.b     w4, w1
    22ee:	2e 00 90    	mov.w     [w14+4], w0
    22f0:	34 ff 07    	rcall     0x215a <_uart_putc>

000022f2 <.LSM324>:
    22f2:	2e 00 90    	mov.w     [w14+4], w0
    22f4:	50 ff 07    	rcall     0x2196 <_uart_flushTxBuffer>

000022f6 <.LSM325>:
    22f6:	3e 02 90    	mov.w     [w14+6], w4
    22f8:	04 02 e8    	inc.w     w4, w4
    22fa:	34 07 98    	mov.w     w4, [w14+6]

000022fc <.LSM326>:
    22fc:	1e 0f e9    	dec.w     [w14], [w14]

000022fe <.LSM327>:
    22fe:	90 ff 37    	bra       0x2220 <.L112>

00002300 <.L106>:
    2300:	8f ff 37    	bra       0x2220 <.L112>

00002302 <.L113>:
    2302:	00 00 00    	nop       

00002304 <.L100>:
}
    2304:	00 80 fa    	ulnk      
    2306:	00 00 06    	return    

00002308 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    2308:	02 00 fa    	lnk       #0x2
    230a:	00 0f 78    	mov.w     w0, [w14]

0000230c <.LSM1>:
    timer_lower(self);
    230c:	1e 00 78    	mov.w     [w14], w0
    230e:	0e 02 07    	rcall     0x272c <_timer_lower>

00002310 <.LSM2>:
    if (self->every) {
    2310:	1e 02 78    	mov.w     [w14], w4
    2312:	14 0a 90    	mov.w     [w4+18], w4
    2314:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2316:	05 00 32    	bra       Z, 0x2322 <.L2>

00002318 <.LSM3>:
        self->every(self);
    2318:	1e 02 78    	mov.w     [w14], w4
    231a:	14 0a 90    	mov.w     [w4+18], w4
    231c:	1e 00 78    	mov.w     [w14], w0
    231e:	04 00 01    	call      w4
    2320:	1a 00 37    	bra       0x2356 <.L1>

00002322 <.L2>:
    } else if (self->after) {
    2322:	1e 02 78    	mov.w     [w14], w4
    2324:	24 0a 90    	mov.w     [w4+20], w4
    2326:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2328:	14 00 32    	bra       Z, 0x2352 <.L4>

0000232a <.LSM5>:
        if (self->aftercount) {
    232a:	1e 02 78    	mov.w     [w14], w4
    232c:	04 0a 90    	mov.w     [w4+16], w4
    232e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2330:	0a 00 32    	bra       Z, 0x2346 <.L5>

00002332 <.LSM6>:
            self->after(self);
    2332:	1e 02 78    	mov.w     [w14], w4
    2334:	24 0a 90    	mov.w     [w4+20], w4
    2336:	1e 00 78    	mov.w     [w14], w0
    2338:	04 00 01    	call      w4

0000233a <.LSM7>:
            self->aftercount--;
    233a:	1e 02 78    	mov.w     [w14], w4
    233c:	04 0a 90    	mov.w     [w4+16], w4
    233e:	84 02 e9    	dec.w     w4, w5
    2340:	1e 02 78    	mov.w     [w14], w4
    2342:	05 0a 98    	mov.w     w5, [w4+16]
    2344:	08 00 37    	bra       0x2356 <.L1>

00002346 <.L5>:
        } else {
            timer_disableInterrupt(self);
    2346:	1e 00 78    	mov.w     [w14], w0
    2348:	1a 02 07    	rcall     0x277e <_timer_disableInterrupt>

0000234a <.LSM9>:
            self->after = NULL;
    234a:	1e 02 78    	mov.w     [w14], w4
    234c:	80 02 eb    	clr.w     w5
    234e:	25 0a 98    	mov.w     w5, [w4+20]
    2350:	02 00 37    	bra       0x2356 <.L1>

00002352 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    2352:	1e 00 78    	mov.w     [w14], w0
    2354:	14 02 07    	rcall     0x277e <_timer_disableInterrupt>

00002356 <.L1>:
    }
}
    2356:	00 80 fa    	ulnk      
    2358:	00 00 06    	return    

0000235a <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    235a:	36 00 f8    	push      0x36
    235c:	80 9f be    	mov.d     w0, [w15++]
    235e:	82 9f be    	mov.d     w2, [w15++]
    2360:	84 9f be    	mov.d     w4, [w15++]
    2362:	86 9f be    	mov.d     w6, [w15++]
    2364:	32 00 f8    	push      0x32
    2366:	10 00 20    	mov.w     #0x1, w0
    2368:	90 01 88    	mov.w     w0, 0x32
    236a:	00 00 fa    	lnk       #0x0

0000236c <.LSM13>:
    timer_serviceInterrupt(&timer1);
    236c:	a0 b7 20    	mov.w     #0xb7a, w0
    236e:	cc ff 07    	rcall     0x2308 <_timer_serviceInterrupt>

00002370 <.LSM14>:
}
    2370:	00 80 fa    	ulnk      
    2372:	32 00 f9    	pop       0x32
    2374:	4f 03 be    	mov.d     [--w15], w6
    2376:	4f 02 be    	mov.d     [--w15], w4
    2378:	4f 01 be    	mov.d     [--w15], w2
    237a:	4f 00 be    	mov.d     [--w15], w0
    237c:	36 00 f9    	pop       0x36
    237e:	00 40 06    	retfie    

00002380 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    2380:	36 00 f8    	push      0x36
    2382:	80 9f be    	mov.d     w0, [w15++]
    2384:	82 9f be    	mov.d     w2, [w15++]
    2386:	84 9f be    	mov.d     w4, [w15++]
    2388:	86 9f be    	mov.d     w6, [w15++]
    238a:	32 00 f8    	push      0x32
    238c:	10 00 20    	mov.w     #0x1, w0
    238e:	90 01 88    	mov.w     w0, 0x32
    2390:	00 00 fa    	lnk       #0x0

00002392 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    2392:	00 b9 20    	mov.w     #0xb90, w0
    2394:	b9 ff 07    	rcall     0x2308 <_timer_serviceInterrupt>

00002396 <.LSM17>:
}
    2396:	00 80 fa    	ulnk      
    2398:	32 00 f9    	pop       0x32
    239a:	4f 03 be    	mov.d     [--w15], w6
    239c:	4f 02 be    	mov.d     [--w15], w4
    239e:	4f 01 be    	mov.d     [--w15], w2
    23a0:	4f 00 be    	mov.d     [--w15], w0
    23a2:	36 00 f9    	pop       0x36
    23a4:	00 40 06    	retfie    

000023a6 <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    23a6:	36 00 f8    	push      0x36
    23a8:	80 9f be    	mov.d     w0, [w15++]
    23aa:	82 9f be    	mov.d     w2, [w15++]
    23ac:	84 9f be    	mov.d     w4, [w15++]
    23ae:	86 9f be    	mov.d     w6, [w15++]
    23b0:	32 00 f8    	push      0x32
    23b2:	10 00 20    	mov.w     #0x1, w0
    23b4:	90 01 88    	mov.w     w0, 0x32
    23b6:	00 00 fa    	lnk       #0x0

000023b8 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    23b8:	60 ba 20    	mov.w     #0xba6, w0
    23ba:	a6 ff 07    	rcall     0x2308 <_timer_serviceInterrupt>

000023bc <.LSM20>:
}
    23bc:	00 80 fa    	ulnk      
    23be:	32 00 f9    	pop       0x32
    23c0:	4f 03 be    	mov.d     [--w15], w6
    23c2:	4f 02 be    	mov.d     [--w15], w4
    23c4:	4f 01 be    	mov.d     [--w15], w2
    23c6:	4f 00 be    	mov.d     [--w15], w0
    23c8:	36 00 f9    	pop       0x36
    23ca:	00 40 06    	retfie    

000023cc <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    23cc:	36 00 f8    	push      0x36
    23ce:	80 9f be    	mov.d     w0, [w15++]
    23d0:	82 9f be    	mov.d     w2, [w15++]
    23d2:	84 9f be    	mov.d     w4, [w15++]
    23d4:	86 9f be    	mov.d     w6, [w15++]
    23d6:	32 00 f8    	push      0x32
    23d8:	10 00 20    	mov.w     #0x1, w0
    23da:	90 01 88    	mov.w     w0, 0x32
    23dc:	00 00 fa    	lnk       #0x0

000023de <.LSM22>:
    timer_serviceInterrupt(&timer4);
    23de:	c0 bb 20    	mov.w     #0xbbc, w0
    23e0:	93 ff 07    	rcall     0x2308 <_timer_serviceInterrupt>

000023e2 <.LSM23>:
}
    23e2:	00 80 fa    	ulnk      
    23e4:	32 00 f9    	pop       0x32
    23e6:	4f 03 be    	mov.d     [--w15], w6
    23e8:	4f 02 be    	mov.d     [--w15], w4
    23ea:	4f 01 be    	mov.d     [--w15], w2
    23ec:	4f 00 be    	mov.d     [--w15], w0
    23ee:	36 00 f9    	pop       0x36
    23f0:	00 40 06    	retfie    

000023f2 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    23f2:	36 00 f8    	push      0x36
    23f4:	80 9f be    	mov.d     w0, [w15++]
    23f6:	82 9f be    	mov.d     w2, [w15++]
    23f8:	84 9f be    	mov.d     w4, [w15++]
    23fa:	86 9f be    	mov.d     w6, [w15++]
    23fc:	32 00 f8    	push      0x32
    23fe:	10 00 20    	mov.w     #0x1, w0
    2400:	90 01 88    	mov.w     w0, 0x32
    2402:	00 00 fa    	lnk       #0x0

00002404 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    2404:	20 bd 20    	mov.w     #0xbd2, w0
    2406:	80 ff 07    	rcall     0x2308 <_timer_serviceInterrupt>

00002408 <.LSM26>:
}
    2408:	00 80 fa    	ulnk      
    240a:	32 00 f9    	pop       0x32
    240c:	4f 03 be    	mov.d     [--w15], w6
    240e:	4f 02 be    	mov.d     [--w15], w4
    2410:	4f 01 be    	mov.d     [--w15], w2
    2412:	4f 00 be    	mov.d     [--w15], w0
    2414:	36 00 f9    	pop       0x36
    2416:	00 40 06    	retfie    

00002418 <_init_timer>:

void init_timer(void) {
    2418:	00 00 fa    	lnk       #0x0

0000241a <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    241a:	b4 00 20    	mov.w     #0xb, w4
    241c:	84 1f 78    	mov.w     w4, [w15++]
    241e:	47 00 20    	mov.w     #0x4, w7
    2420:	36 c0 b3    	mov.b     #0x3, w6
    2422:	45 09 20    	mov.w     #0x94, w5
    2424:	44 08 20    	mov.w     #0x84, w4
    2426:	03 10 20    	mov.w     #0x100, w3
    2428:	22 10 20    	mov.w     #0x102, w2
    242a:	41 10 20    	mov.w     #0x104, w1
    242c:	a0 b7 20    	mov.w     #0xb7a, w0
    242e:	33 00 07    	rcall     0x2496 <_timer_init>
    2430:	8f 87 e9    	dec2.w    w15, w15

00002432 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    2432:	c4 00 20    	mov.w     #0xc, w4
    2434:	84 1f 78    	mov.w     w4, [w15++]
    2436:	80 03 eb    	clr.w     w7
    2438:	76 c0 b3    	mov.b     #0x7, w6
    243a:	45 09 20    	mov.w     #0x94, w5
    243c:	44 08 20    	mov.w     #0x84, w4
    243e:	63 10 20    	mov.w     #0x106, w3
    2440:	c2 10 20    	mov.w     #0x10c, w2
    2442:	01 11 20    	mov.w     #0x110, w1
    2444:	00 b9 20    	mov.w     #0xb90, w0
    2446:	27 00 07    	rcall     0x2496 <_timer_init>
    2448:	8f 87 e9    	dec2.w    w15, w15

0000244a <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    244a:	d4 00 20    	mov.w     #0xd, w4
    244c:	84 1f 78    	mov.w     w4, [w15++]
    244e:	17 00 20    	mov.w     #0x1, w7
    2450:	86 c0 b3    	mov.b     #0x8, w6
    2452:	45 09 20    	mov.w     #0x94, w5
    2454:	44 08 20    	mov.w     #0x84, w4
    2456:	a3 10 20    	mov.w     #0x10a, w3
    2458:	e2 10 20    	mov.w     #0x10e, w2
    245a:	21 11 20    	mov.w     #0x112, w1
    245c:	60 ba 20    	mov.w     #0xba6, w0
    245e:	1b 00 07    	rcall     0x2496 <_timer_init>
    2460:	8f 87 e9    	dec2.w    w15, w15

00002462 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    2462:	e4 00 20    	mov.w     #0xe, w4
    2464:	84 1f 78    	mov.w     w4, [w15++]
    2466:	27 00 20    	mov.w     #0x2, w7
    2468:	b6 c0 b3    	mov.b     #0xb, w6
    246a:	65 09 20    	mov.w     #0x96, w5
    246c:	64 08 20    	mov.w     #0x86, w4
    246e:	43 11 20    	mov.w     #0x114, w3
    2470:	a2 11 20    	mov.w     #0x11a, w2
    2472:	e1 11 20    	mov.w     #0x11e, w1
    2474:	c0 bb 20    	mov.w     #0xbbc, w0
    2476:	0f 00 07    	rcall     0x2496 <_timer_init>
    2478:	8f 87 e9    	dec2.w    w15, w15

0000247a <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    247a:	f4 00 20    	mov.w     #0xf, w4
    247c:	84 1f 78    	mov.w     w4, [w15++]
    247e:	37 00 20    	mov.w     #0x3, w7
    2480:	c6 c0 b3    	mov.b     #0xc, w6
    2482:	65 09 20    	mov.w     #0x96, w5
    2484:	64 08 20    	mov.w     #0x86, w4
    2486:	83 11 20    	mov.w     #0x118, w3
    2488:	c2 11 20    	mov.w     #0x11c, w2
    248a:	01 12 20    	mov.w     #0x120, w1
    248c:	20 bd 20    	mov.w     #0xbd2, w0
    248e:	03 00 07    	rcall     0x2496 <_timer_init>
    2490:	8f 87 e9    	dec2.w    w15, w15

00002492 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    2492:	00 80 fa    	ulnk      
    2494:	00 00 06    	return    

00002496 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    2496:	10 00 fa    	lnk       #0x10
    2498:	00 0f 78    	mov.w     w0, [w14]
    249a:	11 07 98    	mov.w     w1, [w14+2]
    249c:	22 07 98    	mov.w     w2, [w14+4]
    249e:	33 07 98    	mov.w     w3, [w14+6]
    24a0:	44 07 98    	mov.w     w4, [w14+8]
    24a2:	55 07 98    	mov.w     w5, [w14+10]
    24a4:	46 4f 98    	mov.b     w6, [w14+12]
    24a6:	77 07 98    	mov.w     w7, [w14+14]

000024a8 <.LSM35>:
    self->TxCON = TxCON;
    24a8:	1e 02 78    	mov.w     [w14], w4
    24aa:	9e 02 90    	mov.w     [w14+2], w5
    24ac:	05 0a 78    	mov.w     w5, [w4]

000024ae <.LSM36>:
    self->PRx = PRx;
    24ae:	1e 02 78    	mov.w     [w14], w4
    24b0:	ae 02 90    	mov.w     [w14+4], w5
    24b2:	15 02 98    	mov.w     w5, [w4+2]

000024b4 <.LSM37>:
    self->TMRx = TMRx;
    24b4:	1e 02 78    	mov.w     [w14], w4
    24b6:	be 02 90    	mov.w     [w14+6], w5
    24b8:	25 02 98    	mov.w     w5, [w4+4]

000024ba <.LSM38>:
    self->IFSy = IFSy;
    24ba:	1e 02 78    	mov.w     [w14], w4
    24bc:	ce 02 90    	mov.w     [w14+8], w5
    24be:	35 02 98    	mov.w     w5, [w4+6]

000024c0 <.LSM39>:
    self->IECy = IECy;
    24c0:	1e 02 78    	mov.w     [w14], w4
    24c2:	de 02 90    	mov.w     [w14+10], w5
    24c4:	45 02 98    	mov.w     w5, [w4+8]

000024c6 <.LSM40>:
    self->flagbit = flagbit;
    24c6:	1e 02 78    	mov.w     [w14], w4
    24c8:	ce 4a 90    	mov.b     [w14+12], w5
    24ca:	25 4a 98    	mov.b     w5, [w4+10]

000024cc <.LSM41>:
    self->octselnum = octselnum;
    24cc:	1e 02 78    	mov.w     [w14], w4
    24ce:	fe 02 90    	mov.w     [w14+14], w5
    24d0:	65 02 98    	mov.w     w5, [w4+12]

000024d2 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    24d2:	1e 02 78    	mov.w     [w14], w4
    24d4:	ce ba 97    	mov.w     [w14-8], w5
    24d6:	75 02 98    	mov.w     w5, [w4+14]

000024d8 <.LSM43>:
    self->aftercount = 0;
    24d8:	1e 02 78    	mov.w     [w14], w4
    24da:	80 02 eb    	clr.w     w5
    24dc:	05 0a 98    	mov.w     w5, [w4+16]

000024de <.LSM44>:
    self->every = NULL;
    24de:	1e 02 78    	mov.w     [w14], w4
    24e0:	80 02 eb    	clr.w     w5
    24e2:	15 0a 98    	mov.w     w5, [w4+18]

000024e4 <.LSM45>:
    self->after = NULL;
    24e4:	1e 02 78    	mov.w     [w14], w4
    24e6:	80 02 eb    	clr.w     w5
    24e8:	25 0a 98    	mov.w     w5, [w4+20]

000024ea <.LSM46>:
}
    24ea:	00 80 fa    	ulnk      
    24ec:	00 00 06    	return    

000024ee <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    24ee:	06 00 fa    	lnk       #0x6
    24f0:	88 1f 78    	mov.w     w8, [w15++]
    24f2:	00 0f 78    	mov.w     w0, [w14]
    24f4:	12 07 98    	mov.w     w2, [w14+2]
    24f6:	23 07 98    	mov.w     w3, [w14+4]

000024f8 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    24f8:	18 c0 b3    	mov.b     #0x1, w8
    24fa:	d2 7b 23    	mov.w     #0x37bd, w2
    24fc:	63 f8 23    	mov.w     #0x3f86, w3
    24fe:	1e 00 90    	mov.w     [w14+2], w0
    2500:	ae 00 90    	mov.w     [w14+4], w1
    2502:	27 f7 07    	rcall     0x1352 <___gesf2>
    2504:	00 02 78    	mov.w     w0, w4
    2506:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2508:	01 00 3c    	bra       GT, 0x250c <.L14>
    250a:	00 44 eb    	clr.b     w8

0000250c <.L14>:
    250c:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    250e:	78 00 3a    	bra       NZ, 0x2600 <.L23>

00002510 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    2510:	18 c0 b3    	mov.b     #0x1, w8
    2512:	d2 7b 23    	mov.w     #0x37bd, w2
    2514:	63 e8 23    	mov.w     #0x3e86, w3
    2516:	1e 00 90    	mov.w     [w14+2], w0
    2518:	ae 00 90    	mov.w     [w14+4], w1
    251a:	1b f7 07    	rcall     0x1352 <___gesf2>
    251c:	00 02 78    	mov.w     w0, w4
    251e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2520:	01 00 3c    	bra       GT, 0x2524 <.L17>
    2522:	00 44 eb    	clr.b     w8

00002524 <.L17>:
    2524:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    2526:	15 00 32    	bra       Z, 0x2552 <.L18>

00002528 <.LSM50>:
        timer_stop(self);
    2528:	1e 00 78    	mov.w     [w14], w0
    252a:	e2 00 07    	rcall     0x26f0 <_timer_stop>

0000252c <.LSM51>:
        poke(self->TxCON, 0x0030);
    252c:	1e 02 78    	mov.w     [w14], w4
    252e:	14 02 78    	mov.w     [w4], w4
    2530:	05 03 20    	mov.w     #0x30, w5
    2532:	05 0a 78    	mov.w     w5, [w4]

00002534 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    2534:	1e 02 78    	mov.w     [w14], w4
    2536:	14 04 90    	mov.w     [w4+2], w8
    2538:	02 40 22    	mov.w     #0x2400, w2
    253a:	43 77 24    	mov.w     #0x4774, w3
    253c:	1e 00 90    	mov.w     [w14+2], w0
    253e:	ae 00 90    	mov.w     [w14+4], w1
    2540:	7a f7 07    	rcall     0x1436 <___mulsf3>
    2542:	00 02 be    	mov.d     w0, w4
    2544:	04 00 be    	mov.d     w4, w0
    2546:	07 f7 07    	rcall     0x1356 <___fixunssfsi>
    2548:	00 02 be    	mov.d     w0, w4
    254a:	04 02 78    	mov.w     w4, w4
    254c:	04 02 e9    	dec.w     w4, w4
    254e:	04 0c 78    	mov.w     w4, [w8]
    2550:	58 00 37    	bra       0x2602 <.L13>

00002552 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    2552:	18 c0 b3    	mov.b     #0x1, w8
    2554:	d2 7b 23    	mov.w     #0x37bd, w2
    2556:	63 d0 23    	mov.w     #0x3d06, w3
    2558:	1e 00 90    	mov.w     [w14+2], w0
    255a:	ae 00 90    	mov.w     [w14+4], w1
    255c:	fa f6 07    	rcall     0x1352 <___gesf2>
    255e:	00 02 78    	mov.w     w0, w4
    2560:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2562:	01 00 3c    	bra       GT, 0x2566 <.L19>
    2564:	00 44 eb    	clr.b     w8

00002566 <.L19>:
    2566:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    2568:	15 00 32    	bra       Z, 0x2594 <.L20>

0000256a <.LSM54>:
        timer_stop(self);
    256a:	1e 00 78    	mov.w     [w14], w0
    256c:	c1 00 07    	rcall     0x26f0 <_timer_stop>

0000256e <.LSM55>:
        poke(self->TxCON, 0x0020);
    256e:	1e 02 78    	mov.w     [w14], w4
    2570:	14 02 78    	mov.w     [w4], w4
    2572:	05 02 20    	mov.w     #0x20, w5
    2574:	05 0a 78    	mov.w     w5, [w4]

00002576 <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    2576:	1e 02 78    	mov.w     [w14], w4
    2578:	14 04 90    	mov.w     [w4+2], w8
    257a:	02 40 22    	mov.w     #0x2400, w2
    257c:	43 87 24    	mov.w     #0x4874, w3
    257e:	1e 00 90    	mov.w     [w14+2], w0
    2580:	ae 00 90    	mov.w     [w14+4], w1
    2582:	59 f7 07    	rcall     0x1436 <___mulsf3>
    2584:	00 02 be    	mov.d     w0, w4
    2586:	04 00 be    	mov.d     w4, w0
    2588:	e6 f6 07    	rcall     0x1356 <___fixunssfsi>
    258a:	00 02 be    	mov.d     w0, w4
    258c:	04 02 78    	mov.w     w4, w4
    258e:	04 02 e9    	dec.w     w4, w4
    2590:	04 0c 78    	mov.w     w4, [w8]
    2592:	37 00 37    	bra       0x2602 <.L13>

00002594 <.L20>:
    } else if (period>(65536.*TCY)) {
    2594:	18 c0 b3    	mov.b     #0x1, w8
    2596:	d2 7b 23    	mov.w     #0x37bd, w2
    2598:	63 b8 23    	mov.w     #0x3b86, w3
    259a:	1e 00 90    	mov.w     [w14+2], w0
    259c:	ae 00 90    	mov.w     [w14+4], w1
    259e:	d9 f6 07    	rcall     0x1352 <___gesf2>
    25a0:	00 02 78    	mov.w     w0, w4
    25a2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    25a4:	01 00 3c    	bra       GT, 0x25a8 <.L21>
    25a6:	00 44 eb    	clr.b     w8

000025a8 <.L21>:
    25a8:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    25aa:	15 00 32    	bra       Z, 0x25d6 <.L22>

000025ac <.LSM58>:
        timer_stop(self);
    25ac:	1e 00 78    	mov.w     [w14], w0
    25ae:	a0 00 07    	rcall     0x26f0 <_timer_stop>

000025b0 <.LSM59>:
        poke(self->TxCON, 0x0010);
    25b0:	1e 02 78    	mov.w     [w14], w4
    25b2:	14 02 78    	mov.w     [w4], w4
    25b4:	05 01 20    	mov.w     #0x10, w5
    25b6:	05 0a 78    	mov.w     w5, [w4]

000025b8 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    25b8:	1e 02 78    	mov.w     [w14], w4
    25ba:	14 04 90    	mov.w     [w4+2], w8
    25bc:	02 40 22    	mov.w     #0x2400, w2
    25be:	43 9f 24    	mov.w     #0x49f4, w3
    25c0:	1e 00 90    	mov.w     [w14+2], w0
    25c2:	ae 00 90    	mov.w     [w14+4], w1
    25c4:	38 f7 07    	rcall     0x1436 <___mulsf3>
    25c6:	00 02 be    	mov.d     w0, w4
    25c8:	04 00 be    	mov.d     w4, w0
    25ca:	c5 f6 07    	rcall     0x1356 <___fixunssfsi>
    25cc:	00 02 be    	mov.d     w0, w4
    25ce:	04 02 78    	mov.w     w4, w4
    25d0:	04 02 e9    	dec.w     w4, w4
    25d2:	04 0c 78    	mov.w     w4, [w8]
    25d4:	16 00 37    	bra       0x2602 <.L13>

000025d6 <.L22>:
    } else {
        timer_stop(self);
    25d6:	1e 00 78    	mov.w     [w14], w0
    25d8:	8b 00 07    	rcall     0x26f0 <_timer_stop>

000025da <.LSM62>:
        poke(self->TxCON, 0x0000);
    25da:	1e 02 78    	mov.w     [w14], w4
    25dc:	14 02 78    	mov.w     [w4], w4
    25de:	80 02 eb    	clr.w     w5
    25e0:	05 0a 78    	mov.w     w5, [w4]

000025e2 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    25e2:	1e 02 78    	mov.w     [w14], w4
    25e4:	14 04 90    	mov.w     [w4+2], w8
    25e6:	02 40 22    	mov.w     #0x2400, w2
    25e8:	43 b7 24    	mov.w     #0x4b74, w3
    25ea:	1e 00 90    	mov.w     [w14+2], w0
    25ec:	ae 00 90    	mov.w     [w14+4], w1
    25ee:	23 f7 07    	rcall     0x1436 <___mulsf3>
    25f0:	00 02 be    	mov.d     w0, w4
    25f2:	04 00 be    	mov.d     w4, w0
    25f4:	b0 f6 07    	rcall     0x1356 <___fixunssfsi>
    25f6:	00 02 be    	mov.d     w0, w4
    25f8:	04 02 78    	mov.w     w4, w4
    25fa:	04 02 e9    	dec.w     w4, w4
    25fc:	04 0c 78    	mov.w     w4, [w8]
    25fe:	01 00 37    	bra       0x2602 <.L13>

00002600 <.L23>:
    2600:	00 00 00    	nop       

00002602 <.L13>:
    }
}
    2602:	4f 04 78    	mov.w     [--w15], w8
    2604:	00 80 fa    	ulnk      
    2606:	00 00 06    	return    

00002608 <_timer_period>:

float timer_period(_TIMER *self) {
    2608:	04 00 fa    	lnk       #0x4
    260a:	88 9f be    	mov.d     w8, [w15++]
    260c:	10 07 98    	mov.w     w0, [w14+2]

0000260e <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    260e:	1e 02 90    	mov.w     [w14+2], w4
    2610:	14 02 78    	mov.w     [w4], w4
    2612:	94 02 78    	mov.w     [w4], w5
    2614:	04 03 20    	mov.w     #0x30, w4
    2616:	04 82 62    	and.w     w5, w4, w4
    2618:	44 22 de    	lsr.w     w4, #0x4, w4
    261a:	04 0f 78    	mov.w     w4, [w14]

0000261c <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    261c:	1e 02 78    	mov.w     [w14], w4
    261e:	c2 22 dd    	sl.w      w4, #0x2, w5
    2620:	84 c1 20    	mov.w     #0xc18, w4
    2622:	04 82 42    	add.w     w5, w4, w4
    2624:	14 04 be    	mov.d     [w4], w8
    2626:	1e 02 90    	mov.w     [w14+2], w4
    2628:	14 02 90    	mov.w     [w4+2], w4
    262a:	14 02 78    	mov.w     [w4], w4
    262c:	05 00 20    	mov.w     #0x0, w5
    262e:	04 00 be    	mov.d     w4, w0
    2630:	ad f6 07    	rcall     0x138c <___floatunsisf>
    2632:	00 02 be    	mov.d     w0, w4
    2634:	02 00 20    	mov.w     #0x0, w2
    2636:	03 f8 23    	mov.w     #0x3f80, w3
    2638:	04 00 be    	mov.d     w4, w0
    263a:	ea f5 07    	rcall     0x1210 <___addsf3>
    263c:	00 02 be    	mov.d     w0, w4
    263e:	04 01 be    	mov.d     w4, w2
    2640:	08 00 be    	mov.d     w8, w0
    2642:	f9 f6 07    	rcall     0x1436 <___mulsf3>
    2644:	00 02 be    	mov.d     w0, w4

00002646 <.LSM69>:
}
    2646:	04 00 be    	mov.d     w4, w0
    2648:	4f 04 be    	mov.d     [--w15], w8
    264a:	00 80 fa    	ulnk      
    264c:	00 00 06    	return    

0000264e <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    264e:	06 00 fa    	lnk       #0x6
    2650:	00 0f 78    	mov.w     w0, [w14]
    2652:	12 07 98    	mov.w     w2, [w14+2]
    2654:	23 07 98    	mov.w     w3, [w14+4]

00002656 <.LSM71>:
    timer_setPeriod(self, 1./freq);
    2656:	1e 01 90    	mov.w     [w14+2], w2
    2658:	ae 01 90    	mov.w     [w14+4], w3
    265a:	00 00 20    	mov.w     #0x0, w0
    265c:	01 f8 23    	mov.w     #0x3f80, w1
    265e:	35 f6 07    	rcall     0x12ca <___divsf3>
    2660:	00 02 be    	mov.d     w0, w4
    2662:	04 01 be    	mov.d     w4, w2
    2664:	1e 00 78    	mov.w     [w14], w0
    2666:	43 ff 07    	rcall     0x24ee <_timer_setPeriod>

00002668 <.LSM72>:
}
    2668:	00 80 fa    	ulnk      
    266a:	00 00 06    	return    

0000266c <_timer_freq>:

float timer_freq(_TIMER *self) {
    266c:	02 00 fa    	lnk       #0x2
    266e:	00 0f 78    	mov.w     w0, [w14]

00002670 <.LSM74>:
    return 1./timer_period(self);
    2670:	1e 00 78    	mov.w     [w14], w0
    2672:	ca ff 07    	rcall     0x2608 <_timer_period>
    2674:	00 02 be    	mov.d     w0, w4
    2676:	04 01 be    	mov.d     w4, w2
    2678:	00 00 20    	mov.w     #0x0, w0
    267a:	01 f8 23    	mov.w     #0x3f80, w1
    267c:	26 f6 07    	rcall     0x12ca <___divsf3>
    267e:	00 02 be    	mov.d     w0, w4

00002680 <.LSM75>:
}
    2680:	04 00 be    	mov.d     w4, w0
    2682:	00 80 fa    	ulnk      
    2684:	00 00 06    	return    

00002686 <_timer_time>:

float timer_time(_TIMER *self) {
    2686:	04 00 fa    	lnk       #0x4
    2688:	88 9f be    	mov.d     w8, [w15++]
    268a:	10 07 98    	mov.w     w0, [w14+2]

0000268c <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    268c:	1e 02 90    	mov.w     [w14+2], w4
    268e:	14 02 78    	mov.w     [w4], w4
    2690:	94 02 78    	mov.w     [w4], w5
    2692:	04 03 20    	mov.w     #0x30, w4
    2694:	04 82 62    	and.w     w5, w4, w4
    2696:	44 22 de    	lsr.w     w4, #0x4, w4
    2698:	04 0f 78    	mov.w     w4, [w14]

0000269a <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    269a:	1e 02 78    	mov.w     [w14], w4
    269c:	c2 22 dd    	sl.w      w4, #0x2, w5
    269e:	84 c1 20    	mov.w     #0xc18, w4
    26a0:	04 82 42    	add.w     w5, w4, w4
    26a2:	14 04 be    	mov.d     [w4], w8
    26a4:	1e 02 90    	mov.w     [w14+2], w4
    26a6:	14 02 90    	mov.w     [w4+2], w4
    26a8:	14 02 78    	mov.w     [w4], w4
    26aa:	05 00 20    	mov.w     #0x0, w5
    26ac:	04 00 be    	mov.d     w4, w0
    26ae:	6e f6 07    	rcall     0x138c <___floatunsisf>
    26b0:	00 02 be    	mov.d     w0, w4
    26b2:	02 00 20    	mov.w     #0x0, w2
    26b4:	03 f8 23    	mov.w     #0x3f80, w3
    26b6:	04 00 be    	mov.d     w4, w0
    26b8:	ab f5 07    	rcall     0x1210 <___addsf3>
    26ba:	00 02 be    	mov.d     w0, w4
    26bc:	04 01 be    	mov.d     w4, w2
    26be:	08 00 be    	mov.d     w8, w0
    26c0:	ba f6 07    	rcall     0x1436 <___mulsf3>
    26c2:	00 02 be    	mov.d     w0, w4

000026c4 <.LSM79>:
}
    26c4:	04 00 be    	mov.d     w4, w0
    26c6:	4f 04 be    	mov.d     [--w15], w8
    26c8:	00 80 fa    	ulnk      
    26ca:	00 00 06    	return    

000026cc <_timer_start>:

void timer_start(_TIMER *self) {
    26cc:	02 00 fa    	lnk       #0x2
    26ce:	00 0f 78    	mov.w     w0, [w14]

000026d0 <.LSM81>:
    timer_lower(self);
    26d0:	1e 00 78    	mov.w     [w14], w0
    26d2:	2c 00 07    	rcall     0x272c <_timer_lower>

000026d4 <.LSM82>:
    poke(self->TMRx, 0);
    26d4:	1e 02 78    	mov.w     [w14], w4
    26d6:	24 02 90    	mov.w     [w4+4], w4
    26d8:	80 02 eb    	clr.w     w5
    26da:	05 0a 78    	mov.w     w5, [w4]

000026dc <.LSM83>:
    bitset(self->TxCON, 15);
    26dc:	1e 02 78    	mov.w     [w14], w4
    26de:	14 02 78    	mov.w     [w4], w4
    26e0:	9e 02 78    	mov.w     [w14], w5
    26e2:	95 02 78    	mov.w     [w5], w5
    26e4:	15 03 78    	mov.w     [w5], w6
    26e6:	05 00 28    	mov.w     #0x8000, w5
    26e8:	86 82 72    	ior.w     w5, w6, w5
    26ea:	05 0a 78    	mov.w     w5, [w4]

000026ec <.LSM84>:
}
    26ec:	00 80 fa    	ulnk      
    26ee:	00 00 06    	return    

000026f0 <_timer_stop>:

void timer_stop(_TIMER *self) {
    26f0:	02 00 fa    	lnk       #0x2
    26f2:	00 0f 78    	mov.w     w0, [w14]

000026f4 <.LSM86>:
    bitclear(self->TxCON, 15);
    26f4:	1e 02 78    	mov.w     [w14], w4
    26f6:	14 02 78    	mov.w     [w4], w4
    26f8:	9e 02 78    	mov.w     [w14], w5
    26fa:	95 02 78    	mov.w     [w5], w5
    26fc:	15 03 78    	mov.w     [w5], w6
    26fe:	f5 ff 27    	mov.w     #0x7fff, w5
    2700:	85 02 63    	and.w     w6, w5, w5
    2702:	05 0a 78    	mov.w     w5, [w4]

00002704 <.LSM87>:
}
    2704:	00 80 fa    	ulnk      
    2706:	00 00 06    	return    

00002708 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    2708:	02 00 fa    	lnk       #0x2
    270a:	00 0f 78    	mov.w     w0, [w14]

0000270c <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    270c:	1e 02 78    	mov.w     [w14], w4
    270e:	34 02 90    	mov.w     [w4+6], w4
    2710:	94 02 78    	mov.w     [w4], w5
    2712:	1e 02 78    	mov.w     [w14], w4
    2714:	24 4a 90    	mov.b     [w4+10], w4
    2716:	04 82 fb    	ze        w4, w4
    2718:	16 00 20    	mov.w     #0x1, w6
    271a:	04 32 dd    	sl.w      w6, w4, w4
    271c:	04 82 62    	and.w     w5, w4, w4
    271e:	04 f0 a7    	btsc.w    w4, #0xf
    2720:	04 02 ea    	neg.w     w4, w4
    2722:	04 02 ea    	neg.w     w4, w4
    2724:	4f 22 de    	lsr.w     w4, #0xf, w4

00002726 <.LSM90>:
}
    2726:	04 00 78    	mov.w     w4, w0
    2728:	00 80 fa    	ulnk      
    272a:	00 00 06    	return    

0000272c <_timer_lower>:

void timer_lower(_TIMER *self) {
    272c:	02 00 fa    	lnk       #0x2
    272e:	00 0f 78    	mov.w     w0, [w14]

00002730 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    2730:	1e 02 78    	mov.w     [w14], w4
    2732:	34 02 90    	mov.w     [w4+6], w4
    2734:	9e 02 78    	mov.w     [w14], w5
    2736:	b5 02 90    	mov.w     [w5+6], w5
    2738:	15 03 78    	mov.w     [w5], w6
    273a:	9e 02 78    	mov.w     [w14], w5
    273c:	a5 4a 90    	mov.b     [w5+10], w5
    273e:	85 82 fb    	ze        w5, w5
    2740:	17 00 20    	mov.w     #0x1, w7
    2742:	85 3a dd    	sl.w      w7, w5, w5
    2744:	85 82 ea    	com.w     w5, w5
    2746:	85 02 63    	and.w     w6, w5, w5
    2748:	05 0a 78    	mov.w     w5, [w4]

0000274a <.LSM93>:
}
    274a:	00 80 fa    	ulnk      
    274c:	00 00 06    	return    

0000274e <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    274e:	02 00 fa    	lnk       #0x2
    2750:	00 0f 78    	mov.w     w0, [w14]

00002752 <.LSM95>:
    return peek(self->TMRx);
    2752:	1e 02 78    	mov.w     [w14], w4
    2754:	24 02 90    	mov.w     [w4+4], w4
    2756:	14 02 78    	mov.w     [w4], w4

00002758 <.LSM96>:
}
    2758:	04 00 78    	mov.w     w4, w0
    275a:	00 80 fa    	ulnk      
    275c:	00 00 06    	return    

0000275e <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    275e:	02 00 fa    	lnk       #0x2
    2760:	00 0f 78    	mov.w     w0, [w14]

00002762 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    2762:	1e 02 78    	mov.w     [w14], w4
    2764:	44 02 90    	mov.w     [w4+8], w4
    2766:	9e 02 78    	mov.w     [w14], w5
    2768:	c5 02 90    	mov.w     [w5+8], w5
    276a:	15 03 78    	mov.w     [w5], w6
    276c:	9e 02 78    	mov.w     [w14], w5
    276e:	a5 4a 90    	mov.b     [w5+10], w5
    2770:	85 82 fb    	ze        w5, w5
    2772:	17 00 20    	mov.w     #0x1, w7
    2774:	85 3a dd    	sl.w      w7, w5, w5
    2776:	86 82 72    	ior.w     w5, w6, w5
    2778:	05 0a 78    	mov.w     w5, [w4]

0000277a <.LSM99>:
}
    277a:	00 80 fa    	ulnk      
    277c:	00 00 06    	return    

0000277e <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    277e:	02 00 fa    	lnk       #0x2
    2780:	00 0f 78    	mov.w     w0, [w14]

00002782 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    2782:	1e 02 78    	mov.w     [w14], w4
    2784:	44 02 90    	mov.w     [w4+8], w4
    2786:	9e 02 78    	mov.w     [w14], w5
    2788:	c5 02 90    	mov.w     [w5+8], w5
    278a:	15 03 78    	mov.w     [w5], w6
    278c:	9e 02 78    	mov.w     [w14], w5
    278e:	a5 4a 90    	mov.b     [w5+10], w5
    2790:	85 82 fb    	ze        w5, w5
    2792:	17 00 20    	mov.w     #0x1, w7
    2794:	85 3a dd    	sl.w      w7, w5, w5
    2796:	85 82 ea    	com.w     w5, w5
    2798:	85 02 63    	and.w     w6, w5, w5
    279a:	05 0a 78    	mov.w     w5, [w4]

0000279c <.LSM102>:
}
    279c:	00 80 fa    	ulnk      
    279e:	00 00 06    	return    

000027a0 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    27a0:	08 00 fa    	lnk       #0x8
    27a2:	00 0f 78    	mov.w     w0, [w14]
    27a4:	12 07 98    	mov.w     w2, [w14+2]
    27a6:	23 07 98    	mov.w     w3, [w14+4]
    27a8:	31 07 98    	mov.w     w1, [w14+6]

000027aa <.LSM104>:
    timer_disableInterrupt(self);
    27aa:	1e 00 78    	mov.w     [w14], w0
    27ac:	e8 ff 07    	rcall     0x277e <_timer_disableInterrupt>

000027ae <.LSM105>:
    timer_setPeriod(self, interval);
    27ae:	1e 01 90    	mov.w     [w14+2], w2
    27b0:	ae 01 90    	mov.w     [w14+4], w3
    27b2:	1e 00 78    	mov.w     [w14], w0
    27b4:	9c fe 07    	rcall     0x24ee <_timer_setPeriod>

000027b6 <.LSM106>:
    self->aftercount = 0;
    27b6:	1e 02 78    	mov.w     [w14], w4
    27b8:	80 02 eb    	clr.w     w5
    27ba:	05 0a 98    	mov.w     w5, [w4+16]

000027bc <.LSM107>:
    self->every = callback;
    27bc:	1e 02 78    	mov.w     [w14], w4
    27be:	be 02 90    	mov.w     [w14+6], w5
    27c0:	15 0a 98    	mov.w     w5, [w4+18]

000027c2 <.LSM108>:
    self->after = NULL;
    27c2:	1e 02 78    	mov.w     [w14], w4
    27c4:	80 02 eb    	clr.w     w5
    27c6:	25 0a 98    	mov.w     w5, [w4+20]

000027c8 <.LSM109>:
    timer_enableInterrupt(self);
    27c8:	1e 00 78    	mov.w     [w14], w0
    27ca:	c9 ff 07    	rcall     0x275e <_timer_enableInterrupt>

000027cc <.LSM110>:
    timer_start(self);
    27cc:	1e 00 78    	mov.w     [w14], w0
    27ce:	7e ff 07    	rcall     0x26cc <_timer_start>

000027d0 <.LSM111>:
}
    27d0:	00 80 fa    	ulnk      
    27d2:	00 00 06    	return    

000027d4 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    27d4:	0a 00 fa    	lnk       #0xa
    27d6:	00 0f 78    	mov.w     w0, [w14]
    27d8:	12 07 98    	mov.w     w2, [w14+2]
    27da:	23 07 98    	mov.w     w3, [w14+4]
    27dc:	31 07 98    	mov.w     w1, [w14+6]
    27de:	44 07 98    	mov.w     w4, [w14+8]

000027e0 <.LSM113>:
    timer_disableInterrupt(self);
    27e0:	1e 00 78    	mov.w     [w14], w0
    27e2:	cd ff 07    	rcall     0x277e <_timer_disableInterrupt>

000027e4 <.LSM114>:
    timer_setPeriod(self, delay);
    27e4:	1e 01 90    	mov.w     [w14+2], w2
    27e6:	ae 01 90    	mov.w     [w14+4], w3
    27e8:	1e 00 78    	mov.w     [w14], w0
    27ea:	81 fe 07    	rcall     0x24ee <_timer_setPeriod>

000027ec <.LSM115>:
    self->aftercount = num_times;
    27ec:	1e 02 78    	mov.w     [w14], w4
    27ee:	be 02 90    	mov.w     [w14+6], w5
    27f0:	05 0a 98    	mov.w     w5, [w4+16]

000027f2 <.LSM116>:
    self->every = NULL;
    27f2:	1e 02 78    	mov.w     [w14], w4
    27f4:	80 02 eb    	clr.w     w5
    27f6:	15 0a 98    	mov.w     w5, [w4+18]

000027f8 <.LSM117>:
    self->after = callback;
    27f8:	1e 02 78    	mov.w     [w14], w4
    27fa:	ce 02 90    	mov.w     [w14+8], w5
    27fc:	25 0a 98    	mov.w     w5, [w4+20]

000027fe <.LSM118>:
    timer_enableInterrupt(self);
    27fe:	1e 00 78    	mov.w     [w14], w0
    2800:	ae ff 07    	rcall     0x275e <_timer_enableInterrupt>

00002802 <.LSM119>:
    timer_start(self);
    2802:	1e 00 78    	mov.w     [w14], w0
    2804:	63 ff 07    	rcall     0x26cc <_timer_start>

00002806 <.LSM120>:
}
    2806:	00 80 fa    	ulnk      
    2808:	00 00 06    	return    

0000280a <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    280a:	02 00 fa    	lnk       #0x2
    280c:	00 0f 78    	mov.w     w0, [w14]

0000280e <.LSM122>:
    timer_disableInterrupt(self);
    280e:	1e 00 78    	mov.w     [w14], w0
    2810:	b6 ff 07    	rcall     0x277e <_timer_disableInterrupt>

00002812 <.LSM123>:
    timer_lower(self);
    2812:	1e 00 78    	mov.w     [w14], w0
    2814:	8b ff 07    	rcall     0x272c <_timer_lower>

00002816 <.LSM124>:
    timer_stop(self);
    2816:	1e 00 78    	mov.w     [w14], w0
    2818:	6b ff 07    	rcall     0x26f0 <_timer_stop>

0000281a <.LSM125>:
    self->aftercount = 0;
    281a:	1e 02 78    	mov.w     [w14], w4
    281c:	80 02 eb    	clr.w     w5
    281e:	05 0a 98    	mov.w     w5, [w4+16]

00002820 <.LSM126>:
    self->every = NULL;
    2820:	1e 02 78    	mov.w     [w14], w4
    2822:	80 02 eb    	clr.w     w5
    2824:	15 0a 98    	mov.w     w5, [w4+18]

00002826 <.LSM127>:
    self->after = NULL;
    2826:	1e 02 78    	mov.w     [w14], w4
    2828:	80 02 eb    	clr.w     w5
    282a:	25 0a 98    	mov.w     w5, [w4+20]

0000282c <.LSM128>:
}
    282c:	00 80 fa    	ulnk      
    282e:	00 00 06    	return    

00002830 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    2830:	08 00 fa    	lnk       #0x8
    2832:	30 07 98    	mov.w     w0, [w14+6]

00002834 <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2834:	3e 02 90    	mov.w     [w14+6], w4
    2836:	04 0a 90    	mov.w     [w4+16], w4
    2838:	04 0f 78    	mov.w     w4, [w14]

0000283a <.LSM2>:
    temp.w[0] = 0;
    283a:	00 02 eb    	clr.w     w4
    283c:	14 07 98    	mov.w     w4, [w14+2]

0000283e <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    283e:	1e 02 78    	mov.w     [w14], w4
    2840:	34 02 90    	mov.w     [w4+6], w4
    2842:	14 02 78    	mov.w     [w4], w4
    2844:	24 07 98    	mov.w     w4, [w14+4]

00002846 <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    2846:	1e 03 90    	mov.w     [w14+2], w6
    2848:	ae 03 90    	mov.w     [w14+4], w7
    284a:	1e 02 78    	mov.w     [w14], w4
    284c:	24 02 90    	mov.w     [w4+4], w4
    284e:	14 02 78    	mov.w     [w4], w4
    2850:	05 00 20    	mov.w     #0x0, w5
    2852:	04 01 be    	mov.d     w4, w2
    2854:	06 00 be    	mov.d     w6, w0
    2856:	23 f6 07    	rcall     0x149e <___udivsi3>
    2858:	00 02 be    	mov.d     w0, w4
    285a:	04 02 78    	mov.w     w4, w4

0000285c <.LSM5>:
}
    285c:	04 00 78    	mov.w     w4, w0
    285e:	00 80 fa    	ulnk      
    2860:	00 00 06    	return    

00002862 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    2862:	0a 00 fa    	lnk       #0xa
    2864:	30 07 98    	mov.w     w0, [w14+6]
    2866:	41 07 98    	mov.w     w1, [w14+8]

00002868 <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2868:	3e 02 90    	mov.w     [w14+6], w4
    286a:	04 0a 90    	mov.w     [w4+16], w4
    286c:	04 0f 78    	mov.w     w4, [w14]

0000286e <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    286e:	4e 02 90    	mov.w     [w14+8], w4
    2870:	61 23 b8    	mul.uu    w4, #0x1, w6
    2872:	1e 02 78    	mov.w     [w14], w4
    2874:	24 02 90    	mov.w     [w4+4], w4
    2876:	14 02 78    	mov.w     [w4], w4
    2878:	05 00 20    	mov.w     #0x0, w5
    287a:	04 b8 b9    	mul.ss    w7, w4, w0
    287c:	00 00 78    	mov.w     w0, w0
    287e:	06 a9 b9    	mul.ss    w5, w6, w2
    2880:	82 00 78    	mov.w     w2, w1
    2882:	01 00 40    	add.w     w0, w1, w0
    2884:	06 03 78    	mov.w     w6, w6
    2886:	04 02 78    	mov.w     w4, w4
    2888:	04 32 b8    	mul.uu    w6, w4, w4
    288a:	05 00 40    	add.w     w0, w5, w0
    288c:	80 02 78    	mov.w     w0, w5
    288e:	14 07 98    	mov.w     w4, [w14+2]
    2890:	25 07 98    	mov.w     w5, [w14+4]

00002892 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    2892:	1e 02 78    	mov.w     [w14], w4
    2894:	34 02 90    	mov.w     [w4+6], w4
    2896:	ae 02 90    	mov.w     [w14+4], w5
    2898:	05 0a 78    	mov.w     w5, [w4]

0000289a <.LSM10>:
}
    289a:	00 80 fa    	ulnk      
    289c:	00 00 06    	return    

0000289e <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    289e:	08 00 fa    	lnk       #0x8
    28a0:	30 07 98    	mov.w     w0, [w14+6]

000028a2 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    28a2:	3e 02 90    	mov.w     [w14+6], w4
    28a4:	04 0a 90    	mov.w     [w4+16], w4
    28a6:	04 0f 78    	mov.w     w4, [w14]

000028a8 <.LSM13>:
    temp.w[0] = 0;
    28a8:	00 02 eb    	clr.w     w4
    28aa:	14 07 98    	mov.w     w4, [w14+2]

000028ac <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    28ac:	1e 02 78    	mov.w     [w14], w4
    28ae:	24 02 90    	mov.w     [w4+4], w4
    28b0:	94 02 78    	mov.w     [w4], w5
    28b2:	1e 02 78    	mov.w     [w14], w4
    28b4:	64 02 90    	mov.w     [w4+12], w4
    28b6:	04 82 52    	sub.w     w5, w4, w4
    28b8:	24 07 98    	mov.w     w4, [w14+4]

000028ba <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    28ba:	1e 03 90    	mov.w     [w14+2], w6
    28bc:	ae 03 90    	mov.w     [w14+4], w7
    28be:	1e 02 78    	mov.w     [w14], w4
    28c0:	74 02 90    	mov.w     [w4+14], w4
    28c2:	05 00 20    	mov.w     #0x0, w5
    28c4:	04 01 be    	mov.d     w4, w2
    28c6:	06 00 be    	mov.d     w6, w0
    28c8:	ea f5 07    	rcall     0x149e <___udivsi3>
    28ca:	00 02 be    	mov.d     w0, w4
    28cc:	04 02 78    	mov.w     w4, w4

000028ce <.LSM16>:
}
    28ce:	04 00 78    	mov.w     w4, w0
    28d0:	00 80 fa    	ulnk      
    28d2:	00 00 06    	return    

000028d4 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    28d4:	0a 00 fa    	lnk       #0xa
    28d6:	30 07 98    	mov.w     w0, [w14+6]
    28d8:	41 07 98    	mov.w     w1, [w14+8]

000028da <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    28da:	3e 02 90    	mov.w     [w14+6], w4
    28dc:	04 0a 90    	mov.w     [w4+16], w4
    28de:	04 0f 78    	mov.w     w4, [w14]

000028e0 <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    28e0:	4e 02 90    	mov.w     [w14+8], w4
    28e2:	61 23 b8    	mul.uu    w4, #0x1, w6
    28e4:	1e 02 78    	mov.w     [w14], w4
    28e6:	74 02 90    	mov.w     [w4+14], w4
    28e8:	05 00 20    	mov.w     #0x0, w5
    28ea:	04 b8 b9    	mul.ss    w7, w4, w0
    28ec:	00 00 78    	mov.w     w0, w0
    28ee:	06 a9 b9    	mul.ss    w5, w6, w2
    28f0:	82 00 78    	mov.w     w2, w1
    28f2:	01 00 40    	add.w     w0, w1, w0
    28f4:	06 03 78    	mov.w     w6, w6
    28f6:	04 02 78    	mov.w     w4, w4
    28f8:	04 32 b8    	mul.uu    w6, w4, w4
    28fa:	05 00 40    	add.w     w0, w5, w0
    28fc:	80 02 78    	mov.w     w0, w5
    28fe:	14 07 98    	mov.w     w4, [w14+2]
    2900:	25 07 98    	mov.w     w5, [w14+4]

00002902 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    2902:	1e 02 78    	mov.w     [w14], w4
    2904:	24 02 90    	mov.w     [w4+4], w4
    2906:	9e 02 78    	mov.w     [w14], w5
    2908:	65 03 90    	mov.w     [w5+12], w6
    290a:	ae 02 90    	mov.w     [w14+4], w5
    290c:	85 02 43    	add.w     w6, w5, w5
    290e:	05 0a 78    	mov.w     w5, [w4]

00002910 <.LSM21>:
}
    2910:	00 80 fa    	ulnk      
    2912:	00 00 06    	return    

00002914 <_init_oc>:

void init_oc(void) {
    2914:	00 00 fa    	lnk       #0x0

00002916 <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    2916:	26 01 20    	mov.w     #0x12, w6
    2918:	85 19 20    	mov.w     #0x198, w5
    291a:	64 19 20    	mov.w     #0x196, w4
    291c:	43 19 20    	mov.w     #0x194, w3
    291e:	22 19 20    	mov.w     #0x192, w2
    2920:	01 19 20    	mov.w     #0x190, w1
    2922:	80 ad 20    	mov.w     #0xad8, w0
    2924:	42 00 07    	rcall     0x29aa <_oc_init>

00002926 <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    2926:	36 01 20    	mov.w     #0x13, w6
    2928:	25 1a 20    	mov.w     #0x1a2, w5
    292a:	04 1a 20    	mov.w     #0x1a0, w4
    292c:	e3 19 20    	mov.w     #0x19e, w3
    292e:	c2 19 20    	mov.w     #0x19c, w2
    2930:	a1 19 20    	mov.w     #0x19a, w1
    2932:	a0 ae 20    	mov.w     #0xaea, w0
    2934:	3a 00 07    	rcall     0x29aa <_oc_init>

00002936 <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    2936:	46 01 20    	mov.w     #0x14, w6
    2938:	c5 1a 20    	mov.w     #0x1ac, w5
    293a:	a4 1a 20    	mov.w     #0x1aa, w4
    293c:	83 1a 20    	mov.w     #0x1a8, w3
    293e:	62 1a 20    	mov.w     #0x1a6, w2
    2940:	41 1a 20    	mov.w     #0x1a4, w1
    2942:	c0 af 20    	mov.w     #0xafc, w0
    2944:	32 00 07    	rcall     0x29aa <_oc_init>

00002946 <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    2946:	56 01 20    	mov.w     #0x15, w6
    2948:	65 1b 20    	mov.w     #0x1b6, w5
    294a:	44 1b 20    	mov.w     #0x1b4, w4
    294c:	23 1b 20    	mov.w     #0x1b2, w3
    294e:	02 1b 20    	mov.w     #0x1b0, w2
    2950:	e1 1a 20    	mov.w     #0x1ae, w1
    2952:	e0 b0 20    	mov.w     #0xb0e, w0
    2954:	2a 00 07    	rcall     0x29aa <_oc_init>

00002956 <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    2956:	66 01 20    	mov.w     #0x16, w6
    2958:	05 1c 20    	mov.w     #0x1c0, w5
    295a:	e4 1b 20    	mov.w     #0x1be, w4
    295c:	c3 1b 20    	mov.w     #0x1bc, w3
    295e:	a2 1b 20    	mov.w     #0x1ba, w2
    2960:	81 1b 20    	mov.w     #0x1b8, w1
    2962:	00 b2 20    	mov.w     #0xb20, w0
    2964:	22 00 07    	rcall     0x29aa <_oc_init>

00002966 <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    2966:	76 01 20    	mov.w     #0x17, w6
    2968:	a5 1c 20    	mov.w     #0x1ca, w5
    296a:	84 1c 20    	mov.w     #0x1c8, w4
    296c:	63 1c 20    	mov.w     #0x1c6, w3
    296e:	42 1c 20    	mov.w     #0x1c4, w2
    2970:	21 1c 20    	mov.w     #0x1c2, w1
    2972:	20 b3 20    	mov.w     #0xb32, w0
    2974:	1a 00 07    	rcall     0x29aa <_oc_init>

00002976 <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    2976:	86 01 20    	mov.w     #0x18, w6
    2978:	45 1d 20    	mov.w     #0x1d4, w5
    297a:	24 1d 20    	mov.w     #0x1d2, w4
    297c:	03 1d 20    	mov.w     #0x1d0, w3
    297e:	e2 1c 20    	mov.w     #0x1ce, w2
    2980:	c1 1c 20    	mov.w     #0x1cc, w1
    2982:	40 b4 20    	mov.w     #0xb44, w0
    2984:	12 00 07    	rcall     0x29aa <_oc_init>

00002986 <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    2986:	96 01 20    	mov.w     #0x19, w6
    2988:	e5 1d 20    	mov.w     #0x1de, w5
    298a:	c4 1d 20    	mov.w     #0x1dc, w4
    298c:	a3 1d 20    	mov.w     #0x1da, w3
    298e:	82 1d 20    	mov.w     #0x1d8, w2
    2990:	61 1d 20    	mov.w     #0x1d6, w1
    2992:	60 b5 20    	mov.w     #0xb56, w0
    2994:	0a 00 07    	rcall     0x29aa <_oc_init>

00002996 <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    2996:	36 02 20    	mov.w     #0x23, w6
    2998:	85 1e 20    	mov.w     #0x1e8, w5
    299a:	64 1e 20    	mov.w     #0x1e6, w4
    299c:	43 1e 20    	mov.w     #0x1e4, w3
    299e:	22 1e 20    	mov.w     #0x1e2, w2
    29a0:	01 1e 20    	mov.w     #0x1e0, w1
    29a2:	80 b6 20    	mov.w     #0xb68, w0
    29a4:	02 00 07    	rcall     0x29aa <_oc_init>

000029a6 <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    29a6:	00 80 fa    	ulnk      
    29a8:	00 00 06    	return    

000029aa <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    29aa:	0e 00 fa    	lnk       #0xe
    29ac:	00 0f 78    	mov.w     w0, [w14]
    29ae:	11 07 98    	mov.w     w1, [w14+2]
    29b0:	22 07 98    	mov.w     w2, [w14+4]
    29b2:	33 07 98    	mov.w     w3, [w14+6]
    29b4:	44 07 98    	mov.w     w4, [w14+8]
    29b6:	55 07 98    	mov.w     w5, [w14+10]
    29b8:	66 07 98    	mov.w     w6, [w14+12]

000029ba <.LSM34>:
    self->OCxCON1 = OCxCON1;
    29ba:	1e 02 78    	mov.w     [w14], w4
    29bc:	9e 02 90    	mov.w     [w14+2], w5
    29be:	05 0a 78    	mov.w     w5, [w4]

000029c0 <.LSM35>:
    self->OCxCON2 = OCxCON2;
    29c0:	1e 02 78    	mov.w     [w14], w4
    29c2:	ae 02 90    	mov.w     [w14+4], w5
    29c4:	15 02 98    	mov.w     w5, [w4+2]

000029c6 <.LSM36>:
    self->OCxRS = OCxRS;
    29c6:	1e 02 78    	mov.w     [w14], w4
    29c8:	be 02 90    	mov.w     [w14+6], w5
    29ca:	25 02 98    	mov.w     w5, [w4+4]

000029cc <.LSM37>:
    self->OCxR = OCxR;
    29cc:	1e 02 78    	mov.w     [w14], w4
    29ce:	ce 02 90    	mov.w     [w14+8], w5
    29d0:	35 02 98    	mov.w     w5, [w4+6]

000029d2 <.LSM38>:
    self->OCxTMR = OCxTMR;
    29d2:	1e 02 78    	mov.w     [w14], w4
    29d4:	de 02 90    	mov.w     [w14+10], w5
    29d6:	45 02 98    	mov.w     w5, [w4+8]

000029d8 <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    29d8:	1e 02 78    	mov.w     [w14], w4
    29da:	05 e8 23    	mov.w     #0x3e80, w5
    29dc:	65 02 98    	mov.w     w5, [w4+12]

000029de <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    29de:	1e 02 78    	mov.w     [w14], w4
    29e0:	05 e8 23    	mov.w     #0x3e80, w5
    29e2:	75 02 98    	mov.w     w5, [w4+14]

000029e4 <.LSM41>:
    self->rpnum = rpnum;
    29e4:	1e 02 78    	mov.w     [w14], w4
    29e6:	ee 02 90    	mov.w     [w14+12], w5
    29e8:	55 02 98    	mov.w     w5, [w4+10]

000029ea <.LSM42>:
    self->pin = NULL;
    29ea:	1e 02 78    	mov.w     [w14], w4
    29ec:	80 02 eb    	clr.w     w5
    29ee:	05 0a 98    	mov.w     w5, [w4+16]

000029f0 <.LSM43>:
}
    29f0:	00 80 fa    	ulnk      
    29f2:	00 00 06    	return    

000029f4 <_oc_free>:

void oc_free(_OC *self) {
    29f4:	02 00 fa    	lnk       #0x2
    29f6:	00 0f 78    	mov.w     w0, [w14]

000029f8 <.LSM45>:
    *(self->OCxCON1) = 0;
    29f8:	1e 02 78    	mov.w     [w14], w4
    29fa:	14 02 78    	mov.w     [w4], w4
    29fc:	80 02 eb    	clr.w     w5
    29fe:	05 0a 78    	mov.w     w5, [w4]

00002a00 <.LSM46>:
    *(self->OCxCON2) = 0;
    2a00:	1e 02 78    	mov.w     [w14], w4
    2a02:	14 02 90    	mov.w     [w4+2], w4
    2a04:	80 02 eb    	clr.w     w5
    2a06:	05 0a 78    	mov.w     w5, [w4]

00002a08 <.LSM47>:
    if (self->pin) {
    2a08:	1e 02 78    	mov.w     [w14], w4
    2a0a:	04 0a 90    	mov.w     [w4+16], w4
    2a0c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2a0e:	31 00 32    	bra       Z, 0x2a72 <.L7>

00002a10 <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2a10:	15 3a 80    	mov.w     0x742, w5
    2a12:	f4 0b 20    	mov.w     #0xbf, w4
    2a14:	04 83 62    	and.w     w5, w4, w6
    2a16:	64 04 20    	mov.w     #0x46, w4
    2a18:	75 05 20    	mov.w     #0x57, w5
    2a1a:	27 74 20    	mov.w     #0x742, w7
    2a1c:	84 4b 78    	mov.b     w4, [w7]
    2a1e:	85 4b 78    	mov.b     w5, [w7]
    2a20:	86 4b 78    	mov.b     w6, [w7]

00002a22 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    2a22:	1e 02 78    	mov.w     [w14], w4
    2a24:	04 0a 90    	mov.w     [w4+16], w4
    2a26:	74 02 90    	mov.w     [w4+14], w4
    2a28:	9e 02 78    	mov.w     [w14], w5
    2a2a:	85 0a 90    	mov.w     [w5+16], w5
    2a2c:	f5 02 90    	mov.w     [w5+14], w5
    2a2e:	15 03 78    	mov.w     [w5], w6
    2a30:	9e 02 78    	mov.w     [w14], w5
    2a32:	85 0a 90    	mov.w     [w5+16], w5
    2a34:	a5 4a 90    	mov.b     [w5+10], w5
    2a36:	85 82 fb    	ze        w5, w5
    2a38:	f7 03 20    	mov.w     #0x3f, w7
    2a3a:	85 3a dd    	sl.w      w7, w5, w5
    2a3c:	85 82 ea    	com.w     w5, w5
    2a3e:	85 02 63    	and.w     w6, w5, w5
    2a40:	05 0a 78    	mov.w     w5, [w4]

00002a42 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2a42:	15 3a 80    	mov.w     0x742, w5
    2a44:	04 04 20    	mov.w     #0x40, w4
    2a46:	05 03 72    	ior.w     w4, w5, w6
    2a48:	64 04 20    	mov.w     #0x46, w4
    2a4a:	75 05 20    	mov.w     #0x57, w5
    2a4c:	27 74 20    	mov.w     #0x742, w7
    2a4e:	84 4b 78    	mov.b     w4, [w7]
    2a50:	85 4b 78    	mov.b     w5, [w7]
    2a52:	86 4b 78    	mov.b     w6, [w7]

00002a54 <.LSM51>:
        self->pin->owner = NULL;
    2a54:	1e 02 78    	mov.w     [w14], w4
    2a56:	04 0a 90    	mov.w     [w4+16], w4
    2a58:	80 02 eb    	clr.w     w5
    2a5a:	05 0a 98    	mov.w     w5, [w4+16]

00002a5c <.LSM52>:
        pin_digitalOut(self->pin);
    2a5c:	1e 02 78    	mov.w     [w14], w4
    2a5e:	04 0a 90    	mov.w     [w4+16], w4
    2a60:	04 00 78    	mov.w     w4, w0
    2a62:	10 03 07    	rcall     0x3084 <_pin_digitalOut>

00002a64 <.LSM53>:
        pin_clear(self->pin);
    2a64:	1e 02 78    	mov.w     [w14], w4
    2a66:	04 0a 90    	mov.w     [w4+16], w4
    2a68:	04 00 78    	mov.w     w4, w0
    2a6a:	7e 03 07    	rcall     0x3168 <_pin_clear>

00002a6c <.LSM54>:
        self->pin = NULL;
    2a6c:	1e 02 78    	mov.w     [w14], w4
    2a6e:	80 02 eb    	clr.w     w5
    2a70:	05 0a 98    	mov.w     w5, [w4+16]

00002a72 <.L7>:
    }
}
    2a72:	00 80 fa    	ulnk      
    2a74:	00 00 06    	return    

00002a76 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    2a76:	10 00 fa    	lnk       #0x10
    2a78:	88 1f 78    	mov.w     w8, [w15++]
    2a7a:	20 07 98    	mov.w     w0, [w14+4]
    2a7c:	31 07 98    	mov.w     w1, [w14+6]
    2a7e:	42 07 98    	mov.w     w2, [w14+8]
    2a80:	54 07 98    	mov.w     w4, [w14+10]
    2a82:	65 07 98    	mov.w     w5, [w14+12]
    2a84:	73 07 98    	mov.w     w3, [w14+14]

00002a86 <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    2a86:	3e 02 90    	mov.w     [w14+6], w4
    2a88:	64 02 90    	mov.w     [w4+12], w4
    2a8a:	e1 0f 42    	add.w     w4, #0x1, [w15]
    2a8c:	a4 00 32    	bra       Z, 0x2bd6 <.L18>

00002a8e <.LSM58>:
        return;
    if (pin->owner==NULL) {
    2a8e:	3e 02 90    	mov.w     [w14+6], w4
    2a90:	04 0a 90    	mov.w     [w4+16], w4
    2a92:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2a94:	33 00 3a    	bra       NZ, 0x2afc <.L12>

00002a96 <.LSM59>:
        self->pin = pin;
    2a96:	2e 02 90    	mov.w     [w14+4], w4
    2a98:	be 02 90    	mov.w     [w14+6], w5
    2a9a:	05 0a 98    	mov.w     w5, [w4+16]

00002a9c <.LSM60>:
        pin->owner = (void *)self;
    2a9c:	3e 02 90    	mov.w     [w14+6], w4
    2a9e:	ae 02 90    	mov.w     [w14+4], w5
    2aa0:	05 0a 98    	mov.w     w5, [w4+16]

00002aa2 <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2aa2:	15 3a 80    	mov.w     0x742, w5
    2aa4:	f4 0b 20    	mov.w     #0xbf, w4
    2aa6:	04 83 62    	and.w     w5, w4, w6
    2aa8:	64 04 20    	mov.w     #0x46, w4
    2aaa:	75 05 20    	mov.w     #0x57, w5
    2aac:	27 74 20    	mov.w     #0x742, w7
    2aae:	84 4b 78    	mov.b     w4, [w7]
    2ab0:	85 4b 78    	mov.b     w5, [w7]
    2ab2:	86 4b 78    	mov.b     w6, [w7]

00002ab4 <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    2ab4:	3e 02 90    	mov.w     [w14+6], w4
    2ab6:	74 02 90    	mov.w     [w4+14], w4
    2ab8:	be 02 90    	mov.w     [w14+6], w5
    2aba:	f5 02 90    	mov.w     [w5+14], w5
    2abc:	15 03 78    	mov.w     [w5], w6
    2abe:	be 02 90    	mov.w     [w14+6], w5
    2ac0:	a5 4a 90    	mov.b     [w5+10], w5
    2ac2:	85 82 fb    	ze        w5, w5
    2ac4:	f7 03 20    	mov.w     #0x3f, w7
    2ac6:	85 3a dd    	sl.w      w7, w5, w5
    2ac8:	85 82 ea    	com.w     w5, w5
    2aca:	85 02 63    	and.w     w6, w5, w5
    2acc:	05 0a 78    	mov.w     w5, [w4]

00002ace <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    2ace:	3e 02 90    	mov.w     [w14+6], w4
    2ad0:	74 02 90    	mov.w     [w4+14], w4
    2ad2:	be 02 90    	mov.w     [w14+6], w5
    2ad4:	f5 02 90    	mov.w     [w5+14], w5
    2ad6:	15 03 78    	mov.w     [w5], w6
    2ad8:	ae 02 90    	mov.w     [w14+4], w5
    2ada:	d5 03 90    	mov.w     [w5+10], w7
    2adc:	be 02 90    	mov.w     [w14+6], w5
    2ade:	a5 4a 90    	mov.b     [w5+10], w5
    2ae0:	85 82 fb    	ze        w5, w5
    2ae2:	85 3a dd    	sl.w      w7, w5, w5
    2ae4:	86 82 72    	ior.w     w5, w6, w5
    2ae6:	05 0a 78    	mov.w     w5, [w4]

00002ae8 <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ae8:	15 3a 80    	mov.w     0x742, w5
    2aea:	04 04 20    	mov.w     #0x40, w4
    2aec:	05 03 72    	ior.w     w4, w5, w6
    2aee:	64 04 20    	mov.w     #0x46, w4
    2af0:	75 05 20    	mov.w     #0x57, w5
    2af2:	27 74 20    	mov.w     #0x742, w7
    2af4:	84 4b 78    	mov.b     w4, [w7]
    2af6:	85 4b 78    	mov.b     w5, [w7]
    2af8:	86 4b 78    	mov.b     w6, [w7]
    2afa:	05 00 37    	bra       0x2b06 <.L13>

00002afc <.L12>:
    } else if (pin->owner!=(void *)self) {
    2afc:	3e 02 90    	mov.w     [w14+6], w4
    2afe:	84 0a 90    	mov.w     [w4+16], w5
    2b00:	2e 02 90    	mov.w     [w14+4], w4
    2b02:	84 8f 52    	sub.w     w5, w4, [w15]
    2b04:	6a 00 3a    	bra       NZ, 0x2bda <.L19>

00002b06 <.L13>:
        return;
    }
    if (timer) {
    2b06:	4e 02 90    	mov.w     [w14+8], w4
    2b08:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2b0a:	1c 00 32    	bra       Z, 0x2b44 <.L14>

00002b0c <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    2b0c:	2e 02 90    	mov.w     [w14+4], w4
    2b0e:	14 02 78    	mov.w     [w4], w4
    2b10:	ce 02 90    	mov.w     [w14+8], w5
    2b12:	e5 02 90    	mov.w     [w5+12], w5
    2b14:	ca 2a dd    	sl.w      w5, #0xa, w5
    2b16:	65 00 b3    	ior.w     #0x6, w5
    2b18:	05 0a 78    	mov.w     w5, [w4]

00002b1a <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    2b1a:	2e 02 90    	mov.w     [w14+4], w4
    2b1c:	14 02 90    	mov.w     [w4+2], w4
    2b1e:	f5 01 20    	mov.w     #0x1f, w5
    2b20:	05 0a 78    	mov.w     w5, [w4]

00002b22 <.LSM69>:
        timer_setFreq(timer, freq);
    2b22:	5e 01 90    	mov.w     [w14+10], w2
    2b24:	ee 01 90    	mov.w     [w14+12], w3
    2b26:	4e 00 90    	mov.w     [w14+8], w0
    2b28:	92 fd 07    	rcall     0x264e <_timer_setFreq>

00002b2a <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    2b2a:	2e 02 90    	mov.w     [w14+4], w4
    2b2c:	24 02 90    	mov.w     [w4+4], w4
    2b2e:	ce 02 90    	mov.w     [w14+8], w5
    2b30:	95 02 90    	mov.w     [w5+2], w5
    2b32:	95 02 78    	mov.w     [w5], w5
    2b34:	05 0a 78    	mov.w     w5, [w4]

00002b36 <.LSM71>:
        *(self->OCxTMR) = 0;
    2b36:	2e 02 90    	mov.w     [w14+4], w4
    2b38:	44 02 90    	mov.w     [w4+8], w4
    2b3a:	80 02 eb    	clr.w     w5
    2b3c:	05 0a 78    	mov.w     w5, [w4]

00002b3e <.LSM72>:
        timer_start(timer);
    2b3e:	4e 00 90    	mov.w     [w14+8], w0
    2b40:	c5 fd 07    	rcall     0x26cc <_timer_start>
    2b42:	2b 00 37    	bra       0x2b9a <.L15>

00002b44 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    2b44:	2e 02 90    	mov.w     [w14+4], w4
    2b46:	14 02 78    	mov.w     [w4], w4
    2b48:	65 c0 21    	mov.w     #0x1c06, w5
    2b4a:	05 0a 78    	mov.w     w5, [w4]

00002b4c <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    2b4c:	2e 02 90    	mov.w     [w14+4], w4
    2b4e:	14 02 90    	mov.w     [w4+2], w4
    2b50:	f5 01 20    	mov.w     #0x1f, w5
    2b52:	05 0a 78    	mov.w     w5, [w4]

00002b54 <.LSM75>:
        if (freq<(FCY/65536.))
    2b54:	18 c0 b3    	mov.b     #0x1, w8
    2b56:	02 40 22    	mov.w     #0x2400, w2
    2b58:	43 37 24    	mov.w     #0x4374, w3
    2b5a:	5e 00 90    	mov.w     [w14+10], w0
    2b5c:	ee 00 90    	mov.w     [w14+12], w1
    2b5e:	f7 f3 07    	rcall     0x134e <___eqsf2>
    2b60:	00 02 78    	mov.w     w0, w4
    2b62:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2b64:	01 00 35    	bra       LT, 0x2b68 <.L16>
    2b66:	00 44 eb    	clr.b     w8

00002b68 <.L16>:
    2b68:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    2b6a:	05 00 32    	bra       Z, 0x2b76 <.L17>

00002b6c <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    2b6c:	2e 02 90    	mov.w     [w14+4], w4
    2b6e:	24 02 90    	mov.w     [w4+4], w4
    2b70:	80 82 eb    	setm.w    w5
    2b72:	05 0a 78    	mov.w     w5, [w4]
    2b74:	12 00 37    	bra       0x2b9a <.L15>

00002b76 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    2b76:	2e 02 90    	mov.w     [w14+4], w4
    2b78:	24 04 90    	mov.w     [w4+4], w8
    2b7a:	5e 01 90    	mov.w     [w14+10], w2
    2b7c:	ee 01 90    	mov.w     [w14+12], w3
    2b7e:	00 40 22    	mov.w     #0x2400, w0
    2b80:	41 b7 24    	mov.w     #0x4b74, w1
    2b82:	a3 f3 07    	rcall     0x12ca <___divsf3>
    2b84:	00 02 be    	mov.d     w0, w4
    2b86:	02 00 20    	mov.w     #0x0, w2
    2b88:	03 f8 23    	mov.w     #0x3f80, w3
    2b8a:	04 00 be    	mov.d     w4, w0
    2b8c:	40 f3 07    	rcall     0x120e <___subsf3>
    2b8e:	00 02 be    	mov.d     w0, w4
    2b90:	04 00 be    	mov.d     w4, w0
    2b92:	e1 f3 07    	rcall     0x1356 <___fixunssfsi>
    2b94:	00 02 be    	mov.d     w0, w4
    2b96:	04 02 78    	mov.w     w4, w4
    2b98:	04 0c 78    	mov.w     w4, [w8]

00002b9a <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    2b9a:	7e 02 90    	mov.w     [w14+14], w4
    2b9c:	61 23 b8    	mul.uu    w4, #0x1, w6
    2b9e:	2e 02 90    	mov.w     [w14+4], w4
    2ba0:	24 02 90    	mov.w     [w4+4], w4
    2ba2:	14 02 78    	mov.w     [w4], w4
    2ba4:	05 00 20    	mov.w     #0x0, w5
    2ba6:	04 b8 b9    	mul.ss    w7, w4, w0
    2ba8:	00 00 78    	mov.w     w0, w0
    2baa:	06 a9 b9    	mul.ss    w5, w6, w2
    2bac:	82 00 78    	mov.w     w2, w1
    2bae:	01 00 40    	add.w     w0, w1, w0
    2bb0:	06 03 78    	mov.w     w6, w6
    2bb2:	04 02 78    	mov.w     w4, w4
    2bb4:	04 32 b8    	mul.uu    w6, w4, w4
    2bb6:	05 00 40    	add.w     w0, w5, w0
    2bb8:	80 02 78    	mov.w     w0, w5
    2bba:	04 8f be    	mov.d     w4, [w14]

00002bbc <.LSM79>:
    *(self->OCxR) = temp.w[1];
    2bbc:	2e 02 90    	mov.w     [w14+4], w4
    2bbe:	34 02 90    	mov.w     [w4+6], w4
    2bc0:	9e 02 90    	mov.w     [w14+2], w5
    2bc2:	05 0a 78    	mov.w     w5, [w4]

00002bc4 <.LSM80>:
    self->pin->write = __pwmWrite;
    2bc4:	2e 02 90    	mov.w     [w14+4], w4
    2bc6:	04 0a 90    	mov.w     [w4+16], w4
    2bc8:	25 86 22    	mov.w     #0x2862, w5
    2bca:	15 0a 98    	mov.w     w5, [w4+18]

00002bcc <.LSM81>:
    self->pin->read = __pwmRead;
    2bcc:	2e 02 90    	mov.w     [w14+4], w4
    2bce:	04 0a 90    	mov.w     [w4+16], w4
    2bd0:	05 83 22    	mov.w     #0x2830, w5
    2bd2:	25 0a 98    	mov.w     w5, [w4+20]
    2bd4:	03 00 37    	bra       0x2bdc <.L9>

00002bd6 <.L18>:
    2bd6:	00 00 00    	nop       
    2bd8:	01 00 37    	bra       0x2bdc <.L9>

00002bda <.L19>:
    2bda:	00 00 00    	nop       

00002bdc <.L9>:
}
    2bdc:	4f 04 78    	mov.w     [--w15], w8
    2bde:	00 80 fa    	ulnk      
    2be0:	00 00 06    	return    

00002be2 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    2be2:	14 00 fa    	lnk       #0x14
    2be4:	20 07 98    	mov.w     w0, [w14+4]
    2be6:	31 07 98    	mov.w     w1, [w14+6]
    2be8:	42 07 98    	mov.w     w2, [w14+8]
    2bea:	54 07 98    	mov.w     w4, [w14+10]
    2bec:	65 07 98    	mov.w     w5, [w14+12]
    2bee:	76 07 98    	mov.w     w6, [w14+14]
    2bf0:	07 0f 98    	mov.w     w7, [w14+16]
    2bf2:	13 0f 98    	mov.w     w3, [w14+18]

00002bf4 <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    2bf4:	3e 02 90    	mov.w     [w14+6], w4
    2bf6:	64 02 90    	mov.w     [w4+12], w4
    2bf8:	e1 0f 42    	add.w     w4, #0x1, [w15]
    2bfa:	91 00 32    	bra       Z, 0x2d1e <.L25>

00002bfc <.LSM87>:
        return;
    if (pin->owner==NULL) {
    2bfc:	3e 02 90    	mov.w     [w14+6], w4
    2bfe:	04 0a 90    	mov.w     [w4+16], w4
    2c00:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2c02:	33 00 3a    	bra       NZ, 0x2c6a <.L23>

00002c04 <.LSM88>:
        self->pin = pin;
    2c04:	2e 02 90    	mov.w     [w14+4], w4
    2c06:	be 02 90    	mov.w     [w14+6], w5
    2c08:	05 0a 98    	mov.w     w5, [w4+16]

00002c0a <.LSM89>:
        pin->owner = (void *)self;
    2c0a:	3e 02 90    	mov.w     [w14+6], w4
    2c0c:	ae 02 90    	mov.w     [w14+4], w5
    2c0e:	05 0a 98    	mov.w     w5, [w4+16]

00002c10 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2c10:	15 3a 80    	mov.w     0x742, w5
    2c12:	f4 0b 20    	mov.w     #0xbf, w4
    2c14:	04 83 62    	and.w     w5, w4, w6
    2c16:	64 04 20    	mov.w     #0x46, w4
    2c18:	75 05 20    	mov.w     #0x57, w5
    2c1a:	27 74 20    	mov.w     #0x742, w7
    2c1c:	84 4b 78    	mov.b     w4, [w7]
    2c1e:	85 4b 78    	mov.b     w5, [w7]
    2c20:	86 4b 78    	mov.b     w6, [w7]

00002c22 <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    2c22:	3e 02 90    	mov.w     [w14+6], w4
    2c24:	74 02 90    	mov.w     [w4+14], w4
    2c26:	be 02 90    	mov.w     [w14+6], w5
    2c28:	f5 02 90    	mov.w     [w5+14], w5
    2c2a:	15 03 78    	mov.w     [w5], w6
    2c2c:	be 02 90    	mov.w     [w14+6], w5
    2c2e:	a5 4a 90    	mov.b     [w5+10], w5
    2c30:	85 82 fb    	ze        w5, w5
    2c32:	f7 03 20    	mov.w     #0x3f, w7
    2c34:	85 3a dd    	sl.w      w7, w5, w5
    2c36:	85 82 ea    	com.w     w5, w5
    2c38:	85 02 63    	and.w     w6, w5, w5
    2c3a:	05 0a 78    	mov.w     w5, [w4]

00002c3c <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    2c3c:	3e 02 90    	mov.w     [w14+6], w4
    2c3e:	74 02 90    	mov.w     [w4+14], w4
    2c40:	be 02 90    	mov.w     [w14+6], w5
    2c42:	f5 02 90    	mov.w     [w5+14], w5
    2c44:	15 03 78    	mov.w     [w5], w6
    2c46:	ae 02 90    	mov.w     [w14+4], w5
    2c48:	d5 03 90    	mov.w     [w5+10], w7
    2c4a:	be 02 90    	mov.w     [w14+6], w5
    2c4c:	a5 4a 90    	mov.b     [w5+10], w5
    2c4e:	85 82 fb    	ze        w5, w5
    2c50:	85 3a dd    	sl.w      w7, w5, w5
    2c52:	86 82 72    	ior.w     w5, w6, w5
    2c54:	05 0a 78    	mov.w     w5, [w4]

00002c56 <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c56:	15 3a 80    	mov.w     0x742, w5
    2c58:	04 04 20    	mov.w     #0x40, w4
    2c5a:	05 03 72    	ior.w     w4, w5, w6
    2c5c:	64 04 20    	mov.w     #0x46, w4
    2c5e:	75 05 20    	mov.w     #0x57, w5
    2c60:	27 74 20    	mov.w     #0x742, w7
    2c62:	84 4b 78    	mov.b     w4, [w7]
    2c64:	85 4b 78    	mov.b     w5, [w7]
    2c66:	86 4b 78    	mov.b     w6, [w7]
    2c68:	05 00 37    	bra       0x2c74 <.L24>

00002c6a <.L23>:
    } else if (pin->owner!=(void *)self) {
    2c6a:	3e 02 90    	mov.w     [w14+6], w4
    2c6c:	84 0a 90    	mov.w     [w4+16], w5
    2c6e:	2e 02 90    	mov.w     [w14+4], w4
    2c70:	84 8f 52    	sub.w     w5, w4, [w15]
    2c72:	57 00 3a    	bra       NZ, 0x2d22 <.L26>

00002c74 <.L24>:
        return;
    }
    if (timer) {
    2c74:	4e 02 90    	mov.w     [w14+8], w4
    2c76:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2c78:	55 00 32    	bra       Z, 0x2d24 <.L20>

00002c7a <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    2c7a:	02 40 22    	mov.w     #0x2400, w2
    2c7c:	43 b7 24    	mov.w     #0x4b74, w3
    2c7e:	7e 00 90    	mov.w     [w14+14], w0
    2c80:	8e 08 90    	mov.w     [w14+16], w1
    2c82:	d9 f3 07    	rcall     0x1436 <___mulsf3>
    2c84:	00 02 be    	mov.d     w0, w4
    2c86:	04 00 be    	mov.d     w4, w0
    2c88:	66 f3 07    	rcall     0x1356 <___fixunssfsi>
    2c8a:	00 02 be    	mov.d     w0, w4
    2c8c:	84 02 78    	mov.w     w4, w5
    2c8e:	2e 02 90    	mov.w     [w14+4], w4
    2c90:	65 02 98    	mov.w     w5, [w4+12]

00002c92 <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    2c92:	7e 01 90    	mov.w     [w14+14], w2
    2c94:	8e 09 90    	mov.w     [w14+16], w3
    2c96:	3e b8 97    	mov.w     [w14-10], w0
    2c98:	ce b8 97    	mov.w     [w14-8], w1
    2c9a:	b9 f2 07    	rcall     0x120e <___subsf3>
    2c9c:	00 02 be    	mov.d     w0, w4
    2c9e:	02 40 22    	mov.w     #0x2400, w2
    2ca0:	43 b7 24    	mov.w     #0x4b74, w3
    2ca2:	04 00 be    	mov.d     w4, w0
    2ca4:	c8 f3 07    	rcall     0x1436 <___mulsf3>
    2ca6:	00 02 be    	mov.d     w0, w4
    2ca8:	04 00 be    	mov.d     w4, w0
    2caa:	55 f3 07    	rcall     0x1356 <___fixunssfsi>
    2cac:	00 02 be    	mov.d     w0, w4
    2cae:	84 02 78    	mov.w     w4, w5
    2cb0:	2e 02 90    	mov.w     [w14+4], w4
    2cb2:	75 02 98    	mov.w     w5, [w4+14]

00002cb4 <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    2cb4:	2e 02 90    	mov.w     [w14+4], w4
    2cb6:	14 02 78    	mov.w     [w4], w4
    2cb8:	f5 c0 21    	mov.w     #0x1c0f, w5
    2cba:	05 0a 78    	mov.w     w5, [w4]

00002cbc <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    2cbc:	2e 02 90    	mov.w     [w14+4], w4
    2cbe:	14 02 90    	mov.w     [w4+2], w4
    2cc0:	ce 02 90    	mov.w     [w14+8], w5
    2cc2:	75 03 90    	mov.w     [w5+14], w6
    2cc4:	05 08 20    	mov.w     #0x80, w5
    2cc6:	86 82 72    	ior.w     w5, w6, w5
    2cc8:	05 0a 78    	mov.w     w5, [w4]

00002cca <.LSM100>:
        *(self->OCxR) = 1;
    2cca:	2e 02 90    	mov.w     [w14+4], w4
    2ccc:	34 02 90    	mov.w     [w4+6], w4
    2cce:	15 00 20    	mov.w     #0x1, w5
    2cd0:	05 0a 78    	mov.w     w5, [w4]

00002cd2 <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    2cd2:	1e 0a 90    	mov.w     [w14+18], w4
    2cd4:	61 23 b8    	mul.uu    w4, #0x1, w6
    2cd6:	2e 02 90    	mov.w     [w14+4], w4
    2cd8:	74 02 90    	mov.w     [w4+14], w4
    2cda:	05 00 20    	mov.w     #0x0, w5
    2cdc:	04 b8 b9    	mul.ss    w7, w4, w0
    2cde:	00 00 78    	mov.w     w0, w0
    2ce0:	06 a9 b9    	mul.ss    w5, w6, w2
    2ce2:	82 00 78    	mov.w     w2, w1
    2ce4:	01 00 40    	add.w     w0, w1, w0
    2ce6:	06 03 78    	mov.w     w6, w6
    2ce8:	04 02 78    	mov.w     w4, w4
    2cea:	04 32 b8    	mul.uu    w6, w4, w4
    2cec:	05 00 40    	add.w     w0, w5, w0
    2cee:	80 02 78    	mov.w     w0, w5
    2cf0:	04 8f be    	mov.d     w4, [w14]

00002cf2 <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    2cf2:	2e 02 90    	mov.w     [w14+4], w4
    2cf4:	24 02 90    	mov.w     [w4+4], w4
    2cf6:	ae 02 90    	mov.w     [w14+4], w5
    2cf8:	65 03 90    	mov.w     [w5+12], w6
    2cfa:	9e 02 90    	mov.w     [w14+2], w5
    2cfc:	85 02 43    	add.w     w6, w5, w5
    2cfe:	05 0a 78    	mov.w     w5, [w4]

00002d00 <.LSM103>:
        timer_setPeriod(timer, interval);
    2d00:	5e 01 90    	mov.w     [w14+10], w2
    2d02:	ee 01 90    	mov.w     [w14+12], w3
    2d04:	4e 00 90    	mov.w     [w14+8], w0
    2d06:	f3 fb 07    	rcall     0x24ee <_timer_setPeriod>

00002d08 <.LSM104>:
        timer_start(timer);
    2d08:	4e 00 90    	mov.w     [w14+8], w0
    2d0a:	e0 fc 07    	rcall     0x26cc <_timer_start>

00002d0c <.LSM105>:
        self->pin->write = __servoWrite;
    2d0c:	2e 02 90    	mov.w     [w14+4], w4
    2d0e:	04 0a 90    	mov.w     [w4+16], w4
    2d10:	45 8d 22    	mov.w     #0x28d4, w5
    2d12:	15 0a 98    	mov.w     w5, [w4+18]

00002d14 <.LSM106>:
        self->pin->read = __servoRead;
    2d14:	2e 02 90    	mov.w     [w14+4], w4
    2d16:	04 0a 90    	mov.w     [w4+16], w4
    2d18:	e5 89 22    	mov.w     #0x289e, w5
    2d1a:	25 0a 98    	mov.w     w5, [w4+20]
    2d1c:	03 00 37    	bra       0x2d24 <.L20>

00002d1e <.L25>:
    2d1e:	00 00 00    	nop       
    2d20:	01 00 37    	bra       0x2d24 <.L20>

00002d22 <.L26>:
    2d22:	00 00 00    	nop       

00002d24 <.L20>:
    }
}
    2d24:	00 80 fa    	ulnk      
    2d26:	00 00 06    	return    

00002d28 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    2d28:	04 00 fa    	lnk       #0x4
    2d2a:	00 0f 78    	mov.w     w0, [w14]
    2d2c:	11 07 98    	mov.w     w1, [w14+2]

00002d2e <.LSM1>:
    if (val)
    2d2e:	1e 02 90    	mov.w     [w14+2], w4
    2d30:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2d32:	0d 00 32    	bra       Z, 0x2d4e <.L2>

00002d34 <.LSM2>:
        bitset(self->port, self->bit);
    2d34:	1e 02 78    	mov.w     [w14], w4
    2d36:	14 02 78    	mov.w     [w4], w4
    2d38:	9e 02 78    	mov.w     [w14], w5
    2d3a:	95 02 78    	mov.w     [w5], w5
    2d3c:	15 03 78    	mov.w     [w5], w6
    2d3e:	9e 02 78    	mov.w     [w14], w5
    2d40:	e5 42 90    	mov.b     [w5+6], w5
    2d42:	85 82 fb    	ze        w5, w5
    2d44:	17 00 20    	mov.w     #0x1, w7
    2d46:	85 3a dd    	sl.w      w7, w5, w5
    2d48:	86 82 72    	ior.w     w5, w6, w5
    2d4a:	05 0a 78    	mov.w     w5, [w4]
    2d4c:	0d 00 37    	bra       0x2d68 <.L1>

00002d4e <.L2>:
    else
        bitclear(self->port, self->bit);
    2d4e:	1e 02 78    	mov.w     [w14], w4
    2d50:	14 02 78    	mov.w     [w4], w4
    2d52:	9e 02 78    	mov.w     [w14], w5
    2d54:	95 02 78    	mov.w     [w5], w5
    2d56:	15 03 78    	mov.w     [w5], w6
    2d58:	9e 02 78    	mov.w     [w14], w5
    2d5a:	e5 42 90    	mov.b     [w5+6], w5
    2d5c:	85 82 fb    	ze        w5, w5
    2d5e:	17 00 20    	mov.w     #0x1, w7
    2d60:	85 3a dd    	sl.w      w7, w5, w5
    2d62:	85 82 ea    	com.w     w5, w5
    2d64:	85 02 63    	and.w     w6, w5, w5
    2d66:	05 0a 78    	mov.w     w5, [w4]

00002d68 <.L1>:
}
    2d68:	00 80 fa    	ulnk      
    2d6a:	00 00 06    	return    

00002d6c <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    2d6c:	02 00 fa    	lnk       #0x2
    2d6e:	00 0f 78    	mov.w     w0, [w14]

00002d70 <.LSM6>:
    return bitread(self->port, self->bit);
    2d70:	1e 02 78    	mov.w     [w14], w4
    2d72:	14 02 78    	mov.w     [w4], w4
    2d74:	94 02 78    	mov.w     [w4], w5
    2d76:	1e 02 78    	mov.w     [w14], w4
    2d78:	64 42 90    	mov.b     [w4+6], w4
    2d7a:	04 82 fb    	ze        w4, w4
    2d7c:	16 00 20    	mov.w     #0x1, w6
    2d7e:	04 32 dd    	sl.w      w6, w4, w4
    2d80:	04 82 62    	and.w     w5, w4, w4
    2d82:	04 f0 a7    	btsc.w    w4, #0xf
    2d84:	04 02 ea    	neg.w     w4, w4
    2d86:	04 02 ea    	neg.w     w4, w4
    2d88:	4f 22 de    	lsr.w     w4, #0xf, w4

00002d8a <.LSM7>:
}
    2d8a:	04 00 78    	mov.w     w4, w0
    2d8c:	00 80 fa    	ulnk      
    2d8e:	00 00 06    	return    

00002d90 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    2d90:	02 00 fa    	lnk       #0x2
    2d92:	00 0f 78    	mov.w     w0, [w14]

00002d94 <.LSM9>:
    AD1CHS = self->annum;
    2d94:	1e 02 78    	mov.w     [w14], w4
    2d96:	44 02 90    	mov.w     [w4+8], w4
    2d98:	44 19 88    	mov.w     w4, 0x328

00002d9a <.LSM10>:
    AD1CON1bits.SAMP = 1;
    2d9a:	20 23 a8    	bset.b    0x320, #0x1

00002d9c <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    2d9c:	00 00 00    	nop       

00002d9e <.L6>:
    2d9e:	04 19 80    	mov.w     0x320, w4
    2da0:	61 02 62    	and.w     w4, #0x1, w4
    2da2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2da4:	fc ff 32    	bra       Z, 0x2d9e <.L6>

00002da6 <.LSM12>:
    return ADC1BUF0;
    2da6:	04 18 80    	mov.w     0x300, w4

00002da8 <.LSM13>:
}
    2da8:	04 00 78    	mov.w     w4, w0
    2daa:	00 80 fa    	ulnk      
    2dac:	00 00 06    	return    

00002dae <_init_pin>:

void init_pin(void) {
    2dae:	02 00 fa    	lnk       #0x2

00002db0 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2db0:	44 6d 20    	mov.w     #0x6d4, w4
    2db2:	84 1f 78    	mov.w     w4, [w15++]
    2db4:	47 01 20    	mov.w     #0x14, w7
    2db6:	00 43 eb    	clr.b     w6
    2db8:	80 82 eb    	setm.w    w5
    2dba:	54 c0 b3    	mov.b     #0x5, w4
    2dbc:	80 01 eb    	clr.w     w3
    2dbe:	82 2d 20    	mov.w     #0x2d8, w2
    2dc0:	a1 2d 20    	mov.w     #0x2da, w1
    2dc2:	00 80 20    	mov.w     #0x800, w0
    2dc4:	0c 01 07    	rcall     0x2fde <_pin_init>
    2dc6:	8f 87 e9    	dec2.w    w15, w15

00002dc8 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2dc8:	84 6d 20    	mov.w     #0x6d8, w4
    2dca:	84 1f 78    	mov.w     w4, [w15++]
    2dcc:	97 01 20    	mov.w     #0x19, w7
    2dce:	86 c0 b3    	mov.b     #0x8, w6
    2dd0:	80 82 eb    	setm.w    w5
    2dd2:	44 c0 b3    	mov.b     #0x4, w4
    2dd4:	80 01 eb    	clr.w     w3
    2dd6:	82 2d 20    	mov.w     #0x2d8, w2
    2dd8:	a1 2d 20    	mov.w     #0x2da, w1
    2dda:	60 81 20    	mov.w     #0x816, w0
    2ddc:	00 01 07    	rcall     0x2fde <_pin_init>
    2dde:	8f 87 e9    	dec2.w    w15, w15

00002de0 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2de0:	a4 6c 20    	mov.w     #0x6ca, w4
    2de2:	84 1f 78    	mov.w     w4, [w15++]
    2de4:	a7 00 20    	mov.w     #0xa, w7
    2de6:	00 43 eb    	clr.b     w6
    2de8:	80 82 eb    	setm.w    w5
    2dea:	44 c0 b3    	mov.b     #0x4, w4
    2dec:	80 01 eb    	clr.w     w3
    2dee:	82 2e 20    	mov.w     #0x2e8, w2
    2df0:	a1 2e 20    	mov.w     #0x2ea, w1
    2df2:	c0 82 20    	mov.w     #0x82c, w0
    2df4:	f4 00 07    	rcall     0x2fde <_pin_init>
    2df6:	8f 87 e9    	dec2.w    w15, w15

00002df8 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2df8:	04 6d 20    	mov.w     #0x6d0, w4
    2dfa:	84 1f 78    	mov.w     w4, [w15++]
    2dfc:	17 01 20    	mov.w     #0x11, w7
    2dfe:	86 c0 b3    	mov.b     #0x8, w6
    2e00:	80 82 eb    	setm.w    w5
    2e02:	54 c0 b3    	mov.b     #0x5, w4
    2e04:	80 01 eb    	clr.w     w3
    2e06:	82 2e 20    	mov.w     #0x2e8, w2
    2e08:	a1 2e 20    	mov.w     #0x2ea, w1
    2e0a:	20 84 20    	mov.w     #0x842, w0
    2e0c:	e8 00 07    	rcall     0x2fde <_pin_init>
    2e0e:	8f 87 e9    	dec2.w    w15, w15

00002e10 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2e10:	c4 6d 20    	mov.w     #0x6dc, w4
    2e12:	84 1f 78    	mov.w     w4, [w15++]
    2e14:	d7 01 20    	mov.w     #0x1d, w7
    2e16:	86 c0 b3    	mov.b     #0x8, w6
    2e18:	f5 00 20    	mov.w     #0xf, w5
    2e1a:	f4 c0 b3    	mov.b     #0xf, w4
    2e1c:	23 4e 20    	mov.w     #0x4e2, w3
    2e1e:	82 2c 20    	mov.w     #0x2c8, w2
    2e20:	a1 2c 20    	mov.w     #0x2ca, w1
    2e22:	80 85 20    	mov.w     #0x858, w0
    2e24:	dc 00 07    	rcall     0x2fde <_pin_init>
    2e26:	8f 87 e9    	dec2.w    w15, w15

00002e28 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2e28:	04 6d 20    	mov.w     #0x6d0, w4
    2e2a:	84 1f 78    	mov.w     w4, [w15++]
    2e2c:	07 01 20    	mov.w     #0x10, w7
    2e2e:	00 43 eb    	clr.b     w6
    2e30:	80 82 eb    	setm.w    w5
    2e32:	34 c0 b3    	mov.b     #0x3, w4
    2e34:	80 01 eb    	clr.w     w3
    2e36:	82 2e 20    	mov.w     #0x2e8, w2
    2e38:	a1 2e 20    	mov.w     #0x2ea, w1
    2e3a:	e0 86 20    	mov.w     #0x86e, w0
    2e3c:	d0 00 07    	rcall     0x2fde <_pin_init>
    2e3e:	8f 87 e9    	dec2.w    w15, w15

00002e40 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e40:	24 6c 20    	mov.w     #0x6c2, w4
    2e42:	84 1f 78    	mov.w     w4, [w15++]
    2e44:	27 00 20    	mov.w     #0x2, w7
    2e46:	00 43 eb    	clr.b     w6
    2e48:	80 82 eb    	setm.w    w5
    2e4a:	84 c0 b3    	mov.b     #0x8, w4
    2e4c:	80 01 eb    	clr.w     w3
    2e4e:	82 2d 20    	mov.w     #0x2d8, w2
    2e50:	a1 2d 20    	mov.w     #0x2da, w1
    2e52:	40 88 20    	mov.w     #0x884, w0
    2e54:	c4 00 07    	rcall     0x2fde <_pin_init>
    2e56:	8f 87 e9    	dec2.w    w15, w15

00002e58 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e58:	c4 6c 20    	mov.w     #0x6cc, w4
    2e5a:	84 1f 78    	mov.w     w4, [w15++]
    2e5c:	c7 00 20    	mov.w     #0xc, w7
    2e5e:	00 43 eb    	clr.b     w6
    2e60:	80 82 eb    	setm.w    w5
    2e62:	b4 c0 b3    	mov.b     #0xb, w4
    2e64:	80 01 eb    	clr.w     w3
    2e66:	82 2d 20    	mov.w     #0x2d8, w2
    2e68:	a1 2d 20    	mov.w     #0x2da, w1
    2e6a:	a0 89 20    	mov.w     #0x89a, w0
    2e6c:	b8 00 07    	rcall     0x2fde <_pin_init>
    2e6e:	8f 87 e9    	dec2.w    w15, w15

00002e70 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e70:	44 6c 20    	mov.w     #0x6c4, w4
    2e72:	84 1f 78    	mov.w     w4, [w15++]
    2e74:	47 00 20    	mov.w     #0x4, w7
    2e76:	00 43 eb    	clr.b     w6
    2e78:	80 82 eb    	setm.w    w5
    2e7a:	94 c0 b3    	mov.b     #0x9, w4
    2e7c:	80 01 eb    	clr.w     w3
    2e7e:	82 2d 20    	mov.w     #0x2d8, w2
    2e80:	a1 2d 20    	mov.w     #0x2da, w1
    2e82:	00 8b 20    	mov.w     #0x8b0, w0
    2e84:	ac 00 07    	rcall     0x2fde <_pin_init>
    2e86:	8f 87 e9    	dec2.w    w15, w15

00002e88 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2e88:	24 6c 20    	mov.w     #0x6c2, w4
    2e8a:	84 1f 78    	mov.w     w4, [w15++]
    2e8c:	37 00 20    	mov.w     #0x3, w7
    2e8e:	86 c0 b3    	mov.b     #0x8, w6
    2e90:	80 82 eb    	setm.w    w5
    2e92:	a4 c0 b3    	mov.b     #0xa, w4
    2e94:	80 01 eb    	clr.w     w3
    2e96:	82 2d 20    	mov.w     #0x2d8, w2
    2e98:	a1 2d 20    	mov.w     #0x2da, w1
    2e9a:	60 8c 20    	mov.w     #0x8c6, w0
    2e9c:	a0 00 07    	rcall     0x2fde <_pin_init>
    2e9e:	8f 87 e9    	dec2.w    w15, w15

00002ea0 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2ea0:	a4 6c 20    	mov.w     #0x6ca, w4
    2ea2:	84 1f 78    	mov.w     w4, [w15++]
    2ea4:	b7 00 20    	mov.w     #0xb, w7
    2ea6:	86 c0 b3    	mov.b     #0x8, w6
    2ea8:	80 82 eb    	setm.w    w5
    2eaa:	00 42 eb    	clr.b     w4
    2eac:	80 01 eb    	clr.w     w3
    2eae:	82 2d 20    	mov.w     #0x2d8, w2
    2eb0:	a1 2d 20    	mov.w     #0x2da, w1
    2eb2:	c0 8d 20    	mov.w     #0x8dc, w0
    2eb4:	94 00 07    	rcall     0x2fde <_pin_init>
    2eb6:	8f 87 e9    	dec2.w    w15, w15

00002eb8 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2eb8:	84 6d 20    	mov.w     #0x6d8, w4
    2eba:	84 1f 78    	mov.w     w4, [w15++]
    2ebc:	87 01 20    	mov.w     #0x18, w7
    2ebe:	00 43 eb    	clr.b     w6
    2ec0:	80 82 eb    	setm.w    w5
    2ec2:	14 c0 b3    	mov.b     #0x1, w4
    2ec4:	80 01 eb    	clr.w     w3
    2ec6:	82 2d 20    	mov.w     #0x2d8, w2
    2ec8:	a1 2d 20    	mov.w     #0x2da, w1
    2eca:	20 8f 20    	mov.w     #0x8f2, w0
    2ecc:	88 00 07    	rcall     0x2fde <_pin_init>
    2ece:	8f 87 e9    	dec2.w    w15, w15

00002ed0 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2ed0:	64 6d 20    	mov.w     #0x6d6, w4
    2ed2:	84 1f 78    	mov.w     w4, [w15++]
    2ed4:	77 01 20    	mov.w     #0x17, w7
    2ed6:	86 c0 b3    	mov.b     #0x8, w6
    2ed8:	80 82 eb    	setm.w    w5
    2eda:	24 c0 b3    	mov.b     #0x2, w4
    2edc:	80 01 eb    	clr.w     w3
    2ede:	82 2d 20    	mov.w     #0x2d8, w2
    2ee0:	a1 2d 20    	mov.w     #0x2da, w1
    2ee2:	80 90 20    	mov.w     #0x908, w0
    2ee4:	7c 00 07    	rcall     0x2fde <_pin_init>
    2ee6:	8f 87 e9    	dec2.w    w15, w15

00002ee8 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2ee8:	64 6d 20    	mov.w     #0x6d6, w4
    2eea:	84 1f 78    	mov.w     w4, [w15++]
    2eec:	67 01 20    	mov.w     #0x16, w7
    2eee:	00 43 eb    	clr.b     w6
    2ef0:	80 82 eb    	setm.w    w5
    2ef2:	34 c0 b3    	mov.b     #0x3, w4
    2ef4:	80 01 eb    	clr.w     w3
    2ef6:	82 2d 20    	mov.w     #0x2d8, w2
    2ef8:	a1 2d 20    	mov.w     #0x2da, w1
    2efa:	e0 91 20    	mov.w     #0x91e, w0
    2efc:	70 00 07    	rcall     0x2fde <_pin_init>
    2efe:	8f 87 e9    	dec2.w    w15, w15

00002f00 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f00:	04 6c 20    	mov.w     #0x6c0, w4
    2f02:	84 1f 78    	mov.w     w4, [w15++]
    2f04:	80 03 eb    	clr.w     w7
    2f06:	00 43 eb    	clr.b     w6
    2f08:	80 02 eb    	clr.w     w5
    2f0a:	00 42 eb    	clr.b     w4
    2f0c:	23 4e 20    	mov.w     #0x4e2, w3
    2f0e:	82 2c 20    	mov.w     #0x2c8, w2
    2f10:	a1 2c 20    	mov.w     #0x2ca, w1
    2f12:	20 9a 20    	mov.w     #0x9a2, w0
    2f14:	64 00 07    	rcall     0x2fde <_pin_init>
    2f16:	8f 87 e9    	dec2.w    w15, w15

00002f18 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f18:	04 6c 20    	mov.w     #0x6c0, w4
    2f1a:	84 1f 78    	mov.w     w4, [w15++]
    2f1c:	17 00 20    	mov.w     #0x1, w7
    2f1e:	86 c0 b3    	mov.b     #0x8, w6
    2f20:	15 00 20    	mov.w     #0x1, w5
    2f22:	14 c0 b3    	mov.b     #0x1, w4
    2f24:	23 4e 20    	mov.w     #0x4e2, w3
    2f26:	82 2c 20    	mov.w     #0x2c8, w2
    2f28:	a1 2c 20    	mov.w     #0x2ca, w1
    2f2a:	c0 98 20    	mov.w     #0x98c, w0
    2f2c:	58 00 07    	rcall     0x2fde <_pin_init>
    2f2e:	8f 87 e9    	dec2.w    w15, w15

00002f30 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f30:	c4 6c 20    	mov.w     #0x6cc, w4
    2f32:	84 1f 78    	mov.w     w4, [w15++]
    2f34:	d7 00 20    	mov.w     #0xd, w7
    2f36:	86 c0 b3    	mov.b     #0x8, w6
    2f38:	25 00 20    	mov.w     #0x2, w5
    2f3a:	24 c0 b3    	mov.b     #0x2, w4
    2f3c:	23 4e 20    	mov.w     #0x4e2, w3
    2f3e:	82 2c 20    	mov.w     #0x2c8, w2
    2f40:	a1 2c 20    	mov.w     #0x2ca, w1
    2f42:	60 97 20    	mov.w     #0x976, w0
    2f44:	4c 00 07    	rcall     0x2fde <_pin_init>
    2f46:	8f 87 e9    	dec2.w    w15, w15

00002f48 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f48:	00 02 eb    	clr.w     w4
    2f4a:	84 1f 78    	mov.w     w4, [w15++]
    2f4c:	80 83 eb    	setm.w    w7
    2f4e:	00 43 eb    	clr.b     w6
    2f50:	35 00 20    	mov.w     #0x3, w5
    2f52:	34 c0 b3    	mov.b     #0x3, w4
    2f54:	23 4e 20    	mov.w     #0x4e2, w3
    2f56:	82 2c 20    	mov.w     #0x2c8, w2
    2f58:	a1 2c 20    	mov.w     #0x2ca, w1
    2f5a:	00 96 20    	mov.w     #0x960, w0
    2f5c:	40 00 07    	rcall     0x2fde <_pin_init>
    2f5e:	8f 87 e9    	dec2.w    w15, w15

00002f60 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f60:	c4 6d 20    	mov.w     #0x6dc, w4
    2f62:	84 1f 78    	mov.w     w4, [w15++]
    2f64:	c7 01 20    	mov.w     #0x1c, w7
    2f66:	00 43 eb    	clr.b     w6
    2f68:	45 00 20    	mov.w     #0x4, w5
    2f6a:	44 c0 b3    	mov.b     #0x4, w4
    2f6c:	23 4e 20    	mov.w     #0x4e2, w3
    2f6e:	82 2c 20    	mov.w     #0x2c8, w2
    2f70:	a1 2c 20    	mov.w     #0x2ca, w1
    2f72:	a0 94 20    	mov.w     #0x94a, w0
    2f74:	34 00 07    	rcall     0x2fde <_pin_init>
    2f76:	8f 87 e9    	dec2.w    w15, w15

00002f78 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2f78:	24 6d 20    	mov.w     #0x6d2, w4
    2f7a:	84 1f 78    	mov.w     w4, [w15++]
    2f7c:	27 01 20    	mov.w     #0x12, w7
    2f7e:	00 43 eb    	clr.b     w6
    2f80:	55 00 20    	mov.w     #0x5, w5
    2f82:	54 c0 b3    	mov.b     #0x5, w4
    2f84:	23 4e 20    	mov.w     #0x4e2, w3
    2f86:	82 2c 20    	mov.w     #0x2c8, w2
    2f88:	a1 2c 20    	mov.w     #0x2ca, w1
    2f8a:	40 93 20    	mov.w     #0x934, w0
    2f8c:	28 00 07    	rcall     0x2fde <_pin_init>
    2f8e:	8f 87 e9    	dec2.w    w15, w15

00002f90 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    2f90:	00 02 eb    	clr.w     w4
    2f92:	04 0f 78    	mov.w     w4, [w14]
    2f94:	08 00 37    	bra       0x2fa6 <.L8>

00002f96 <.L9>:
        pin_digitalIn(&D[i]);
    2f96:	1e 02 78    	mov.w     [w14], w4
    2f98:	76 22 b9    	mul.su    w4, #0x16, w4
    2f9a:	84 02 78    	mov.w     w4, w5
    2f9c:	04 80 20    	mov.w     #0x800, w4
    2f9e:	04 82 42    	add.w     w5, w4, w4
    2fa0:	04 00 78    	mov.w     w4, w0
    2fa2:	49 00 07    	rcall     0x3036 <_pin_digitalIn>

00002fa4 <.LSM37>:
    2fa4:	1e 0f e8    	inc.w     [w14], [w14]

00002fa6 <.L8>:
    2fa6:	1e 02 78    	mov.w     [w14], w4
    2fa8:	ed 0f 52    	sub.w     w4, #0xd, [w15]
    2faa:	f5 ff 36    	bra       LEU, 0x2f96 <.L9>

00002fac <.LSM38>:
    for (i = 0; i<6; i++)
    2fac:	00 02 eb    	clr.w     w4
    2fae:	04 0f 78    	mov.w     w4, [w14]
    2fb0:	08 00 37    	bra       0x2fc2 <.L10>

00002fb2 <.L11>:
        pin_analogIn(&A[i]);
    2fb2:	1e 02 78    	mov.w     [w14], w4
    2fb4:	76 22 b9    	mul.su    w4, #0x16, w4
    2fb6:	84 02 78    	mov.w     w4, w5
    2fb8:	44 93 20    	mov.w     #0x934, w4
    2fba:	04 82 42    	add.w     w5, w4, w4
    2fbc:	04 00 78    	mov.w     w4, w0
    2fbe:	97 00 07    	rcall     0x30ee <_pin_analogIn>

00002fc0 <.LSM40>:
    2fc0:	1e 0f e8    	inc.w     [w14], [w14]

00002fc2 <.L10>:
    2fc2:	1e 02 78    	mov.w     [w14], w4
    2fc4:	e5 0f 52    	sub.w     w4, #0x5, [w15]
    2fc6:	f5 ff 36    	bra       LEU, 0x2fb2 <.L11>

00002fc8 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    2fc8:	04 2e 20    	mov.w     #0x2e0, w4
    2fca:	04 19 88    	mov.w     w4, 0x320

00002fcc <.LSM42>:
    AD1CON2 = 0;
    2fcc:	00 02 eb    	clr.w     w4
    2fce:	14 19 88    	mov.w     w4, 0x322

00002fd0 <.LSM43>:
    AD1CON3 = 0x0C40;
    2fd0:	04 c4 20    	mov.w     #0xc40, w4
    2fd2:	24 19 88    	mov.w     w4, 0x324

00002fd4 <.LSM44>:
    AD1CHS = 0;
    2fd4:	00 02 eb    	clr.w     w4
    2fd6:	44 19 88    	mov.w     w4, 0x328

00002fd8 <.LSM45>:
    AD1CON1bits.ADON = 1;
    2fd8:	21 e3 a8    	bset.b    0x321, #0x7

00002fda <.LSM46>:
}
    2fda:	00 80 fa    	ulnk      
    2fdc:	00 00 06    	return    

00002fde <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    2fde:	10 00 fa    	lnk       #0x10
    2fe0:	00 0f 78    	mov.w     w0, [w14]
    2fe2:	11 07 98    	mov.w     w1, [w14+2]
    2fe4:	22 07 98    	mov.w     w2, [w14+4]
    2fe6:	33 07 98    	mov.w     w3, [w14+6]
    2fe8:	04 4f 98    	mov.b     w4, [w14+8]
    2fea:	55 07 98    	mov.w     w5, [w14+10]
    2fec:	46 4f 98    	mov.b     w6, [w14+12]
    2fee:	77 07 98    	mov.w     w7, [w14+14]

00002ff0 <.LSM48>:
    self->port = port;
    2ff0:	1e 02 78    	mov.w     [w14], w4
    2ff2:	9e 02 90    	mov.w     [w14+2], w5
    2ff4:	05 0a 78    	mov.w     w5, [w4]

00002ff6 <.LSM49>:
    self->tris = tris;
    2ff6:	1e 02 78    	mov.w     [w14], w4
    2ff8:	ae 02 90    	mov.w     [w14+4], w5
    2ffa:	15 02 98    	mov.w     w5, [w4+2]

00002ffc <.LSM50>:
    self->ans = ans;
    2ffc:	1e 02 78    	mov.w     [w14], w4
    2ffe:	be 02 90    	mov.w     [w14+6], w5
    3000:	25 02 98    	mov.w     w5, [w4+4]

00003002 <.LSM51>:
    self->bit = bit;
    3002:	1e 02 78    	mov.w     [w14], w4
    3004:	8e 4a 90    	mov.b     [w14+8], w5
    3006:	65 42 98    	mov.b     w5, [w4+6]

00003008 <.LSM52>:
    self->annum = annum;
    3008:	1e 02 78    	mov.w     [w14], w4
    300a:	de 02 90    	mov.w     [w14+10], w5
    300c:	45 02 98    	mov.w     w5, [w4+8]

0000300e <.LSM53>:
    self->rpshift = rpshift;
    300e:	1e 02 78    	mov.w     [w14], w4
    3010:	ce 4a 90    	mov.b     [w14+12], w5
    3012:	25 4a 98    	mov.b     w5, [w4+10]

00003014 <.LSM54>:
    self->rpnum = rpnum;
    3014:	fe 02 90    	mov.w     [w14+14], w5
    3016:	1e 02 78    	mov.w     [w14], w4
    3018:	65 02 98    	mov.w     w5, [w4+12]

0000301a <.LSM55>:
    self->rpor = rpor;
    301a:	1e 02 78    	mov.w     [w14], w4
    301c:	ce ba 97    	mov.w     [w14-8], w5
    301e:	75 02 98    	mov.w     w5, [w4+14]

00003020 <.LSM56>:
    self->owner = NULL;
    3020:	1e 02 78    	mov.w     [w14], w4
    3022:	80 02 eb    	clr.w     w5
    3024:	05 0a 98    	mov.w     w5, [w4+16]

00003026 <.LSM57>:
    self->write = NULL;
    3026:	1e 02 78    	mov.w     [w14], w4
    3028:	80 02 eb    	clr.w     w5
    302a:	15 0a 98    	mov.w     w5, [w4+18]

0000302c <.LSM58>:
    self->read = NULL;
    302c:	1e 02 78    	mov.w     [w14], w4
    302e:	80 02 eb    	clr.w     w5
    3030:	25 0a 98    	mov.w     w5, [w4+20]

00003032 <.LSM59>:
}
    3032:	00 80 fa    	ulnk      
    3034:	00 00 06    	return    

00003036 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    3036:	02 00 fa    	lnk       #0x2
    3038:	00 0f 78    	mov.w     w0, [w14]

0000303a <.LSM61>:
    if (self->ans)
    303a:	1e 02 78    	mov.w     [w14], w4
    303c:	24 02 90    	mov.w     [w4+4], w4
    303e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3040:	0d 00 32    	bra       Z, 0x305c <.L14>

00003042 <.LSM62>:
        bitclear(self->ans, self->bit);
    3042:	1e 02 78    	mov.w     [w14], w4
    3044:	24 02 90    	mov.w     [w4+4], w4
    3046:	9e 02 78    	mov.w     [w14], w5
    3048:	a5 02 90    	mov.w     [w5+4], w5
    304a:	15 03 78    	mov.w     [w5], w6
    304c:	9e 02 78    	mov.w     [w14], w5
    304e:	e5 42 90    	mov.b     [w5+6], w5
    3050:	85 82 fb    	ze        w5, w5
    3052:	17 00 20    	mov.w     #0x1, w7
    3054:	85 3a dd    	sl.w      w7, w5, w5
    3056:	85 82 ea    	com.w     w5, w5
    3058:	85 02 63    	and.w     w6, w5, w5
    305a:	05 0a 78    	mov.w     w5, [w4]

0000305c <.L14>:
    bitset(self->tris, self->bit);
    305c:	1e 02 78    	mov.w     [w14], w4
    305e:	14 02 90    	mov.w     [w4+2], w4
    3060:	9e 02 78    	mov.w     [w14], w5
    3062:	95 02 90    	mov.w     [w5+2], w5
    3064:	15 03 78    	mov.w     [w5], w6
    3066:	9e 02 78    	mov.w     [w14], w5
    3068:	e5 42 90    	mov.b     [w5+6], w5
    306a:	85 82 fb    	ze        w5, w5
    306c:	17 00 20    	mov.w     #0x1, w7
    306e:	85 3a dd    	sl.w      w7, w5, w5
    3070:	86 82 72    	ior.w     w5, w6, w5
    3072:	05 0a 78    	mov.w     w5, [w4]

00003074 <.LSM64>:
    self->write = NULL;
    3074:	1e 02 78    	mov.w     [w14], w4
    3076:	80 02 eb    	clr.w     w5
    3078:	15 0a 98    	mov.w     w5, [w4+18]

0000307a <.LSM65>:
    self->read = __digitalRead;    
    307a:	1e 02 78    	mov.w     [w14], w4
    307c:	c5 d6 22    	mov.w     #0x2d6c, w5
    307e:	25 0a 98    	mov.w     w5, [w4+20]

00003080 <.LSM66>:
}
    3080:	00 80 fa    	ulnk      
    3082:	00 00 06    	return    

00003084 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    3084:	02 00 fa    	lnk       #0x2
    3086:	00 0f 78    	mov.w     w0, [w14]

00003088 <.LSM68>:
    if (self->ans)
    3088:	1e 02 78    	mov.w     [w14], w4
    308a:	24 02 90    	mov.w     [w4+4], w4
    308c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    308e:	0d 00 32    	bra       Z, 0x30aa <.L16>

00003090 <.LSM69>:
        bitclear(self->ans, self->bit);
    3090:	1e 02 78    	mov.w     [w14], w4
    3092:	24 02 90    	mov.w     [w4+4], w4
    3094:	9e 02 78    	mov.w     [w14], w5
    3096:	a5 02 90    	mov.w     [w5+4], w5
    3098:	15 03 78    	mov.w     [w5], w6
    309a:	9e 02 78    	mov.w     [w14], w5
    309c:	e5 42 90    	mov.b     [w5+6], w5
    309e:	85 82 fb    	ze        w5, w5
    30a0:	17 00 20    	mov.w     #0x1, w7
    30a2:	85 3a dd    	sl.w      w7, w5, w5
    30a4:	85 82 ea    	com.w     w5, w5
    30a6:	85 02 63    	and.w     w6, w5, w5
    30a8:	05 0a 78    	mov.w     w5, [w4]

000030aa <.L16>:
    bitclear(self->port, self->bit);
    30aa:	1e 02 78    	mov.w     [w14], w4
    30ac:	14 02 78    	mov.w     [w4], w4
    30ae:	9e 02 78    	mov.w     [w14], w5
    30b0:	95 02 78    	mov.w     [w5], w5
    30b2:	15 03 78    	mov.w     [w5], w6
    30b4:	9e 02 78    	mov.w     [w14], w5
    30b6:	e5 42 90    	mov.b     [w5+6], w5
    30b8:	85 82 fb    	ze        w5, w5
    30ba:	17 00 20    	mov.w     #0x1, w7
    30bc:	85 3a dd    	sl.w      w7, w5, w5
    30be:	85 82 ea    	com.w     w5, w5
    30c0:	85 02 63    	and.w     w6, w5, w5
    30c2:	05 0a 78    	mov.w     w5, [w4]

000030c4 <.LSM71>:
    bitclear(self->tris, self->bit);
    30c4:	1e 02 78    	mov.w     [w14], w4
    30c6:	14 02 90    	mov.w     [w4+2], w4
    30c8:	9e 02 78    	mov.w     [w14], w5
    30ca:	95 02 90    	mov.w     [w5+2], w5
    30cc:	15 03 78    	mov.w     [w5], w6
    30ce:	9e 02 78    	mov.w     [w14], w5
    30d0:	e5 42 90    	mov.b     [w5+6], w5
    30d2:	85 82 fb    	ze        w5, w5
    30d4:	17 00 20    	mov.w     #0x1, w7
    30d6:	85 3a dd    	sl.w      w7, w5, w5
    30d8:	85 82 ea    	com.w     w5, w5
    30da:	85 02 63    	and.w     w6, w5, w5
    30dc:	05 0a 78    	mov.w     w5, [w4]

000030de <.LSM72>:
    self->write = __digitalWrite;
    30de:	1e 02 78    	mov.w     [w14], w4
    30e0:	85 d2 22    	mov.w     #0x2d28, w5
    30e2:	15 0a 98    	mov.w     w5, [w4+18]

000030e4 <.LSM73>:
    self->read = __digitalRead;
    30e4:	1e 02 78    	mov.w     [w14], w4
    30e6:	c5 d6 22    	mov.w     #0x2d6c, w5
    30e8:	25 0a 98    	mov.w     w5, [w4+20]

000030ea <.LSM74>:
}
    30ea:	00 80 fa    	ulnk      
    30ec:	00 00 06    	return    

000030ee <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    30ee:	02 00 fa    	lnk       #0x2
    30f0:	00 0f 78    	mov.w     w0, [w14]

000030f2 <.LSM76>:
    if (!(self->ans))
    30f2:	1e 02 78    	mov.w     [w14], w4
    30f4:	24 02 90    	mov.w     [w4+4], w4
    30f6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    30f8:	1f 00 32    	bra       Z, 0x3138 <.L20>

000030fa <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    30fa:	1e 02 78    	mov.w     [w14], w4
    30fc:	14 02 90    	mov.w     [w4+2], w4
    30fe:	9e 02 78    	mov.w     [w14], w5
    3100:	95 02 90    	mov.w     [w5+2], w5
    3102:	15 03 78    	mov.w     [w5], w6
    3104:	9e 02 78    	mov.w     [w14], w5
    3106:	e5 42 90    	mov.b     [w5+6], w5
    3108:	85 82 fb    	ze        w5, w5
    310a:	17 00 20    	mov.w     #0x1, w7
    310c:	85 3a dd    	sl.w      w7, w5, w5
    310e:	86 82 72    	ior.w     w5, w6, w5
    3110:	05 0a 78    	mov.w     w5, [w4]

00003112 <.LSM78>:
    bitset(self->ans, self->bit);
    3112:	1e 02 78    	mov.w     [w14], w4
    3114:	24 02 90    	mov.w     [w4+4], w4
    3116:	9e 02 78    	mov.w     [w14], w5
    3118:	a5 02 90    	mov.w     [w5+4], w5
    311a:	15 03 78    	mov.w     [w5], w6
    311c:	9e 02 78    	mov.w     [w14], w5
    311e:	e5 42 90    	mov.b     [w5+6], w5
    3120:	85 82 fb    	ze        w5, w5
    3122:	17 00 20    	mov.w     #0x1, w7
    3124:	85 3a dd    	sl.w      w7, w5, w5
    3126:	86 82 72    	ior.w     w5, w6, w5
    3128:	05 0a 78    	mov.w     w5, [w4]

0000312a <.LSM79>:
    self->write = NULL;
    312a:	1e 02 78    	mov.w     [w14], w4
    312c:	80 02 eb    	clr.w     w5
    312e:	15 0a 98    	mov.w     w5, [w4+18]

00003130 <.LSM80>:
    self->read = __analogRead;
    3130:	1e 02 78    	mov.w     [w14], w4
    3132:	05 d9 22    	mov.w     #0x2d90, w5
    3134:	25 0a 98    	mov.w     w5, [w4+20]
    3136:	01 00 37    	bra       0x313a <.L17>

00003138 <.L20>:
    3138:	00 00 00    	nop       

0000313a <.L17>:
}
    313a:	00 80 fa    	ulnk      
    313c:	00 00 06    	return    

0000313e <_pin_set>:

void pin_set(_PIN *self) {
    313e:	02 00 fa    	lnk       #0x2
    3140:	00 0f 78    	mov.w     w0, [w14]

00003142 <.LSM84>:
    if (self->write==__digitalWrite)
    3142:	1e 02 78    	mov.w     [w14], w4
    3144:	94 0a 90    	mov.w     [w4+18], w5
    3146:	84 d2 22    	mov.w     #0x2d28, w4
    3148:	84 8f 52    	sub.w     w5, w4, [w15]
    314a:	0c 00 3a    	bra       NZ, 0x3164 <.L21>

0000314c <.LSM85>:
        bitset(self->port, self->bit);
    314c:	1e 02 78    	mov.w     [w14], w4
    314e:	14 02 78    	mov.w     [w4], w4
    3150:	9e 02 78    	mov.w     [w14], w5
    3152:	95 02 78    	mov.w     [w5], w5
    3154:	15 03 78    	mov.w     [w5], w6
    3156:	9e 02 78    	mov.w     [w14], w5
    3158:	e5 42 90    	mov.b     [w5+6], w5
    315a:	85 82 fb    	ze        w5, w5
    315c:	17 00 20    	mov.w     #0x1, w7
    315e:	85 3a dd    	sl.w      w7, w5, w5
    3160:	86 82 72    	ior.w     w5, w6, w5
    3162:	05 0a 78    	mov.w     w5, [w4]

00003164 <.L21>:
}
    3164:	00 80 fa    	ulnk      
    3166:	00 00 06    	return    

00003168 <_pin_clear>:

void pin_clear(_PIN *self) {
    3168:	02 00 fa    	lnk       #0x2
    316a:	00 0f 78    	mov.w     w0, [w14]

0000316c <.LSM88>:
    if (self->write==__digitalWrite)
    316c:	1e 02 78    	mov.w     [w14], w4
    316e:	94 0a 90    	mov.w     [w4+18], w5
    3170:	84 d2 22    	mov.w     #0x2d28, w4
    3172:	84 8f 52    	sub.w     w5, w4, [w15]
    3174:	0d 00 3a    	bra       NZ, 0x3190 <.L23>

00003176 <.LSM89>:
        bitclear(self->port, self->bit);
    3176:	1e 02 78    	mov.w     [w14], w4
    3178:	14 02 78    	mov.w     [w4], w4
    317a:	9e 02 78    	mov.w     [w14], w5
    317c:	95 02 78    	mov.w     [w5], w5
    317e:	15 03 78    	mov.w     [w5], w6
    3180:	9e 02 78    	mov.w     [w14], w5
    3182:	e5 42 90    	mov.b     [w5+6], w5
    3184:	85 82 fb    	ze        w5, w5
    3186:	17 00 20    	mov.w     #0x1, w7
    3188:	85 3a dd    	sl.w      w7, w5, w5
    318a:	85 82 ea    	com.w     w5, w5
    318c:	85 02 63    	and.w     w6, w5, w5
    318e:	05 0a 78    	mov.w     w5, [w4]

00003190 <.L23>:
}
    3190:	00 80 fa    	ulnk      
    3192:	00 00 06    	return    

00003194 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3194:	02 00 fa    	lnk       #0x2
    3196:	00 0f 78    	mov.w     w0, [w14]

00003198 <.LSM92>:
    if (self->write==__digitalWrite)
    3198:	1e 02 78    	mov.w     [w14], w4
    319a:	94 0a 90    	mov.w     [w4+18], w5
    319c:	84 d2 22    	mov.w     #0x2d28, w4
    319e:	84 8f 52    	sub.w     w5, w4, [w15]
    31a0:	0c 00 3a    	bra       NZ, 0x31ba <.L25>

000031a2 <.LSM93>:
        bitflip(self->port, self->bit);
    31a2:	1e 02 78    	mov.w     [w14], w4
    31a4:	14 02 78    	mov.w     [w4], w4
    31a6:	9e 02 78    	mov.w     [w14], w5
    31a8:	95 02 78    	mov.w     [w5], w5
    31aa:	15 03 78    	mov.w     [w5], w6
    31ac:	9e 02 78    	mov.w     [w14], w5
    31ae:	e5 42 90    	mov.b     [w5+6], w5
    31b0:	85 82 fb    	ze        w5, w5
    31b2:	17 00 20    	mov.w     #0x1, w7
    31b4:	85 3a dd    	sl.w      w7, w5, w5
    31b6:	85 02 6b    	xor.w     w6, w5, w5
    31b8:	05 0a 78    	mov.w     w5, [w4]

000031ba <.L25>:
}
    31ba:	00 80 fa    	ulnk      
    31bc:	00 00 06    	return    

000031be <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    31be:	04 00 fa    	lnk       #0x4
    31c0:	00 0f 78    	mov.w     w0, [w14]
    31c2:	11 07 98    	mov.w     w1, [w14+2]

000031c4 <.LSM96>:
    if (self->write)
    31c4:	1e 02 78    	mov.w     [w14], w4
    31c6:	14 0a 90    	mov.w     [w4+18], w4
    31c8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    31ca:	05 00 32    	bra       Z, 0x31d6 <.L27>

000031cc <.LSM97>:
        self->write(self, val);
    31cc:	1e 02 78    	mov.w     [w14], w4
    31ce:	14 0a 90    	mov.w     [w4+18], w4
    31d0:	9e 00 90    	mov.w     [w14+2], w1
    31d2:	1e 00 78    	mov.w     [w14], w0
    31d4:	04 00 01    	call      w4

000031d6 <.L27>:
}
    31d6:	00 80 fa    	ulnk      
    31d8:	00 00 06    	return    

000031da <_pin_read>:

uint16_t pin_read(_PIN *self) {
    31da:	02 00 fa    	lnk       #0x2
    31dc:	00 0f 78    	mov.w     w0, [w14]

000031de <.LSM100>:
    if (self->read)
    31de:	1e 02 78    	mov.w     [w14], w4
    31e0:	24 0a 90    	mov.w     [w4+20], w4
    31e2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    31e4:	06 00 32    	bra       Z, 0x31f2 <.L30>

000031e6 <.LSM101>:
        return self->read(self);
    31e6:	1e 02 78    	mov.w     [w14], w4
    31e8:	24 0a 90    	mov.w     [w4+20], w4
    31ea:	1e 00 78    	mov.w     [w14], w0
    31ec:	04 00 01    	call      w4
    31ee:	00 02 78    	mov.w     w0, w4
    31f0:	01 00 37    	bra       0x31f4 <.L31>

000031f2 <.L30>:
    else
        return 0xFFFF;
    31f2:	00 82 eb    	setm.w    w4

000031f4 <.L31>:
}
    31f4:	04 00 78    	mov.w     w4, w0
    31f6:	00 80 fa    	ulnk      
    31f8:	00 00 06    	return    

000031fa <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    31fa:	00 00 fa    	lnk       #0x0

000031fc <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    31fc:	74 c0 b3    	mov.b     #0x7, w4
    31fe:	63 4e 20    	mov.w     #0x4e6, w3
    3200:	82 2d 20    	mov.w     #0x2d8, w2
    3202:	a1 2d 20    	mov.w     #0x2da, w1
    3204:	80 be 20    	mov.w     #0xbe8, w0
    3206:	20 00 07    	rcall     0x3248 <_led_init>

00003208 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3208:	00 42 eb    	clr.b     w4
    320a:	a3 4e 20    	mov.w     #0x4ea, w3
    320c:	82 2e 20    	mov.w     #0x2e8, w2
    320e:	a1 2e 20    	mov.w     #0x2ea, w1
    3210:	00 bf 20    	mov.w     #0xbf0, w0
    3212:	1a 00 07    	rcall     0x3248 <_led_init>

00003214 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3214:	14 c0 b3    	mov.b     #0x1, w4
    3216:	a3 4e 20    	mov.w     #0x4ea, w3
    3218:	82 2e 20    	mov.w     #0x2e8, w2
    321a:	a1 2e 20    	mov.w     #0x2ea, w1
    321c:	80 bf 20    	mov.w     #0xbf8, w0
    321e:	14 00 07    	rcall     0x3248 <_led_init>

00003220 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3220:	f4 c0 b3    	mov.b     #0xf, w4
    3222:	43 4e 20    	mov.w     #0x4e4, w3
    3224:	02 2d 20    	mov.w     #0x2d0, w2
    3226:	21 2d 20    	mov.w     #0x2d2, w1
    3228:	00 c0 20    	mov.w     #0xc00, w0
    322a:	ae 00 07    	rcall     0x3388 <_sw_init>

0000322c <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    322c:	c4 c0 b3    	mov.b     #0xc, w4
    322e:	43 4e 20    	mov.w     #0x4e4, w3
    3230:	02 2d 20    	mov.w     #0x2d0, w2
    3232:	21 2d 20    	mov.w     #0x2d2, w1
    3234:	80 c0 20    	mov.w     #0xc08, w0
    3236:	a8 00 07    	rcall     0x3388 <_sw_init>

00003238 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3238:	c4 c0 b3    	mov.b     #0xc, w4
    323a:	23 4e 20    	mov.w     #0x4e2, w3
    323c:	82 2c 20    	mov.w     #0x2c8, w2
    323e:	a1 2c 20    	mov.w     #0x2ca, w1
    3240:	00 c1 20    	mov.w     #0xc10, w0
    3242:	a2 00 07    	rcall     0x3388 <_sw_init>

00003244 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    3244:	00 80 fa    	ulnk      
    3246:	00 00 06    	return    

00003248 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    3248:	0a 00 fa    	lnk       #0xa
    324a:	00 0f 78    	mov.w     w0, [w14]
    324c:	11 07 98    	mov.w     w1, [w14+2]
    324e:	22 07 98    	mov.w     w2, [w14+4]
    3250:	33 07 98    	mov.w     w3, [w14+6]
    3252:	04 4f 98    	mov.b     w4, [w14+8]

00003254 <.LSM9>:
    self->port = port;
    3254:	1e 02 78    	mov.w     [w14], w4
    3256:	9e 02 90    	mov.w     [w14+2], w5
    3258:	05 0a 78    	mov.w     w5, [w4]

0000325a <.LSM10>:
    self->tris = tris;
    325a:	1e 02 78    	mov.w     [w14], w4
    325c:	ae 02 90    	mov.w     [w14+4], w5
    325e:	15 02 98    	mov.w     w5, [w4+2]

00003260 <.LSM11>:
    self->ans = ans;
    3260:	1e 02 78    	mov.w     [w14], w4
    3262:	be 02 90    	mov.w     [w14+6], w5
    3264:	25 02 98    	mov.w     w5, [w4+4]

00003266 <.LSM12>:
    self->bit = bit;
    3266:	1e 02 78    	mov.w     [w14], w4
    3268:	8e 4a 90    	mov.b     [w14+8], w5
    326a:	65 42 98    	mov.b     w5, [w4+6]

0000326c <.LSM13>:

    bitclear(self->ans, self->bit);
    326c:	1e 02 78    	mov.w     [w14], w4
    326e:	24 02 90    	mov.w     [w4+4], w4
    3270:	9e 02 78    	mov.w     [w14], w5
    3272:	a5 02 90    	mov.w     [w5+4], w5
    3274:	15 03 78    	mov.w     [w5], w6
    3276:	9e 02 78    	mov.w     [w14], w5
    3278:	e5 42 90    	mov.b     [w5+6], w5
    327a:	85 82 fb    	ze        w5, w5
    327c:	17 00 20    	mov.w     #0x1, w7
    327e:	85 3a dd    	sl.w      w7, w5, w5
    3280:	85 82 ea    	com.w     w5, w5
    3282:	85 02 63    	and.w     w6, w5, w5
    3284:	05 0a 78    	mov.w     w5, [w4]

00003286 <.LSM14>:
    bitclear(self->port, self->bit);
    3286:	1e 02 78    	mov.w     [w14], w4
    3288:	14 02 78    	mov.w     [w4], w4
    328a:	9e 02 78    	mov.w     [w14], w5
    328c:	95 02 78    	mov.w     [w5], w5
    328e:	15 03 78    	mov.w     [w5], w6
    3290:	9e 02 78    	mov.w     [w14], w5
    3292:	e5 42 90    	mov.b     [w5+6], w5
    3294:	85 82 fb    	ze        w5, w5
    3296:	17 00 20    	mov.w     #0x1, w7
    3298:	85 3a dd    	sl.w      w7, w5, w5
    329a:	85 82 ea    	com.w     w5, w5
    329c:	85 02 63    	and.w     w6, w5, w5
    329e:	05 0a 78    	mov.w     w5, [w4]

000032a0 <.LSM15>:
    bitclear(self->tris, self->bit);
    32a0:	1e 02 78    	mov.w     [w14], w4
    32a2:	14 02 90    	mov.w     [w4+2], w4
    32a4:	9e 02 78    	mov.w     [w14], w5
    32a6:	95 02 90    	mov.w     [w5+2], w5
    32a8:	15 03 78    	mov.w     [w5], w6
    32aa:	9e 02 78    	mov.w     [w14], w5
    32ac:	e5 42 90    	mov.b     [w5+6], w5
    32ae:	85 82 fb    	ze        w5, w5
    32b0:	17 00 20    	mov.w     #0x1, w7
    32b2:	85 3a dd    	sl.w      w7, w5, w5
    32b4:	85 82 ea    	com.w     w5, w5
    32b6:	85 02 63    	and.w     w6, w5, w5
    32b8:	05 0a 78    	mov.w     w5, [w4]

000032ba <.LSM16>:
}
    32ba:	00 80 fa    	ulnk      
    32bc:	00 00 06    	return    

000032be <_led_on>:

void led_on(_LED *self) {
    32be:	02 00 fa    	lnk       #0x2
    32c0:	00 0f 78    	mov.w     w0, [w14]

000032c2 <.LSM18>:
    bitset(self->port, self->bit);
    32c2:	1e 02 78    	mov.w     [w14], w4
    32c4:	14 02 78    	mov.w     [w4], w4
    32c6:	9e 02 78    	mov.w     [w14], w5
    32c8:	95 02 78    	mov.w     [w5], w5
    32ca:	15 03 78    	mov.w     [w5], w6
    32cc:	9e 02 78    	mov.w     [w14], w5
    32ce:	e5 42 90    	mov.b     [w5+6], w5
    32d0:	85 82 fb    	ze        w5, w5
    32d2:	17 00 20    	mov.w     #0x1, w7
    32d4:	85 3a dd    	sl.w      w7, w5, w5
    32d6:	86 82 72    	ior.w     w5, w6, w5
    32d8:	05 0a 78    	mov.w     w5, [w4]

000032da <.LSM19>:
}
    32da:	00 80 fa    	ulnk      
    32dc:	00 00 06    	return    

000032de <_led_off>:

void led_off(_LED *self) {
    32de:	02 00 fa    	lnk       #0x2
    32e0:	00 0f 78    	mov.w     w0, [w14]

000032e2 <.LSM21>:
    bitclear(self->port, self->bit);
    32e2:	1e 02 78    	mov.w     [w14], w4
    32e4:	14 02 78    	mov.w     [w4], w4
    32e6:	9e 02 78    	mov.w     [w14], w5
    32e8:	95 02 78    	mov.w     [w5], w5
    32ea:	15 03 78    	mov.w     [w5], w6
    32ec:	9e 02 78    	mov.w     [w14], w5
    32ee:	e5 42 90    	mov.b     [w5+6], w5
    32f0:	85 82 fb    	ze        w5, w5
    32f2:	17 00 20    	mov.w     #0x1, w7
    32f4:	85 3a dd    	sl.w      w7, w5, w5
    32f6:	85 82 ea    	com.w     w5, w5
    32f8:	85 02 63    	and.w     w6, w5, w5
    32fa:	05 0a 78    	mov.w     w5, [w4]

000032fc <.LSM22>:
}
    32fc:	00 80 fa    	ulnk      
    32fe:	00 00 06    	return    

00003300 <_led_toggle>:

void led_toggle(_LED *self) {
    3300:	02 00 fa    	lnk       #0x2
    3302:	00 0f 78    	mov.w     w0, [w14]

00003304 <.LSM24>:
    bitflip(self->port, self->bit);
    3304:	1e 02 78    	mov.w     [w14], w4
    3306:	14 02 78    	mov.w     [w4], w4
    3308:	9e 02 78    	mov.w     [w14], w5
    330a:	95 02 78    	mov.w     [w5], w5
    330c:	15 03 78    	mov.w     [w5], w6
    330e:	9e 02 78    	mov.w     [w14], w5
    3310:	e5 42 90    	mov.b     [w5+6], w5
    3312:	85 82 fb    	ze        w5, w5
    3314:	17 00 20    	mov.w     #0x1, w7
    3316:	85 3a dd    	sl.w      w7, w5, w5
    3318:	85 02 6b    	xor.w     w6, w5, w5
    331a:	05 0a 78    	mov.w     w5, [w4]

0000331c <.LSM25>:
}
    331c:	00 80 fa    	ulnk      
    331e:	00 00 06    	return    

00003320 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    3320:	04 00 fa    	lnk       #0x4
    3322:	00 0f 78    	mov.w     w0, [w14]
    3324:	11 07 98    	mov.w     w1, [w14+2]

00003326 <.LSM27>:
    if (val)
    3326:	1e 02 90    	mov.w     [w14+2], w4
    3328:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    332a:	0d 00 32    	bra       Z, 0x3346 <.L7>

0000332c <.LSM28>:
        bitset(self->port, self->bit);
    332c:	1e 02 78    	mov.w     [w14], w4
    332e:	14 02 78    	mov.w     [w4], w4
    3330:	9e 02 78    	mov.w     [w14], w5
    3332:	95 02 78    	mov.w     [w5], w5
    3334:	15 03 78    	mov.w     [w5], w6
    3336:	9e 02 78    	mov.w     [w14], w5
    3338:	e5 42 90    	mov.b     [w5+6], w5
    333a:	85 82 fb    	ze        w5, w5
    333c:	17 00 20    	mov.w     #0x1, w7
    333e:	85 3a dd    	sl.w      w7, w5, w5
    3340:	86 82 72    	ior.w     w5, w6, w5
    3342:	05 0a 78    	mov.w     w5, [w4]
    3344:	0d 00 37    	bra       0x3360 <.L6>

00003346 <.L7>:
    else
        bitclear(self->port, self->bit);
    3346:	1e 02 78    	mov.w     [w14], w4
    3348:	14 02 78    	mov.w     [w4], w4
    334a:	9e 02 78    	mov.w     [w14], w5
    334c:	95 02 78    	mov.w     [w5], w5
    334e:	15 03 78    	mov.w     [w5], w6
    3350:	9e 02 78    	mov.w     [w14], w5
    3352:	e5 42 90    	mov.b     [w5+6], w5
    3354:	85 82 fb    	ze        w5, w5
    3356:	17 00 20    	mov.w     #0x1, w7
    3358:	85 3a dd    	sl.w      w7, w5, w5
    335a:	85 82 ea    	com.w     w5, w5
    335c:	85 02 63    	and.w     w6, w5, w5
    335e:	05 0a 78    	mov.w     w5, [w4]

00003360 <.L6>:
}
    3360:	00 80 fa    	ulnk      
    3362:	00 00 06    	return    

00003364 <_led_read>:

uint16_t led_read(_LED *self) {
    3364:	02 00 fa    	lnk       #0x2
    3366:	00 0f 78    	mov.w     w0, [w14]

00003368 <.LSM32>:
    return bitread(self->port, self->bit);
    3368:	1e 02 78    	mov.w     [w14], w4
    336a:	14 02 78    	mov.w     [w4], w4
    336c:	94 02 78    	mov.w     [w4], w5
    336e:	1e 02 78    	mov.w     [w14], w4
    3370:	64 42 90    	mov.b     [w4+6], w4
    3372:	04 82 fb    	ze        w4, w4
    3374:	16 00 20    	mov.w     #0x1, w6
    3376:	04 32 dd    	sl.w      w6, w4, w4
    3378:	04 82 62    	and.w     w5, w4, w4
    337a:	04 f0 a7    	btsc.w    w4, #0xf
    337c:	04 02 ea    	neg.w     w4, w4
    337e:	04 02 ea    	neg.w     w4, w4
    3380:	4f 22 de    	lsr.w     w4, #0xf, w4

00003382 <.LSM33>:
}
    3382:	04 00 78    	mov.w     w4, w0
    3384:	00 80 fa    	ulnk      
    3386:	00 00 06    	return    

00003388 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    3388:	0a 00 fa    	lnk       #0xa
    338a:	00 0f 78    	mov.w     w0, [w14]
    338c:	11 07 98    	mov.w     w1, [w14+2]
    338e:	22 07 98    	mov.w     w2, [w14+4]
    3390:	33 07 98    	mov.w     w3, [w14+6]
    3392:	04 4f 98    	mov.b     w4, [w14+8]

00003394 <.LSM35>:
    self->port = port;
    3394:	1e 02 78    	mov.w     [w14], w4
    3396:	9e 02 90    	mov.w     [w14+2], w5
    3398:	05 0a 78    	mov.w     w5, [w4]

0000339a <.LSM36>:
    self->tris = tris;
    339a:	1e 02 78    	mov.w     [w14], w4
    339c:	ae 02 90    	mov.w     [w14+4], w5
    339e:	15 02 98    	mov.w     w5, [w4+2]

000033a0 <.LSM37>:
    self->ans = ans;
    33a0:	1e 02 78    	mov.w     [w14], w4
    33a2:	be 02 90    	mov.w     [w14+6], w5
    33a4:	25 02 98    	mov.w     w5, [w4+4]

000033a6 <.LSM38>:
    self->bit = bit;
    33a6:	1e 02 78    	mov.w     [w14], w4
    33a8:	8e 4a 90    	mov.b     [w14+8], w5
    33aa:	65 42 98    	mov.b     w5, [w4+6]

000033ac <.LSM39>:

    bitclear(self->ans, self->bit);
    33ac:	1e 02 78    	mov.w     [w14], w4
    33ae:	24 02 90    	mov.w     [w4+4], w4
    33b0:	9e 02 78    	mov.w     [w14], w5
    33b2:	a5 02 90    	mov.w     [w5+4], w5
    33b4:	15 03 78    	mov.w     [w5], w6
    33b6:	9e 02 78    	mov.w     [w14], w5
    33b8:	e5 42 90    	mov.b     [w5+6], w5
    33ba:	85 82 fb    	ze        w5, w5
    33bc:	17 00 20    	mov.w     #0x1, w7
    33be:	85 3a dd    	sl.w      w7, w5, w5
    33c0:	85 82 ea    	com.w     w5, w5
    33c2:	85 02 63    	and.w     w6, w5, w5
    33c4:	05 0a 78    	mov.w     w5, [w4]

000033c6 <.LSM40>:
    bitset(self->tris, self->bit);
    33c6:	1e 02 78    	mov.w     [w14], w4
    33c8:	14 02 90    	mov.w     [w4+2], w4
    33ca:	9e 02 78    	mov.w     [w14], w5
    33cc:	95 02 90    	mov.w     [w5+2], w5
    33ce:	15 03 78    	mov.w     [w5], w6
    33d0:	9e 02 78    	mov.w     [w14], w5
    33d2:	e5 42 90    	mov.b     [w5+6], w5
    33d4:	85 82 fb    	ze        w5, w5
    33d6:	17 00 20    	mov.w     #0x1, w7
    33d8:	85 3a dd    	sl.w      w7, w5, w5
    33da:	86 82 72    	ior.w     w5, w6, w5
    33dc:	05 0a 78    	mov.w     w5, [w4]

000033de <.LSM41>:
}
    33de:	00 80 fa    	ulnk      
    33e0:	00 00 06    	return    

000033e2 <_sw_read>:

uint16_t sw_read(_SW *self) {
    33e2:	02 00 fa    	lnk       #0x2
    33e4:	00 0f 78    	mov.w     w0, [w14]

000033e6 <.LSM43>:
    return bitread(self->port, self->bit);
    33e6:	1e 02 78    	mov.w     [w14], w4
    33e8:	14 02 78    	mov.w     [w4], w4
    33ea:	94 02 78    	mov.w     [w4], w5
    33ec:	1e 02 78    	mov.w     [w14], w4
    33ee:	64 42 90    	mov.b     [w4+6], w4
    33f0:	04 82 fb    	ze        w4, w4
    33f2:	16 00 20    	mov.w     #0x1, w6
    33f4:	04 32 dd    	sl.w      w6, w4, w4
    33f6:	04 82 62    	and.w     w5, w4, w4
    33f8:	04 f0 a7    	btsc.w    w4, #0xf
    33fa:	04 02 ea    	neg.w     w4, w4
    33fc:	04 02 ea    	neg.w     w4, w4
    33fe:	4f 22 de    	lsr.w     w4, #0xf, w4

00003400 <.LSM44>:
}
    3400:	04 00 78    	mov.w     w4, w0
    3402:	00 80 fa    	ulnk      
    3404:	00 00 06    	return    

00003406 <_main>:
#include "oc.h"
#include "uart.h"


int16_t main(void) {
    3406:	06 00 fa    	lnk       #0x6

00003408 <.LSM1>:
    uint16_t btn2ReadState;

    init_clock();
    3408:	04 10 20    	mov.w     #0x100, w4
    340a:	24 3a 88    	mov.w     w4, 0x744

0000340c <.LSM2>:
    init_timer();
    340c:	05 f8 07    	rcall     0x2418 <_init_timer>

0000340e <.LSM3>:
    init_ui();
    340e:	f5 fe 07    	rcall     0x31fa <_init_ui>

00003410 <.LSM4>:
    init_pin();
    3410:	ce fc 07    	rcall     0x2dae <_init_pin>

00003412 <.LSM5>:
    init_oc();
    3412:	80 fa 07    	rcall     0x2914 <_init_oc>

00003414 <.LSM6>:
    init_uart();
    3414:	5e f2 07    	rcall     0x18d2 <_init_uart>

00003416 <.LSM7>:

    pin_analogIn(&A[5]);
    3416:	20 9a 20    	mov.w     #0x9a2, w0
    3418:	6a fe 07    	rcall     0x30ee <_pin_analogIn>

0000341a <.LSM8>:

    pin_digitalOut(&D[2]);
    341a:	c0 82 20    	mov.w     #0x82c, w0
    341c:	33 fe 07    	rcall     0x3084 <_pin_digitalOut>

0000341e <.LSM9>:
    pin_set(&D[2]);
    341e:	c0 82 20    	mov.w     #0x82c, w0
    3420:	8e fe 07    	rcall     0x313e <_pin_set>

00003422 <.LSM10>:

    pin_digitalOut(&D[3]);
    3422:	20 84 20    	mov.w     #0x842, w0
    3424:	2f fe 07    	rcall     0x3084 <_pin_digitalOut>

00003426 <.LSM11>:
    pin_clear(&D[3]);
    3426:	20 84 20    	mov.w     #0x842, w0
    3428:	9f fe 07    	rcall     0x3168 <_pin_clear>

0000342a <.LSM12>:

    pin_digitalOut(&D[4]);
    342a:	80 85 20    	mov.w     #0x858, w0
    342c:	2b fe 07    	rcall     0x3084 <_pin_digitalOut>

0000342e <.LSM13>:
    pin_set(&D[4]);
    342e:	80 85 20    	mov.w     #0x858, w0
    3430:	86 fe 07    	rcall     0x313e <_pin_set>

00003432 <.LSM14>:

    pin_digitalOut(&D[5]);
    3432:	e0 86 20    	mov.w     #0x86e, w0
    3434:	27 fe 07    	rcall     0x3084 <_pin_digitalOut>

00003436 <.LSM15>:
    pin_clear(&D[5]);
    3436:	e0 86 20    	mov.w     #0x86e, w0
    3438:	97 fe 07    	rcall     0x3168 <_pin_clear>

0000343a <.LSM16>:

    pin_digitalOut(&D[7]);
    343a:	a0 89 20    	mov.w     #0x89a, w0
    343c:	23 fe 07    	rcall     0x3084 <_pin_digitalOut>

0000343e <.LSM17>:
    pin_set(&D[7]);
    343e:	a0 89 20    	mov.w     #0x89a, w0
    3440:	7e fe 07    	rcall     0x313e <_pin_set>

00003442 <.LBB2>:

    // simple delay
    for (uint16_t counter = 0; counter < 60000; counter ++) {
    3442:	00 02 eb    	clr.w     w4
    3444:	04 0f 78    	mov.w     w4, [w14]
    3446:	01 00 37    	bra       0x344a <.L2>

00003448 <.L3>:
    3448:	1e 0f e8    	inc.w     [w14], [w14]

0000344a <.L2>:
    344a:	f4 a5 2e    	mov.w     #0xea5f, w4
    344c:	9e 02 78    	mov.w     [w14], w5
    344e:	84 8f 52    	sub.w     w5, w4, [w15]
    3450:	fb ff 36    	bra       LEU, 0x3448 <.L3>

00003452 <.LBE2>:

    }
    led_on(&led1);
    3452:	80 be 20    	mov.w     #0xbe8, w0
    3454:	34 ff 07    	rcall     0x32be <_led_on>

00003456 <.LBB3>:
    for (uint16_t counter = 0; counter < 60000; counter ++) {
    3456:	00 02 eb    	clr.w     w4
    3458:	14 07 98    	mov.w     w4, [w14+2]
    345a:	03 00 37    	bra       0x3462 <.L4>

0000345c <.L5>:
    345c:	1e 02 90    	mov.w     [w14+2], w4
    345e:	04 02 e8    	inc.w     w4, w4
    3460:	14 07 98    	mov.w     w4, [w14+2]

00003462 <.L4>:
    3462:	9e 02 90    	mov.w     [w14+2], w5
    3464:	f4 a5 2e    	mov.w     #0xea5f, w4
    3466:	84 8f 52    	sub.w     w5, w4, [w15]
    3468:	f9 ff 36    	bra       LEU, 0x345c <.L5>

0000346a <.LBE3>:

    }
    led_on(&led2);
    346a:	00 bf 20    	mov.w     #0xbf0, w0
    346c:	28 ff 07    	rcall     0x32be <_led_on>

0000346e <.LBB4>:
    for (uint16_t counter = 0; counter < 60000; counter ++) {
    346e:	00 02 eb    	clr.w     w4
    3470:	24 07 98    	mov.w     w4, [w14+4]
    3472:	03 00 37    	bra       0x347a <.L6>

00003474 <.L7>:
    3474:	2e 02 90    	mov.w     [w14+4], w4
    3476:	04 02 e8    	inc.w     w4, w4
    3478:	24 07 98    	mov.w     w4, [w14+4]

0000347a <.L6>:
    347a:	ae 02 90    	mov.w     [w14+4], w5
    347c:	f4 a5 2e    	mov.w     #0xea5f, w4
    347e:	84 8f 52    	sub.w     w5, w4, [w15]
    3480:	f9 ff 36    	bra       LEU, 0x3474 <.L7>

00003482 <.LBE4>:

    }



    pin_digitalOut(&D[6]);
    3482:	40 88 20    	mov.w     #0x884, w0
    3484:	ff fd 07    	rcall     0x3084 <_pin_digitalOut>

00003486 <.LSM24>:
    pin_set(&D[6]);
    3486:	40 88 20    	mov.w     #0x884, w0
    3488:	5a fe 07    	rcall     0x313e <_pin_set>

0000348a <.LSM25>:
    //oc_pwm(&oc1, &D[6], &timer2, 20000, 60000);

    led_on(&led3);
    348a:	80 bf 20    	mov.w     #0xbf8, w0
    348c:	18 ff 07    	rcall     0x32be <_led_on>

0000348e <.L8>:

    while(1) {
    }
    348e:	ff ff 37    	bra       .
Disassembly of section .dinit:

00003490 <.dinit>:
    3490:	7a 0b 00    	nop       
    3492:	6e 00 00    	nop       
    3494:	80 00 00    	nop       
    3496:	18 0c 00    	nop       
    3498:	10 00 00    	nop       
    349a:	82 00 00    	nop       
    349c:	bd 37 86    	mov.w     0xc6f6, w13
    349e:	33 bd 37    	bra       0xffffaf06
    34a0:	06 35 bd    	subr.w    0x1506
    34a2:	37 86 36    	bra       LEU, 0xffff4112
    34a4:	bd 37 86    	mov.w     0xc6f6, w13
    34a6:	37 00 00    	nop       
    34a8:	e8 0b 00    	nop       
    34aa:	30 00 00    	nop       
    34ac:	80 00 00    	nop       
    34ae:	00 08 00    	nop       
    34b0:	b8 01 00    	nop       
    34b2:	80 00 00    	nop       
    34b4:	d8 0a 00    	nop       
    34b6:	a2 00 00    	nop       
    34b8:	80 00 00    	nop       
    34ba:	b8 09 00    	nop       
    34bc:	20 01 00    	nop       
    34be:	80 00 00    	nop       
    34c0:	00 00 00    	nop       
Disassembly of section .isr:

000034c2 <__DefaultInterrupt>:
    34c2:	00 40 da    	.pword 0xda4000
    34c4:	00 00 fe    	reset     
