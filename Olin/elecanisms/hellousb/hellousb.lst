
hellousb.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	0f d2 20    	mov.w     #0xd20, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	40 f8 23    	mov.w     #0x3f84, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	5c 3f 02    	call      0x3f5c <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	a0 0a 20    	mov.w     #0xaa, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	f6 37 04    	goto      0x37f6 <___digitalRead>
    11e4:	00 00 00 
    11e6:	b2 37 04    	goto      0x37b2 <___digitalWrite>
    11e8:	00 00 00 
    11ea:	1a 38 04    	goto      0x381a <___analogRead>
    11ec:	00 00 00 
    11ee:	2e 20 04    	goto      0x202e <___putc_nobuffer>
    11f0:	00 00 00 
    11f2:	72 20 04    	goto      0x2072 <___putc_buffer>
    11f4:	00 00 00 
    11f6:	52 20 04    	goto      0x2052 <___getc_nobuffer>
    11f8:	00 00 00 
    11fa:	60 21 04    	goto      0x2160 <___getc_buffer>
    11fc:	00 00 00 

000011fe <___subsf3>:
    11fe:	03 f0 a2    	btg.w     w3, #0xf

00001200 <___addsf3>:
    1200:	88 9f be    	mov.d     w8, [w15++]
    1202:	8a 9f be    	mov.d     w10, [w15++]
    1204:	8c 1f 78    	mov.w     w12, [w15++]
    1206:	f5 00 07    	rcall     0x13f2 <__funpack2>
    1208:	fc 00 33    	bra       N, 0x1402 <__fPropagateNaN>
    120a:	64 50 e1    	cp.w      w10, #0x4
    120c:	4f 00 32    	bra       Z, 0x12ac <aisinfinite>

0000120e <checkspecialb>:
    120e:	64 20 e1    	cp.w      w4, #0x4
    1210:	52 00 32    	bra       Z, 0x12b6 <return2>
    1212:	03 82 6c    	xor.w     w9, w3, w4
    1214:	07 00 3b    	bra       NN, 0x1224 <getsign>
    1216:	09 05 d0    	sl.w      w9, w10
    1218:	03 06 d0    	sl.w      w3, w12
    121a:	82 0f 54    	sub.w     w8, w2, [w15]
    121c:	0c 06 5d    	subb.w    w10, w12, w12
    121e:	02 00 39    	bra       NC, 0x1224 <getsign>
    1220:	02 00 32    	bra       Z, 0x1226 <gotsign>
    1222:	89 01 78    	mov.w     w9, w3

00001224 <getsign>:
    1224:	03 06 78    	mov.w     w3, w12

00001226 <gotsign>:
    1226:	85 82 55    	sub.w     w11, w5, w5
    1228:	04 00 3d    	bra       GE, 0x1232 <expcanonical>
    122a:	00 03 fd    	exch      w0, w6
    122c:	81 03 fd    	exch      w1, w7
    122e:	85 02 ea    	neg.w     w5, w5
    1230:	8b 85 42    	add.w     w5, w11, w11

00001232 <expcanonical>:
    1232:	84 0f 72    	ior.w     w4, w4, [w15]
    1234:	02 00 3b    	bra       NN, 0x123a <nonegate>
    1236:	60 00 10    	subr.w    w0, #0x0, w0
    1238:	e0 80 18    	subbr.w   w1, #0x0, w1

0000123a <nonegate>:
    123a:	60 11 b8    	mul.uu    w2, #0x0, w2
    123c:	00 05 eb    	clr.w     w10
    123e:	7a 28 e1    	cp.w      w5, #0x1a
    1240:	0a 00 39    	bra       NC, 0x1256 <aligniter>
    1242:	06 00 78    	mov.w     w6, w0
    1244:	c7 5d dd    	sl.w      w11, #0x7, w11
    1246:	f7 07 b2    	and.w     #0x7f, w7
    1248:	87 80 75    	ior.w     w11, w7, w1
    124a:	2d 00 37    	bra       0x12a6 <signoff>

0000124c <align>:
    124c:	82 81 71    	ior.w     w3, w2, w3
    124e:	0a 01 78    	mov.w     w10, w2
    1250:	61 05 60    	and.w     w0, #0x1, w10
    1252:	81 80 d1    	asr.w     w1, w1
    1254:	00 80 d3    	rrc.w     w0, w0

00001256 <aligniter>:
    1256:	85 02 e9    	dec.w     w5, w5
    1258:	f9 ff 3b    	bra       NN, 0x124c <align>

0000125a <aligned>:
    125a:	06 04 40    	add.w     w0, w6, w8
    125c:	87 84 48    	addc.w    w1, w7, w9
    125e:	02 00 3b    	bra       NN, 0x1264 <normalizesum>
    1260:	60 04 14    	subr.w    w8, #0x0, w8
    1262:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001264 <normalizesum>:
    1264:	09 88 a3    	btst.z    w9, #0x8
    1266:	07 00 32    	bra       Z, 0x1276 <checknormal>
    1268:	8a 81 71    	ior.w     w3, w10, w3
    126a:	82 81 71    	ior.w     w3, w2, w3
    126c:	61 01 64    	and.w     w8, #0x1, w2
    126e:	89 04 d1    	lsr.w     w9, w9
    1270:	08 84 d3    	rrc.w     w8, w8
    1272:	8b 05 e8    	inc.w     w11, w11
    1274:	17 00 37    	bra       0x12a4 <round>

00001276 <checknormal>:
    1276:	09 78 a3    	btst.z    w9, #0x7
    1278:	13 00 3a    	bra       NZ, 0x12a0 <discardguard>

0000127a <underflow>:
    127a:	0b 00 e0    	cp0.w     w11
    127c:	13 00 34    	bra       LE, 0x12a4 <round>
    127e:	8b 05 e9    	dec.w     w11, w11
    1280:	08 04 44    	add.w     w8, w8, w8
    1282:	89 84 4c    	addc.w    w9, w9, w9
    1284:	0a 44 74    	ior.b     w8, w10, w8
    1286:	09 78 a3    	btst.z    w9, #0x7
    1288:	0d 00 3a    	bra       NZ, 0x12a4 <round>

0000128a <normalizeloop>:
    128a:	0b 00 e0    	cp0.w     w11
    128c:	07 00 34    	bra       LE, 0x129c <normalizeexit>
    128e:	8b 05 e9    	dec.w     w11, w11
    1290:	08 04 44    	add.w     w8, w8, w8
    1292:	89 84 4c    	addc.w    w9, w9, w9
    1294:	01 00 3a    	bra       NZ, 0x1298 <normalizetest>
    1296:	0b 00 20    	mov.w     #0x0, w11

00001298 <normalizetest>:
    1298:	09 78 a3    	btst.z    w9, #0x7
    129a:	f7 ff 32    	bra       Z, 0x128a <normalizeloop>

0000129c <normalizeexit>:
    129c:	00 01 eb    	clr.w     w2
    129e:	02 00 37    	bra       0x12a4 <round>

000012a0 <discardguard>:
    12a0:	82 81 71    	ior.w     w3, w2, w3
    12a2:	0a 01 78    	mov.w     w10, w2

000012a4 <round>:
    12a4:	6b 00 07    	rcall     0x137c <__fpack>

000012a6 <signoff>:
    12a6:	0c f0 a7    	btsc.w    w12, #0xf
    12a8:	01 f0 a0    	bset.w    w1, #0xf
    12aa:	b4 00 37    	bra       0x1414 <__fbopExit>

000012ac <aisinfinite>:
    12ac:	64 20 e1    	cp.w      w4, #0x4
    12ae:	02 00 3a    	bra       NZ, 0x12b4 <return8>
    12b0:	83 8f 6c    	xor.w     w9, w3, [w15]
    12b2:	b4 00 33    	bra       N, 0x141c <__fbopReturnNaN>

000012b4 <return8>:
    12b4:	08 01 be    	mov.d     w8, w2

000012b6 <return2>:
    12b6:	02 00 be    	mov.d     w2, w0
    12b8:	ad 00 37    	bra       0x1414 <__fbopExit>

000012ba <___divsf3>:
    12ba:	88 9f be    	mov.d     w8, [w15++]
    12bc:	8a 9f be    	mov.d     w10, [w15++]
    12be:	8c 1f 78    	mov.w     w12, [w15++]
    12c0:	98 00 07    	rcall     0x13f2 <__funpack2>
    12c2:	9f 00 33    	bra       N, 0x1402 <__fPropagateNaN>
    12c4:	03 86 6c    	xor.w     w9, w3, w12
    12c6:	64 50 e1    	cp.w      w10, #0x4
    12c8:	2e 00 32    	bra       Z, 0x1326 <aisinfinite>
    12ca:	64 20 e1    	cp.w      w4, #0x4
    12cc:	33 00 32    	bra       Z, 0x1334 <returnZero>
    12ce:	61 50 e1    	cp.w      w10, #0x1
    12d0:	2f 00 32    	bra       Z, 0x1330 <aiszero>
    12d2:	61 20 e1    	cp.w      w4, #0x1
    12d4:	31 00 32    	bra       Z, 0x1338 <returnInf>

000012d6 <finitenonzero>:
    12d6:	85 85 55    	sub.w     w11, w5, w11
    12d8:	eb 07 b0    	add.w     #0x7e, w11
    12da:	09 00 20    	mov.w     #0x0, w9
    12dc:	08 04 20    	mov.w     #0x40, w8
    12de:	05 00 37    	bra       0x12ea <diventry>

000012e0 <divnext>:
    12e0:	08 04 44    	add.w     w8, w8, w8
    12e2:	89 84 4c    	addc.w    w9, w9, w9
    12e4:	0a 00 31    	bra       C, 0x12fa <divdone>

000012e6 <divloop>:
    12e6:	06 03 43    	add.w     w6, w6, w6
    12e8:	87 83 4b    	addc.w    w7, w7, w7

000012ea <diventry>:
    12ea:	00 01 53    	sub.w     w6, w0, w2
    12ec:	81 81 5b    	subb.w    w7, w1, w3
    12ee:	f8 ff 33    	bra       N, 0x12e0 <divnext>
    12f0:	02 03 be    	mov.d     w2, w6
    12f2:	08 00 a0    	bset.w    w8, #0x0
    12f4:	08 04 44    	add.w     w8, w8, w8
    12f6:	89 84 4c    	addc.w    w9, w9, w9
    12f8:	f6 ff 39    	bra       NC, 0x12e6 <divloop>

000012fa <divdone>:
    12fa:	c6 39 dd    	sl.w      w7, #0x6, w3
    12fc:	83 01 73    	ior.w     w6, w3, w3
    12fe:	01 00 32    	bra       Z, 0x1302 <stickyok>
    1300:	13 00 20    	mov.w     #0x1, w3

00001302 <stickyok>:
    1302:	89 04 d1    	lsr.w     w9, w9
    1304:	08 84 d3    	rrc.w     w8, w8
    1306:	09 98 a3    	btst.z    w9, #0x9
    1308:	05 00 32    	bra       Z, 0x1314 <guardused>
    130a:	08 00 a7    	btsc.w    w8, #0x0
    130c:	03 00 a0    	bset.w    w3, #0x0
    130e:	89 04 d1    	lsr.w     w9, w9
    1310:	08 84 d3    	rrc.w     w8, w8
    1312:	8b 05 e8    	inc.w     w11, w11

00001314 <guardused>:
    1314:	89 04 d1    	lsr.w     w9, w9
    1316:	08 84 d3    	rrc.w     w8, w8
    1318:	00 01 eb    	clr.w     w2
    131a:	02 81 d2    	rlc.w     w2, w2
    131c:	2f 00 07    	rcall     0x137c <__fpack>

0000131e <return0>:
    131e:	01 f0 a1    	bclr.w    w1, #0xf
    1320:	0c f0 a7    	btsc.w    w12, #0xf
    1322:	01 f0 a0    	bset.w    w1, #0xf
    1324:	77 00 37    	bra       0x1414 <__fbopExit>

00001326 <aisinfinite>:
    1326:	64 20 e1    	cp.w      w4, #0x4
    1328:	79 00 32    	bra       Z, 0x141c <__fbopReturnNaN>

0000132a <return8>:
    132a:	08 01 be    	mov.d     w8, w2

0000132c <return2>:
    132c:	02 00 be    	mov.d     w2, w0
    132e:	f7 ff 37    	bra       0x131e <return0>

00001330 <aiszero>:
    1330:	61 20 e1    	cp.w      w4, #0x1
    1332:	74 00 32    	bra       Z, 0x141c <__fbopReturnNaN>

00001334 <returnZero>:
    1334:	60 00 b8    	mul.uu    w0, #0x0, w0
    1336:	f3 ff 37    	bra       0x131e <return0>

00001338 <returnInf>:
    1338:	00 00 20    	mov.w     #0x0, w0
    133a:	01 f8 27    	mov.w     #0x7f80, w1
    133c:	f0 ff 37    	bra       0x131e <return0>

0000133e <___eqsf2>:
    133e:	14 00 20    	mov.w     #0x1, w4
    1340:	70 00 37    	bra       0x1422 <__fcompare>

00001342 <___gesf2>:
    1342:	f4 ff 2f    	mov.w     #0xffff, w4
    1344:	6e 00 37    	bra       0x1422 <__fcompare>

00001346 <___fixunssfsi>:
    1346:	00 01 be    	mov.d     w0, w2
    1348:	3f 00 07    	rcall     0x13c8 <__funpack>
    134a:	04 70 a7    	btsc.w    w4, #0x7
    134c:	03 f0 a1    	bclr.w    w3, #0xf
    134e:	03 f8 a3    	btst.z    w3, #0xf
    1350:	13 00 3a    	bra       NZ, 0x1378 <returnzero>
    1352:	65 09 b1    	sub.w     #0x96, w5
    1354:	10 00 32    	bra       Z, 0x1376 <exit>
    1356:	09 00 35    	bra       LT, 0x136a <shiftright>
    1358:	69 28 e1    	cp.w      w5, #0x9
    135a:	02 00 35    	bra       LT, 0x1360 <shiftleft>
    135c:	01 00 28    	mov.w     #0x8000, w1
    135e:	00 00 05    	retlw.w   #0x0, w0

00001360 <shiftleft>:
    1360:	00 00 40    	add.w     w0, w0, w0
    1362:	81 80 48    	addc.w    w1, w1, w1
    1364:	85 02 e9    	dec.w     w5, w5
    1366:	fc ff 3a    	bra       NZ, 0x1360 <shiftleft>
    1368:	00 00 06    	return    

0000136a <shiftright>:
    136a:	f8 8f 42    	add.w     w5, #0x18, [w15]
    136c:	05 00 35    	bra       LT, 0x1378 <returnzero>

0000136e <shiftrightloop>:
    136e:	81 00 d1    	lsr.w     w1, w1
    1370:	00 80 d3    	rrc.w     w0, w0
    1372:	85 02 e8    	inc.w     w5, w5
    1374:	fc ff 3a    	bra       NZ, 0x136e <shiftrightloop>

00001376 <exit>:
    1376:	00 00 06    	return    

00001378 <returnzero>:
    1378:	80 00 eb    	clr.w     w1
    137a:	00 00 05    	retlw.w   #0x0, w0

0000137c <__fpack>:
    137c:	81 00 20    	mov.w     #0x8, w1
    137e:	61 80 55    	sub.w     w11, #0x1, w0
    1380:	0b 00 3d    	bra       GE, 0x1398 <notsubnormal>
    1382:	0b 00 20    	mov.w     #0x0, w11
    1384:	61 fe 2f    	mov.w     #0xffe6, w1
    1386:	01 00 e1    	cp.w      w0, w1
    1388:	1d 00 34    	bra       LE, 0x13c4 <zerosig>

0000138a <subnormal>:
    138a:	82 81 71    	ior.w     w3, w2, w3
    138c:	61 01 64    	and.w     w8, #0x1, w2
    138e:	89 04 d1    	lsr.w     w9, w9
    1390:	08 84 d3    	rrc.w     w8, w8
    1392:	00 00 e8    	inc.w     w0, w0
    1394:	fa ff 3a    	bra       NZ, 0x138a <subnormal>
    1396:	71 00 20    	mov.w     #0x7, w1

00001398 <notsubnormal>:
    1398:	61 00 64    	and.w     w8, #0x1, w0
    139a:	03 00 70    	ior.w     w0, w3, w0
    139c:	02 00 60    	and.w     w0, w2, w0
    139e:	09 00 32    	bra       Z, 0x13b2 <packupandgo>
    13a0:	61 04 44    	add.w     w8, #0x1, w8
    13a2:	e0 84 4c    	addc.w    w9, #0x0, w9
    13a4:	09 88 a5    	btst.z    w9, w1
    13a6:	05 00 32    	bra       Z, 0x13b2 <packupandgo>
    13a8:	8b 05 e8    	inc.w     w11, w11
    13aa:	68 08 e1    	cp.w      w1, #0x8
    13ac:	02 00 3a    	bra       NZ, 0x13b2 <packupandgo>
    13ae:	89 04 d1    	lsr.w     w9, w9
    13b0:	08 84 d3    	rrc.w     w8, w8

000013b2 <packupandgo>:
    13b2:	f2 0f 20    	mov.w     #0xff, w2
    13b4:	02 58 e1    	cp.w      w11, w2
    13b6:	05 00 3d    	bra       GE, 0x13c2 <overflow>
    13b8:	c7 5d dd    	sl.w      w11, #0x7, w11
    13ba:	f9 07 b2    	and.w     #0x7f, w9
    13bc:	89 80 75    	ior.w     w11, w9, w1
    13be:	08 00 78    	mov.w     w8, w0
    13c0:	00 00 06    	return    

000013c2 <overflow>:
    13c2:	0b f8 27    	mov.w     #0x7f80, w11

000013c4 <zerosig>:
    13c4:	8b 00 78    	mov.w     w11, w1
    13c6:	00 00 05    	retlw.w   #0x0, w0

000013c8 <__funpack>:
    13c8:	c7 0a de    	lsr.w     w1, #0x7, w5
    13ca:	f1 07 b2    	and.w     #0x7f, w1
    13cc:	f5 0f b2    	and.w     #0xff, w5
    13ce:	08 00 32    	bra       Z, 0x13e0 <zeroorsub>
    13d0:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13d2:	02 00 32    	bra       Z, 0x13d8 <nanorinf>

000013d4 <finitereturn>:
    13d4:	01 70 a0    	bset.w    w1, #0x7
    13d6:	24 00 05    	retlw.w   #0x2, w4

000013d8 <nanorinf>:
    13d8:	81 0f 70    	ior.w     w0, w1, [w15]
    13da:	01 00 32    	bra       Z, 0x13de <infinite>
    13dc:	04 08 05    	retlw.w   #0x80, w4

000013de <infinite>:
    13de:	44 00 05    	retlw.w   #0x4, w4

000013e0 <zeroorsub>:
    13e0:	81 0f 70    	ior.w     w0, w1, [w15]
    13e2:	02 00 3a    	bra       NZ, 0x13e8 <subnormal>
    13e4:	14 00 05    	retlw.w   #0x1, w4

000013e6 <normalize>:
    13e6:	85 02 e9    	dec.w     w5, w5

000013e8 <subnormal>:
    13e8:	00 00 40    	add.w     w0, w0, w0
    13ea:	81 c0 48    	addc.b    w1, w1, w1
    13ec:	fc ff 3b    	bra       NN, 0x13e6 <normalize>
    13ee:	01 70 a0    	bset.w    w1, #0x7
    13f0:	24 00 05    	retlw.w   #0x2, w4

000013f2 <__funpack2>:
    13f2:	00 04 be    	mov.d     w0, w8
    13f4:	e9 ff 07    	rcall     0x13c8 <__funpack>
    13f6:	00 03 be    	mov.d     w0, w6
    13f8:	04 05 be    	mov.d     w4, w10
    13fa:	02 00 be    	mov.d     w2, w0
    13fc:	e5 ff 07    	rcall     0x13c8 <__funpack>
    13fe:	84 4f 75    	ior.b     w10, w4, [w15]
    1400:	00 00 06    	return    

00001402 <__fPropagateNaN>:
    1402:	02 00 be    	mov.d     w2, w0
    1404:	64 50 e1    	cp.w      w10, #0x4
    1406:	05 00 36    	bra       LEU, 0x1412 <return0>
    1408:	64 20 e1    	cp.w      w4, #0x4
    140a:	02 00 36    	bra       LEU, 0x1410 <return8>
    140c:	09 68 a3    	btst.z    w9, #0x6
    140e:	01 00 3a    	bra       NZ, 0x1412 <return0>

00001410 <return8>:
    1410:	08 00 be    	mov.d     w8, w0

00001412 <return0>:
    1412:	01 60 a0    	bset.w    w1, #0x6

00001414 <__fbopExit>:
    1414:	4f 06 78    	mov.w     [--w15], w12
    1416:	4f 05 be    	mov.d     [--w15], w10
    1418:	4f 04 be    	mov.d     [--w15], w8
    141a:	00 00 06    	return    

0000141c <__fbopReturnNaN>:
    141c:	f0 ff 2f    	mov.w     #0xffff, w0
    141e:	f1 ff 27    	mov.w     #0x7fff, w1
    1420:	f9 ff 37    	bra       0x1414 <__fbopExit>

00001422 <__fcompare>:
    1422:	88 9f be    	mov.d     w8, [w15++]
    1424:	8a 9f be    	mov.d     w10, [w15++]
    1426:	84 1f 78    	mov.w     w4, [w15++]
    1428:	e4 ff 07    	rcall     0x13f2 <__funpack2>
    142a:	4f 00 78    	mov.w     [--w15], w0
    142c:	11 00 33    	bra       N, 0x1450 <exit>
    142e:	f0 ff 2f    	mov.w     #0xffff, w0
    1430:	83 8f 6c    	xor.w     w9, w3, [w15]
    1432:	06 00 3b    	bra       NN, 0x1440 <comparemag>
    1434:	04 05 65    	and.w     w10, w4, w10
    1436:	0a 00 a7    	btsc.w    w10, #0x0
    1438:	08 00 37    	bra       0x144a <returnEqual>
    143a:	09 f0 a6    	btss.w    w9, #0xf
    143c:	10 00 20    	mov.w     #0x1, w0
    143e:	08 00 37    	bra       0x1450 <exit>

00001440 <comparemag>:
    1440:	82 0f 54    	sub.w     w8, w2, [w15]
    1442:	83 8f 5c    	subb.w    w9, w3, [w15]
    1444:	03 00 39    	bra       NC, 0x144c <adjust>
    1446:	10 00 20    	mov.w     #0x1, w0
    1448:	01 00 3e    	bra       GTU, 0x144c <adjust>

0000144a <returnEqual>:
    144a:	00 00 20    	mov.w     #0x0, w0

0000144c <adjust>:
    144c:	09 f0 a7    	btsc.w    w9, #0xf
    144e:	00 00 ea    	neg.w     w0, w0

00001450 <exit>:
    1450:	4f 05 be    	mov.d     [--w15], w10
    1452:	4f 04 be    	mov.d     [--w15], w8
    1454:	00 00 e0    	cp0.w     w0
    1456:	00 00 06    	return    

00001458 <_fputs>:
    1458:	88 9f be    	mov.d     w8, [w15++]
    145a:	00 04 be    	mov.d     w0, w8
    145c:	05 00 37    	bra       0x1468 <.L2>

0000145e <.L4>:
    145e:	00 00 fb    	se        w0, w0
    1460:	89 00 78    	mov.w     w9, w1
    1462:	19 00 07    	rcall     0x1496 <_fputc>
    1464:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1466:	04 00 32    	bra       Z, 0x1470 <.L3>

00001468 <.L2>:
    1468:	38 40 78    	mov.b     [w8++], w0
    146a:	e0 4f 50    	sub.b     w0, #0x0, [w15]
    146c:	f8 ff 3a    	bra       NZ, 0x145e <.L4>
    146e:	00 00 eb    	clr.w     w0

00001470 <.L3>:
    1470:	4f 04 be    	mov.d     [--w15], w8
    1472:	00 00 06    	return    

00001474 <_puts>:
    1474:	01 be 20    	mov.w     #0xbe0, w1
    1476:	88 1f 78    	mov.w     w8, [w15++]
    1478:	ef ff 07    	rcall     0x1458 <_fputs>
    147a:	01 be 20    	mov.w     #0xbe0, w1
    147c:	00 04 78    	mov.w     w0, w8
    147e:	a0 00 20    	mov.w     #0xa, w0
    1480:	0a 00 07    	rcall     0x1496 <_fputc>
    1482:	08 00 78    	mov.w     w8, w0
    1484:	4f 04 78    	mov.w     [--w15], w8
    1486:	00 00 06    	return    

00001488 <__printf_cdnopuxX>:
    1488:	00 be 20    	mov.w     #0xbe0, w0
    148a:	00 00 fa    	lnk       #0x0
    148c:	68 81 57    	sub.w     w15, #0x8, w2
    148e:	cf b8 97    	mov.w     [w15-8], w1
    1490:	46 00 07    	rcall     0x151e <__vfprintf_cdnopuxX>
    1492:	00 80 fa    	ulnk      
    1494:	00 00 06    	return    

00001496 <_fputc>:
    1496:	88 9f be    	mov.d     w8, [w15++]
    1498:	01 04 78    	mov.w     w1, w8
    149a:	80 84 eb    	setm.w    w9
    149c:	38 02 90    	mov.w     [w8+6], w4
    149e:	e2 02 62    	and.w     w4, #0x2, w5
    14a0:	3b 00 32    	bra       Z, 0x1518 <.L2>
    14a2:	04 03 78    	mov.w     w4, w6
    14a4:	98 02 90    	mov.w     [w8+2], w5
    14a6:	06 20 b2    	and.w     #0x200, w6
    14a8:	02 00 3a    	bra       NZ, 0x14ae <.L3>
    14aa:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    14ac:	35 00 3a    	bra       NZ, 0x1518 <.L2>

000014ae <.L3>:
    14ae:	04 90 a0    	bset.w    w4, #0x9
    14b0:	80 04 78    	mov.w     w0, w9
    14b2:	34 04 98    	mov.w     w4, [w8+6]
    14b4:	f9 0f b2    	and.w     #0xff, w9
    14b6:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    14b8:	02 00 3a    	bra       NZ, 0x14be <.L4>
    14ba:	a8 02 90    	mov.w     [w8+4], w5
    14bc:	05 0c 78    	mov.w     w5, [w8]

000014be <.L4>:
    14be:	ea 8f 54    	sub.w     w9, #0xa, [w15]
    14c0:	05 00 3a    	bra       NZ, 0x14cc <.L5>
    14c2:	04 08 b2    	and.w     #0x80, w4
    14c4:	03 00 3a    	bra       NZ, 0x14cc <.L5>
    14c6:	88 00 78    	mov.w     w8, w1
    14c8:	d0 00 20    	mov.w     #0xd, w0
    14ca:	e5 ff 07    	rcall     0x1496 <_fputc>

000014cc <.L5>:
    14cc:	18 02 90    	mov.w     [w8+2], w4
    14ce:	d8 02 90    	mov.w     [w8+10], w5
    14d0:	85 0f 52    	sub.w     w4, w5, [w15]
    14d2:	0b 00 32    	bra       Z, 0x14ea <.L6>
    14d4:	04 02 e8    	inc.w     w4, w4
    14d6:	15 c0 b3    	mov.b     #0x1, w5
    14d8:	14 04 98    	mov.w     w4, [w8+2]
    14da:	18 02 78    	mov.w     [w8], w4
    14dc:	09 4a 78    	mov.b     w9, [w4]
    14de:	04 0c e8    	inc.w     w4, [w8]
    14e0:	a4 bf 20    	mov.w     #0xbfa, w4
    14e2:	05 4a 78    	mov.b     w5, [w4]
    14e4:	ea 8f 54    	sub.w     w9, #0xa, [w15]
    14e6:	18 00 3a    	bra       NZ, 0x1518 <.L2>
    14e8:	05 00 37    	bra       0x14f4 <.L11>

000014ea <.L6>:
    14ea:	09 40 78    	mov.b     w9, w0
    14ec:	88 00 78    	mov.w     w8, w1
    14ee:	93 03 07    	rcall     0x1c16 <__flsbuf>
    14f0:	80 04 78    	mov.w     w0, w9
    14f2:	12 00 37    	bra       0x1518 <.L2>

000014f4 <.L11>:
    14f4:	38 02 90    	mov.w     [w8+6], w4
    14f6:	04 10 b2    	and.w     #0x100, w4
    14f8:	0f 00 32    	bra       Z, 0x1518 <.L2>
    14fa:	18 01 90    	mov.w     [w8+2], w2
    14fc:	a8 00 90    	mov.w     [w8+4], w1
    14fe:	48 00 90    	mov.w     [w8+8], w0
    1500:	21 07 07    	rcall     0x2344 <_write>
    1502:	18 02 90    	mov.w     [w8+2], w4
    1504:	84 0f 50    	sub.w     w0, w4, [w15]
    1506:	04 00 32    	bra       Z, 0x1510 <.L8>
    1508:	38 02 90    	mov.w     [w8+6], w4
    150a:	04 03 b3    	ior.w     #0x30, w4
    150c:	34 04 98    	mov.w     w4, [w8+6]
    150e:	80 84 eb    	setm.w    w9

00001510 <.L8>:
    1510:	00 02 eb    	clr.w     w4
    1512:	14 04 98    	mov.w     w4, [w8+2]
    1514:	28 02 90    	mov.w     [w8+4], w4
    1516:	04 0c 78    	mov.w     w4, [w8]

00001518 <.L2>:
    1518:	09 00 78    	mov.w     w9, w0
    151a:	4f 04 be    	mov.d     [--w15], w8
    151c:	00 00 06    	return    

0000151e <__vfprintf_cdnopuxX>:
    151e:	ef 03 b0    	add.w     #0x3e, w15
    1520:	88 9f be    	mov.d     w8, [w15++]
    1522:	8a 9f be    	mov.d     w10, [w15++]
    1524:	8c 9f be    	mov.d     w12, [w15++]
    1526:	80 06 78    	mov.w     w0, w13
    1528:	8e 1f 78    	mov.w     w14, [w15++]
    152a:	00 07 eb    	clr.w     w14
    152c:	d1 af 9f    	mov.w     w1, [w15-38]
    152e:	a2 b7 9f    	mov.w     w2, [w15-28]
    1530:	66 03 37    	bra       0x1bfe <.L162>

00001532 <.L134>:
    1532:	df a8 97    	mov.w     [w15-38], w1
    1534:	54 c2 b3    	mov.b     #0x25, w4
    1536:	81 00 e8    	inc.w     w1, w1
    1538:	d1 af 9f    	mov.w     w1, [w15-38]
    153a:	84 4f 50    	sub.b     w0, w4, [w15]
    153c:	06 00 3a    	bra       NZ, 0x154a <.L3>
    153e:	01 02 78    	mov.w     w1, w4
    1540:	00 06 eb    	clr.w     w12
    1542:	01 c3 b3    	mov.b     #0x30, w1
    1544:	00 c2 b3    	mov.b     #0x20, w0
    1546:	b7 c2 b3    	mov.b     #0x2b, w7
    1548:	0e 00 37    	bra       0x1566 <.L163>

0000154a <.L3>:
    154a:	3d 02 90    	mov.w     [w13+6], w4
    154c:	04 04 b2    	and.w     #0x40, w4
    154e:	04 00 32    	bra       Z, 0x1558 <.L5>
    1550:	1d 02 78    	mov.w     [w13], w4
    1552:	00 4a 78    	mov.b     w0, [w4]
    1554:	84 0e e8    	inc.w     w4, [w13]
    1556:	05 00 37    	bra       0x1562 <.L6>

00001558 <.L5>:
    1558:	00 00 fb    	se        w0, w0
    155a:	8d 00 78    	mov.w     w13, w1
    155c:	9c ff 07    	rcall     0x1496 <_fputc>
    155e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1560:	4e 03 32    	bra       Z, 0x1bfe <.L162>

00001562 <.L6>:
    1562:	0e 07 e8    	inc.w     w14, w14
    1564:	4c 03 37    	bra       0x1bfe <.L162>

00001566 <.L163>:
    1566:	84 02 78    	mov.w     w4, w5
    1568:	d2 c2 b3    	mov.b     #0x2d, w2
    156a:	34 43 78    	mov.b     [w4++], w6
    156c:	82 4f 53    	sub.b     w6, w2, [w15]
    156e:	09 00 32    	bra       Z, 0x1582 <.L11>
    1570:	05 00 3c    	bra       GT, 0x157c <.L13>
    1572:	80 4f 53    	sub.b     w6, w0, [w15]
    1574:	08 00 32    	bra       Z, 0x1586 <.L9>
    1576:	87 4f 53    	sub.b     w6, w7, [w15]
    1578:	0c 00 3a    	bra       NZ, 0x1592 <.L8>
    157a:	07 00 37    	bra       0x158a <.L175>

0000157c <.L13>:
    157c:	81 4f 53    	sub.b     w6, w1, [w15]
    157e:	09 00 3a    	bra       NZ, 0x1592 <.L8>
    1580:	06 00 37    	bra       0x158e <.L176>

00001582 <.L11>:
    1582:	0c 30 a0    	bset.w    w12, #0x3
    1584:	f0 ff 37    	bra       0x1566 <.L163>

00001586 <.L9>:
    1586:	0c 00 a0    	bset.w    w12, #0x0
    1588:	ee ff 37    	bra       0x1566 <.L163>

0000158a <.L175>:
    158a:	0c 10 a0    	bset.w    w12, #0x1
    158c:	ec ff 37    	bra       0x1566 <.L163>

0000158e <.L176>:
    158e:	0c 20 a0    	bset.w    w12, #0x2
    1590:	ea ff 37    	bra       0x1566 <.L163>

00001592 <.L8>:
    1592:	62 02 66    	and.w     w12, #0x2, w4
    1594:	01 00 32    	bra       Z, 0x1598 <.L15>
    1596:	0c 00 a1    	bclr.w    w12, #0x0

00001598 <.L15>:
    1598:	68 02 66    	and.w     w12, #0x8, w4
    159a:	01 00 32    	bra       Z, 0x159e <.L16>
    159c:	0c 20 a1    	bclr.w    w12, #0x2

0000159e <.L16>:
    159e:	06 02 fb    	se        w6, w4
    15a0:	04 03 b1    	sub.w     #0x30, w4
    15a2:	e9 0f 52    	sub.w     w4, #0x9, [w15]
    15a4:	0c 00 3e    	bra       GTU, 0x15be <.L17>
    15a6:	05 03 78    	mov.w     w5, w6
    15a8:	00 02 eb    	clr.w     w4

000015aa <.L18>:
    15aa:	b6 03 fb    	se        [w6++], w7
    15ac:	6a 22 b9    	mul.su    w4, #0xa, w4
    15ae:	07 03 b1    	sub.w     #0x30, w7
    15b0:	86 02 78    	mov.w     w6, w5
    15b2:	04 82 43    	add.w     w7, w4, w4
    15b4:	96 03 fb    	se        [w6], w7
    15b6:	07 03 b1    	sub.w     #0x30, w7
    15b8:	e9 8f 53    	sub.w     w7, #0x9, [w15]
    15ba:	f7 ff 36    	bra       LEU, 0x15aa <.L18>
    15bc:	08 00 37    	bra       0x15ce <.L19>

000015be <.L17>:
    15be:	00 02 eb    	clr.w     w4
    15c0:	a7 c2 b3    	mov.b     #0x2a, w7
    15c2:	87 4f 53    	sub.b     w6, w7, [w15]
    15c4:	04 00 3a    	bra       NZ, 0x15ce <.L19>
    15c6:	af b1 97    	mov.w     [w15-28], w3
    15c8:	85 02 e8    	inc.w     w5, w5
    15ca:	43 02 78    	mov.w     [--w3], w4
    15cc:	a3 b7 9f    	mov.w     w3, [w15-28]

000015ce <.L19>:
    15ce:	00 03 eb    	clr.w     w6
    15d0:	96 b7 9f    	mov.w     w6, [w15-30]
    15d2:	e6 c2 b3    	mov.b     #0x2e, w6
    15d4:	95 4f 13    	subr.b    w6, [w5], [w15]
    15d6:	0c 00 3a    	bra       NZ, 0x15f0 <.L20>
    15d8:	0c e0 a0    	bset.w    w12, #0xe
    15da:	64 43 53    	sub.b     w6, #0x4, w6
    15dc:	d5 4f 13    	subr.b    w6, [++w5], [w15]
    15de:	03 00 32    	bra       Z, 0x15e6 <.L21>
    15e0:	05 03 78    	mov.w     w5, w6
    15e2:	00 00 eb    	clr.w     w0
    15e4:	09 00 37    	bra       0x15f8 <.L22>

000015e6 <.L21>:
    15e6:	af b3 97    	mov.w     [w15-28], w7
    15e8:	85 02 e8    	inc.w     w5, w5
    15ea:	47 04 78    	mov.w     [--w7], w8
    15ec:	a7 b7 9f    	mov.w     w7, [w15-28]
    15ee:	98 b7 9f    	mov.w     w8, [w15-30]

000015f0 <.L20>:
    15f0:	05 03 78    	mov.w     w5, w6
    15f2:	09 00 37    	bra       0x1606 <.L23>

000015f4 <.L24>:
    15f4:	6a 00 b9    	mul.su    w0, #0xa, w0
    15f6:	00 80 43    	add.w     w7, w0, w0

000015f8 <.L22>:
    15f8:	86 02 78    	mov.w     w6, w5
    15fa:	b6 03 fb    	se        [w6++], w7
    15fc:	07 03 b1    	sub.w     #0x30, w7
    15fe:	e9 8f 53    	sub.w     w7, #0x9, [w15]
    1600:	f9 ff 36    	bra       LEU, 0x15f4 <.L24>
    1602:	90 b7 9f    	mov.w     w0, [w15-30]
    1604:	f5 ff 37    	bra       0x15f0 <.L20>

00001606 <.L23>:
    1606:	b6 42 78    	mov.b     [w6++], w5
    1608:	ca c6 b3    	mov.b     #0x6c, w10
    160a:	d6 af 9f    	mov.w     w6, [w15-38]
    160c:	8a cf 52    	sub.b     w5, w10, [w15]
    160e:	25 00 32    	bra       Z, 0x165a <.L30>
    1610:	0f 00 3c    	bra       GT, 0x1630 <.L35>
    1612:	36 c6 b3    	mov.b     #0x63, w6
    1614:	86 cf 52    	sub.b     w5, w6, [w15]
    1616:	9e 00 32    	bra       Z, 0x1754 <.L28>
    1618:	04 00 3c    	bra       GT, 0x1622 <.L36>
    161a:	e0 cf 52    	sub.b     w5, #0x0, [w15]
    161c:	f5 02 32    	bra       Z, 0x1c08 <.L26>
    161e:	6b 43 53    	sub.b     w6, #0xb, w6
    1620:	0f 00 37    	bra       0x1640 <.L166>

00001622 <.L36>:
    1622:	46 c6 b3    	mov.b     #0x64, w6
    1624:	86 cf 52    	sub.b     w5, w6, [w15]
    1626:	17 00 32    	bra       Z, 0x1656 <.L29>
    1628:	65 43 43    	add.b     w6, #0x5, w6
    162a:	86 cf 52    	sub.b     w5, w6, [w15]
    162c:	b2 00 3a    	bra       NZ, 0x1792 <.L25>
    162e:	13 00 37    	bra       0x1656 <.L29>

00001630 <.L35>:
    1630:	36 c7 b3    	mov.b     #0x73, w6
    1632:	86 cf 52    	sub.b     w5, w6, [w15]
    1634:	1f 00 32    	bra       Z, 0x1674 <.L32>
    1636:	07 00 3c    	bra       GT, 0x1646 <.L37>
    1638:	64 43 53    	sub.b     w6, #0x4, w6
    163a:	86 cf 52    	sub.b     w5, w6, [w15]
    163c:	14 00 32    	bra       Z, 0x1666 <.L31>
    163e:	06 43 e8    	inc.b     w6, w6

00001640 <.L166>:
    1640:	86 cf 52    	sub.b     w5, w6, [w15]
    1642:	a7 00 3a    	bra       NZ, 0x1792 <.L25>
    1644:	13 00 37    	bra       0x166c <.L177>

00001646 <.L37>:
    1646:	56 c7 b3    	mov.b     #0x75, w6
    1648:	86 cf 52    	sub.b     w5, w6, [w15]
    164a:	aa 00 32    	bra       Z, 0x17a0 <.L33>
    164c:	63 43 43    	add.b     w6, #0x3, w6
    164e:	86 cf 52    	sub.b     w5, w6, [w15]
    1650:	a0 00 3a    	bra       NZ, 0x1792 <.L25>
    1652:	e5 77 9f    	mov.b     w5, [w15-74]
    1654:	0d 00 37    	bra       0x1670 <.L38>

00001656 <.L29>:
    1656:	e5 77 9f    	mov.b     w5, [w15-74]
    1658:	a5 00 37    	bra       0x17a4 <.L39>

0000165a <.L30>:
    165a:	f0 03 66    	and.w     w12, #0x10, w7
    165c:	05 01 20    	mov.w     #0x10, w5
    165e:	01 00 32    	bra       Z, 0x1662 <.L40>
    1660:	05 00 28    	mov.w     #0x8000, w5

00001662 <.L40>:
    1662:	0c 86 72    	ior.w     w5, w12, w12
    1664:	d0 ff 37    	bra       0x1606 <.L23>

00001666 <.L31>:
    1666:	e5 77 9f    	mov.b     w5, [w15-74]
    1668:	0c 60 a0    	bset.w    w12, #0x6
    166a:	9c 00 37    	bra       0x17a4 <.L39>

0000166c <.L177>:
    166c:	e5 77 9f    	mov.b     w5, [w15-74]
    166e:	0c 50 a0    	bset.w    w12, #0x5

00001670 <.L38>:
    1670:	0c 70 a0    	bset.w    w12, #0x7
    1672:	98 00 37    	bra       0x17a4 <.L39>

00001674 <.L32>:
    1674:	af b5 97    	mov.w     [w15-28], w11
    1676:	e5 77 9f    	mov.b     w5, [w15-74]
    1678:	cb 02 78    	mov.w     [--w11], w5
    167a:	ab b7 9f    	mov.w     w11, [w15-28]
    167c:	b5 b7 9f    	mov.w     w5, [w15-26]
    167e:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1680:	02 00 3a    	bra       NZ, 0x1686 <.L41>
    1682:	c1 bc 20    	mov.w     #0xbcc, w1
    1684:	b1 b7 9f    	mov.w     w1, [w15-26]

00001686 <.L41>:
    1686:	3f b3 97    	mov.w     [w15-26], w6
    1688:	80 02 eb    	clr.w     w5
    168a:	01 00 37    	bra       0x168e <.L42>

0000168c <.L43>:
    168c:	85 02 e8    	inc.w     w5, w5

0000168e <.L42>:
    168e:	e6 c3 7a    	mov.b     [w6+w5], w7
    1690:	e0 cf 53    	sub.b     w7, #0x0, [w15]
    1692:	fc ff 3a    	bra       NZ, 0x168c <.L43>
    1694:	c5 b7 9f    	mov.w     w5, [w15-24]

00001696 <.L44>:
    1696:	1f b1 97    	mov.w     [w15-30], w2
    1698:	e0 0f 51    	sub.w     w2, #0x0, [w15]
    169a:	05 00 32    	bra       Z, 0x16a6 <.L45>
    169c:	cf b1 97    	mov.w     [w15-24], w3
    169e:	83 0f 51    	sub.w     w2, w3, [w15]
    16a0:	02 00 31    	bra       C, 0x16a6 <.L45>
    16a2:	82 02 78    	mov.w     w2, w5
    16a4:	c5 b7 9f    	mov.w     w5, [w15-24]

000016a6 <.L45>:
    16a6:	cf b2 97    	mov.w     [w15-24], w5
    16a8:	00 04 eb    	clr.w     w8
    16aa:	85 0f 52    	sub.w     w4, w5, [w15]
    16ac:	01 00 36    	bra       LEU, 0x16b0 <.L46>
    16ae:	05 04 52    	sub.w     w4, w5, w8

000016b0 <.L46>:
    16b0:	68 06 66    	and.w     w12, #0x8, w12
    16b2:	09 c2 b3    	mov.b     #0x20, w9
    16b4:	0f 00 32    	bra       Z, 0x16d4 <.L48>
    16b6:	29 00 37    	bra       0x170a <.L164>

000016b8 <.L53>:
    16b8:	3d 02 90    	mov.w     [w13+6], w4
    16ba:	04 04 b2    	and.w     #0x40, w4
    16bc:	04 00 32    	bra       Z, 0x16c6 <.L50>
    16be:	1d 02 78    	mov.w     [w13], w4
    16c0:	09 4a 78    	mov.b     w9, [w4]
    16c2:	84 0e e8    	inc.w     w4, [w13]
    16c4:	05 00 37    	bra       0x16d0 <.L51>

000016c6 <.L50>:
    16c6:	8d 00 78    	mov.w     w13, w1
    16c8:	00 02 20    	mov.w     #0x20, w0
    16ca:	e5 fe 07    	rcall     0x1496 <_fputc>
    16cc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    16ce:	01 00 32    	bra       Z, 0x16d2 <.L52>

000016d0 <.L51>:
    16d0:	0e 07 e8    	inc.w     w14, w14

000016d2 <.L52>:
    16d2:	08 04 e9    	dec.w     w8, w8

000016d4 <.L48>:
    16d4:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    16d6:	f0 ff 3a    	bra       NZ, 0x16b8 <.L53>
    16d8:	00 84 eb    	setm.w    w8
    16da:	17 00 37    	bra       0x170a <.L164>

000016dc <.L57>:
    16dc:	bd 02 90    	mov.w     [w13+6], w5
    16de:	05 04 b2    	and.w     #0x40, w5
    16e0:	09 00 32    	bra       Z, 0x16f4 <.L54>
    16e2:	88 02 78    	mov.w     w8, w5
    16e4:	9d 03 78    	mov.w     [w13], w7
    16e6:	35 43 78    	mov.b     [w5++], w6
    16e8:	86 4b 78    	mov.b     w6, [w7]
    16ea:	05 04 78    	mov.w     w5, w8
    16ec:	87 0e e8    	inc.w     w7, [w13]
    16ee:	e0 4f 53    	sub.b     w6, #0x0, [w15]
    16f0:	0a 00 3a    	bra       NZ, 0x1706 <.L55>
    16f2:	11 00 37    	bra       0x1716 <.L161>

000016f4 <.L54>:
    16f4:	88 02 78    	mov.w     w8, w5
    16f6:	8d 00 78    	mov.w     w13, w1
    16f8:	35 00 fb    	se        [w5++], w0
    16fa:	84 bf 9f    	mov.w     w4, [w15-16]
    16fc:	05 04 78    	mov.w     w5, w8
    16fe:	cb fe 07    	rcall     0x1496 <_fputc>
    1700:	0f ba 97    	mov.w     [w15-16], w4
    1702:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1704:	08 00 32    	bra       Z, 0x1716 <.L161>

00001706 <.L55>:
    1706:	0e 07 e8    	inc.w     w14, w14
    1708:	06 00 37    	bra       0x1716 <.L161>

0000170a <.L164>:
    170a:	0c 02 78    	mov.w     w12, w4
    170c:	08 06 78    	mov.w     w8, w12
    170e:	3f b4 97    	mov.w     [w15-26], w8
    1710:	cf b4 97    	mov.w     [w15-24], w9
    1712:	5f b5 97    	mov.w     [w15-22], w10
    1714:	ef b5 97    	mov.w     [w15-20], w11

00001716 <.L161>:
    1716:	89 02 78    	mov.w     w9, w5
    1718:	85 04 e9    	dec.w     w5, w9
    171a:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    171c:	df ff 3a    	bra       NZ, 0x16dc <.L57>
    171e:	b8 b7 9f    	mov.w     w8, [w15-26]
    1720:	c9 b7 9f    	mov.w     w9, [w15-24]
    1722:	da b7 9f    	mov.w     w10, [w15-22]
    1724:	eb b7 9f    	mov.w     w11, [w15-20]
    1726:	0c 04 78    	mov.w     w12, w8
    1728:	09 c2 b3    	mov.b     #0x20, w9
    172a:	04 06 78    	mov.w     w4, w12
    172c:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    172e:	0f 00 3a    	bra       NZ, 0x174e <.L58>
    1730:	66 02 37    	bra       0x1bfe <.L162>

00001732 <.L62>:
    1732:	3d 02 90    	mov.w     [w13+6], w4
    1734:	04 04 b2    	and.w     #0x40, w4
    1736:	04 00 32    	bra       Z, 0x1740 <.L59>
    1738:	1d 02 78    	mov.w     [w13], w4
    173a:	09 4a 78    	mov.b     w9, [w4]
    173c:	84 0e e8    	inc.w     w4, [w13]
    173e:	05 00 37    	bra       0x174a <.L60>

00001740 <.L59>:
    1740:	8d 00 78    	mov.w     w13, w1
    1742:	00 02 20    	mov.w     #0x20, w0
    1744:	a8 fe 07    	rcall     0x1496 <_fputc>
    1746:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1748:	01 00 32    	bra       Z, 0x174c <.L61>

0000174a <.L60>:
    174a:	0e 07 e8    	inc.w     w14, w14

0000174c <.L61>:
    174c:	08 04 e9    	dec.w     w8, w8

0000174e <.L58>:
    174e:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1750:	f0 ff 3a    	bra       NZ, 0x1732 <.L62>
    1752:	55 02 37    	bra       0x1bfe <.L162>

00001754 <.L28>:
    1754:	af b0 97    	mov.w     [w15-28], w1
    1756:	70 03 66    	and.w     w12, #0x10, w6
    1758:	41 04 78    	mov.w     [--w1], w8
    175a:	a1 b7 9f    	mov.w     w1, [w15-28]
    175c:	cf c4 de    	asr.w     w8, #0xf, w9
    175e:	09 05 78    	mov.w     w9, w10
    1760:	8a 05 78    	mov.w     w10, w11
    1762:	08 00 be    	mov.d     w8, w0
    1764:	0a 01 be    	mov.d     w10, w2
    1766:	48 00 de    	lsr.w     w0, #0x8, w0
    1768:	c8 0a dd    	sl.w      w1, #0x8, w5
    176a:	00 80 72    	ior.w     w5, w0, w0
    176c:	e0 77 9f    	mov.b     w0, [w15-74]
    176e:	e0 0f 53    	sub.w     w6, #0x0, [w15]
    1770:	09 00 32    	bra       Z, 0x1784 <.L63>
    1772:	e0 4f 50    	sub.b     w0, #0x0, [w15]
    1774:	07 00 32    	bra       Z, 0x1784 <.L63>
    1776:	e1 4f 40    	add.b     w0, #0x1, [w15]
    1778:	05 00 32    	bra       Z, 0x1784 <.L63>
    177a:	26 00 20    	mov.w     #0x2, w6
    177c:	f0 77 9f    	mov.b     w0, [w15-73]
    177e:	88 7f 9f    	mov.b     w8, [w15-72]
    1780:	c6 b7 9f    	mov.w     w6, [w15-24]
    1782:	03 00 37    	bra       0x178a <.L64>

00001784 <.L63>:
    1784:	17 00 20    	mov.w     #0x1, w7
    1786:	c7 b7 9f    	mov.w     w7, [w15-24]
    1788:	f8 77 9f    	mov.b     w8, [w15-73]

0000178a <.L64>:
    178a:	78 fb 2f    	mov.w     #0xffb7, w8
    178c:	08 84 47    	add.w     w15, w8, w8
    178e:	b8 b7 9f    	mov.w     w8, [w15-26]
    1790:	82 ff 37    	bra       0x1696 <.L44>

00001792 <.L25>:
    1792:	69 fb 2f    	mov.w     #0xffb6, w9
    1794:	1a 00 20    	mov.w     #0x1, w10
    1796:	89 84 47    	add.w     w15, w9, w9
    1798:	e5 77 9f    	mov.b     w5, [w15-74]
    179a:	b9 b7 9f    	mov.w     w9, [w15-26]
    179c:	ca b7 9f    	mov.w     w10, [w15-24]
    179e:	7b ff 37    	bra       0x1696 <.L44>

000017a0 <.L33>:
    17a0:	e5 77 9f    	mov.b     w5, [w15-74]
    17a2:	0c 0c b3    	ior.w     #0xc0, w12

000017a4 <.L39>:
    17a4:	8c 02 78    	mov.w     w12, w5
    17a6:	05 0c b2    	and.w     #0xc0, w5
    17a8:	3b 00 3a    	bra       NZ, 0x1820 <.L65>
    17aa:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    17ac:	05 00 3d    	bra       GE, 0x17b8 <.L66>
    17ae:	af b2 97    	mov.w     [w15-28], w5
    17b0:	45 01 be    	mov.d     [--w5], w2
    17b2:	45 00 be    	mov.d     [--w5], w0
    17b4:	a5 b7 9f    	mov.w     w5, [w15-28]
    17b6:	0f 00 37    	bra       0x17d6 <.L167>

000017b8 <.L66>:
    17b8:	f0 02 66    	and.w     w12, #0x10, w5
    17ba:	12 00 32    	bra       Z, 0x17e0 <.L68>
    17bc:	2f b4 97    	mov.w     [w15-28], w8
    17be:	48 03 be    	mov.d     [--w8], w6
    17c0:	f6 9f 9f    	mov.w     w6, [w15-66]
    17c2:	87 a7 9f    	mov.w     w7, [w15-64]
    17c4:	a8 b7 9f    	mov.w     w8, [w15-28]
    17c6:	98 02 90    	mov.w     [w8+2], w5
    17c8:	cf aa de    	asr.w     w5, #0xf, w5
    17ca:	95 a7 9f    	mov.w     w5, [w15-62]
    17cc:	a5 a7 9f    	mov.w     w5, [w15-60]
    17ce:	7f 98 97    	mov.w     [w15-66], w0
    17d0:	8f a0 97    	mov.w     [w15-64], w1
    17d2:	1f a1 97    	mov.w     [w15-62], w2
    17d4:	af a1 97    	mov.w     [w15-60], w3

000017d6 <.L167>:
    17d6:	b0 b7 9f    	mov.w     w0, [w15-26]
    17d8:	c1 b7 9f    	mov.w     w1, [w15-24]
    17da:	d2 b7 9f    	mov.w     w2, [w15-22]
    17dc:	e3 b7 9f    	mov.w     w3, [w15-20]
    17de:	0b 00 37    	bra       0x17f6 <.L67>

000017e0 <.L68>:
    17e0:	af b0 97    	mov.w     [w15-28], w1
    17e2:	c1 02 78    	mov.w     [--w1], w5
    17e4:	05 04 78    	mov.w     w5, w8
    17e6:	cf c4 de    	asr.w     w8, #0xf, w9
    17e8:	09 05 78    	mov.w     w9, w10
    17ea:	8a 05 78    	mov.w     w10, w11
    17ec:	a1 b7 9f    	mov.w     w1, [w15-28]
    17ee:	b8 b7 9f    	mov.w     w8, [w15-26]
    17f0:	c9 b7 9f    	mov.w     w9, [w15-24]
    17f2:	da b7 9f    	mov.w     w10, [w15-22]
    17f4:	eb b7 9f    	mov.w     w11, [w15-20]

000017f6 <.L67>:
    17f6:	3f b0 97    	mov.w     [w15-26], w0
    17f8:	cf b0 97    	mov.w     [w15-24], w1
    17fa:	5f b1 97    	mov.w     [w15-22], w2
    17fc:	ef b1 97    	mov.w     [w15-20], w3
    17fe:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1800:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1802:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1804:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1806:	32 00 3d    	bra       GE, 0x186c <.L69>
    1808:	60 00 b8    	mul.uu    w0, #0x0, w0
    180a:	60 11 b8    	mul.uu    w2, #0x0, w2
    180c:	3f b4 97    	mov.w     [w15-26], w8
    180e:	cf b4 97    	mov.w     [w15-24], w9
    1810:	5f b5 97    	mov.w     [w15-22], w10
    1812:	ef b5 97    	mov.w     [w15-20], w11
    1814:	3c 00 b3    	ior.w     #0x3, w12
    1816:	08 04 50    	sub.w     w0, w8, w8
    1818:	89 84 58    	subb.w    w1, w9, w9
    181a:	0a 05 59    	subb.w    w2, w10, w10
    181c:	8b 85 59    	subb.w    w3, w11, w11
    181e:	22 00 37    	bra       0x1864 <.L168>

00001820 <.L65>:
    1820:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1822:	05 00 3d    	bra       GE, 0x182e <.L70>
    1824:	af b2 97    	mov.w     [w15-28], w5
    1826:	45 01 be    	mov.d     [--w5], w2
    1828:	45 00 be    	mov.d     [--w5], w0
    182a:	a5 b7 9f    	mov.w     w5, [w15-28]
    182c:	0f 00 37    	bra       0x184c <.L169>

0000182e <.L70>:
    182e:	f0 02 66    	and.w     w12, #0x10, w5
    1830:	12 00 32    	bra       Z, 0x1856 <.L71>
    1832:	2f b4 97    	mov.w     [w15-28], w8
    1834:	80 04 eb    	clr.w     w9
    1836:	48 03 be    	mov.d     [--w8], w6
    1838:	00 05 eb    	clr.w     w10
    183a:	96 af 9f    	mov.w     w6, [w15-46]
    183c:	a7 af 9f    	mov.w     w7, [w15-44]
    183e:	b9 af 9f    	mov.w     w9, [w15-42]
    1840:	ca af 9f    	mov.w     w10, [w15-40]
    1842:	1f a8 97    	mov.w     [w15-46], w0
    1844:	af a8 97    	mov.w     [w15-44], w1
    1846:	3f a9 97    	mov.w     [w15-42], w2
    1848:	cf a9 97    	mov.w     [w15-40], w3
    184a:	a8 b7 9f    	mov.w     w8, [w15-28]

0000184c <.L169>:
    184c:	b0 b7 9f    	mov.w     w0, [w15-26]
    184e:	c1 b7 9f    	mov.w     w1, [w15-24]
    1850:	d2 b7 9f    	mov.w     w2, [w15-22]
    1852:	e3 b7 9f    	mov.w     w3, [w15-20]
    1854:	0b 00 37    	bra       0x186c <.L69>

00001856 <.L71>:
    1856:	af b0 97    	mov.w     [w15-28], w1
    1858:	c1 02 78    	mov.w     [--w1], w5
    185a:	a1 b7 9f    	mov.w     w1, [w15-28]
    185c:	05 04 78    	mov.w     w5, w8
    185e:	09 00 20    	mov.w     #0x0, w9
    1860:	0a 00 20    	mov.w     #0x0, w10
    1862:	0b 00 20    	mov.w     #0x0, w11

00001864 <.L168>:
    1864:	b8 b7 9f    	mov.w     w8, [w15-26]
    1866:	c9 b7 9f    	mov.w     w9, [w15-24]
    1868:	da b7 9f    	mov.w     w10, [w15-22]
    186a:	eb b7 9f    	mov.w     w11, [w15-20]

0000186c <.L69>:
    186c:	9f b4 97    	mov.w     [w15-30], w9
    186e:	e0 8f 54    	sub.w     w9, #0x0, [w15]
    1870:	0d 00 3a    	bra       NZ, 0x188c <.L72>
    1872:	1a 00 20    	mov.w     #0x1, w10
    1874:	3f b0 97    	mov.w     [w15-26], w0
    1876:	cf b0 97    	mov.w     [w15-24], w1
    1878:	5f b1 97    	mov.w     [w15-22], w2
    187a:	ef b1 97    	mov.w     [w15-20], w3
    187c:	9a b7 9f    	mov.w     w10, [w15-30]
    187e:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1880:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1882:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1884:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1886:	02 00 32    	bra       Z, 0x188c <.L72>
    1888:	80 00 eb    	clr.w     w1
    188a:	91 b7 9f    	mov.w     w1, [w15-30]

0000188c <.L72>:
    188c:	0c 01 78    	mov.w     w12, w2
    188e:	05 04 20    	mov.w     #0x40, w5
    1890:	02 0c b2    	and.w     #0xc0, w2
    1892:	82 b7 9f    	mov.w     w2, [w15-32]
    1894:	85 0f 51    	sub.w     w2, w5, [w15]
    1896:	34 00 32    	bra       Z, 0x1900 <.L76>
    1898:	03 00 3c    	bra       GT, 0x18a0 <.L78>
    189a:	e0 0f 51    	sub.w     w2, #0x0, [w15]
    189c:	08 00 32    	bra       Z, 0x18ae <.L75>
    189e:	48 00 37    	bra       0x1930 <.L74>

000018a0 <.L78>:
    18a0:	05 08 20    	mov.w     #0x80, w5
    18a2:	8f b1 97    	mov.w     [w15-32], w3
    18a4:	85 8f 51    	sub.w     w3, w5, [w15]
    18a6:	14 00 32    	bra       Z, 0x18d0 <.L77>
    18a8:	05 0c 20    	mov.w     #0xc0, w5
    18aa:	85 8f 51    	sub.w     w3, w5, [w15]
    18ac:	41 00 3a    	bra       NZ, 0x1930 <.L74>

000018ae <.L75>:
    18ae:	86 c8 20    	mov.w     #0xc88, w6
    18b0:	15 c0 b3    	mov.b     #0x1, w5

000018b2 <.L80>:
    18b2:	36 00 be    	mov.d     [w6++], w0
    18b4:	36 01 be    	mov.d     [w6++], w2
    18b6:	3f b4 97    	mov.w     [w15-26], w8
    18b8:	cf b4 97    	mov.w     [w15-24], w9
    18ba:	5f b5 97    	mov.w     [w15-22], w10
    18bc:	ef b5 97    	mov.w     [w15-20], w11
    18be:	00 40 e1    	cp.w      w8, w0
    18c0:	01 c8 e1    	cpb.w     w9, w1
    18c2:	02 d0 e1    	cpb.w     w10, w2
    18c4:	03 d8 e1    	cpb.w     w11, w3
    18c6:	33 00 39    	bra       NC, 0x192e <.L170>
    18c8:	85 42 e8    	inc.b     w5, w5
    18ca:	f4 cf 52    	sub.b     w5, #0x14, [w15]
    18cc:	f2 ff 3a    	bra       NZ, 0x18b2 <.L80>
    18ce:	2f 00 37    	bra       0x192e <.L170>

000018d0 <.L77>:
    18d0:	15 c0 b3    	mov.b     #0x1, w5
    18d2:	00 01 20    	mov.w     #0x10, w0
    18d4:	01 00 20    	mov.w     #0x0, w1
    18d6:	60 11 b8    	mul.uu    w2, #0x0, w2

000018d8 <.L82>:
    18d8:	3f b4 97    	mov.w     [w15-26], w8
    18da:	cf b4 97    	mov.w     [w15-24], w9
    18dc:	5f b5 97    	mov.w     [w15-22], w10
    18de:	ef b5 97    	mov.w     [w15-20], w11
    18e0:	00 40 e1    	cp.w      w8, w0
    18e2:	01 c8 e1    	cpb.w     w9, w1
    18e4:	02 d0 e1    	cpb.w     w10, w2
    18e6:	03 d8 e1    	cpb.w     w11, w3
    18e8:	22 00 39    	bra       NC, 0x192e <.L170>
    18ea:	49 00 20    	mov.w     #0x4, w9

000018ec <.LB705>:
    18ec:	00 00 d0    	sl.w      w0, w0
    18ee:	81 80 d2    	rlc.w     w1, w1
    18f0:	02 81 d2    	rlc.w     w2, w2
    18f2:	83 81 d2    	rlc.w     w3, w3
    18f4:	89 04 e9    	dec.w     w9, w9
    18f6:	fa ff 3a    	bra       NZ, 0x18ec <.LB705>
    18f8:	85 42 e8    	inc.b     w5, w5
    18fa:	f0 cf 52    	sub.b     w5, #0x10, [w15]
    18fc:	ed ff 3a    	bra       NZ, 0x18d8 <.L82>
    18fe:	17 00 37    	bra       0x192e <.L170>

00001900 <.L76>:
    1900:	15 c0 b3    	mov.b     #0x1, w5
    1902:	80 00 20    	mov.w     #0x8, w0
    1904:	01 00 20    	mov.w     #0x0, w1
    1906:	60 11 b8    	mul.uu    w2, #0x0, w2

00001908 <.L84>:
    1908:	3f b4 97    	mov.w     [w15-26], w8
    190a:	cf b4 97    	mov.w     [w15-24], w9
    190c:	5f b5 97    	mov.w     [w15-22], w10
    190e:	ef b5 97    	mov.w     [w15-20], w11
    1910:	00 40 e1    	cp.w      w8, w0
    1912:	01 c8 e1    	cpb.w     w9, w1
    1914:	02 d0 e1    	cpb.w     w10, w2
    1916:	03 d8 e1    	cpb.w     w11, w3
    1918:	0a 00 39    	bra       NC, 0x192e <.L170>
    191a:	39 00 20    	mov.w     #0x3, w9

0000191c <.LB724>:
    191c:	00 00 d0    	sl.w      w0, w0
    191e:	81 80 d2    	rlc.w     w1, w1
    1920:	02 81 d2    	rlc.w     w2, w2
    1922:	83 81 d2    	rlc.w     w3, w3
    1924:	89 04 e9    	dec.w     w9, w9
    1926:	fa ff 3a    	bra       NZ, 0x191c <.LB724>
    1928:	85 42 e8    	inc.b     w5, w5
    192a:	f5 cf 52    	sub.b     w5, #0x15, [w15]
    192c:	ed ff 3a    	bra       NZ, 0x1908 <.L84>

0000192e <.L170>:
    192e:	e5 77 9f    	mov.b     w5, [w15-74]

00001930 <.L74>:
    1930:	6f 75 97    	mov.b     [w15-74], w10
    1932:	9f b5 97    	mov.w     [w15-30], w11
    1934:	8a 02 fb    	se        w10, w5
    1936:	8b 8f 52    	sub.w     w5, w11, [w15]
    1938:	02 00 3d    	bra       GE, 0x193e <.L85>
    193a:	eb 77 9f    	mov.b     w11, [w15-74]
    193c:	04 00 37    	bra       0x1946 <.L86>

0000193e <.L85>:
    193e:	1f b0 97    	mov.w     [w15-30], w0
    1940:	85 0f 50    	sub.w     w0, w5, [w15]
    1942:	01 00 3d    	bra       GE, 0x1946 <.L86>
    1944:	95 b7 9f    	mov.w     w5, [w15-30]

00001946 <.L86>:
    1946:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1948:	03 00 32    	bra       Z, 0x1950 <.L87>
    194a:	e3 02 66    	and.w     w12, #0x3, w5
    194c:	01 00 32    	bra       Z, 0x1950 <.L87>
    194e:	04 02 e9    	dec.w     w4, w4

00001950 <.L87>:
    1950:	05 00 24    	mov.w     #0x4000, w5
    1952:	85 02 66    	and.w     w12, w5, w5
    1954:	06 00 32    	bra       Z, 0x1962 <.L88>
    1956:	9f b0 97    	mov.w     [w15-30], w1
    1958:	81 0f 52    	sub.w     w4, w1, [w15]
    195a:	02 00 34    	bra       LE, 0x1960 <.L139>
    195c:	01 02 52    	sub.w     w4, w1, w4
    195e:	01 00 37    	bra       0x1962 <.L88>

00001960 <.L139>:
    1960:	00 02 eb    	clr.w     w4

00001962 <.L88>:
    1962:	6f 71 97    	mov.b     [w15-74], w2
    1964:	80 01 eb    	clr.w     w3
    1966:	82 02 fb    	se        w2, w5
    1968:	f3 af 9f    	mov.w     w3, [w15-34]
    196a:	85 0f 52    	sub.w     w4, w5, [w15]
    196c:	02 00 34    	bra       LE, 0x1972 <.L89>
    196e:	85 02 52    	sub.w     w4, w5, w5
    1970:	f5 af 9f    	mov.w     w5, [w15-34]

00001972 <.L89>:
    1972:	64 02 66    	and.w     w12, #0x4, w4
    1974:	3b 00 32    	bra       Z, 0x19ec <.L90>
    1976:	e2 02 66    	and.w     w12, #0x2, w5
    1978:	61 02 66    	and.w     w12, #0x1, w4
    197a:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    197c:	11 00 32    	bra       Z, 0x19a0 <.L91>
    197e:	bd 02 90    	mov.w     [w13+6], w5
    1980:	05 04 b2    	and.w     #0x40, w5
    1982:	08 00 32    	bra       Z, 0x1994 <.L92>
    1984:	9d 02 78    	mov.w     [w13], w5
    1986:	b6 c2 b3    	mov.b     #0x2b, w6
    1988:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    198a:	01 00 32    	bra       Z, 0x198e <.L93>
    198c:	06 c3 e8    	inc2.b    w6, w6

0000198e <.L93>:
    198e:	86 4a 78    	mov.b     w6, [w5]
    1990:	85 0e e8    	inc.w     w5, [w13]
    1992:	15 00 37    	bra       0x19be <.L98>

00001994 <.L92>:
    1994:	b0 02 20    	mov.w     #0x2b, w0
    1996:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1998:	01 00 32    	bra       Z, 0x199c <.L95>
    199a:	00 80 e8    	inc2.w    w0, w0

0000199c <.L95>:
    199c:	8d 00 78    	mov.w     w13, w1
    199e:	0c 00 37    	bra       0x19b8 <.L172>

000019a0 <.L91>:
    19a0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19a2:	0e 00 32    	bra       Z, 0x19c0 <.L96>
    19a4:	3d 02 90    	mov.w     [w13+6], w4
    19a6:	04 04 b2    	and.w     #0x40, w4
    19a8:	05 00 32    	bra       Z, 0x19b4 <.L97>
    19aa:	1d 02 78    	mov.w     [w13], w4
    19ac:	05 c2 b3    	mov.b     #0x20, w5
    19ae:	05 4a 78    	mov.b     w5, [w4]
    19b0:	84 0e e8    	inc.w     w4, [w13]
    19b2:	05 00 37    	bra       0x19be <.L98>

000019b4 <.L97>:
    19b4:	8d 00 78    	mov.w     w13, w1
    19b6:	00 02 20    	mov.w     #0x20, w0

000019b8 <.L172>:
    19b8:	6e fd 07    	rcall     0x1496 <_fputc>
    19ba:	e1 0f 40    	add.w     w0, #0x1, [w15]
    19bc:	01 00 32    	bra       Z, 0x19c0 <.L96>

000019be <.L98>:
    19be:	0e 07 e8    	inc.w     w14, w14

000019c0 <.L96>:
    19c0:	7f aa 97    	mov.w     [w15-34], w4
    19c2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19c4:	4f 00 32    	bra       Z, 0x1a64 <.L99>
    19c6:	08 c3 b3    	mov.b     #0x30, w8
    19c8:	84 04 78    	mov.w     w4, w9

000019ca <.L150>:
    19ca:	3d 02 90    	mov.w     [w13+6], w4
    19cc:	04 04 b2    	and.w     #0x40, w4
    19ce:	04 00 32    	bra       Z, 0x19d8 <.L100>
    19d0:	1d 02 78    	mov.w     [w13], w4
    19d2:	08 4a 78    	mov.b     w8, [w4]
    19d4:	84 0e e8    	inc.w     w4, [w13]
    19d6:	05 00 37    	bra       0x19e2 <.L101>

000019d8 <.L100>:
    19d8:	8d 00 78    	mov.w     w13, w1
    19da:	00 03 20    	mov.w     #0x30, w0
    19dc:	5c fd 07    	rcall     0x1496 <_fputc>
    19de:	e1 0f 40    	add.w     w0, #0x1, [w15]
    19e0:	01 00 32    	bra       Z, 0x19e4 <.L102>

000019e2 <.L101>:
    19e2:	0e 07 e8    	inc.w     w14, w14

000019e4 <.L102>:
    19e4:	89 04 e9    	dec.w     w9, w9
    19e6:	f1 ff 3a    	bra       NZ, 0x19ca <.L150>
    19e8:	f9 af 9f    	mov.w     w9, [w15-34]
    19ea:	3c 00 37    	bra       0x1a64 <.L99>

000019ec <.L90>:
    19ec:	ff aa 97    	mov.w     [w15-34], w5
    19ee:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    19f0:	14 00 32    	bra       Z, 0x1a1a <.L104>
    19f2:	68 02 66    	and.w     w12, #0x8, w4
    19f4:	12 00 3a    	bra       NZ, 0x1a1a <.L104>
    19f6:	08 c2 b3    	mov.b     #0x20, w8
    19f8:	85 04 78    	mov.w     w5, w9

000019fa <.L151>:
    19fa:	3d 02 90    	mov.w     [w13+6], w4
    19fc:	04 04 b2    	and.w     #0x40, w4
    19fe:	04 00 32    	bra       Z, 0x1a08 <.L105>
    1a00:	1d 02 78    	mov.w     [w13], w4
    1a02:	08 4a 78    	mov.b     w8, [w4]
    1a04:	84 0e e8    	inc.w     w4, [w13]
    1a06:	05 00 37    	bra       0x1a12 <.L106>

00001a08 <.L105>:
    1a08:	8d 00 78    	mov.w     w13, w1
    1a0a:	00 02 20    	mov.w     #0x20, w0
    1a0c:	44 fd 07    	rcall     0x1496 <_fputc>
    1a0e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1a10:	01 00 32    	bra       Z, 0x1a14 <.L107>

00001a12 <.L106>:
    1a12:	0e 07 e8    	inc.w     w14, w14

00001a14 <.L107>:
    1a14:	89 04 e9    	dec.w     w9, w9
    1a16:	f1 ff 3a    	bra       NZ, 0x19fa <.L151>
    1a18:	f9 af 9f    	mov.w     w9, [w15-34]

00001a1a <.L104>:
    1a1a:	e2 02 66    	and.w     w12, #0x2, w5
    1a1c:	61 02 66    	and.w     w12, #0x1, w4
    1a1e:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1a20:	11 00 32    	bra       Z, 0x1a44 <.L109>
    1a22:	bd 02 90    	mov.w     [w13+6], w5
    1a24:	05 04 b2    	and.w     #0x40, w5
    1a26:	08 00 32    	bra       Z, 0x1a38 <.L110>
    1a28:	9d 02 78    	mov.w     [w13], w5
    1a2a:	b6 c2 b3    	mov.b     #0x2b, w6
    1a2c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a2e:	01 00 32    	bra       Z, 0x1a32 <.L111>
    1a30:	06 c3 e8    	inc2.b    w6, w6

00001a32 <.L111>:
    1a32:	86 4a 78    	mov.b     w6, [w5]
    1a34:	85 0e e8    	inc.w     w5, [w13]
    1a36:	15 00 37    	bra       0x1a62 <.L115>

00001a38 <.L110>:
    1a38:	b0 02 20    	mov.w     #0x2b, w0
    1a3a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a3c:	01 00 32    	bra       Z, 0x1a40 <.L113>
    1a3e:	00 80 e8    	inc2.w    w0, w0

00001a40 <.L113>:
    1a40:	8d 00 78    	mov.w     w13, w1
    1a42:	0c 00 37    	bra       0x1a5c <.L174>

00001a44 <.L109>:
    1a44:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a46:	0e 00 32    	bra       Z, 0x1a64 <.L99>
    1a48:	3d 02 90    	mov.w     [w13+6], w4
    1a4a:	04 04 b2    	and.w     #0x40, w4
    1a4c:	05 00 32    	bra       Z, 0x1a58 <.L114>
    1a4e:	1d 02 78    	mov.w     [w13], w4
    1a50:	05 c2 b3    	mov.b     #0x20, w5
    1a52:	05 4a 78    	mov.b     w5, [w4]
    1a54:	84 0e e8    	inc.w     w4, [w13]
    1a56:	05 00 37    	bra       0x1a62 <.L115>

00001a58 <.L114>:
    1a58:	8d 00 78    	mov.w     w13, w1
    1a5a:	00 02 20    	mov.w     #0x20, w0

00001a5c <.L174>:
    1a5c:	1c fd 07    	rcall     0x1496 <_fputc>
    1a5e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1a60:	01 00 32    	bra       Z, 0x1a64 <.L99>

00001a62 <.L115>:
    1a62:	0e 07 e8    	inc.w     w14, w14

00001a64 <.L99>:
    1a64:	1f b3 97    	mov.w     [w15-30], w6
    1a66:	05 c8 20    	mov.w     #0xc80, w5
    1a68:	06 02 e9    	dec.w     w6, w4
    1a6a:	f0 04 66    	and.w     w12, #0x10, w9
    1a6c:	c2 23 dd    	sl.w      w4, #0x2, w7
    1a6e:	0c 05 78    	mov.w     w12, w10
    1a70:	c7 a7 9f    	mov.w     w7, [w15-56]
    1a72:	0a 02 b2    	and.w     #0x20, w10
    1a74:	63 23 b9    	mul.su    w4, #0x3, w6
    1a76:	e9 9f 9f    	mov.w     w9, [w15-68]
    1a78:	06 04 78    	mov.w     w6, w8
    1a7a:	43 22 dd    	sl.w      w4, #0x3, w4
    1a7c:	b8 a7 9f    	mov.w     w8, [w15-58]
    1a7e:	85 02 42    	add.w     w4, w5, w5
    1a80:	da 9f 9f    	mov.w     w10, [w15-70]
    1a82:	e5 af 9f    	mov.w     w5, [w15-36]
    1a84:	a3 00 37    	bra       0x1bcc <.L116>

00001a86 <.L129>:
    1a86:	9f b5 97    	mov.w     [w15-30], w11
    1a88:	0f b0 97    	mov.w     [w15-32], w0
    1a8a:	8b 05 e9    	dec.w     w11, w11
    1a8c:	01 04 20    	mov.w     #0x40, w1
    1a8e:	9b b7 9f    	mov.w     w11, [w15-30]
    1a90:	81 0f 50    	sub.w     w0, w1, [w15]
    1a92:	73 00 32    	bra       Z, 0x1b7a <.L119>
    1a94:	03 00 3c    	bra       GT, 0x1a9c <.L121>
    1a96:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1a98:	08 00 32    	bra       Z, 0x1aaa <.L118>
    1a9a:	7e 00 37    	bra       0x1b98 <.L117>

00001a9c <.L121>:
    1a9c:	04 08 20    	mov.w     #0x80, w4
    1a9e:	0f b1 97    	mov.w     [w15-32], w2
    1aa0:	84 0f 51    	sub.w     w2, w4, [w15]
    1aa2:	56 00 32    	bra       Z, 0x1b50 <.L120>
    1aa4:	04 0c 20    	mov.w     #0xc0, w4
    1aa6:	84 0f 51    	sub.w     w2, w4, [w15]
    1aa8:	77 00 3a    	bra       NZ, 0x1b98 <.L117>

00001aaa <.L118>:
    1aaa:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1aac:	1f 00 3d    	bra       GE, 0x1aec <.L122>
    1aae:	ef a9 97    	mov.w     [w15-36], w3
    1ab0:	33 04 be    	mov.d     [w3++], w8
    1ab2:	23 05 be    	mov.d     [w3--], w10
    1ab4:	3f b0 97    	mov.w     [w15-26], w0
    1ab6:	cf b0 97    	mov.w     [w15-24], w1
    1ab8:	5f b1 97    	mov.w     [w15-22], w2
    1aba:	ef b1 97    	mov.w     [w15-20], w3
    1abc:	08 02 be    	mov.d     w8, w4
    1abe:	0a 03 be    	mov.d     w10, w6
    1ac0:	ad 01 07    	rcall     0x1e1c <___udivdi3>
    1ac2:	08 02 be    	mov.d     w8, w4
    1ac4:	0a 03 be    	mov.d     w10, w6
    1ac6:	e0 77 9f    	mov.b     w0, [w15-74]
    1ac8:	00 00 fb    	se        w0, w0
    1aca:	cf 80 de    	asr.w     w0, #0xf, w1
    1acc:	01 01 78    	mov.w     w1, w2
    1ace:	82 01 78    	mov.w     w2, w3
    1ad0:	0e 02 07    	rcall     0x1eee <___muldi3>
    1ad2:	3f b2 97    	mov.w     [w15-26], w4
    1ad4:	cf b2 97    	mov.w     [w15-24], w5
    1ad6:	5f b3 97    	mov.w     [w15-22], w6
    1ad8:	ef b3 97    	mov.w     [w15-20], w7
    1ada:	00 02 52    	sub.w     w4, w0, w4
    1adc:	81 82 5a    	subb.w    w5, w1, w5
    1ade:	02 03 5b    	subb.w    w6, w2, w6
    1ae0:	83 83 5b    	subb.w    w7, w3, w7
    1ae2:	b4 b7 9f    	mov.w     w4, [w15-26]
    1ae4:	c5 b7 9f    	mov.w     w5, [w15-24]
    1ae6:	d6 b7 9f    	mov.w     w6, [w15-22]
    1ae8:	e7 b7 9f    	mov.w     w7, [w15-20]
    1aea:	2e 00 37    	bra       0x1b48 <.L123>

00001aec <.L122>:
    1aec:	ef 9a 97    	mov.w     [w15-68], w5
    1aee:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1af0:	22 00 32    	bra       Z, 0x1b36 <.L124>
    1af2:	6f ab 97    	mov.w     [w15-36], w6
    1af4:	3f b2 97    	mov.w     [w15-26], w4
    1af6:	cf b2 97    	mov.w     [w15-24], w5
    1af8:	36 04 be    	mov.d     [w6++], w8
    1afa:	26 05 be    	mov.d     [w6--], w10
    1afc:	04 00 be    	mov.d     w4, w0
    1afe:	08 01 be    	mov.d     w8, w2
    1b00:	84 bf 9f    	mov.w     w4, [w15-16]
    1b02:	f5 b7 9f    	mov.w     w5, [w15-18]
    1b04:	00 05 eb    	clr.w     w10
    1b06:	c9 00 07    	rcall     0x1c9a <___udivsi3>
    1b08:	08 01 be    	mov.d     w8, w2
    1b0a:	e0 77 9f    	mov.b     w0, [w15-74]
    1b0c:	00 00 fb    	se        w0, w0
    1b0e:	cf 80 de    	asr.w     w0, #0xf, w1
    1b10:	d4 00 07    	rcall     0x1cba <___mulp32eds3>
    1b12:	0f ba 97    	mov.w     [w15-16], w4
    1b14:	ff b2 97    	mov.w     [w15-18], w5
    1b16:	8a af 9f    	mov.w     w10, [w15-48]
    1b18:	00 04 52    	sub.w     w4, w0, w8
    1b1a:	81 84 5a    	subb.w    w5, w1, w9
    1b1c:	d8 a7 9f    	mov.w     w8, [w15-54]
    1b1e:	e9 a7 9f    	mov.w     w9, [w15-52]
    1b20:	80 04 eb    	clr.w     w9
    1b22:	f9 a7 9f    	mov.w     w9, [w15-50]
    1b24:	5f a0 97    	mov.w     [w15-54], w0
    1b26:	ef a0 97    	mov.w     [w15-52], w1
    1b28:	7f a1 97    	mov.w     [w15-50], w2
    1b2a:	8f a9 97    	mov.w     [w15-48], w3
    1b2c:	b0 b7 9f    	mov.w     w0, [w15-26]
    1b2e:	c1 b7 9f    	mov.w     w1, [w15-24]
    1b30:	d2 b7 9f    	mov.w     w2, [w15-22]
    1b32:	e3 b7 9f    	mov.w     w3, [w15-20]
    1b34:	09 00 37    	bra       0x1b48 <.L123>

00001b36 <.L124>:
    1b36:	ef a8 97    	mov.w     [w15-36], w1
    1b38:	3f b1 97    	mov.w     [w15-26], w2
    1b3a:	11 02 78    	mov.w     [w1], w4
    1b3c:	11 00 09    	repeat    #0x11
    1b3e:	04 81 d8    	div.uw    w2, w4
    1b40:	a4 00 20    	mov.w     #0xa, w4
    1b42:	11 00 09    	repeat    #0x11
    1b44:	04 80 d8    	div.uw    w0, w4
    1b46:	e1 77 9f    	mov.b     w1, [w15-74]

00001b48 <.L123>:
    1b48:	ef 71 97    	mov.b     [w15-74], w3
    1b4a:	03 43 b0    	add.b     #0x30, w3
    1b4c:	e3 77 9f    	mov.b     w3, [w15-74]
    1b4e:	24 00 37    	bra       0x1b98 <.L117>

00001b50 <.L120>:
    1b50:	b4 bb 20    	mov.w     #0xbbb, w4
    1b52:	df 9a 97    	mov.w     [w15-70], w5
    1b54:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1b56:	01 00 32    	bra       Z, 0x1b5a <.L125>
    1b58:	a4 ba 20    	mov.w     #0xbaa, w4

00001b5a <.L125>:
    1b5a:	3f b0 97    	mov.w     [w15-26], w0
    1b5c:	cf b0 97    	mov.w     [w15-24], w1
    1b5e:	5f b1 97    	mov.w     [w15-22], w2
    1b60:	ef b1 97    	mov.w     [w15-20], w3
    1b62:	4f a3 97    	mov.w     [w15-56], w6

00001b64 <.LB1128>:
    1b64:	06 03 e9    	dec.w     w6, w6
    1b66:	05 00 33    	bra       N, 0x1b72 <.LE1128>
    1b68:	83 01 d1    	lsr.w     w3, w3
    1b6a:	02 81 d3    	rrc.w     w2, w2
    1b6c:	81 80 d3    	rrc.w     w1, w1
    1b6e:	00 80 d3    	rrc.w     w0, w0
    1b70:	f9 ff 37    	bra       0x1b64 <.LB1128>

00001b72 <.LE1128>:
    1b72:	6f 00 60    	and.w     w0, #0xf, w0
    1b74:	64 40 78    	mov.b     [w4+w0], w0
    1b76:	e0 77 9f    	mov.b     w0, [w15-74]
    1b78:	0f 00 37    	bra       0x1b98 <.L117>

00001b7a <.L119>:
    1b7a:	3f b2 97    	mov.w     [w15-26], w4
    1b7c:	cf b2 97    	mov.w     [w15-24], w5
    1b7e:	5f b3 97    	mov.w     [w15-22], w6
    1b80:	ef b3 97    	mov.w     [w15-20], w7
    1b82:	3f a4 97    	mov.w     [w15-58], w8

00001b84 <.LB1138>:
    1b84:	08 04 e9    	dec.w     w8, w8
    1b86:	05 00 33    	bra       N, 0x1b92 <.LE1138>
    1b88:	87 03 d1    	lsr.w     w7, w7
    1b8a:	06 83 d3    	rrc.w     w6, w6
    1b8c:	85 82 d3    	rrc.w     w5, w5
    1b8e:	04 82 d3    	rrc.w     w4, w4
    1b90:	f9 ff 37    	bra       0x1b84 <.LB1138>

00001b92 <.LE1138>:
    1b92:	67 42 62    	and.b     w4, #0x7, w4
    1b94:	04 43 b0    	add.b     #0x30, w4
    1b96:	e4 77 9f    	mov.b     w4, [w15-74]

00001b98 <.L117>:
    1b98:	3d 02 90    	mov.w     [w13+6], w4
    1b9a:	04 04 b2    	and.w     #0x40, w4
    1b9c:	07 00 32    	bra       Z, 0x1bac <.L126>
    1b9e:	9d 02 78    	mov.w     [w13], w5
    1ba0:	6f 72 97    	mov.b     [w15-74], w4
    1ba2:	84 4a 78    	mov.b     w4, [w5]
    1ba4:	85 0e e8    	inc.w     w5, [w13]
    1ba6:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    1ba8:	07 00 3a    	bra       NZ, 0x1bb8 <.L127>
    1baa:	07 00 37    	bra       0x1bba <.L128>

00001bac <.L126>:
    1bac:	ef 74 97    	mov.b     [w15-74], w9
    1bae:	8d 00 78    	mov.w     w13, w1
    1bb0:	09 00 fb    	se        w9, w0
    1bb2:	71 fc 07    	rcall     0x1496 <_fputc>
    1bb4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1bb6:	01 00 32    	bra       Z, 0x1bba <.L128>

00001bb8 <.L127>:
    1bb8:	0e 07 e8    	inc.w     w14, w14

00001bba <.L128>:
    1bba:	4f a5 97    	mov.w     [w15-56], w10
    1bbc:	bf a5 97    	mov.w     [w15-58], w11
    1bbe:	6f a8 97    	mov.w     [w15-36], w0
    1bc0:	64 05 55    	sub.w     w10, #0x4, w10
    1bc2:	e3 85 55    	sub.w     w11, #0x3, w11
    1bc4:	68 00 50    	sub.w     w0, #0x8, w0
    1bc6:	ca a7 9f    	mov.w     w10, [w15-56]
    1bc8:	bb a7 9f    	mov.w     w11, [w15-58]
    1bca:	e0 af 9f    	mov.w     w0, [w15-36]

00001bcc <.L116>:
    1bcc:	9f b0 97    	mov.w     [w15-30], w1
    1bce:	e0 8f 50    	sub.w     w1, #0x0, [w15]
    1bd0:	5a ff 3a    	bra       NZ, 0x1a86 <.L129>
    1bd2:	68 06 66    	and.w     w12, #0x8, w12
    1bd4:	14 00 32    	bra       Z, 0x1bfe <.L162>
    1bd6:	7f a9 97    	mov.w     [w15-34], w2
    1bd8:	e0 0f 51    	sub.w     w2, #0x0, [w15]
    1bda:	11 00 34    	bra       LE, 0x1bfe <.L162>
    1bdc:	08 c2 b3    	mov.b     #0x20, w8
    1bde:	82 04 78    	mov.w     w2, w9

00001be0 <.L149>:
    1be0:	3d 02 90    	mov.w     [w13+6], w4
    1be2:	04 04 b2    	and.w     #0x40, w4
    1be4:	04 00 32    	bra       Z, 0x1bee <.L130>
    1be6:	1d 02 78    	mov.w     [w13], w4
    1be8:	08 4a 78    	mov.b     w8, [w4]
    1bea:	84 0e e8    	inc.w     w4, [w13]
    1bec:	05 00 37    	bra       0x1bf8 <.L131>

00001bee <.L130>:
    1bee:	8d 00 78    	mov.w     w13, w1
    1bf0:	00 02 20    	mov.w     #0x20, w0
    1bf2:	51 fc 07    	rcall     0x1496 <_fputc>
    1bf4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1bf6:	01 00 32    	bra       Z, 0x1bfa <.L132>

00001bf8 <.L131>:
    1bf8:	0e 07 e8    	inc.w     w14, w14

00001bfa <.L132>:
    1bfa:	89 04 e9    	dec.w     w9, w9
    1bfc:	f1 ff 3a    	bra       NZ, 0x1be0 <.L149>

00001bfe <.L162>:
    1bfe:	df a9 97    	mov.w     [w15-38], w3
    1c00:	13 40 78    	mov.b     [w3], w0
    1c02:	e0 77 9f    	mov.b     w0, [w15-74]
    1c04:	e0 4f 50    	sub.b     w0, #0x0, [w15]
    1c06:	95 fc 3a    	bra       NZ, 0x1532 <.L134>

00001c08 <.L26>:
    1c08:	0e 00 78    	mov.w     w14, w0
    1c0a:	4f 07 78    	mov.w     [--w15], w14
    1c0c:	4f 06 be    	mov.d     [--w15], w12
    1c0e:	4f 05 be    	mov.d     [--w15], w10
    1c10:	4f 04 be    	mov.d     [--w15], w8
    1c12:	ef 03 b1    	sub.w     #0x3e, w15
    1c14:	00 00 06    	return    

00001c16 <__flsbuf>:
    1c16:	02 00 fa    	lnk       #0x2
    1c18:	88 9f be    	mov.d     w8, [w15++]
    1c1a:	01 04 78    	mov.w     w1, w8
    1c1c:	a0 ff 9f    	mov.b     w0, [w15-6]
    1c1e:	38 02 90    	mov.w     [w8+6], w4
    1c20:	84 02 78    	mov.w     w4, w5
    1c22:	05 04 b2    	and.w     #0x40, w5
    1c24:	02 00 32    	bra       Z, 0x1c2a <.L2>
    1c26:	00 00 fb    	se        w0, w0
    1c28:	35 00 37    	bra       0x1c94 <.L3>

00001c2a <.L2>:
    1c2a:	e2 02 62    	and.w     w4, #0x2, w5
    1c2c:	05 00 3a    	bra       NZ, 0x1c38 <.L4>
    1c2e:	04 03 b3    	ior.w     #0x30, w4
    1c30:	15 04 98    	mov.w     w5, [w8+2]
    1c32:	34 04 98    	mov.w     w4, [w8+6]
    1c34:	00 80 eb    	setm.w    w0
    1c36:	2e 00 37    	bra       0x1c94 <.L3>

00001c38 <.L4>:
    1c38:	d8 04 90    	mov.w     [w8+10], w9
    1c3a:	e0 8f 54    	sub.w     w9, #0x0, [w15]
    1c3c:	06 00 3a    	bra       NZ, 0x1c4a <.L5>
    1c3e:	12 00 20    	mov.w     #0x1, w2
    1c40:	e6 80 57    	sub.w     w15, #0x6, w1
    1c42:	48 00 90    	mov.w     [w8+8], w0
    1c44:	7f 03 07    	rcall     0x2344 <_write>
    1c46:	19 04 98    	mov.w     w9, [w8+2]
    1c48:	23 00 37    	bra       0x1c90 <.L7>

00001c4a <.L5>:
    1c4a:	a8 02 90    	mov.w     [w8+4], w5
    1c4c:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1c4e:	08 00 3a    	bra       NZ, 0x1c60 <.L6>
    1c50:	e5 bf 20    	mov.w     #0xbfe, w5
    1c52:	04 30 a0    	bset.w    w4, #0x3
    1c54:	25 04 98    	mov.w     w5, [w8+4]
    1c56:	05 0c 78    	mov.w     w5, [w8]
    1c58:	34 04 98    	mov.w     w4, [w8+6]
    1c5a:	25 00 20    	mov.w     #0x2, w5
    1c5c:	55 04 98    	mov.w     w5, [w8+10]
    1c5e:	15 04 98    	mov.w     w5, [w8+2]

00001c60 <.L6>:
    1c60:	18 01 90    	mov.w     [w8+2], w2
    1c62:	a8 00 90    	mov.w     [w8+4], w1
    1c64:	48 00 90    	mov.w     [w8+8], w0
    1c66:	6e 03 07    	rcall     0x2344 <_write>
    1c68:	28 02 90    	mov.w     [w8+4], w4
    1c6a:	80 82 eb    	setm.w    w5
    1c6c:	15 04 98    	mov.w     w5, [w8+2]
    1c6e:	af fa 97    	mov.b     [w15-6], w5
    1c70:	05 4a 78    	mov.b     w5, [w4]
    1c72:	04 0c e8    	inc.w     w4, [w8]
    1c74:	2f fa 97    	mov.b     [w15-6], w4
    1c76:	ea 4f 52    	sub.b     w4, #0xa, [w15]
    1c78:	0b 00 3a    	bra       NZ, 0x1c90 <.L7>
    1c7a:	38 02 90    	mov.w     [w8+6], w4
    1c7c:	04 10 b2    	and.w     #0x100, w4
    1c7e:	08 00 32    	bra       Z, 0x1c90 <.L7>
    1c80:	18 01 90    	mov.w     [w8+2], w2
    1c82:	a8 00 90    	mov.w     [w8+4], w1
    1c84:	48 00 90    	mov.w     [w8+8], w0
    1c86:	5e 03 07    	rcall     0x2344 <_write>
    1c88:	00 02 eb    	clr.w     w4
    1c8a:	a8 02 90    	mov.w     [w8+4], w5
    1c8c:	14 04 98    	mov.w     w4, [w8+2]
    1c8e:	05 0c 78    	mov.w     w5, [w8]

00001c90 <.L7>:
    1c90:	2f fa 97    	mov.b     [w15-6], w4
    1c92:	04 00 fb    	se        w4, w0

00001c94 <.L3>:
    1c94:	4f 04 be    	mov.d     [--w15], w8
    1c96:	00 80 fa    	ulnk      
    1c98:	00 00 06    	return    

00001c9a <___udivsi3>:
    1c9a:	60 22 b8    	mul.uu    w4, #0x0, w4
    1c9c:	06 02 20    	mov.w     #0x20, w6

00001c9e <nextbit>:
    1c9e:	00 00 d0    	sl.w      w0, w0
    1ca0:	81 80 d2    	rlc.w     w1, w1
    1ca2:	04 82 d2    	rlc.w     w4, w4
    1ca4:	85 82 d2    	rlc.w     w5, w5
    1ca6:	00 00 a0    	bset.w    w0, #0x0
    1ca8:	02 02 52    	sub.w     w4, w2, w4
    1caa:	83 82 5a    	subb.w    w5, w3, w5
    1cac:	03 00 31    	bra       C, 0x1cb4 <iterate>
    1cae:	02 02 42    	add.w     w4, w2, w4
    1cb0:	83 82 4a    	addc.w    w5, w3, w5
    1cb2:	00 00 a1    	bclr.w    w0, #0x0

00001cb4 <iterate>:
    1cb4:	06 03 e9    	dec.w     w6, w6
    1cb6:	f3 ff 3a    	bra       NZ, 0x1c9e <nextbit>
    1cb8:	00 00 06    	return    

00001cba <___mulp32eds3>:
    1cba:	02 0a b9    	mul.su    w1, w2, w4
    1cbc:	00 1b b9    	mul.su    w3, w0, w6
    1cbe:	02 00 b8    	mul.uu    w0, w2, w0
    1cc0:	81 00 42    	add.w     w4, w1, w1
    1cc2:	81 00 43    	add.w     w6, w1, w1
    1cc4:	00 00 06    	return    

00001cc6 <___PplusBdi>:
    1cc6:	88 9f be    	mov.d     w8, [w15++]
    1cc8:	8a 9f be    	mov.d     w10, [w15++]
    1cca:	30 04 be    	mov.d     [w0++], w8
    1ccc:	20 05 be    	mov.d     [w0--], w10
    1cce:	04 04 44    	add.w     w8, w4, w8
    1cd0:	85 84 4c    	addc.w    w9, w5, w9
    1cd2:	06 05 4d    	addc.w    w10, w6, w10
    1cd4:	87 85 4d    	addc.w    w11, w7, w11
    1cd6:	08 98 be    	mov.d     w8, [w0++]
    1cd8:	0a 90 be    	mov.d     w10, [w0--]
    1cda:	04 40 e1    	cp.w      w8, w4
    1cdc:	05 c8 e1    	cpb.w     w9, w5
    1cde:	06 d0 e1    	cpb.w     w10, w6
    1ce0:	07 d8 e1    	cpb.w     w11, w7
    1ce2:	02 00 31    	bra       C, 0x1ce8 <.L1>
    1ce4:	68 00 40    	add.w     w0, #0x8, w0
    1ce6:	10 08 e8    	inc.w     [w0], [w0]

00001ce8 <.L1>:
    1ce8:	4f 05 be    	mov.d     [--w15], w10
    1cea:	4f 04 be    	mov.d     [--w15], w8
    1cec:	00 00 06    	return    

00001cee <___PminusBdi>:
    1cee:	10 00 fa    	lnk       #0x10
    1cf0:	88 9f be    	mov.d     w8, [w15++]
    1cf2:	8a 9f be    	mov.d     w10, [w15++]
    1cf4:	11 00 20    	mov.w     #0x1, w1
    1cf6:	06 05 be    	mov.d     w6, w10
    1cf8:	04 04 be    	mov.d     w4, w8
    1cfa:	30 02 be    	mov.d     [w0++], w4
    1cfc:	20 03 be    	mov.d     [w0--], w6
    1cfe:	c4 b7 9f    	mov.w     w4, [w15-24]
    1d00:	d5 b7 9f    	mov.w     w5, [w15-22]
    1d02:	e6 b7 9f    	mov.w     w6, [w15-20]
    1d04:	f7 b7 9f    	mov.w     w7, [w15-18]
    1d06:	08 02 52    	sub.w     w4, w8, w4
    1d08:	89 82 5a    	subb.w    w5, w9, w5
    1d0a:	0a 03 5b    	subb.w    w6, w10, w6
    1d0c:	8b 83 5b    	subb.w    w7, w11, w7
    1d0e:	84 bf 9f    	mov.w     w4, [w15-16]
    1d10:	95 bf 9f    	mov.w     w5, [w15-14]
    1d12:	a6 bf 9f    	mov.w     w6, [w15-12]
    1d14:	b7 bf 9f    	mov.w     w7, [w15-10]
    1d16:	04 98 be    	mov.d     w4, [w0++]
    1d18:	06 98 be    	mov.d     w6, [w0++]
    1d1a:	4f b2 97    	mov.w     [w15-24], w4
    1d1c:	df b2 97    	mov.w     [w15-22], w5
    1d1e:	6f b3 97    	mov.w     [w15-20], w6
    1d20:	ff b3 97    	mov.w     [w15-18], w7
    1d22:	08 20 e1    	cp.w      w4, w8
    1d24:	09 a8 e1    	cpb.w     w5, w9
    1d26:	0a b0 e1    	cpb.w     w6, w10
    1d28:	0b b8 e1    	cpb.w     w7, w11
    1d2a:	01 00 39    	bra       NC, 0x1d2e <.L4>
    1d2c:	80 00 eb    	clr.w     w1

00001d2e <.L4>:
    1d2e:	4f 05 be    	mov.d     [--w15], w10
    1d30:	10 88 10    	subr.w    w1, [w0], [w0]
    1d32:	4f 04 be    	mov.d     [--w15], w8
    1d34:	00 80 fa    	ulnk      
    1d36:	00 00 06    	return    

00001d38 <___udivmoddi3>:
    1d38:	14 00 fa    	lnk       #0x14
    1d3a:	88 9f be    	mov.d     w8, [w15++]
    1d3c:	8a 9f be    	mov.d     w10, [w15++]
    1d3e:	8c 9f be    	mov.d     w12, [w15++]
    1d40:	00 06 eb    	clr.w     w12
    1d42:	3e 00 07    	rcall     0x1dc0 <L0>
    1d44:	cc b7 9f    	mov.w     w12, [w15-24]
    1d46:	bc b7 9f    	mov.w     w12, [w15-26]
    1d48:	ac b7 9f    	mov.w     w12, [w15-28]
    1d4a:	9c b7 9f    	mov.w     w12, [w15-30]
    1d4c:	8c b7 9f    	mov.w     w12, [w15-32]
    1d4e:	06 05 be    	mov.d     w6, w10
    1d50:	04 04 be    	mov.d     w4, w8
    1d52:	0d 04 20    	mov.w     #0x40, w13

00001d54 <.L9>:
    1d54:	4f b3 97    	mov.w     [w15-24], w6
    1d56:	bf b2 97    	mov.w     [w15-26], w5
    1d58:	86 03 43    	add.w     w6, w6, w7
    1d5a:	2f b2 97    	mov.w     [w15-28], w4
    1d5c:	e0 0f 53    	sub.w     w6, #0x0, [w15]
    1d5e:	04 00 3d    	bra       GE, 0x1d68 <.L6>
    1d60:	3d 00 07    	rcall     0x1ddc <.LPA0>
    1d62:	0f 00 40    	add.w     w0, w15, w0
    1d64:	b0 ff 07    	rcall     0x1cc6 <___PplusBdi>
    1d66:	03 00 37    	bra       0x1d6e <.L7>

00001d68 <.L6>:
    1d68:	39 00 07    	rcall     0x1ddc <.LPA0>
    1d6a:	0f 00 40    	add.w     w0, w15, w0
    1d6c:	c0 ff 07    	rcall     0x1cee <___PminusBdi>

00001d6e <.L7>:
    1d6e:	cf b2 97    	mov.w     [w15-24], w5
    1d70:	95 bf 9f    	mov.w     w5, [w15-14]
    1d72:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1d74:	09 00 35    	bra       LT, 0x1d88 <.L8>
    1d76:	2b 00 07    	rcall     0x1dce <.LPA3>
    1d78:	14 00 20    	mov.w     #0x1, w4
    1d7a:	05 00 20    	mov.w     #0x0, w5
    1d7c:	60 33 b8    	mul.uu    w6, #0x0, w6
    1d7e:	00 00 72    	ior.w     w4, w0, w0
    1d80:	81 80 72    	ior.w     w5, w1, w1
    1d82:	02 01 73    	ior.w     w6, w2, w2
    1d84:	83 81 73    	ior.w     w7, w3, w3
    1d86:	1c 00 07    	rcall     0x1dc0 <L0>

00001d88 <.L8>:
    1d88:	0c 06 e8    	inc.w     w12, w12
    1d8a:	8d 0f 56    	sub.w     w12, w13, [w15]
    1d8c:	e3 ff 3a    	bra       NZ, 0x1d54 <.L9>
    1d8e:	1f ba 97    	mov.w     [w15-14], w4
    1d90:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1d92:	05 00 3d    	bra       GE, 0x1d9e <.L10>
    1d94:	08 02 be    	mov.d     w8, w4
    1d96:	0a 03 be    	mov.d     w10, w6
    1d98:	00 fe 2f    	mov.w     #0xffe0, w0
    1d9a:	0f 00 40    	add.w     w0, w15, w0
    1d9c:	94 ff 07    	rcall     0x1cc6 <___PplusBdi>

00001d9e <.L10>:
    1d9e:	4f aa 97    	mov.w     [w15-40], w4
    1da0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1da2:	08 00 3a    	bra       NZ, 0x1db4 <.L11>
    1da4:	0f b4 97    	mov.w     [w15-32], w8
    1da6:	9f b4 97    	mov.w     [w15-30], w9
    1da8:	2f b5 97    	mov.w     [w15-28], w10
    1daa:	bf b5 97    	mov.w     [w15-26], w11
    1dac:	d8 b7 9f    	mov.w     w8, [w15-22]
    1dae:	e9 b7 9f    	mov.w     w9, [w15-20]
    1db0:	fa b7 9f    	mov.w     w10, [w15-18]
    1db2:	8b bf 9f    	mov.w     w11, [w15-16]

00001db4 <.L11>:
    1db4:	0c 00 07    	rcall     0x1dce <.LPA3>
    1db6:	4f 06 be    	mov.d     [--w15], w12
    1db8:	4f 05 be    	mov.d     [--w15], w10
    1dba:	4f 04 be    	mov.d     [--w15], w8
    1dbc:	00 80 fa    	ulnk      
    1dbe:	00 00 06    	return    

00001dc0 <L0>:
    1dc0:	01 00 07    	rcall     0x1dc4 <.LPA6>
    1dc2:	00 00 06    	return    

00001dc4 <.LPA6>:
    1dc4:	90 b7 9f    	mov.w     w0, [w15-30]
    1dc6:	a1 b7 9f    	mov.w     w1, [w15-28]
    1dc8:	b2 b7 9f    	mov.w     w2, [w15-26]
    1dca:	c3 b7 9f    	mov.w     w3, [w15-24]
    1dcc:	00 00 06    	return    

00001dce <.LPA3>:
    1dce:	01 00 07    	rcall     0x1dd2 <.LPA5>
    1dd0:	00 00 06    	return    

00001dd2 <.LPA5>:
    1dd2:	1f b0 97    	mov.w     [w15-30], w0
    1dd4:	af b0 97    	mov.w     [w15-28], w1
    1dd6:	3f b1 97    	mov.w     [w15-26], w2
    1dd8:	cf b1 97    	mov.w     [w15-24], w3
    1dda:	00 00 06    	return    

00001ddc <.LPA0>:
    1ddc:	4f 2b de    	lsr.w     w5, #0xf, w6
    1dde:	f9 ff 07    	rcall     0x1dd2 <.LPA5>
    1de0:	86 83 73    	ior.w     w7, w6, w7
    1de2:	85 82 42    	add.w     w5, w5, w5
    1de4:	4f 23 de    	lsr.w     w4, #0xf, w6
    1de6:	a7 b7 9f    	mov.w     w7, [w15-28]
    1de8:	86 82 72    	ior.w     w5, w6, w5
    1dea:	04 02 42    	add.w     w4, w4, w4
    1dec:	95 b7 9f    	mov.w     w5, [w15-30]
    1dee:	ff aa 97    	mov.w     [w15-34], w5
    1df0:	4f 2b de    	lsr.w     w5, #0xf, w6
    1df2:	85 82 42    	add.w     w5, w5, w5
    1df4:	06 02 72    	ior.w     w4, w6, w4
    1df6:	84 b7 9f    	mov.w     w4, [w15-32]
    1df8:	6f aa 97    	mov.w     [w15-36], w4
    1dfa:	4f 23 de    	lsr.w     w4, #0xf, w6
    1dfc:	04 02 42    	add.w     w4, w4, w4
    1dfe:	86 82 72    	ior.w     w5, w6, w5
    1e00:	f5 af 9f    	mov.w     w5, [w15-34]
    1e02:	4f 18 de    	lsr.w     w3, #0xf, w0
    1e04:	00 02 72    	ior.w     w4, w0, w4
    1e06:	e5 ff 07    	rcall     0x1dd2 <.LPA5>
    1e08:	e4 af 9f    	mov.w     w4, [w15-36]
    1e0a:	00 00 40    	add.w     w0, w0, w0
    1e0c:	81 80 48    	addc.w    w1, w1, w1
    1e0e:	02 01 49    	addc.w    w2, w2, w2
    1e10:	83 81 49    	addc.w    w3, w3, w3
    1e12:	08 02 be    	mov.d     w8, w4
    1e14:	0a 03 be    	mov.d     w10, w6
    1e16:	d6 ff 07    	rcall     0x1dc4 <.LPA6>
    1e18:	00 fe 2f    	mov.w     #0xffe0, w0
    1e1a:	00 00 06    	return    

00001e1c <___udivdi3>:
    1e1c:	88 1f 78    	mov.w     w8, [w15++]
    1e1e:	18 00 20    	mov.w     #0x1, w8
    1e20:	88 1f 78    	mov.w     w8, [w15++]
    1e22:	8a ff 07    	rcall     0x1d38 <___udivmoddi3>
    1e24:	8f 87 e9    	dec2.w    w15, w15
    1e26:	4f 04 78    	mov.w     [--w15], w8
    1e28:	00 00 06    	return    

00001e2a <___umoddi3>:
    1e2a:	80 1f eb    	clr.w     [w15++]
    1e2c:	85 ff 07    	rcall     0x1d38 <___udivmoddi3>
    1e2e:	8f 87 e9    	dec2.w    w15, w15
    1e30:	00 00 06    	return    

00001e32 <___divdi3>:
    1e32:	88 9f be    	mov.d     w8, [w15++]
    1e34:	8a 9f be    	mov.d     w10, [w15++]
    1e36:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1e38:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1e3a:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1e3c:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1e3e:	0c 00 3d    	bra       GE, 0x1e58 <.L16>
    1e40:	60 44 b8    	mul.uu    w8, #0x0, w8
    1e42:	60 55 b8    	mul.uu    w10, #0x0, w10
    1e44:	00 00 54    	sub.w     w8, w0, w0
    1e46:	81 80 5c    	subb.w    w9, w1, w1
    1e48:	02 01 5d    	subb.w    w10, w2, w2
    1e4a:	83 81 5d    	subb.w    w11, w3, w3
    1e4c:	18 00 20    	mov.w     #0x1, w8
    1e4e:	15 00 07    	rcall     0x1e7a <L0>
    1e50:	08 00 3d    	bra       GE, 0x1e62 <.L17>
    1e52:	18 00 07    	rcall     0x1e84 <.LPA1>
    1e54:	00 04 eb    	clr.w     w8
    1e56:	05 00 37    	bra       0x1e62 <.L17>

00001e58 <.L16>:
    1e58:	00 04 eb    	clr.w     w8
    1e5a:	0f 00 07    	rcall     0x1e7a <L0>
    1e5c:	02 00 3d    	bra       GE, 0x1e62 <.L17>
    1e5e:	12 00 07    	rcall     0x1e84 <.LPA1>
    1e60:	18 00 20    	mov.w     #0x1, w8

00001e62 <.L17>:
    1e62:	dc ff 07    	rcall     0x1e1c <___udivdi3>
    1e64:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1e66:	06 00 32    	bra       Z, 0x1e74 <.L18>
    1e68:	60 22 b8    	mul.uu    w4, #0x0, w4
    1e6a:	60 33 b8    	mul.uu    w6, #0x0, w6
    1e6c:	00 00 52    	sub.w     w4, w0, w0
    1e6e:	81 80 5a    	subb.w    w5, w1, w1
    1e70:	02 01 5b    	subb.w    w6, w2, w2
    1e72:	83 81 5b    	subb.w    w7, w3, w3

00001e74 <.L18>:
    1e74:	4f 05 be    	mov.d     [--w15], w10
    1e76:	4f 04 be    	mov.d     [--w15], w8
    1e78:	00 00 06    	return    

00001e7a <L0>:
    1e7a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1e7c:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1e7e:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1e80:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1e82:	00 00 06    	return    

00001e84 <.LPA1>:
    1e84:	60 44 b8    	mul.uu    w8, #0x0, w8
    1e86:	60 55 b8    	mul.uu    w10, #0x0, w10
    1e88:	04 02 54    	sub.w     w8, w4, w4
    1e8a:	85 82 5c    	subb.w    w9, w5, w5
    1e8c:	06 03 5d    	subb.w    w10, w6, w6
    1e8e:	87 83 5d    	subb.w    w11, w7, w7
    1e90:	00 00 06    	return    

00001e92 <___moddi3>:
    1e92:	88 9f be    	mov.d     w8, [w15++]
    1e94:	8a 9f be    	mov.d     w10, [w15++]
    1e96:	8c 1f 78    	mov.w     w12, [w15++]
    1e98:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1e9a:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1e9c:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1e9e:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1ea0:	0d 00 3d    	bra       GE, 0x1ebc <.L22>
    1ea2:	60 44 b8    	mul.uu    w8, #0x0, w8
    1ea4:	60 55 b8    	mul.uu    w10, #0x0, w10
    1ea6:	1c 00 20    	mov.w     #0x1, w12
    1ea8:	00 00 54    	sub.w     w8, w0, w0
    1eaa:	81 80 5c    	subb.w    w9, w1, w1
    1eac:	02 01 5d    	subb.w    w10, w2, w2
    1eae:	83 81 5d    	subb.w    w11, w3, w3
    1eb0:	08 20 e1    	cp.w      w4, w8
    1eb2:	09 a8 e1    	cpb.w     w5, w9
    1eb4:	0a b0 e1    	cpb.w     w6, w10
    1eb6:	0b b8 e1    	cpb.w     w7, w11
    1eb8:	0d 00 3d    	bra       GE, 0x1ed4 <.L23>
    1eba:	08 00 37    	bra       0x1ecc <.L27>

00001ebc <.L22>:
    1ebc:	00 06 eb    	clr.w     w12
    1ebe:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1ec0:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1ec2:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1ec4:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1ec6:	06 00 3d    	bra       GE, 0x1ed4 <.L23>
    1ec8:	60 44 b8    	mul.uu    w8, #0x0, w8
    1eca:	60 55 b8    	mul.uu    w10, #0x0, w10

00001ecc <.L27>:
    1ecc:	04 02 54    	sub.w     w8, w4, w4
    1ece:	85 82 5c    	subb.w    w9, w5, w5
    1ed0:	06 03 5d    	subb.w    w10, w6, w6
    1ed2:	87 83 5d    	subb.w    w11, w7, w7

00001ed4 <.L23>:
    1ed4:	aa ff 07    	rcall     0x1e2a <___umoddi3>
    1ed6:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1ed8:	06 00 32    	bra       Z, 0x1ee6 <.L24>
    1eda:	60 22 b8    	mul.uu    w4, #0x0, w4
    1edc:	60 33 b8    	mul.uu    w6, #0x0, w6
    1ede:	00 00 52    	sub.w     w4, w0, w0
    1ee0:	81 80 5a    	subb.w    w5, w1, w1
    1ee2:	02 01 5b    	subb.w    w6, w2, w2
    1ee4:	83 81 5b    	subb.w    w7, w3, w3

00001ee6 <.L24>:
    1ee6:	4f 06 78    	mov.w     [--w15], w12
    1ee8:	4f 05 be    	mov.d     [--w15], w10
    1eea:	4f 04 be    	mov.d     [--w15], w8
    1eec:	00 00 06    	return    

00001eee <___muldi3>:
    1eee:	88 9f be    	mov.d     w8, [w15++]
    1ef0:	8a 9f be    	mov.d     w10, [w15++]
    1ef2:	8c 1f 78    	mov.w     w12, [w15++]
    1ef4:	00 06 eb    	clr.w     w12
    1ef6:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1ef8:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1efa:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1efc:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1efe:	07 00 3d    	bra       GE, 0x1f0e <.L2>
    1f00:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f02:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f04:	1c 00 20    	mov.w     #0x1, w12
    1f06:	00 00 54    	sub.w     w8, w0, w0
    1f08:	81 80 5c    	subb.w    w9, w1, w1
    1f0a:	02 01 5d    	subb.w    w10, w2, w2
    1f0c:	83 81 5d    	subb.w    w11, w3, w3

00001f0e <.L2>:
    1f0e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f10:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f12:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1f14:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1f16:	07 00 3d    	bra       GE, 0x1f26 <.L3>
    1f18:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f1a:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f1c:	0c 00 a2    	btg.w     w12, #0x0
    1f1e:	04 02 54    	sub.w     w8, w4, w4
    1f20:	85 82 5c    	subb.w    w9, w5, w5
    1f22:	06 03 5d    	subb.w    w10, w6, w6
    1f24:	87 83 5d    	subb.w    w11, w7, w7

00001f26 <.L3>:
    1f26:	0c 00 07    	rcall     0x1f40 <___umuldi3>
    1f28:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1f2a:	06 00 32    	bra       Z, 0x1f38 <.L4>
    1f2c:	60 22 b8    	mul.uu    w4, #0x0, w4
    1f2e:	60 33 b8    	mul.uu    w6, #0x0, w6
    1f30:	00 00 52    	sub.w     w4, w0, w0
    1f32:	81 80 5a    	subb.w    w5, w1, w1
    1f34:	02 01 5b    	subb.w    w6, w2, w2
    1f36:	83 81 5b    	subb.w    w7, w3, w3

00001f38 <.L4>:
    1f38:	4f 06 78    	mov.w     [--w15], w12
    1f3a:	4f 05 be    	mov.d     [--w15], w10
    1f3c:	4f 04 be    	mov.d     [--w15], w8
    1f3e:	00 00 06    	return    

00001f40 <___umuldi3>:
    1f40:	88 9f be    	mov.d     w8, [w15++]
    1f42:	8a 9f be    	mov.d     w10, [w15++]
    1f44:	8c 9f be    	mov.d     w12, [w15++]
    1f46:	04 04 b8    	mul.uu    w0, w4, w8
    1f48:	05 06 b8    	mul.uu    w0, w5, w12
    1f4a:	89 04 46    	add.w     w12, w9, w9
    1f4c:	60 85 4e    	addc.w    w13, #0x0, w10
    1f4e:	06 06 b8    	mul.uu    w0, w6, w12
    1f50:	0a 05 46    	add.w     w12, w10, w10
    1f52:	e0 85 4e    	addc.w    w13, #0x0, w11
    1f54:	07 06 b8    	mul.uu    w0, w7, w12
    1f56:	8b 05 46    	add.w     w12, w11, w11
    1f58:	04 0e b8    	mul.uu    w1, w4, w12
    1f5a:	89 04 46    	add.w     w12, w9, w9
    1f5c:	0a 85 4e    	addc.w    w13, w10, w10
    1f5e:	e0 85 4d    	addc.w    w11, #0x0, w11
    1f60:	05 0e b8    	mul.uu    w1, w5, w12
    1f62:	0a 05 46    	add.w     w12, w10, w10
    1f64:	8b 85 4e    	addc.w    w13, w11, w11
    1f66:	06 0e b8    	mul.uu    w1, w6, w12
    1f68:	8b 05 46    	add.w     w12, w11, w11
    1f6a:	04 16 b8    	mul.uu    w2, w4, w12
    1f6c:	0a 05 46    	add.w     w12, w10, w10
    1f6e:	8b 85 4e    	addc.w    w13, w11, w11
    1f70:	05 16 b8    	mul.uu    w2, w5, w12
    1f72:	8b 05 46    	add.w     w12, w11, w11
    1f74:	04 1e b8    	mul.uu    w3, w4, w12
    1f76:	8b 05 46    	add.w     w12, w11, w11
    1f78:	08 00 be    	mov.d     w8, w0
    1f7a:	0a 01 be    	mov.d     w10, w2
    1f7c:	4f 06 be    	mov.d     [--w15], w12
    1f7e:	4f 05 be    	mov.d     [--w15], w10
    1f80:	4f 04 be    	mov.d     [--w15], w8
    1f82:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	3a 22 04    	goto      0x223a <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	14 22 04    	goto      0x2214 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	86 22 04    	goto      0x2286 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	60 22 04    	goto      0x2260 <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	d2 22 04    	goto      0x22d2 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	ac 22 04    	goto      0x22ac <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	1e 23 04    	goto      0x231e <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	f8 22 04    	goto      0x22f8 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	76 40 04    	goto      0x4076 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009f84 <_Device>:
    9f84:	12 01       	.word 0x112
    9f86:	00 02       	.word 0x200
    9f88:	00 00       	.word 0
    9f8a:	00 40       	.word 0x4000
    9f8c:	66 66       	.word 0x6666
    9f8e:	03 00       	.word 0x3
    9f90:	00 00       	.word 0
    9f92:	01 02       	.word 0x201
    9f94:	00 01       	.word 0x100

00009f96 <_Configuration1>:
    9f96:	09 02       	.word 0x209
    9f98:	12 00       	.word 0x12
    9f9a:	01 01       	.word 0x101
    9f9c:	00 a0       	.word 0xa000
    9f9e:	32 09       	.word 0x932
    9fa0:	04 00       	.word 0x4
    9fa2:	00 00       	.word 0
    9fa4:	ff 00       	.word 0xff
    9fa6:	ff 00       	.word 0xff

00009fa8 <_String0>:
    9fa8:	04 03       	.word 0x304
    9faa:	09 04       	.word 0x409

00009fac <_String1>:
    9fac:	1a 03       	.word 0x31a
    9fae:	4f 00       	.word 0x4f
    9fb0:	6c 00       	.word 0x6c
    9fb2:	69 00       	.word 0x69
    9fb4:	6e 00       	.word 0x6e
    9fb6:	20 00       	.word 0x20
    9fb8:	43 00       	.word 0x43
    9fba:	6f 00       	.word 0x6f
    9fbc:	6c 00       	.word 0x6c
    9fbe:	6c 00       	.word 0x6c
    9fc0:	65 00       	.word 0x65
    9fc2:	67 00       	.word 0x67
    9fc4:	65 00       	.word 0x65

00009fc6 <_String2>:
    9fc6:	44 03       	.word 0x344
    9fc8:	45 00       	.word 0x45
    9fca:	6c 00       	.word 0x6c
    9fcc:	65 00       	.word 0x65
    9fce:	63 00       	.word 0x63
    9fd0:	61 00       	.word 0x61
    9fd2:	6e 00       	.word 0x6e
    9fd4:	69 00       	.word 0x69
    9fd6:	73 00       	.word 0x73
    9fd8:	6d 00       	.word 0x6d
    9fda:	73 00       	.word 0x73
    9fdc:	20 00       	.word 0x20
    9fde:	4d 00       	.word 0x4d
    9fe0:	69 00       	.word 0x69
    9fe2:	6e 00       	.word 0x6e
    9fe4:	69 00       	.word 0x69
    9fe6:	70 00       	.word 0x70
    9fe8:	72 00       	.word 0x72
    9fea:	6f 00       	.word 0x6f
    9fec:	6a 00       	.word 0x6a
    9fee:	65 00       	.word 0x65
    9ff0:	63 00       	.word 0x63
    9ff2:	74 00       	.word 0x74
    9ff4:	20 00       	.word 0x20
    9ff6:	32 00       	.word 0x32
    9ff8:	20 00       	.word 0x20
    9ffa:	46 00       	.word 0x46
    9ffc:	69 00       	.word 0x69
    9ffe:	72 00       	.word 0x72
    a000:	6d 00       	.word 0x6d
    a002:	77 00       	.word 0x77
    a004:	61 00       	.word 0x61
    a006:	72 00       	.word 0x72
    a008:	65 00       	.word 0x65

0000a00a <.LC0>:
    a00a:	48 65       	.word 0x6548
    a00c:	6c 6c       	.word 0x6c6c
    a00e:	6f 20       	.word 0x206f
    a010:	57 6f       	.word 0x6f57
    a012:	72 6c       	.word 0x6c72
    a014:	64 21       	.word 0x2164
    a016:	00 76       	.word 0x7600

0000a017 <.LC1>:
    a017:	00 00       	.word 0
    a019:	00 00       	.word 0
    a01b:	00 00       	.word 0
    a01d:	00 00       	.word 0
    a01f:	00 00       	.word 0
    a021:	00 00       	.word 0
    a023:	00 00       	.word 0
    a025:	00 00       	.word 0
    a027:	00 00       	.word 0
    a029:	00 00       	.word 0
    a02b:	00 00       	.word 0
	...
Disassembly of section .text:

0000202e <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    202e:	04 00 fa    	lnk       #0x4
    2030:	00 0f 78    	mov.w     w0, [w14]
    2032:	21 47 98    	mov.b     w1, [w14+2]

00002034 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    2034:	00 00 00    	nop       

00002036 <.L2>:
    2036:	1e 02 78    	mov.w     [w14], w4
    2038:	14 02 90    	mov.w     [w4+2], w4
    203a:	94 02 78    	mov.w     [w4], w5
    203c:	04 20 20    	mov.w     #0x200, w4
    203e:	04 82 62    	and.w     w5, w4, w4
    2040:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2042:	f9 ff 3a    	bra       NZ, 0x2036 <.L2>

00002044 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    2044:	1e 02 78    	mov.w     [w14], w4
    2046:	24 02 90    	mov.w     [w4+4], w4
    2048:	ae 42 90    	mov.b     [w14+2], w5
    204a:	85 82 fb    	ze        w5, w5
    204c:	05 0a 78    	mov.w     w5, [w4]

0000204e <.LSM3>:
}
    204e:	00 80 fa    	ulnk      
    2050:	00 00 06    	return    

00002052 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    2052:	02 00 fa    	lnk       #0x2
    2054:	00 0f 78    	mov.w     w0, [w14]

00002056 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    2056:	00 00 00    	nop       

00002058 <.L4>:
    2058:	1e 02 78    	mov.w     [w14], w4
    205a:	14 02 90    	mov.w     [w4+2], w4
    205c:	14 02 78    	mov.w     [w4], w4
    205e:	61 02 62    	and.w     w4, #0x1, w4
    2060:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2062:	fa ff 32    	bra       Z, 0x2058 <.L4>

00002064 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    2064:	1e 02 78    	mov.w     [w14], w4
    2066:	34 02 90    	mov.w     [w4+6], w4
    2068:	14 02 78    	mov.w     [w4], w4
    206a:	04 42 78    	mov.b     w4, w4

0000206c <.LSM7>:
}
    206c:	04 40 78    	mov.b     w4, w0
    206e:	00 80 fa    	ulnk      
    2070:	00 00 06    	return    

00002072 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    2072:	04 00 fa    	lnk       #0x4
    2074:	00 0f 78    	mov.w     w0, [w14]
    2076:	21 47 98    	mov.b     w1, [w14+2]

00002078 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    2078:	00 00 00    	nop       

0000207a <.L6>:
    207a:	1e 02 78    	mov.w     [w14], w4
    207c:	d4 12 90    	mov.w     [w4+42], w5
    207e:	1e 02 78    	mov.w     [w14], w4
    2080:	24 12 90    	mov.w     [w4+36], w4
    2082:	84 8f 52    	sub.w     w5, w4, [w15]
    2084:	fa ff 32    	bra       Z, 0x207a <.L6>

00002086 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    2086:	1e 02 78    	mov.w     [w14], w4
    2088:	94 12 90    	mov.w     [w4+34], w5
    208a:	1e 02 78    	mov.w     [w14], w4
    208c:	44 12 90    	mov.w     [w4+40], w4
    208e:	04 82 42    	add.w     w5, w4, w4
    2090:	2e 40 90    	mov.b     [w14+2], w0
    2092:	00 4a 78    	mov.b     w0, [w4]

00002094 <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    2094:	1e 02 78    	mov.w     [w14], w4
    2096:	44 12 90    	mov.w     [w4+40], w4
    2098:	84 02 e8    	inc.w     w4, w5
    209a:	1e 02 78    	mov.w     [w14], w4
    209c:	24 12 90    	mov.w     [w4+36], w4
    209e:	11 00 09    	repeat    #0x11
    20a0:	84 82 d8    	div.uw    w5, w4
    20a2:	01 02 78    	mov.w     w1, w4
    20a4:	84 02 78    	mov.w     w4, w5
    20a6:	1e 02 78    	mov.w     [w14], w4
    20a8:	45 12 98    	mov.w     w5, [w4+40]

000020aa <.LSM12>:
    self->TXbuffer.count++;
    20aa:	1e 02 78    	mov.w     [w14], w4
    20ac:	54 12 90    	mov.w     [w4+42], w4
    20ae:	84 02 e8    	inc.w     w4, w5
    20b0:	1e 02 78    	mov.w     [w14], w4
    20b2:	55 12 98    	mov.w     w5, [w4+42]

000020b4 <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    20b4:	1e 02 78    	mov.w     [w14], w4
    20b6:	d4 12 90    	mov.w     [w4+42], w5
    20b8:	1e 02 78    	mov.w     [w14], w4
    20ba:	34 1a 90    	mov.w     [w4+54], w4
    20bc:	84 8f 52    	sub.w     w5, w4, [w15]
    20be:	08 00 39    	bra       NC, 0x20d0 <.L5>

000020c0 <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    20c0:	1e 02 78    	mov.w     [w14], w4
    20c2:	14 02 90    	mov.w     [w4+2], w4
    20c4:	9e 02 78    	mov.w     [w14], w5
    20c6:	95 02 90    	mov.w     [w5+2], w5
    20c8:	15 03 78    	mov.w     [w5], w6
    20ca:	05 40 20    	mov.w     #0x400, w5
    20cc:	86 82 72    	ior.w     w5, w6, w5
    20ce:	05 0a 78    	mov.w     w5, [w4]

000020d0 <.L5>:
                                                    // transmission
}
    20d0:	00 80 fa    	ulnk      
    20d2:	00 00 06    	return    

000020d4 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    20d4:	04 00 fa    	lnk       #0x4
    20d6:	10 07 98    	mov.w     w0, [w14+2]

000020d8 <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    20d8:	1e 02 90    	mov.w     [w14+2], w4
    20da:	54 02 90    	mov.w     [w4+10], w4
    20dc:	9e 02 90    	mov.w     [w14+2], w5
    20de:	d5 02 90    	mov.w     [w5+10], w5
    20e0:	15 03 78    	mov.w     [w5], w6
    20e2:	9e 02 90    	mov.w     [w14+2], w5
    20e4:	e5 4a 90    	mov.b     [w5+14], w5
    20e6:	85 82 fb    	ze        w5, w5
    20e8:	17 00 20    	mov.w     #0x1, w7
    20ea:	85 3a dd    	sl.w      w7, w5, w5
    20ec:	85 82 ea    	com.w     w5, w5
    20ee:	85 02 63    	and.w     w6, w5, w5
    20f0:	05 0a 78    	mov.w     w5, [w4]

000020f2 <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    20f2:	1e 02 90    	mov.w     [w14+2], w4
    20f4:	54 12 90    	mov.w     [w4+42], w4
    20f6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    20f8:	25 00 3a    	bra       NZ, 0x2144 <.L13>

000020fa <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    20fa:	1e 02 90    	mov.w     [w14+2], w4
    20fc:	14 02 90    	mov.w     [w4+2], w4
    20fe:	9e 02 90    	mov.w     [w14+2], w5
    2100:	95 02 90    	mov.w     [w5+2], w5
    2102:	15 03 78    	mov.w     [w5], w6
    2104:	f5 bf 2f    	mov.w     #0xfbff, w5
    2106:	85 02 63    	and.w     w6, w5, w5
    2108:	05 0a 78    	mov.w     w5, [w4]

0000210a <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    210a:	1d 00 37    	bra       0x2146 <.L10>

0000210c <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    210c:	1e 02 90    	mov.w     [w14+2], w4
    210e:	94 12 90    	mov.w     [w4+34], w5
    2110:	1e 02 90    	mov.w     [w14+2], w4
    2112:	34 12 90    	mov.w     [w4+38], w4
    2114:	04 82 42    	add.w     w5, w4, w4
    2116:	14 4f 78    	mov.b     [w4], [w14]

00002118 <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    2118:	1e 02 90    	mov.w     [w14+2], w4
    211a:	34 12 90    	mov.w     [w4+38], w4
    211c:	84 02 e8    	inc.w     w4, w5
    211e:	1e 02 90    	mov.w     [w14+2], w4
    2120:	24 12 90    	mov.w     [w4+36], w4
    2122:	11 00 09    	repeat    #0x11
    2124:	84 82 d8    	div.uw    w5, w4
    2126:	01 02 78    	mov.w     w1, w4
    2128:	84 02 78    	mov.w     w4, w5
    212a:	1e 02 90    	mov.w     [w14+2], w4
    212c:	35 12 98    	mov.w     w5, [w4+38]

0000212e <.LSM23>:
        self->TXbuffer.count--;
    212e:	1e 02 90    	mov.w     [w14+2], w4
    2130:	54 12 90    	mov.w     [w4+42], w4
    2132:	84 02 e9    	dec.w     w4, w5
    2134:	1e 02 90    	mov.w     [w14+2], w4
    2136:	55 12 98    	mov.w     w5, [w4+42]

00002138 <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    2138:	1e 02 90    	mov.w     [w14+2], w4
    213a:	24 02 90    	mov.w     [w4+4], w4
    213c:	1e 43 78    	mov.b     [w14], w6
    213e:	86 82 fb    	ze        w6, w5
    2140:	05 0a 78    	mov.w     w5, [w4]
    2142:	01 00 37    	bra       0x2146 <.L10>

00002144 <.L13>:
    2144:	00 00 00    	nop       

00002146 <.L10>:
    2146:	1e 02 90    	mov.w     [w14+2], w4
    2148:	14 02 90    	mov.w     [w4+2], w4
    214a:	94 02 78    	mov.w     [w4], w5
    214c:	04 20 20    	mov.w     #0x200, w4
    214e:	04 82 62    	and.w     w5, w4, w4
    2150:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2152:	04 00 3a    	bra       NZ, 0x215c <.L8>
    2154:	1e 02 90    	mov.w     [w14+2], w4
    2156:	54 12 90    	mov.w     [w4+42], w4
    2158:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    215a:	d8 ff 3a    	bra       NZ, 0x210c <.L12>

0000215c <.L8>:
    }
}
    215c:	00 80 fa    	ulnk      
    215e:	00 00 06    	return    

00002160 <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    2160:	04 00 fa    	lnk       #0x4
    2162:	10 07 98    	mov.w     w0, [w14+2]

00002164 <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    2164:	00 00 00    	nop       

00002166 <.L15>:
    2166:	1e 02 90    	mov.w     [w14+2], w4
    2168:	24 1a 90    	mov.w     [w4+52], w4
    216a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    216c:	fc ff 32    	bra       Z, 0x2166 <.L15>

0000216e <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    216e:	1e 02 90    	mov.w     [w14+2], w4
    2170:	e4 12 90    	mov.w     [w4+44], w5
    2172:	1e 02 90    	mov.w     [w14+2], w4
    2174:	04 1a 90    	mov.w     [w4+48], w4
    2176:	04 82 42    	add.w     w5, w4, w4
    2178:	14 4f 78    	mov.b     [w4], [w14]

0000217a <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    217a:	1e 02 90    	mov.w     [w14+2], w4
    217c:	04 1a 90    	mov.w     [w4+48], w4
    217e:	84 02 e8    	inc.w     w4, w5
    2180:	1e 02 90    	mov.w     [w14+2], w4
    2182:	74 12 90    	mov.w     [w4+46], w4
    2184:	11 00 09    	repeat    #0x11
    2186:	84 82 d8    	div.uw    w5, w4
    2188:	01 02 78    	mov.w     w1, w4
    218a:	84 02 78    	mov.w     w4, w5
    218c:	1e 02 90    	mov.w     [w14+2], w4
    218e:	05 1a 98    	mov.w     w5, [w4+48]

00002190 <.LSM31>:
    self->RXbuffer.count--;
    2190:	1e 02 90    	mov.w     [w14+2], w4
    2192:	24 1a 90    	mov.w     [w4+52], w4
    2194:	84 02 e9    	dec.w     w4, w5
    2196:	1e 02 90    	mov.w     [w14+2], w4
    2198:	25 1a 98    	mov.w     w5, [w4+52]

0000219a <.LSM32>:
    return ch;
    219a:	1e 42 78    	mov.b     [w14], w4

0000219c <.LSM33>:
}
    219c:	04 40 78    	mov.b     w4, w0
    219e:	00 80 fa    	ulnk      
    21a0:	00 00 06    	return    

000021a2 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    21a2:	02 00 fa    	lnk       #0x2
    21a4:	00 0f 78    	mov.w     w0, [w14]

000021a6 <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    21a6:	1e 02 78    	mov.w     [w14], w4
    21a8:	54 02 90    	mov.w     [w4+10], w4
    21aa:	9e 02 78    	mov.w     [w14], w5
    21ac:	d5 02 90    	mov.w     [w5+10], w5
    21ae:	15 03 78    	mov.w     [w5], w6
    21b0:	9e 02 78    	mov.w     [w14], w5
    21b2:	f5 4a 90    	mov.b     [w5+15], w5
    21b4:	85 82 fb    	ze        w5, w5
    21b6:	17 00 20    	mov.w     #0x1, w7
    21b8:	85 3a dd    	sl.w      w7, w5, w5
    21ba:	85 82 ea    	com.w     w5, w5
    21bc:	85 02 63    	and.w     w6, w5, w5
    21be:	05 0a 78    	mov.w     w5, [w4]

000021c0 <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    21c0:	1a 00 37    	bra       0x21f6 <.L17>

000021c2 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    21c2:	1e 02 78    	mov.w     [w14], w4
    21c4:	e4 12 90    	mov.w     [w4+44], w5
    21c6:	1e 02 78    	mov.w     [w14], w4
    21c8:	14 1a 90    	mov.w     [w4+50], w4
    21ca:	04 82 42    	add.w     w5, w4, w4
    21cc:	9e 02 78    	mov.w     [w14], w5
    21ce:	b5 02 90    	mov.w     [w5+6], w5
    21d0:	95 02 78    	mov.w     [w5], w5
    21d2:	85 42 78    	mov.b     w5, w5
    21d4:	05 4a 78    	mov.b     w5, [w4]

000021d6 <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    21d6:	1e 02 78    	mov.w     [w14], w4
    21d8:	14 1a 90    	mov.w     [w4+50], w4
    21da:	84 02 e8    	inc.w     w4, w5
    21dc:	1e 02 78    	mov.w     [w14], w4
    21de:	74 12 90    	mov.w     [w4+46], w4
    21e0:	11 00 09    	repeat    #0x11
    21e2:	84 82 d8    	div.uw    w5, w4
    21e4:	01 02 78    	mov.w     w1, w4
    21e6:	84 02 78    	mov.w     w4, w5
    21e8:	1e 02 78    	mov.w     [w14], w4
    21ea:	15 1a 98    	mov.w     w5, [w4+50]

000021ec <.LSM39>:
        self->RXbuffer.count++;
    21ec:	1e 02 78    	mov.w     [w14], w4
    21ee:	24 1a 90    	mov.w     [w4+52], w4
    21f0:	84 02 e8    	inc.w     w4, w5
    21f2:	1e 02 78    	mov.w     [w14], w4
    21f4:	25 1a 98    	mov.w     w5, [w4+52]

000021f6 <.L17>:
    21f6:	1e 02 78    	mov.w     [w14], w4
    21f8:	14 02 90    	mov.w     [w4+2], w4
    21fa:	14 02 78    	mov.w     [w4], w4
    21fc:	61 02 62    	and.w     w4, #0x1, w4
    21fe:	04 42 78    	mov.b     w4, w4
    2200:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    2202:	06 00 32    	bra       Z, 0x2210 <.L16>

00002204 <.LSM41>:
    2204:	1e 02 78    	mov.w     [w14], w4
    2206:	a4 1a 90    	mov.w     [w4+52], w5
    2208:	1e 02 78    	mov.w     [w14], w4
    220a:	74 12 90    	mov.w     [w4+46], w4

0000220c <.LSM42>:
    220c:	84 8f 52    	sub.w     w5, w4, [w15]
    220e:	d9 ff 3a    	bra       NZ, 0x21c2 <.L19>

00002210 <.L16>:
    }
}
    2210:	00 80 fa    	ulnk      
    2212:	00 00 06    	return    

00002214 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    2214:	36 00 f8    	push      0x36
    2216:	80 9f be    	mov.d     w0, [w15++]
    2218:	82 9f be    	mov.d     w2, [w15++]
    221a:	84 9f be    	mov.d     w4, [w15++]
    221c:	86 9f be    	mov.d     w6, [w15++]
    221e:	32 00 f8    	push      0x32
    2220:	00 20 20    	mov.w     #0x200, w0
    2222:	90 01 88    	mov.w     w0, 0x32
    2224:	00 00 fa    	lnk       #0x0

00002226 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    2226:	80 9b 20    	mov.w     #0x9b8, w0
    2228:	55 ff 07    	rcall     0x20d4 <___serviceTxInterrupt>

0000222a <.LSM46>:
}
    222a:	00 80 fa    	ulnk      
    222c:	32 00 f9    	pop       0x32
    222e:	4f 03 be    	mov.d     [--w15], w6
    2230:	4f 02 be    	mov.d     [--w15], w4
    2232:	4f 01 be    	mov.d     [--w15], w2
    2234:	4f 00 be    	mov.d     [--w15], w0
    2236:	36 00 f9    	pop       0x36
    2238:	00 40 06    	retfie    

0000223a <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    223a:	36 00 f8    	push      0x36
    223c:	80 9f be    	mov.d     w0, [w15++]
    223e:	82 9f be    	mov.d     w2, [w15++]
    2240:	84 9f be    	mov.d     w4, [w15++]
    2242:	86 9f be    	mov.d     w6, [w15++]
    2244:	32 00 f8    	push      0x32
    2246:	00 20 20    	mov.w     #0x200, w0
    2248:	90 01 88    	mov.w     w0, 0x32
    224a:	00 00 fa    	lnk       #0x0

0000224c <.LSM48>:
    __serviceRxInterrupt(&uart1);
    224c:	80 9b 20    	mov.w     #0x9b8, w0
    224e:	a9 ff 07    	rcall     0x21a2 <___serviceRxInterrupt>

00002250 <.LSM49>:
}
    2250:	00 80 fa    	ulnk      
    2252:	32 00 f9    	pop       0x32
    2254:	4f 03 be    	mov.d     [--w15], w6
    2256:	4f 02 be    	mov.d     [--w15], w4
    2258:	4f 01 be    	mov.d     [--w15], w2
    225a:	4f 00 be    	mov.d     [--w15], w0
    225c:	36 00 f9    	pop       0x36
    225e:	00 40 06    	retfie    

00002260 <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    2260:	36 00 f8    	push      0x36
    2262:	80 9f be    	mov.d     w0, [w15++]
    2264:	82 9f be    	mov.d     w2, [w15++]
    2266:	84 9f be    	mov.d     w4, [w15++]
    2268:	86 9f be    	mov.d     w6, [w15++]
    226a:	32 00 f8    	push      0x32
    226c:	00 20 20    	mov.w     #0x200, w0
    226e:	90 01 88    	mov.w     w0, 0x32
    2270:	00 00 fa    	lnk       #0x0

00002272 <.LSM51>:
    __serviceTxInterrupt(&uart2);
    2272:	40 9f 20    	mov.w     #0x9f4, w0
    2274:	2f ff 07    	rcall     0x20d4 <___serviceTxInterrupt>

00002276 <.LSM52>:
}
    2276:	00 80 fa    	ulnk      
    2278:	32 00 f9    	pop       0x32
    227a:	4f 03 be    	mov.d     [--w15], w6
    227c:	4f 02 be    	mov.d     [--w15], w4
    227e:	4f 01 be    	mov.d     [--w15], w2
    2280:	4f 00 be    	mov.d     [--w15], w0
    2282:	36 00 f9    	pop       0x36
    2284:	00 40 06    	retfie    

00002286 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2286:	36 00 f8    	push      0x36
    2288:	80 9f be    	mov.d     w0, [w15++]
    228a:	82 9f be    	mov.d     w2, [w15++]
    228c:	84 9f be    	mov.d     w4, [w15++]
    228e:	86 9f be    	mov.d     w6, [w15++]
    2290:	32 00 f8    	push      0x32
    2292:	00 20 20    	mov.w     #0x200, w0
    2294:	90 01 88    	mov.w     w0, 0x32
    2296:	00 00 fa    	lnk       #0x0

00002298 <.LSM54>:
    __serviceRxInterrupt(&uart2);
    2298:	40 9f 20    	mov.w     #0x9f4, w0
    229a:	83 ff 07    	rcall     0x21a2 <___serviceRxInterrupt>

0000229c <.LSM55>:
}
    229c:	00 80 fa    	ulnk      
    229e:	32 00 f9    	pop       0x32
    22a0:	4f 03 be    	mov.d     [--w15], w6
    22a2:	4f 02 be    	mov.d     [--w15], w4
    22a4:	4f 01 be    	mov.d     [--w15], w2
    22a6:	4f 00 be    	mov.d     [--w15], w0
    22a8:	36 00 f9    	pop       0x36
    22aa:	00 40 06    	retfie    

000022ac <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    22ac:	36 00 f8    	push      0x36
    22ae:	80 9f be    	mov.d     w0, [w15++]
    22b0:	82 9f be    	mov.d     w2, [w15++]
    22b2:	84 9f be    	mov.d     w4, [w15++]
    22b4:	86 9f be    	mov.d     w6, [w15++]
    22b6:	32 00 f8    	push      0x32
    22b8:	00 20 20    	mov.w     #0x200, w0
    22ba:	90 01 88    	mov.w     w0, 0x32
    22bc:	00 00 fa    	lnk       #0x0

000022be <.LSM57>:
    __serviceTxInterrupt(&uart3);
    22be:	00 a3 20    	mov.w     #0xa30, w0
    22c0:	09 ff 07    	rcall     0x20d4 <___serviceTxInterrupt>

000022c2 <.LSM58>:
}
    22c2:	00 80 fa    	ulnk      
    22c4:	32 00 f9    	pop       0x32
    22c6:	4f 03 be    	mov.d     [--w15], w6
    22c8:	4f 02 be    	mov.d     [--w15], w4
    22ca:	4f 01 be    	mov.d     [--w15], w2
    22cc:	4f 00 be    	mov.d     [--w15], w0
    22ce:	36 00 f9    	pop       0x36
    22d0:	00 40 06    	retfie    

000022d2 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    22d2:	36 00 f8    	push      0x36
    22d4:	80 9f be    	mov.d     w0, [w15++]
    22d6:	82 9f be    	mov.d     w2, [w15++]
    22d8:	84 9f be    	mov.d     w4, [w15++]
    22da:	86 9f be    	mov.d     w6, [w15++]
    22dc:	32 00 f8    	push      0x32
    22de:	00 20 20    	mov.w     #0x200, w0
    22e0:	90 01 88    	mov.w     w0, 0x32
    22e2:	00 00 fa    	lnk       #0x0

000022e4 <.LSM60>:
    __serviceRxInterrupt(&uart3);
    22e4:	00 a3 20    	mov.w     #0xa30, w0
    22e6:	5d ff 07    	rcall     0x21a2 <___serviceRxInterrupt>

000022e8 <.LSM61>:
}
    22e8:	00 80 fa    	ulnk      
    22ea:	32 00 f9    	pop       0x32
    22ec:	4f 03 be    	mov.d     [--w15], w6
    22ee:	4f 02 be    	mov.d     [--w15], w4
    22f0:	4f 01 be    	mov.d     [--w15], w2
    22f2:	4f 00 be    	mov.d     [--w15], w0
    22f4:	36 00 f9    	pop       0x36
    22f6:	00 40 06    	retfie    

000022f8 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    22f8:	36 00 f8    	push      0x36
    22fa:	80 9f be    	mov.d     w0, [w15++]
    22fc:	82 9f be    	mov.d     w2, [w15++]
    22fe:	84 9f be    	mov.d     w4, [w15++]
    2300:	86 9f be    	mov.d     w6, [w15++]
    2302:	32 00 f8    	push      0x32
    2304:	00 20 20    	mov.w     #0x200, w0
    2306:	90 01 88    	mov.w     w0, 0x32
    2308:	00 00 fa    	lnk       #0x0

0000230a <.LSM63>:
    __serviceTxInterrupt(&uart4);
    230a:	c0 a6 20    	mov.w     #0xa6c, w0
    230c:	e3 fe 07    	rcall     0x20d4 <___serviceTxInterrupt>

0000230e <.LSM64>:
}
    230e:	00 80 fa    	ulnk      
    2310:	32 00 f9    	pop       0x32
    2312:	4f 03 be    	mov.d     [--w15], w6
    2314:	4f 02 be    	mov.d     [--w15], w4
    2316:	4f 01 be    	mov.d     [--w15], w2
    2318:	4f 00 be    	mov.d     [--w15], w0
    231a:	36 00 f9    	pop       0x36
    231c:	00 40 06    	retfie    

0000231e <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    231e:	36 00 f8    	push      0x36
    2320:	80 9f be    	mov.d     w0, [w15++]
    2322:	82 9f be    	mov.d     w2, [w15++]
    2324:	84 9f be    	mov.d     w4, [w15++]
    2326:	86 9f be    	mov.d     w6, [w15++]
    2328:	32 00 f8    	push      0x32
    232a:	00 20 20    	mov.w     #0x200, w0
    232c:	90 01 88    	mov.w     w0, 0x32
    232e:	00 00 fa    	lnk       #0x0

00002330 <.LSM66>:
    __serviceRxInterrupt(&uart4);
    2330:	c0 a6 20    	mov.w     #0xa6c, w0
    2332:	37 ff 07    	rcall     0x21a2 <___serviceRxInterrupt>

00002334 <.LSM67>:
}
    2334:	00 80 fa    	ulnk      
    2336:	32 00 f9    	pop       0x32
    2338:	4f 03 be    	mov.d     [--w15], w6
    233a:	4f 02 be    	mov.d     [--w15], w4
    233c:	4f 01 be    	mov.d     [--w15], w2
    233e:	4f 00 be    	mov.d     [--w15], w0
    2340:	36 00 f9    	pop       0x36
    2342:	00 40 06    	retfie    

00002344 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    2344:	08 00 fa    	lnk       #0x8
    2346:	10 07 98    	mov.w     w0, [w14+2]
    2348:	21 07 98    	mov.w     w1, [w14+4]
    234a:	32 07 98    	mov.w     w2, [w14+6]

0000234c <.LSM69>:
    int16_t i;

    switch (handle) {
    234c:	1e 02 90    	mov.w     [w14+2], w4
    234e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2350:	29 00 35    	bra       LT, 0x23a4 <.L37>
    2352:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    2354:	03 00 34    	bra       LE, 0x235c <.L30>
    2356:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    2358:	13 00 32    	bra       Z, 0x2380 <.L31>

0000235a <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    235a:	25 00 37    	bra       0x23a6 <.L34>

0000235c <.L30>:
    235c:	00 02 eb    	clr.w     w4
    235e:	04 0f 78    	mov.w     w4, [w14]
    2360:	0a 00 37    	bra       0x2376 <.L32>

00002362 <.L33>:
    2362:	2e 02 90    	mov.w     [w14+4], w4
    2364:	94 42 78    	mov.b     [w4], w5
    2366:	2e 02 90    	mov.w     [w14+4], w4
    2368:	04 02 e8    	inc.w     w4, w4
    236a:	24 07 98    	mov.w     w4, [w14+4]
    236c:	44 55 80    	mov.w     0xaa8, w4
    236e:	85 40 78    	mov.b     w5, w1
    2370:	04 00 78    	mov.w     w4, w0
    2372:	61 04 07    	rcall     0x2c36 <_uart_putc>

00002374 <.LSM73>:
    2374:	1e 0f e8    	inc.w     [w14], [w14]

00002376 <.L32>:
    2376:	9e 02 78    	mov.w     [w14], w5
    2378:	3e 02 90    	mov.w     [w14+6], w4
    237a:	84 8f 52    	sub.w     w5, w4, [w15]
    237c:	f2 ff 39    	bra       NC, 0x2362 <.L33>

0000237e <.LSM74>:
    237e:	13 00 37    	bra       0x23a6 <.L34>

00002380 <.L31>:
    2380:	00 02 eb    	clr.w     w4
    2382:	04 0f 78    	mov.w     w4, [w14]
    2384:	0a 00 37    	bra       0x239a <.L35>

00002386 <.L36>:
    2386:	2e 02 90    	mov.w     [w14+4], w4
    2388:	94 42 78    	mov.b     [w4], w5
    238a:	2e 02 90    	mov.w     [w14+4], w4
    238c:	04 02 e8    	inc.w     w4, w4
    238e:	24 07 98    	mov.w     w4, [w14+4]
    2390:	54 55 80    	mov.w     0xaaa, w4
    2392:	85 40 78    	mov.b     w5, w1
    2394:	04 00 78    	mov.w     w4, w0
    2396:	4f 04 07    	rcall     0x2c36 <_uart_putc>

00002398 <.LSM77>:
    2398:	1e 0f e8    	inc.w     [w14], [w14]

0000239a <.L35>:
    239a:	9e 02 78    	mov.w     [w14], w5
    239c:	3e 02 90    	mov.w     [w14+6], w4
    239e:	84 8f 52    	sub.w     w5, w4, [w15]
    23a0:	f2 ff 39    	bra       NC, 0x2386 <.L36>

000023a2 <.LSM78>:
    23a2:	01 00 37    	bra       0x23a6 <.L34>

000023a4 <.L37>:
    23a4:	00 00 00    	nop       

000023a6 <.L34>:
    }
    return len;
    23a6:	3e 02 90    	mov.w     [w14+6], w4

000023a8 <.LSM81>:
}
    23a8:	04 00 78    	mov.w     w4, w0
    23aa:	00 80 fa    	ulnk      
    23ac:	00 00 06    	return    

000023ae <_init_uart>:

void init_uart(void) {
    23ae:	00 00 fa    	lnk       #0x0

000023b0 <.LSM83>:
    init_pin();
    23b0:	43 0a 07    	rcall     0x3838 <_init_pin>

000023b2 <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    23b2:	44 6d 20    	mov.w     #0x6d4, w4
    23b4:	84 1f 78    	mov.w     w4, [w15++]
    23b6:	57 01 20    	mov.w     #0x15, w7
    23b8:	86 c0 b3    	mov.b     #0x8, w6
    23ba:	80 82 eb    	setm.w    w5
    23bc:	64 c0 b3    	mov.b     #0x6, w4
    23be:	80 01 eb    	clr.w     w3
    23c0:	02 2f 20    	mov.w     #0x2f0, w2
    23c2:	21 2f 20    	mov.w     #0x2f2, w1
    23c4:	c0 aa 20    	mov.w     #0xaac, w0
    23c6:	50 0b 07    	rcall     0x3a68 <_pin_init>
    23c8:	8f 87 e9    	dec2.w    w15, w15

000023ca <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    23ca:	a4 6d 20    	mov.w     #0x6da, w4
    23cc:	84 1f 78    	mov.w     w4, [w15++]
    23ce:	a7 01 20    	mov.w     #0x1a, w7
    23d0:	00 43 eb    	clr.b     w6
    23d2:	80 82 eb    	setm.w    w5
    23d4:	74 c0 b3    	mov.b     #0x7, w4
    23d6:	80 01 eb    	clr.w     w3
    23d8:	02 2f 20    	mov.w     #0x2f0, w2
    23da:	21 2f 20    	mov.w     #0x2f2, w1
    23dc:	20 ac 20    	mov.w     #0xac2, w0
    23de:	44 0b 07    	rcall     0x3a68 <_pin_init>
    23e0:	8f 87 e9    	dec2.w    w15, w15

000023e2 <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    23e2:	44 00 20    	mov.w     #0x4, w4
    23e4:	84 1f 78    	mov.w     w4, [w15++]
    23e6:	34 00 20    	mov.w     #0x3, w4
    23e8:	84 1f 78    	mov.w     w4, [w15++]
    23ea:	84 c0 b3    	mov.b     #0x8, w4
    23ec:	84 1f 78    	mov.w     w4, [w15++]
    23ee:	00 42 eb    	clr.b     w4
    23f0:	84 1f 78    	mov.w     w4, [w15++]
    23f2:	44 6a 20    	mov.w     #0x6a4, w4
    23f4:	84 1f 78    	mov.w     w4, [w15++]
    23f6:	44 6a 20    	mov.w     #0x6a4, w4
    23f8:	84 1f 78    	mov.w     w4, [w15++]
    23fa:	b4 c0 b3    	mov.b     #0xb, w4
    23fc:	84 1f 78    	mov.w     w4, [w15++]
    23fe:	c4 c0 b3    	mov.b     #0xc, w4
    2400:	84 1f 78    	mov.w     w4, [w15++]
    2402:	47 09 20    	mov.w     #0x94, w7
    2404:	46 08 20    	mov.w     #0x84, w6
    2406:	85 22 20    	mov.w     #0x228, w5
    2408:	64 22 20    	mov.w     #0x226, w4
    240a:	43 22 20    	mov.w     #0x224, w3
    240c:	22 22 20    	mov.w     #0x222, w2
    240e:	01 22 20    	mov.w     #0x220, w1
    2410:	80 9b 20    	mov.w     #0x9b8, w0
    2412:	6b 00 07    	rcall     0x24ea <_uart_init>
    2414:	f0 87 57    	sub.w     w15, #0x10, w15

00002416 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    2416:	64 00 20    	mov.w     #0x6, w4
    2418:	84 1f 78    	mov.w     w4, [w15++]
    241a:	54 00 20    	mov.w     #0x5, w4
    241c:	84 1f 78    	mov.w     w4, [w15++]
    241e:	84 c0 b3    	mov.b     #0x8, w4
    2420:	84 1f 78    	mov.w     w4, [w15++]
    2422:	00 42 eb    	clr.b     w4
    2424:	84 1f 78    	mov.w     w4, [w15++]
    2426:	64 6a 20    	mov.w     #0x6a6, w4
    2428:	84 1f 78    	mov.w     w4, [w15++]
    242a:	64 6a 20    	mov.w     #0x6a6, w4
    242c:	84 1f 78    	mov.w     w4, [w15++]
    242e:	e4 c0 b3    	mov.b     #0xe, w4
    2430:	84 1f 78    	mov.w     w4, [w15++]
    2432:	f4 c0 b3    	mov.b     #0xf, w4
    2434:	84 1f 78    	mov.w     w4, [w15++]
    2436:	67 09 20    	mov.w     #0x96, w7
    2438:	66 08 20    	mov.w     #0x86, w6
    243a:	85 23 20    	mov.w     #0x238, w5
    243c:	64 23 20    	mov.w     #0x236, w4
    243e:	43 23 20    	mov.w     #0x234, w3
    2440:	22 23 20    	mov.w     #0x232, w2
    2442:	01 23 20    	mov.w     #0x230, w1
    2444:	40 9f 20    	mov.w     #0x9f4, w0
    2446:	51 00 07    	rcall     0x24ea <_uart_init>
    2448:	f0 87 57    	sub.w     w15, #0x10, w15

0000244a <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    244a:	d4 01 20    	mov.w     #0x1d, w4
    244c:	84 1f 78    	mov.w     w4, [w15++]
    244e:	c4 01 20    	mov.w     #0x1c, w4
    2450:	84 1f 78    	mov.w     w4, [w15++]
    2452:	84 c0 b3    	mov.b     #0x8, w4
    2454:	84 1f 78    	mov.w     w4, [w15++]
    2456:	84 c0 b3    	mov.b     #0x8, w4
    2458:	84 1f 78    	mov.w     w4, [w15++]
    245a:	a4 6a 20    	mov.w     #0x6aa, w4
    245c:	84 1f 78    	mov.w     w4, [w15++]
    245e:	24 6a 20    	mov.w     #0x6a2, w4
    2460:	84 1f 78    	mov.w     w4, [w15++]
    2462:	24 c0 b3    	mov.b     #0x2, w4
    2464:	84 1f 78    	mov.w     w4, [w15++]
    2466:	34 c0 b3    	mov.b     #0x3, w4
    2468:	84 1f 78    	mov.w     w4, [w15++]
    246a:	e7 09 20    	mov.w     #0x9e, w7
    246c:	e6 08 20    	mov.w     #0x8e, w6
    246e:	85 25 20    	mov.w     #0x258, w5
    2470:	64 25 20    	mov.w     #0x256, w4
    2472:	43 25 20    	mov.w     #0x254, w3
    2474:	22 25 20    	mov.w     #0x252, w2
    2476:	01 25 20    	mov.w     #0x250, w1
    2478:	00 a3 20    	mov.w     #0xa30, w0
    247a:	37 00 07    	rcall     0x24ea <_uart_init>
    247c:	f0 87 57    	sub.w     w15, #0x10, w15

0000247e <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    247e:	f4 01 20    	mov.w     #0x1f, w4
    2480:	84 1f 78    	mov.w     w4, [w15++]
    2482:	e4 01 20    	mov.w     #0x1e, w4
    2484:	84 1f 78    	mov.w     w4, [w15++]
    2486:	84 c0 b3    	mov.b     #0x8, w4
    2488:	84 1f 78    	mov.w     w4, [w15++]
    248a:	00 42 eb    	clr.b     w4
    248c:	84 1f 78    	mov.w     w4, [w15++]
    248e:	64 6b 20    	mov.w     #0x6b6, w4
    2490:	84 1f 78    	mov.w     w4, [w15++]
    2492:	64 6b 20    	mov.w     #0x6b6, w4
    2494:	84 1f 78    	mov.w     w4, [w15++]
    2496:	84 c0 b3    	mov.b     #0x8, w4
    2498:	84 1f 78    	mov.w     w4, [w15++]
    249a:	94 c0 b3    	mov.b     #0x9, w4
    249c:	84 1f 78    	mov.w     w4, [w15++]
    249e:	e7 09 20    	mov.w     #0x9e, w7
    24a0:	e6 08 20    	mov.w     #0x8e, w6
    24a2:	85 2b 20    	mov.w     #0x2b8, w5
    24a4:	64 2b 20    	mov.w     #0x2b6, w4
    24a6:	43 2b 20    	mov.w     #0x2b4, w3
    24a8:	22 2b 20    	mov.w     #0x2b2, w2
    24aa:	01 2b 20    	mov.w     #0x2b0, w1
    24ac:	c0 a6 20    	mov.w     #0xa6c, w0
    24ae:	1d 00 07    	rcall     0x24ea <_uart_init>
    24b0:	f0 87 57    	sub.w     w15, #0x10, w15

000024b2 <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    24b2:	00 02 eb    	clr.w     w4
    24b4:	84 1f 78    	mov.w     w4, [w15++]
    24b6:	00 02 eb    	clr.w     w4
    24b8:	84 1f 78    	mov.w     w4, [w15++]
    24ba:	00 02 eb    	clr.w     w4
    24bc:	84 1f 78    	mov.w     w4, [w15++]
    24be:	00 02 eb    	clr.w     w4
    24c0:	84 1f 78    	mov.w     w4, [w15++]
    24c2:	00 02 eb    	clr.w     w4
    24c4:	84 1f 78    	mov.w     w4, [w15++]
    24c6:	14 00 20    	mov.w     #0x1, w4
    24c8:	84 1f 78    	mov.w     w4, [w15++]
    24ca:	e5 c4 b3    	mov.b     #0x4e, w5
    24cc:	06 00 20    	mov.w     #0x0, w6
    24ce:	67 69 24    	mov.w     #0x4696, w7
    24d0:	00 02 eb    	clr.w     w4
    24d2:	80 01 eb    	clr.w     w3
    24d4:	22 ac 20    	mov.w     #0xac2, w2
    24d6:	c1 aa 20    	mov.w     #0xaac, w1
    24d8:	80 9b 20    	mov.w     #0x9b8, w0
    24da:	72 00 07    	rcall     0x25c0 <_uart_open>
    24dc:	ec 87 57    	sub.w     w15, #0xc, w15

000024de <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    24de:	84 9b 20    	mov.w     #0x9b8, w4
    24e0:	44 55 88    	mov.w     w4, 0xaa8

000024e2 <.LSM92>:
    _stderr = &uart1;
    24e2:	84 9b 20    	mov.w     #0x9b8, w4
    24e4:	54 55 88    	mov.w     w4, 0xaaa

000024e6 <.LSM93>:
}
    24e6:	00 80 fa    	ulnk      
    24e8:	00 00 06    	return    

000024ea <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    24ea:	10 00 fa    	lnk       #0x10
    24ec:	00 0f 78    	mov.w     w0, [w14]
    24ee:	11 07 98    	mov.w     w1, [w14+2]
    24f0:	22 07 98    	mov.w     w2, [w14+4]
    24f2:	33 07 98    	mov.w     w3, [w14+6]
    24f4:	44 07 98    	mov.w     w4, [w14+8]
    24f6:	55 07 98    	mov.w     w5, [w14+10]
    24f8:	66 07 98    	mov.w     w6, [w14+12]
    24fa:	77 07 98    	mov.w     w7, [w14+14]

000024fc <.LSM95>:
    self->UxMODE = UxMODE;
    24fc:	1e 02 78    	mov.w     [w14], w4
    24fe:	9e 02 90    	mov.w     [w14+2], w5
    2500:	05 0a 78    	mov.w     w5, [w4]

00002502 <.LSM96>:
    self->UxSTA = UxSTA;
    2502:	1e 02 78    	mov.w     [w14], w4
    2504:	ae 02 90    	mov.w     [w14+4], w5
    2506:	15 02 98    	mov.w     w5, [w4+2]

00002508 <.LSM97>:
    self->UxTXREG = UxTXREG;
    2508:	1e 02 78    	mov.w     [w14], w4
    250a:	be 02 90    	mov.w     [w14+6], w5
    250c:	25 02 98    	mov.w     w5, [w4+4]

0000250e <.LSM98>:
    self->UxRXREG = UxRXREG;
    250e:	1e 02 78    	mov.w     [w14], w4
    2510:	ce 02 90    	mov.w     [w14+8], w5
    2512:	35 02 98    	mov.w     w5, [w4+6]

00002514 <.LSM99>:
    self->UxBRG = UxBRG;
    2514:	1e 02 78    	mov.w     [w14], w4
    2516:	de 02 90    	mov.w     [w14+10], w5
    2518:	45 02 98    	mov.w     w5, [w4+8]

0000251a <.LSM100>:
    self->IFSy = IFSy;
    251a:	1e 02 78    	mov.w     [w14], w4
    251c:	ee 02 90    	mov.w     [w14+12], w5
    251e:	55 02 98    	mov.w     w5, [w4+10]

00002520 <.LSM101>:
    self->IECy = IECy;
    2520:	1e 02 78    	mov.w     [w14], w4
    2522:	fe 02 90    	mov.w     [w14+14], w5
    2524:	65 02 98    	mov.w     w5, [w4+12]

00002526 <.LSM102>:
    self->UxTXIF = UxTXIF;
    2526:	1e 02 78    	mov.w     [w14], w4
    2528:	8e fa 97    	mov.b     [w14-8], w5
    252a:	65 4a 98    	mov.b     w5, [w4+14]

0000252c <.LSM103>:
    self->UxRXIF = UxRXIF;
    252c:	1e 02 78    	mov.w     [w14], w4
    252e:	ee f2 97    	mov.b     [w14-10], w5
    2530:	75 4a 98    	mov.b     w5, [w4+15]

00002532 <.LSM104>:
    self->RXrpinr = RXrpinr;
    2532:	1e 02 78    	mov.w     [w14], w4
    2534:	ae ba 97    	mov.w     [w14-12], w5
    2536:	05 0a 98    	mov.w     w5, [w4+16]

00002538 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    2538:	1e 02 78    	mov.w     [w14], w4
    253a:	9e ba 97    	mov.w     [w14-14], w5
    253c:	15 0a 98    	mov.w     w5, [w4+18]

0000253e <.LSM106>:
    self->RXrpshift = RXrpshift;
    253e:	1e 02 78    	mov.w     [w14], w4
    2540:	8e f2 97    	mov.b     [w14-16], w5
    2542:	45 52 98    	mov.b     w5, [w4+20]

00002544 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    2544:	1e 02 78    	mov.w     [w14], w4
    2546:	ee ea 97    	mov.b     [w14-18], w5
    2548:	55 52 98    	mov.b     w5, [w4+21]

0000254a <.LSM108>:
    self->TXrpnum = TXrpnum;
    254a:	1e 02 78    	mov.w     [w14], w4
    254c:	ee b2 97    	mov.w     [w14-20], w5
    254e:	35 0a 98    	mov.w     w5, [w4+22]

00002550 <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    2550:	1e 02 78    	mov.w     [w14], w4
    2552:	de b2 97    	mov.w     [w14-22], w5
    2554:	45 0a 98    	mov.w     w5, [w4+24]

00002556 <.LSM110>:
    self->TX = NULL;
    2556:	1e 02 78    	mov.w     [w14], w4
    2558:	80 02 eb    	clr.w     w5
    255a:	55 0a 98    	mov.w     w5, [w4+26]

0000255c <.LSM111>:
    self->RX = NULL;
    255c:	1e 02 78    	mov.w     [w14], w4
    255e:	80 02 eb    	clr.w     w5
    2560:	65 0a 98    	mov.w     w5, [w4+28]

00002562 <.LSM112>:
    self->RTS = NULL;
    2562:	1e 02 78    	mov.w     [w14], w4
    2564:	80 02 eb    	clr.w     w5
    2566:	75 0a 98    	mov.w     w5, [w4+30]

00002568 <.LSM113>:
    self->CTS = NULL;
    2568:	1e 02 78    	mov.w     [w14], w4
    256a:	80 02 eb    	clr.w     w5
    256c:	05 12 98    	mov.w     w5, [w4+32]

0000256e <.LSM114>:
    self->TXbuffer.data = NULL;
    256e:	1e 02 78    	mov.w     [w14], w4
    2570:	80 02 eb    	clr.w     w5
    2572:	15 12 98    	mov.w     w5, [w4+34]

00002574 <.LSM115>:
    self->TXbuffer.length = 0;
    2574:	1e 02 78    	mov.w     [w14], w4
    2576:	80 02 eb    	clr.w     w5
    2578:	25 12 98    	mov.w     w5, [w4+36]

0000257a <.LSM116>:
    self->TXbuffer.head = 0;
    257a:	1e 02 78    	mov.w     [w14], w4
    257c:	80 02 eb    	clr.w     w5
    257e:	35 12 98    	mov.w     w5, [w4+38]

00002580 <.LSM117>:
    self->TXbuffer.tail = 0;
    2580:	1e 02 78    	mov.w     [w14], w4
    2582:	80 02 eb    	clr.w     w5
    2584:	45 12 98    	mov.w     w5, [w4+40]

00002586 <.LSM118>:
    self->TXbuffer.count = 0;
    2586:	1e 02 78    	mov.w     [w14], w4
    2588:	80 02 eb    	clr.w     w5
    258a:	55 12 98    	mov.w     w5, [w4+42]

0000258c <.LSM119>:
    self->RXbuffer.data = NULL;
    258c:	1e 02 78    	mov.w     [w14], w4
    258e:	80 02 eb    	clr.w     w5
    2590:	65 12 98    	mov.w     w5, [w4+44]

00002592 <.LSM120>:
    self->RXbuffer.length = 0;
    2592:	1e 02 78    	mov.w     [w14], w4
    2594:	80 02 eb    	clr.w     w5
    2596:	75 12 98    	mov.w     w5, [w4+46]

00002598 <.LSM121>:
    self->RXbuffer.head = 0;
    2598:	1e 02 78    	mov.w     [w14], w4
    259a:	80 02 eb    	clr.w     w5
    259c:	05 1a 98    	mov.w     w5, [w4+48]

0000259e <.LSM122>:
    self->RXbuffer.tail = 0;
    259e:	1e 02 78    	mov.w     [w14], w4
    25a0:	80 02 eb    	clr.w     w5
    25a2:	15 1a 98    	mov.w     w5, [w4+50]

000025a4 <.LSM123>:
    self->RXbuffer.count = 0;
    25a4:	1e 02 78    	mov.w     [w14], w4
    25a6:	80 02 eb    	clr.w     w5
    25a8:	25 1a 98    	mov.w     w5, [w4+52]

000025aa <.LSM124>:
    self->TXthreshold = 1;
    25aa:	1e 02 78    	mov.w     [w14], w4
    25ac:	15 00 20    	mov.w     #0x1, w5
    25ae:	35 1a 98    	mov.w     w5, [w4+54]

000025b0 <.LSM125>:
    self->putc = NULL;
    25b0:	1e 02 78    	mov.w     [w14], w4
    25b2:	80 02 eb    	clr.w     w5
    25b4:	45 1a 98    	mov.w     w5, [w4+56]

000025b6 <.LSM126>:
    self->getc = NULL;
    25b6:	1e 02 78    	mov.w     [w14], w4
    25b8:	80 02 eb    	clr.w     w5
    25ba:	55 1a 98    	mov.w     w5, [w4+58]

000025bc <.LSM127>:
}
    25bc:	00 80 fa    	ulnk      
    25be:	00 00 06    	return    

000025c0 <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    25c0:	10 00 fa    	lnk       #0x10
    25c2:	88 1f 78    	mov.w     w8, [w15++]
    25c4:	00 0f 78    	mov.w     w0, [w14]
    25c6:	11 07 98    	mov.w     w1, [w14+2]
    25c8:	22 07 98    	mov.w     w2, [w14+4]
    25ca:	33 07 98    	mov.w     w3, [w14+6]
    25cc:	44 07 98    	mov.w     w4, [w14+8]
    25ce:	56 07 98    	mov.w     w6, [w14+10]
    25d0:	67 07 98    	mov.w     w7, [w14+12]
    25d2:	65 4f 98    	mov.b     w5, [w14+14]

000025d4 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    25d4:	1e 02 78    	mov.w     [w14], w4
    25d6:	14 02 78    	mov.w     [w4], w4
    25d8:	80 02 eb    	clr.w     w5
    25da:	05 0a 78    	mov.w     w5, [w4]

000025dc <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    25dc:	1e 02 90    	mov.w     [w14+2], w4
    25de:	64 02 90    	mov.w     [w4+12], w4
    25e0:	e1 0f 42    	add.w     w4, #0x1, [w15]
    25e2:	1b 02 32    	bra       Z, 0x2a1a <.L73>
    25e4:	2e 02 90    	mov.w     [w14+4], w4
    25e6:	64 02 90    	mov.w     [w4+12], w4
    25e8:	e1 0f 42    	add.w     w4, #0x1, [w15]
    25ea:	19 02 32    	bra       Z, 0x2a1e <.L74>

000025ec <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    25ec:	1e 02 90    	mov.w     [w14+2], w4
    25ee:	04 0a 90    	mov.w     [w4+16], w4
    25f0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    25f2:	69 00 3a    	bra       NZ, 0x26c6 <.L44>
    25f4:	2e 02 90    	mov.w     [w14+4], w4
    25f6:	04 0a 90    	mov.w     [w4+16], w4
    25f8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    25fa:	65 00 3a    	bra       NZ, 0x26c6 <.L44>

000025fc <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    25fc:	1e 00 90    	mov.w     [w14+2], w0
    25fe:	87 0a 07    	rcall     0x3b0e <_pin_digitalOut>

00002600 <.LSM133>:
        pin_set(TX);
    2600:	1e 00 90    	mov.w     [w14+2], w0
    2602:	e2 0a 07    	rcall     0x3bc8 <_pin_set>

00002604 <.LSM134>:
        pin_digitalIn(RX);
    2604:	2e 00 90    	mov.w     [w14+4], w0
    2606:	5c 0a 07    	rcall     0x3ac0 <_pin_digitalIn>

00002608 <.LSM135>:
        self->TX = TX;
    2608:	1e 02 78    	mov.w     [w14], w4
    260a:	9e 02 90    	mov.w     [w14+2], w5
    260c:	55 0a 98    	mov.w     w5, [w4+26]

0000260e <.LSM136>:
        TX->owner = (void *)self;
    260e:	1e 02 90    	mov.w     [w14+2], w4
    2610:	9e 02 78    	mov.w     [w14], w5
    2612:	05 0a 98    	mov.w     w5, [w4+16]

00002614 <.LSM137>:
        TX->write = NULL;
    2614:	1e 02 90    	mov.w     [w14+2], w4
    2616:	80 02 eb    	clr.w     w5
    2618:	15 0a 98    	mov.w     w5, [w4+18]

0000261a <.LSM138>:
        TX->read = NULL;
    261a:	1e 02 90    	mov.w     [w14+2], w4
    261c:	80 02 eb    	clr.w     w5
    261e:	25 0a 98    	mov.w     w5, [w4+20]

00002620 <.LSM139>:
        self->RX = RX;
    2620:	1e 02 78    	mov.w     [w14], w4
    2622:	ae 02 90    	mov.w     [w14+4], w5
    2624:	65 0a 98    	mov.w     w5, [w4+28]

00002626 <.LSM140>:
        RX->owner = (void *)self;
    2626:	2e 02 90    	mov.w     [w14+4], w4
    2628:	9e 02 78    	mov.w     [w14], w5
    262a:	05 0a 98    	mov.w     w5, [w4+16]

0000262c <.LSM141>:
        RX->write = NULL;
    262c:	2e 02 90    	mov.w     [w14+4], w4
    262e:	80 02 eb    	clr.w     w5
    2630:	15 0a 98    	mov.w     w5, [w4+18]

00002632 <.LSM142>:
        RX->read = NULL;
    2632:	2e 02 90    	mov.w     [w14+4], w4
    2634:	80 02 eb    	clr.w     w5
    2636:	25 0a 98    	mov.w     w5, [w4+20]

00002638 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2638:	15 3a 80    	mov.w     0x742, w5
    263a:	f4 0b 20    	mov.w     #0xbf, w4
    263c:	04 83 62    	and.w     w5, w4, w6
    263e:	64 04 20    	mov.w     #0x46, w4
    2640:	75 05 20    	mov.w     #0x57, w5
    2642:	27 74 20    	mov.w     #0x742, w7
    2644:	84 4b 78    	mov.b     w4, [w7]
    2646:	85 4b 78    	mov.b     w5, [w7]
    2648:	86 4b 78    	mov.b     w6, [w7]

0000264a <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    264a:	1e 02 90    	mov.w     [w14+2], w4
    264c:	74 02 90    	mov.w     [w4+14], w4
    264e:	9e 02 90    	mov.w     [w14+2], w5
    2650:	f5 02 90    	mov.w     [w5+14], w5
    2652:	15 03 78    	mov.w     [w5], w6
    2654:	9e 02 90    	mov.w     [w14+2], w5
    2656:	a5 4a 90    	mov.b     [w5+10], w5
    2658:	85 82 fb    	ze        w5, w5
    265a:	f7 03 20    	mov.w     #0x3f, w7
    265c:	85 3a dd    	sl.w      w7, w5, w5
    265e:	85 82 ea    	com.w     w5, w5
    2660:	85 02 63    	and.w     w6, w5, w5
    2662:	05 0a 78    	mov.w     w5, [w4]

00002664 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    2664:	1e 02 90    	mov.w     [w14+2], w4
    2666:	74 02 90    	mov.w     [w4+14], w4
    2668:	9e 02 90    	mov.w     [w14+2], w5
    266a:	f5 02 90    	mov.w     [w5+14], w5
    266c:	15 03 78    	mov.w     [w5], w6
    266e:	9e 02 78    	mov.w     [w14], w5
    2670:	b5 0b 90    	mov.w     [w5+22], w7
    2672:	9e 02 90    	mov.w     [w14+2], w5
    2674:	a5 4a 90    	mov.b     [w5+10], w5
    2676:	85 82 fb    	ze        w5, w5
    2678:	85 3a dd    	sl.w      w7, w5, w5
    267a:	86 82 72    	ior.w     w5, w6, w5
    267c:	05 0a 78    	mov.w     w5, [w4]

0000267e <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    267e:	1e 02 78    	mov.w     [w14], w4
    2680:	04 0a 90    	mov.w     [w4+16], w4
    2682:	9e 02 78    	mov.w     [w14], w5
    2684:	85 0a 90    	mov.w     [w5+16], w5
    2686:	15 03 78    	mov.w     [w5], w6
    2688:	9e 02 78    	mov.w     [w14], w5
    268a:	c5 52 90    	mov.b     [w5+20], w5
    268c:	85 82 fb    	ze        w5, w5
    268e:	f7 03 20    	mov.w     #0x3f, w7
    2690:	85 3a dd    	sl.w      w7, w5, w5
    2692:	85 82 ea    	com.w     w5, w5
    2694:	85 02 63    	and.w     w6, w5, w5
    2696:	05 0a 78    	mov.w     w5, [w4]

00002698 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    2698:	1e 02 78    	mov.w     [w14], w4
    269a:	04 0a 90    	mov.w     [w4+16], w4
    269c:	9e 02 78    	mov.w     [w14], w5
    269e:	85 0a 90    	mov.w     [w5+16], w5
    26a0:	15 03 78    	mov.w     [w5], w6
    26a2:	ae 02 90    	mov.w     [w14+4], w5
    26a4:	e5 03 90    	mov.w     [w5+12], w7
    26a6:	9e 02 78    	mov.w     [w14], w5
    26a8:	c5 52 90    	mov.b     [w5+20], w5
    26aa:	85 82 fb    	ze        w5, w5
    26ac:	85 3a dd    	sl.w      w7, w5, w5
    26ae:	86 82 72    	ior.w     w5, w6, w5
    26b0:	05 0a 78    	mov.w     w5, [w4]

000026b2 <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    26b2:	15 3a 80    	mov.w     0x742, w5
    26b4:	04 04 20    	mov.w     #0x40, w4
    26b6:	05 03 72    	ior.w     w4, w5, w6
    26b8:	64 04 20    	mov.w     #0x46, w4
    26ba:	75 05 20    	mov.w     #0x57, w5
    26bc:	27 74 20    	mov.w     #0x742, w7
    26be:	84 4b 78    	mov.b     w4, [w7]
    26c0:	85 4b 78    	mov.b     w5, [w7]
    26c2:	86 4b 78    	mov.b     w6, [w7]
    26c4:	0a 00 37    	bra       0x26da <.L45>

000026c6 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    26c6:	1e 02 78    	mov.w     [w14], w4
    26c8:	d4 0a 90    	mov.w     [w4+26], w5
    26ca:	1e 02 90    	mov.w     [w14+2], w4
    26cc:	84 8f 52    	sub.w     w5, w4, [w15]
    26ce:	a9 01 3a    	bra       NZ, 0x2a22 <.L75>
    26d0:	1e 02 78    	mov.w     [w14], w4
    26d2:	e4 0a 90    	mov.w     [w4+28], w5
    26d4:	2e 02 90    	mov.w     [w14+4], w4
    26d6:	84 8f 52    	sub.w     w5, w4, [w15]
    26d8:	a6 01 3a    	bra       NZ, 0x2a26 <.L76>

000026da <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    26da:	3e 02 90    	mov.w     [w14+6], w4
    26dc:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    26de:	87 00 32    	bra       Z, 0x27ee <.L47>
    26e0:	4e 02 90    	mov.w     [w14+8], w4
    26e2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    26e4:	84 00 32    	bra       Z, 0x27ee <.L47>

000026e6 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    26e6:	3e 02 90    	mov.w     [w14+6], w4
    26e8:	64 02 90    	mov.w     [w4+12], w4
    26ea:	e1 0f 42    	add.w     w4, #0x1, [w15]
    26ec:	9e 01 32    	bra       Z, 0x2a2a <.L77>
    26ee:	4e 02 90    	mov.w     [w14+8], w4
    26f0:	64 02 90    	mov.w     [w4+12], w4
    26f2:	e1 0f 42    	add.w     w4, #0x1, [w15]
    26f4:	9c 01 32    	bra       Z, 0x2a2e <.L78>

000026f6 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    26f6:	3e 02 90    	mov.w     [w14+6], w4
    26f8:	04 0a 90    	mov.w     [w4+16], w4
    26fa:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    26fc:	69 00 3a    	bra       NZ, 0x27d0 <.L50>
    26fe:	4e 02 90    	mov.w     [w14+8], w4
    2700:	04 0a 90    	mov.w     [w4+16], w4
    2702:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2704:	65 00 3a    	bra       NZ, 0x27d0 <.L50>

00002706 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    2706:	3e 00 90    	mov.w     [w14+6], w0
    2708:	02 0a 07    	rcall     0x3b0e <_pin_digitalOut>

0000270a <.LSM154>:
            pin_set(RTS);
    270a:	3e 00 90    	mov.w     [w14+6], w0
    270c:	5d 0a 07    	rcall     0x3bc8 <_pin_set>

0000270e <.LSM155>:
            pin_digitalIn(CTS);
    270e:	4e 00 90    	mov.w     [w14+8], w0
    2710:	d7 09 07    	rcall     0x3ac0 <_pin_digitalIn>

00002712 <.LSM156>:
            self->RTS = RTS;
    2712:	1e 02 78    	mov.w     [w14], w4
    2714:	be 02 90    	mov.w     [w14+6], w5
    2716:	75 0a 98    	mov.w     w5, [w4+30]

00002718 <.LSM157>:
            RTS->owner = (void *)self;
    2718:	3e 02 90    	mov.w     [w14+6], w4
    271a:	9e 02 78    	mov.w     [w14], w5
    271c:	05 0a 98    	mov.w     w5, [w4+16]

0000271e <.LSM158>:
            RTS->write = NULL;
    271e:	3e 02 90    	mov.w     [w14+6], w4
    2720:	80 02 eb    	clr.w     w5
    2722:	15 0a 98    	mov.w     w5, [w4+18]

00002724 <.LSM159>:
            RTS->read = NULL;
    2724:	3e 02 90    	mov.w     [w14+6], w4
    2726:	80 02 eb    	clr.w     w5
    2728:	25 0a 98    	mov.w     w5, [w4+20]

0000272a <.LSM160>:
            self->CTS = CTS;
    272a:	1e 02 78    	mov.w     [w14], w4
    272c:	ce 02 90    	mov.w     [w14+8], w5
    272e:	05 12 98    	mov.w     w5, [w4+32]

00002730 <.LSM161>:
            CTS->owner = (void *)self;
    2730:	4e 02 90    	mov.w     [w14+8], w4
    2732:	9e 02 78    	mov.w     [w14], w5
    2734:	05 0a 98    	mov.w     w5, [w4+16]

00002736 <.LSM162>:
            CTS->write = NULL;
    2736:	4e 02 90    	mov.w     [w14+8], w4
    2738:	80 02 eb    	clr.w     w5
    273a:	15 0a 98    	mov.w     w5, [w4+18]

0000273c <.LSM163>:
            CTS->read = NULL;
    273c:	4e 02 90    	mov.w     [w14+8], w4
    273e:	80 02 eb    	clr.w     w5
    2740:	25 0a 98    	mov.w     w5, [w4+20]

00002742 <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    2742:	15 3a 80    	mov.w     0x742, w5
    2744:	f4 0b 20    	mov.w     #0xbf, w4
    2746:	04 83 62    	and.w     w5, w4, w6
    2748:	64 04 20    	mov.w     #0x46, w4
    274a:	75 05 20    	mov.w     #0x57, w5
    274c:	27 74 20    	mov.w     #0x742, w7
    274e:	84 4b 78    	mov.b     w4, [w7]
    2750:	85 4b 78    	mov.b     w5, [w7]
    2752:	86 4b 78    	mov.b     w6, [w7]

00002754 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    2754:	3e 02 90    	mov.w     [w14+6], w4
    2756:	74 02 90    	mov.w     [w4+14], w4
    2758:	be 02 90    	mov.w     [w14+6], w5
    275a:	f5 02 90    	mov.w     [w5+14], w5
    275c:	15 03 78    	mov.w     [w5], w6
    275e:	be 02 90    	mov.w     [w14+6], w5
    2760:	a5 4a 90    	mov.b     [w5+10], w5
    2762:	85 82 fb    	ze        w5, w5
    2764:	f7 03 20    	mov.w     #0x3f, w7
    2766:	85 3a dd    	sl.w      w7, w5, w5
    2768:	85 82 ea    	com.w     w5, w5
    276a:	85 02 63    	and.w     w6, w5, w5
    276c:	05 0a 78    	mov.w     w5, [w4]

0000276e <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    276e:	3e 02 90    	mov.w     [w14+6], w4
    2770:	74 02 90    	mov.w     [w4+14], w4
    2772:	be 02 90    	mov.w     [w14+6], w5
    2774:	f5 02 90    	mov.w     [w5+14], w5
    2776:	15 03 78    	mov.w     [w5], w6
    2778:	9e 02 78    	mov.w     [w14], w5
    277a:	c5 0b 90    	mov.w     [w5+24], w7
    277c:	be 02 90    	mov.w     [w14+6], w5
    277e:	a5 4a 90    	mov.b     [w5+10], w5
    2780:	85 82 fb    	ze        w5, w5
    2782:	85 3a dd    	sl.w      w7, w5, w5
    2784:	86 82 72    	ior.w     w5, w6, w5
    2786:	05 0a 78    	mov.w     w5, [w4]

00002788 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    2788:	1e 02 78    	mov.w     [w14], w4
    278a:	14 0a 90    	mov.w     [w4+18], w4
    278c:	9e 02 78    	mov.w     [w14], w5
    278e:	95 0a 90    	mov.w     [w5+18], w5
    2790:	15 03 78    	mov.w     [w5], w6
    2792:	9e 02 78    	mov.w     [w14], w5
    2794:	d5 52 90    	mov.b     [w5+21], w5
    2796:	85 82 fb    	ze        w5, w5
    2798:	f7 03 20    	mov.w     #0x3f, w7
    279a:	85 3a dd    	sl.w      w7, w5, w5
    279c:	85 82 ea    	com.w     w5, w5
    279e:	85 02 63    	and.w     w6, w5, w5
    27a0:	05 0a 78    	mov.w     w5, [w4]

000027a2 <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    27a2:	1e 02 78    	mov.w     [w14], w4
    27a4:	14 0a 90    	mov.w     [w4+18], w4
    27a6:	9e 02 78    	mov.w     [w14], w5
    27a8:	95 0a 90    	mov.w     [w5+18], w5
    27aa:	15 03 78    	mov.w     [w5], w6
    27ac:	ce 02 90    	mov.w     [w14+8], w5
    27ae:	e5 03 90    	mov.w     [w5+12], w7
    27b0:	9e 02 78    	mov.w     [w14], w5
    27b2:	d5 52 90    	mov.b     [w5+21], w5
    27b4:	85 82 fb    	ze        w5, w5
    27b6:	85 3a dd    	sl.w      w7, w5, w5
    27b8:	86 82 72    	ior.w     w5, w6, w5
    27ba:	05 0a 78    	mov.w     w5, [w4]

000027bc <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    27bc:	15 3a 80    	mov.w     0x742, w5
    27be:	04 04 20    	mov.w     #0x40, w4
    27c0:	05 03 72    	ior.w     w4, w5, w6
    27c2:	64 04 20    	mov.w     #0x46, w4
    27c4:	75 05 20    	mov.w     #0x57, w5
    27c6:	27 74 20    	mov.w     #0x742, w7
    27c8:	84 4b 78    	mov.b     w4, [w7]
    27ca:	85 4b 78    	mov.b     w5, [w7]
    27cc:	86 4b 78    	mov.b     w6, [w7]
    27ce:	0a 00 37    	bra       0x27e4 <.L51>

000027d0 <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    27d0:	1e 02 78    	mov.w     [w14], w4
    27d2:	f4 0a 90    	mov.w     [w4+30], w5
    27d4:	3e 02 90    	mov.w     [w14+6], w4
    27d6:	84 8f 52    	sub.w     w5, w4, [w15]
    27d8:	2c 01 3a    	bra       NZ, 0x2a32 <.L79>
    27da:	1e 02 78    	mov.w     [w14], w4
    27dc:	84 12 90    	mov.w     [w4+32], w5
    27de:	4e 02 90    	mov.w     [w14+8], w4
    27e0:	84 8f 52    	sub.w     w5, w4, [w15]
    27e2:	29 01 3a    	bra       NZ, 0x2a36 <.L80>

000027e4 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    27e4:	1e 02 78    	mov.w     [w14], w4
    27e6:	14 02 78    	mov.w     [w4], w4
    27e8:	05 20 20    	mov.w     #0x200, w5
    27ea:	05 0a 78    	mov.w     w5, [w4]
    27ec:	06 00 37    	bra       0x27fa <.L53>

000027ee <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    27ee:	3e 02 90    	mov.w     [w14+6], w4
    27f0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    27f2:	23 01 3a    	bra       NZ, 0x2a3a <.L81>
    27f4:	4e 02 90    	mov.w     [w14+8], w4
    27f6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    27f8:	22 01 3a    	bra       NZ, 0x2a3e <.L82>

000027fa <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    27fa:	18 c0 b3    	mov.b     #0x1, w8
    27fc:	02 40 22    	mov.w     #0x2400, w2
    27fe:	43 a7 24    	mov.w     #0x4a74, w3
    2800:	5e 00 90    	mov.w     [w14+10], w0
    2802:	ee 00 90    	mov.w     [w14+12], w1
    2804:	9e f5 07    	rcall     0x1342 <___gesf2>
    2806:	00 02 78    	mov.w     w0, w4
    2808:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    280a:	01 00 3c    	bra       GT, 0x280e <.L55>
    280c:	00 44 eb    	clr.b     w8

0000280e <.L55>:
    280e:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    2810:	04 00 32    	bra       Z, 0x281a <.L56>

00002812 <.LSM174>:
        baudrate = FCY/4.;
    2812:	04 40 22    	mov.w     #0x2400, w4
    2814:	45 a7 24    	mov.w     #0x4a74, w5
    2816:	54 07 98    	mov.w     w4, [w14+10]
    2818:	65 07 98    	mov.w     w5, [w14+12]

0000281a <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    281a:	18 c0 b3    	mov.b     #0x1, w8
    281c:	02 40 22    	mov.w     #0x2400, w2
    281e:	43 17 24    	mov.w     #0x4174, w3
    2820:	5e 00 90    	mov.w     [w14+10], w0
    2822:	ee 00 90    	mov.w     [w14+12], w1
    2824:	8c f5 07    	rcall     0x133e <___eqsf2>
    2826:	00 02 78    	mov.w     w0, w4
    2828:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    282a:	01 00 35    	bra       LT, 0x282e <.L57>
    282c:	00 44 eb    	clr.b     w8

0000282e <.L57>:
    282e:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    2830:	04 00 32    	bra       Z, 0x283a <.L58>

00002832 <.LSM176>:
        baudrate = FCY/(16.*65536.);
    2832:	04 40 22    	mov.w     #0x2400, w4
    2834:	45 17 24    	mov.w     #0x4174, w5
    2836:	54 07 98    	mov.w     w4, [w14+10]
    2838:	65 07 98    	mov.w     w5, [w14+12]

0000283a <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    283a:	18 c0 b3    	mov.b     #0x1, w8
    283c:	02 40 22    	mov.w     #0x2400, w2
    283e:	43 27 24    	mov.w     #0x4274, w3
    2840:	5e 00 90    	mov.w     [w14+10], w0
    2842:	ee 00 90    	mov.w     [w14+12], w1
    2844:	7c f5 07    	rcall     0x133e <___eqsf2>
    2846:	00 02 78    	mov.w     w0, w4
    2848:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    284a:	01 00 34    	bra       LE, 0x284e <.L59>
    284c:	00 44 eb    	clr.b     w8

0000284e <.L59>:
    284e:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    2850:	14 00 32    	bra       Z, 0x287a <.L60>

00002852 <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    2852:	1e 02 78    	mov.w     [w14], w4
    2854:	44 04 90    	mov.w     [w4+8], w8
    2856:	5e 01 90    	mov.w     [w14+10], w2
    2858:	ee 01 90    	mov.w     [w14+12], w3
    285a:	00 40 22    	mov.w     #0x2400, w0
    285c:	41 97 24    	mov.w     #0x4974, w1
    285e:	2d f5 07    	rcall     0x12ba <___divsf3>
    2860:	00 02 be    	mov.d     w0, w4
    2862:	02 00 20    	mov.w     #0x0, w2
    2864:	03 f0 23    	mov.w     #0x3f00, w3
    2866:	04 00 be    	mov.d     w4, w0
    2868:	cb f4 07    	rcall     0x1200 <___addsf3>
    286a:	00 02 be    	mov.d     w0, w4
    286c:	04 00 be    	mov.d     w4, w0
    286e:	6b f5 07    	rcall     0x1346 <___fixunssfsi>
    2870:	00 02 be    	mov.d     w0, w4
    2872:	04 02 78    	mov.w     w4, w4
    2874:	04 02 e9    	dec.w     w4, w4
    2876:	04 0c 78    	mov.w     w4, [w8]
    2878:	1a 00 37    	bra       0x28ae <.L61>

0000287a <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    287a:	1e 02 78    	mov.w     [w14], w4
    287c:	14 02 78    	mov.w     [w4], w4
    287e:	9e 02 78    	mov.w     [w14], w5
    2880:	95 02 78    	mov.w     [w5], w5
    2882:	95 02 78    	mov.w     [w5], w5
    2884:	05 30 a0    	bset.w    w5, #0x3
    2886:	05 0a 78    	mov.w     w5, [w4]

00002888 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2888:	1e 02 78    	mov.w     [w14], w4
    288a:	44 04 90    	mov.w     [w4+8], w8
    288c:	5e 01 90    	mov.w     [w14+10], w2
    288e:	ee 01 90    	mov.w     [w14+12], w3
    2890:	00 40 22    	mov.w     #0x2400, w0
    2892:	41 a7 24    	mov.w     #0x4a74, w1
    2894:	12 f5 07    	rcall     0x12ba <___divsf3>
    2896:	00 02 be    	mov.d     w0, w4
    2898:	02 00 20    	mov.w     #0x0, w2
    289a:	03 f0 23    	mov.w     #0x3f00, w3
    289c:	04 00 be    	mov.d     w4, w0
    289e:	b0 f4 07    	rcall     0x1200 <___addsf3>
    28a0:	00 02 be    	mov.d     w0, w4
    28a2:	04 00 be    	mov.d     w4, w0
    28a4:	50 f5 07    	rcall     0x1346 <___fixunssfsi>
    28a6:	00 02 be    	mov.d     w0, w4
    28a8:	04 02 78    	mov.w     w4, w4
    28aa:	04 02 e9    	dec.w     w4, w4
    28ac:	04 0c 78    	mov.w     w4, [w8]

000028ae <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    28ae:	ee 4a 90    	mov.b     [w14+14], w5
    28b0:	54 c4 b3    	mov.b     #0x45, w4
    28b2:	84 cf 52    	sub.b     w5, w4, [w15]
    28b4:	04 00 32    	bra       Z, 0x28be <.L62>
    28b6:	ee 4a 90    	mov.b     [w14+14], w5
    28b8:	54 c6 b3    	mov.b     #0x65, w4
    28ba:	84 cf 52    	sub.b     w5, w4, [w15]
    28bc:	08 00 3a    	bra       NZ, 0x28ce <.L63>

000028be <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    28be:	1e 02 78    	mov.w     [w14], w4
    28c0:	14 02 78    	mov.w     [w4], w4
    28c2:	9e 02 78    	mov.w     [w14], w5
    28c4:	95 02 78    	mov.w     [w5], w5
    28c6:	95 02 78    	mov.w     [w5], w5
    28c8:	05 10 a0    	bset.w    w5, #0x1
    28ca:	05 0a 78    	mov.w     w5, [w4]
    28cc:	18 00 37    	bra       0x28fe <.L64>

000028ce <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    28ce:	ee 4a 90    	mov.b     [w14+14], w5
    28d0:	f4 c4 b3    	mov.b     #0x4f, w4
    28d2:	84 cf 52    	sub.b     w5, w4, [w15]
    28d4:	04 00 32    	bra       Z, 0x28de <.L65>
    28d6:	ee 4a 90    	mov.b     [w14+14], w5
    28d8:	f4 c6 b3    	mov.b     #0x6f, w4
    28da:	84 cf 52    	sub.b     w5, w4, [w15]
    28dc:	08 00 3a    	bra       NZ, 0x28ee <.L66>

000028de <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    28de:	1e 02 78    	mov.w     [w14], w4
    28e0:	14 02 78    	mov.w     [w4], w4
    28e2:	9e 02 78    	mov.w     [w14], w5
    28e4:	95 02 78    	mov.w     [w5], w5
    28e6:	95 02 78    	mov.w     [w5], w5
    28e8:	05 20 a0    	bset.w    w5, #0x2
    28ea:	05 0a 78    	mov.w     w5, [w4]
    28ec:	08 00 37    	bra       0x28fe <.L64>

000028ee <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    28ee:	ee 4a 90    	mov.b     [w14+14], w5
    28f0:	e4 c4 b3    	mov.b     #0x4e, w4
    28f2:	84 cf 52    	sub.b     w5, w4, [w15]
    28f4:	04 00 32    	bra       Z, 0x28fe <.L64>
    28f6:	ee 4a 90    	mov.b     [w14+14], w5
    28f8:	e4 c6 b3    	mov.b     #0x6e, w4
    28fa:	84 cf 52    	sub.b     w5, w4, [w15]
    28fc:	a2 00 3a    	bra       NZ, 0x2a42 <.L83>

000028fe <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    28fe:	4e ba 97    	mov.w     [w14-8], w4
    2900:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    2902:	08 00 3a    	bra       NZ, 0x2914 <.L67>

00002904 <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    2904:	1e 02 78    	mov.w     [w14], w4
    2906:	14 02 78    	mov.w     [w4], w4
    2908:	9e 02 78    	mov.w     [w14], w5
    290a:	95 02 78    	mov.w     [w5], w5
    290c:	95 02 78    	mov.w     [w5], w5
    290e:	05 00 a0    	bset.w    w5, #0x0
    2910:	05 0a 78    	mov.w     w5, [w4]
    2912:	03 00 37    	bra       0x291a <.L68>

00002914 <.L67>:
    } else if (stopbits!=1) {
    2914:	4e ba 97    	mov.w     [w14-8], w4
    2916:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    2918:	96 00 3a    	bra       NZ, 0x2a46 <.L84>

0000291a <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    291a:	2e ba 97    	mov.w     [w14-12], w4
    291c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    291e:	04 00 3a    	bra       NZ, 0x2928 <.L69>

00002920 <.LSM190>:
        self->putc = __putc_nobuffer;
    2920:	1e 02 78    	mov.w     [w14], w4
    2922:	e5 02 22    	mov.w     #0x202e, w5
    2924:	45 1a 98    	mov.w     w5, [w4+56]
    2926:	36 00 37    	bra       0x2994 <.L70>

00002928 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2928:	1e 02 78    	mov.w     [w14], w4
    292a:	14 02 90    	mov.w     [w4+2], w4
    292c:	9e 02 78    	mov.w     [w14], w5
    292e:	95 02 90    	mov.w     [w5+2], w5
    2930:	15 03 78    	mov.w     [w5], w6
    2932:	05 00 22    	mov.w     #0x2000, w5
    2934:	86 82 72    	ior.w     w5, w6, w5
    2936:	05 0a 78    	mov.w     w5, [w4]

00002938 <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2938:	1e 02 78    	mov.w     [w14], w4
    293a:	ae ba 97    	mov.w     [w14-12], w5
    293c:	15 12 98    	mov.w     w5, [w4+34]

0000293e <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    293e:	1e 02 78    	mov.w     [w14], w4
    2940:	9e ba 97    	mov.w     [w14-14], w5
    2942:	25 12 98    	mov.w     w5, [w4+36]

00002944 <.LSM194>:
        self->TXbuffer.head = 0;
    2944:	1e 02 78    	mov.w     [w14], w4
    2946:	80 02 eb    	clr.w     w5
    2948:	35 12 98    	mov.w     w5, [w4+38]

0000294a <.LSM195>:
        self->TXbuffer.tail = 0;
    294a:	1e 02 78    	mov.w     [w14], w4
    294c:	80 02 eb    	clr.w     w5
    294e:	45 12 98    	mov.w     w5, [w4+40]

00002950 <.LSM196>:
        self->TXbuffer.count = 0;
    2950:	1e 02 78    	mov.w     [w14], w4
    2952:	80 02 eb    	clr.w     w5
    2954:	55 12 98    	mov.w     w5, [w4+42]

00002956 <.LSM197>:
        self->TXthreshold = TXthreshold;
    2956:	1e 02 78    	mov.w     [w14], w4
    2958:	be ba 97    	mov.w     [w14-10], w5
    295a:	35 1a 98    	mov.w     w5, [w4+54]

0000295c <.LSM198>:
        self->putc = __putc_buffer;
    295c:	1e 02 78    	mov.w     [w14], w4
    295e:	25 07 22    	mov.w     #0x2072, w5
    2960:	45 1a 98    	mov.w     w5, [w4+56]

00002962 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2962:	1e 02 78    	mov.w     [w14], w4
    2964:	54 02 90    	mov.w     [w4+10], w4
    2966:	9e 02 78    	mov.w     [w14], w5
    2968:	d5 02 90    	mov.w     [w5+10], w5
    296a:	15 03 78    	mov.w     [w5], w6
    296c:	9e 02 78    	mov.w     [w14], w5
    296e:	e5 4a 90    	mov.b     [w5+14], w5
    2970:	85 82 fb    	ze        w5, w5
    2972:	17 00 20    	mov.w     #0x1, w7
    2974:	85 3a dd    	sl.w      w7, w5, w5
    2976:	85 82 ea    	com.w     w5, w5
    2978:	85 02 63    	and.w     w6, w5, w5
    297a:	05 0a 78    	mov.w     w5, [w4]

0000297c <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    297c:	1e 02 78    	mov.w     [w14], w4
    297e:	64 02 90    	mov.w     [w4+12], w4
    2980:	9e 02 78    	mov.w     [w14], w5
    2982:	e5 02 90    	mov.w     [w5+12], w5
    2984:	15 03 78    	mov.w     [w5], w6
    2986:	9e 02 78    	mov.w     [w14], w5
    2988:	e5 4a 90    	mov.b     [w5+14], w5
    298a:	85 82 fb    	ze        w5, w5
    298c:	17 00 20    	mov.w     #0x1, w7
    298e:	85 3a dd    	sl.w      w7, w5, w5
    2990:	86 82 72    	ior.w     w5, w6, w5
    2992:	05 0a 78    	mov.w     w5, [w4]

00002994 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2994:	0e ba 97    	mov.w     [w14-16], w4
    2996:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2998:	04 00 3a    	bra       NZ, 0x29a2 <.L71>

0000299a <.LSM202>:
        self->getc = __getc_nobuffer;
    299a:	1e 02 78    	mov.w     [w14], w4
    299c:	25 05 22    	mov.w     #0x2052, w5
    299e:	55 1a 98    	mov.w     w5, [w4+58]
    29a0:	2b 00 37    	bra       0x29f8 <.L72>

000029a2 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    29a2:	1e 02 78    	mov.w     [w14], w4
    29a4:	8e ba 97    	mov.w     [w14-16], w5
    29a6:	65 12 98    	mov.w     w5, [w4+44]

000029a8 <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    29a8:	1e 02 78    	mov.w     [w14], w4
    29aa:	fe b2 97    	mov.w     [w14-18], w5
    29ac:	75 12 98    	mov.w     w5, [w4+46]

000029ae <.LSM205>:
        self->RXbuffer.head = 0;
    29ae:	1e 02 78    	mov.w     [w14], w4
    29b0:	80 02 eb    	clr.w     w5
    29b2:	05 1a 98    	mov.w     w5, [w4+48]

000029b4 <.LSM206>:
        self->RXbuffer.tail = 0;
    29b4:	1e 02 78    	mov.w     [w14], w4
    29b6:	80 02 eb    	clr.w     w5
    29b8:	15 1a 98    	mov.w     w5, [w4+50]

000029ba <.LSM207>:
        self->RXbuffer.count = 0;
    29ba:	1e 02 78    	mov.w     [w14], w4
    29bc:	80 02 eb    	clr.w     w5
    29be:	25 1a 98    	mov.w     w5, [w4+52]

000029c0 <.LSM208>:
        self->getc = __getc_buffer;
    29c0:	1e 02 78    	mov.w     [w14], w4
    29c2:	05 16 22    	mov.w     #0x2160, w5
    29c4:	55 1a 98    	mov.w     w5, [w4+58]

000029c6 <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    29c6:	1e 02 78    	mov.w     [w14], w4
    29c8:	54 02 90    	mov.w     [w4+10], w4
    29ca:	9e 02 78    	mov.w     [w14], w5
    29cc:	d5 02 90    	mov.w     [w5+10], w5
    29ce:	15 03 78    	mov.w     [w5], w6
    29d0:	9e 02 78    	mov.w     [w14], w5
    29d2:	f5 4a 90    	mov.b     [w5+15], w5
    29d4:	85 82 fb    	ze        w5, w5
    29d6:	17 00 20    	mov.w     #0x1, w7
    29d8:	85 3a dd    	sl.w      w7, w5, w5
    29da:	85 82 ea    	com.w     w5, w5
    29dc:	85 02 63    	and.w     w6, w5, w5
    29de:	05 0a 78    	mov.w     w5, [w4]

000029e0 <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    29e0:	1e 02 78    	mov.w     [w14], w4
    29e2:	64 02 90    	mov.w     [w4+12], w4
    29e4:	9e 02 78    	mov.w     [w14], w5
    29e6:	e5 02 90    	mov.w     [w5+12], w5
    29e8:	15 03 78    	mov.w     [w5], w6
    29ea:	9e 02 78    	mov.w     [w14], w5
    29ec:	f5 4a 90    	mov.b     [w5+15], w5
    29ee:	85 82 fb    	ze        w5, w5
    29f0:	17 00 20    	mov.w     #0x1, w7
    29f2:	85 3a dd    	sl.w      w7, w5, w5
    29f4:	86 82 72    	ior.w     w5, w6, w5
    29f6:	05 0a 78    	mov.w     w5, [w4]

000029f8 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    29f8:	1e 02 78    	mov.w     [w14], w4
    29fa:	14 02 78    	mov.w     [w4], w4
    29fc:	9e 02 78    	mov.w     [w14], w5
    29fe:	95 02 78    	mov.w     [w5], w5
    2a00:	15 03 78    	mov.w     [w5], w6
    2a02:	05 00 28    	mov.w     #0x8000, w5
    2a04:	86 82 72    	ior.w     w5, w6, w5
    2a06:	05 0a 78    	mov.w     w5, [w4]

00002a08 <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2a08:	1e 02 78    	mov.w     [w14], w4
    2a0a:	14 02 90    	mov.w     [w4+2], w4
    2a0c:	9e 02 78    	mov.w     [w14], w5
    2a0e:	95 02 90    	mov.w     [w5+2], w5
    2a10:	15 03 78    	mov.w     [w5], w6
    2a12:	05 40 20    	mov.w     #0x400, w5
    2a14:	86 82 72    	ior.w     w5, w6, w5
    2a16:	05 0a 78    	mov.w     w5, [w4]
    2a18:	17 00 37    	bra       0x2a48 <.L40>

00002a1a <.L73>:
    2a1a:	00 00 00    	nop       
    2a1c:	15 00 37    	bra       0x2a48 <.L40>

00002a1e <.L74>:
    2a1e:	00 00 00    	nop       
    2a20:	13 00 37    	bra       0x2a48 <.L40>

00002a22 <.L75>:
    2a22:	00 00 00    	nop       
    2a24:	11 00 37    	bra       0x2a48 <.L40>

00002a26 <.L76>:
    2a26:	00 00 00    	nop       
    2a28:	0f 00 37    	bra       0x2a48 <.L40>

00002a2a <.L77>:
    2a2a:	00 00 00    	nop       
    2a2c:	0d 00 37    	bra       0x2a48 <.L40>

00002a2e <.L78>:
    2a2e:	00 00 00    	nop       
    2a30:	0b 00 37    	bra       0x2a48 <.L40>

00002a32 <.L79>:
    2a32:	00 00 00    	nop       
    2a34:	09 00 37    	bra       0x2a48 <.L40>

00002a36 <.L80>:
    2a36:	00 00 00    	nop       
    2a38:	07 00 37    	bra       0x2a48 <.L40>

00002a3a <.L81>:
    2a3a:	00 00 00    	nop       
    2a3c:	05 00 37    	bra       0x2a48 <.L40>

00002a3e <.L82>:
    2a3e:	00 00 00    	nop       
    2a40:	03 00 37    	bra       0x2a48 <.L40>

00002a42 <.L83>:
    2a42:	00 00 00    	nop       
    2a44:	01 00 37    	bra       0x2a48 <.L40>

00002a46 <.L84>:
    2a46:	00 00 00    	nop       

00002a48 <.L40>:
}
    2a48:	4f 04 78    	mov.w     [--w15], w8
    2a4a:	00 80 fa    	ulnk      
    2a4c:	00 00 06    	return    

00002a4e <_uart_close>:

void uart_close(_UART *self) {
    2a4e:	02 00 fa    	lnk       #0x2
    2a50:	00 0f 78    	mov.w     w0, [w14]

00002a52 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2a52:	1e 02 78    	mov.w     [w14], w4
    2a54:	14 02 90    	mov.w     [w4+2], w4
    2a56:	9e 02 78    	mov.w     [w14], w5
    2a58:	95 02 90    	mov.w     [w5+2], w5
    2a5a:	15 03 78    	mov.w     [w5], w6
    2a5c:	f5 bf 2f    	mov.w     #0xfbff, w5
    2a5e:	85 02 63    	and.w     w6, w5, w5
    2a60:	05 0a 78    	mov.w     w5, [w4]

00002a62 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    2a62:	1e 02 78    	mov.w     [w14], w4
    2a64:	14 02 78    	mov.w     [w4], w4
    2a66:	80 02 eb    	clr.w     w5
    2a68:	05 0a 78    	mov.w     w5, [w4]

00002a6a <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    2a6a:	1e 02 78    	mov.w     [w14], w4
    2a6c:	64 02 90    	mov.w     [w4+12], w4
    2a6e:	9e 02 78    	mov.w     [w14], w5
    2a70:	e5 02 90    	mov.w     [w5+12], w5
    2a72:	15 03 78    	mov.w     [w5], w6
    2a74:	9e 02 78    	mov.w     [w14], w5
    2a76:	e5 4a 90    	mov.b     [w5+14], w5
    2a78:	85 82 fb    	ze        w5, w5
    2a7a:	17 00 20    	mov.w     #0x1, w7
    2a7c:	85 3a dd    	sl.w      w7, w5, w5
    2a7e:	85 82 ea    	com.w     w5, w5
    2a80:	85 02 63    	and.w     w6, w5, w5
    2a82:	05 0a 78    	mov.w     w5, [w4]

00002a84 <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2a84:	1e 02 78    	mov.w     [w14], w4
    2a86:	64 02 90    	mov.w     [w4+12], w4
    2a88:	9e 02 78    	mov.w     [w14], w5
    2a8a:	e5 02 90    	mov.w     [w5+12], w5
    2a8c:	15 03 78    	mov.w     [w5], w6
    2a8e:	9e 02 78    	mov.w     [w14], w5
    2a90:	f5 4a 90    	mov.b     [w5+15], w5
    2a92:	85 82 fb    	ze        w5, w5
    2a94:	17 00 20    	mov.w     #0x1, w7
    2a96:	85 3a dd    	sl.w      w7, w5, w5
    2a98:	85 82 ea    	com.w     w5, w5
    2a9a:	85 02 63    	and.w     w6, w5, w5
    2a9c:	05 0a 78    	mov.w     w5, [w4]

00002a9e <.LSM226>:
    self->putc = NULL;
    2a9e:	1e 02 78    	mov.w     [w14], w4
    2aa0:	80 02 eb    	clr.w     w5
    2aa2:	45 1a 98    	mov.w     w5, [w4+56]

00002aa4 <.LSM227>:
    self->getc = NULL;
    2aa4:	1e 02 78    	mov.w     [w14], w4
    2aa6:	80 02 eb    	clr.w     w5
    2aa8:	55 1a 98    	mov.w     w5, [w4+58]

00002aaa <.LSM228>:
    if (self->TX) {
    2aaa:	1e 02 78    	mov.w     [w14], w4
    2aac:	54 0a 90    	mov.w     [w4+26], w4
    2aae:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2ab0:	31 00 32    	bra       Z, 0x2b14 <.L86>

00002ab2 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2ab2:	15 3a 80    	mov.w     0x742, w5
    2ab4:	f4 0b 20    	mov.w     #0xbf, w4
    2ab6:	04 83 62    	and.w     w5, w4, w6
    2ab8:	64 04 20    	mov.w     #0x46, w4
    2aba:	75 05 20    	mov.w     #0x57, w5
    2abc:	27 74 20    	mov.w     #0x742, w7
    2abe:	84 4b 78    	mov.b     w4, [w7]
    2ac0:	85 4b 78    	mov.b     w5, [w7]
    2ac2:	86 4b 78    	mov.b     w6, [w7]

00002ac4 <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2ac4:	1e 02 78    	mov.w     [w14], w4
    2ac6:	54 0a 90    	mov.w     [w4+26], w4
    2ac8:	74 02 90    	mov.w     [w4+14], w4
    2aca:	9e 02 78    	mov.w     [w14], w5
    2acc:	d5 0a 90    	mov.w     [w5+26], w5
    2ace:	f5 02 90    	mov.w     [w5+14], w5
    2ad0:	15 03 78    	mov.w     [w5], w6
    2ad2:	9e 02 78    	mov.w     [w14], w5
    2ad4:	d5 0a 90    	mov.w     [w5+26], w5
    2ad6:	a5 4a 90    	mov.b     [w5+10], w5
    2ad8:	85 82 fb    	ze        w5, w5
    2ada:	f7 03 20    	mov.w     #0x3f, w7
    2adc:	85 3a dd    	sl.w      w7, w5, w5
    2ade:	85 82 ea    	com.w     w5, w5
    2ae0:	85 02 63    	and.w     w6, w5, w5
    2ae2:	05 0a 78    	mov.w     w5, [w4]

00002ae4 <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ae4:	15 3a 80    	mov.w     0x742, w5
    2ae6:	04 04 20    	mov.w     #0x40, w4
    2ae8:	05 03 72    	ior.w     w4, w5, w6
    2aea:	64 04 20    	mov.w     #0x46, w4
    2aec:	75 05 20    	mov.w     #0x57, w5
    2aee:	27 74 20    	mov.w     #0x742, w7
    2af0:	84 4b 78    	mov.b     w4, [w7]
    2af2:	85 4b 78    	mov.b     w5, [w7]
    2af4:	86 4b 78    	mov.b     w6, [w7]

00002af6 <.LSM232>:
        self->TX->owner = NULL;
    2af6:	1e 02 78    	mov.w     [w14], w4
    2af8:	54 0a 90    	mov.w     [w4+26], w4
    2afa:	80 02 eb    	clr.w     w5
    2afc:	05 0a 98    	mov.w     w5, [w4+16]

00002afe <.LSM233>:
        pin_digitalOut(self->TX);
    2afe:	1e 02 78    	mov.w     [w14], w4
    2b00:	54 0a 90    	mov.w     [w4+26], w4
    2b02:	04 00 78    	mov.w     w4, w0
    2b04:	04 08 07    	rcall     0x3b0e <_pin_digitalOut>

00002b06 <.LSM234>:
        pin_set(self->TX);
    2b06:	1e 02 78    	mov.w     [w14], w4
    2b08:	54 0a 90    	mov.w     [w4+26], w4
    2b0a:	04 00 78    	mov.w     w4, w0
    2b0c:	5d 08 07    	rcall     0x3bc8 <_pin_set>

00002b0e <.LSM235>:
        self->TX = NULL;
    2b0e:	1e 02 78    	mov.w     [w14], w4
    2b10:	80 02 eb    	clr.w     w5
    2b12:	55 0a 98    	mov.w     w5, [w4+26]

00002b14 <.L86>:
    }
    if (self->RX) {
    2b14:	1e 02 78    	mov.w     [w14], w4
    2b16:	64 0a 90    	mov.w     [w4+28], w4
    2b18:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2b1a:	29 00 32    	bra       Z, 0x2b6e <.L87>

00002b1c <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2b1c:	15 3a 80    	mov.w     0x742, w5
    2b1e:	f4 0b 20    	mov.w     #0xbf, w4
    2b20:	04 83 62    	and.w     w5, w4, w6
    2b22:	64 04 20    	mov.w     #0x46, w4
    2b24:	75 05 20    	mov.w     #0x57, w5
    2b26:	27 74 20    	mov.w     #0x742, w7
    2b28:	84 4b 78    	mov.b     w4, [w7]
    2b2a:	85 4b 78    	mov.b     w5, [w7]
    2b2c:	86 4b 78    	mov.b     w6, [w7]

00002b2e <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2b2e:	1e 02 78    	mov.w     [w14], w4
    2b30:	04 0a 90    	mov.w     [w4+16], w4
    2b32:	9e 02 78    	mov.w     [w14], w5
    2b34:	85 0a 90    	mov.w     [w5+16], w5
    2b36:	15 03 78    	mov.w     [w5], w6
    2b38:	9e 02 78    	mov.w     [w14], w5
    2b3a:	c5 52 90    	mov.b     [w5+20], w5
    2b3c:	85 82 fb    	ze        w5, w5
    2b3e:	f7 03 20    	mov.w     #0x3f, w7
    2b40:	85 3a dd    	sl.w      w7, w5, w5
    2b42:	86 82 72    	ior.w     w5, w6, w5
    2b44:	05 0a 78    	mov.w     w5, [w4]

00002b46 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2b46:	15 3a 80    	mov.w     0x742, w5
    2b48:	04 04 20    	mov.w     #0x40, w4
    2b4a:	05 03 72    	ior.w     w4, w5, w6
    2b4c:	64 04 20    	mov.w     #0x46, w4
    2b4e:	75 05 20    	mov.w     #0x57, w5
    2b50:	27 74 20    	mov.w     #0x742, w7
    2b52:	84 4b 78    	mov.b     w4, [w7]
    2b54:	85 4b 78    	mov.b     w5, [w7]
    2b56:	86 4b 78    	mov.b     w6, [w7]

00002b58 <.LSM240>:
        self->RX->owner = NULL;
    2b58:	1e 02 78    	mov.w     [w14], w4
    2b5a:	64 0a 90    	mov.w     [w4+28], w4
    2b5c:	80 02 eb    	clr.w     w5
    2b5e:	05 0a 98    	mov.w     w5, [w4+16]

00002b60 <.LSM241>:
        pin_digitalIn(self->RX);
    2b60:	1e 02 78    	mov.w     [w14], w4
    2b62:	64 0a 90    	mov.w     [w4+28], w4
    2b64:	04 00 78    	mov.w     w4, w0
    2b66:	ac 07 07    	rcall     0x3ac0 <_pin_digitalIn>

00002b68 <.LSM242>:
        self->RX = NULL;
    2b68:	1e 02 78    	mov.w     [w14], w4
    2b6a:	80 02 eb    	clr.w     w5
    2b6c:	65 0a 98    	mov.w     w5, [w4+28]

00002b6e <.L87>:
    }
    if (self->RTS) {
    2b6e:	1e 02 78    	mov.w     [w14], w4
    2b70:	74 0a 90    	mov.w     [w4+30], w4
    2b72:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2b74:	31 00 32    	bra       Z, 0x2bd8 <.L88>

00002b76 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2b76:	15 3a 80    	mov.w     0x742, w5
    2b78:	f4 0b 20    	mov.w     #0xbf, w4
    2b7a:	04 83 62    	and.w     w5, w4, w6
    2b7c:	64 04 20    	mov.w     #0x46, w4
    2b7e:	75 05 20    	mov.w     #0x57, w5
    2b80:	27 74 20    	mov.w     #0x742, w7
    2b82:	84 4b 78    	mov.b     w4, [w7]
    2b84:	85 4b 78    	mov.b     w5, [w7]
    2b86:	86 4b 78    	mov.b     w6, [w7]

00002b88 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2b88:	1e 02 78    	mov.w     [w14], w4
    2b8a:	74 0a 90    	mov.w     [w4+30], w4
    2b8c:	74 02 90    	mov.w     [w4+14], w4
    2b8e:	9e 02 78    	mov.w     [w14], w5
    2b90:	f5 0a 90    	mov.w     [w5+30], w5
    2b92:	f5 02 90    	mov.w     [w5+14], w5
    2b94:	15 03 78    	mov.w     [w5], w6
    2b96:	9e 02 78    	mov.w     [w14], w5
    2b98:	f5 0a 90    	mov.w     [w5+30], w5
    2b9a:	a5 4a 90    	mov.b     [w5+10], w5
    2b9c:	85 82 fb    	ze        w5, w5
    2b9e:	f7 03 20    	mov.w     #0x3f, w7
    2ba0:	85 3a dd    	sl.w      w7, w5, w5
    2ba2:	85 82 ea    	com.w     w5, w5
    2ba4:	85 02 63    	and.w     w6, w5, w5
    2ba6:	05 0a 78    	mov.w     w5, [w4]

00002ba8 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ba8:	15 3a 80    	mov.w     0x742, w5
    2baa:	04 04 20    	mov.w     #0x40, w4
    2bac:	05 03 72    	ior.w     w4, w5, w6
    2bae:	64 04 20    	mov.w     #0x46, w4
    2bb0:	75 05 20    	mov.w     #0x57, w5
    2bb2:	27 74 20    	mov.w     #0x742, w7
    2bb4:	84 4b 78    	mov.b     w4, [w7]
    2bb6:	85 4b 78    	mov.b     w5, [w7]
    2bb8:	86 4b 78    	mov.b     w6, [w7]

00002bba <.LSM247>:
        self->RTS->owner = NULL;
    2bba:	1e 02 78    	mov.w     [w14], w4
    2bbc:	74 0a 90    	mov.w     [w4+30], w4
    2bbe:	80 02 eb    	clr.w     w5
    2bc0:	05 0a 98    	mov.w     w5, [w4+16]

00002bc2 <.LSM248>:
        pin_digitalOut(self->RTS);
    2bc2:	1e 02 78    	mov.w     [w14], w4
    2bc4:	74 0a 90    	mov.w     [w4+30], w4
    2bc6:	04 00 78    	mov.w     w4, w0
    2bc8:	a2 07 07    	rcall     0x3b0e <_pin_digitalOut>

00002bca <.LSM249>:
        pin_set(self->RTS);
    2bca:	1e 02 78    	mov.w     [w14], w4
    2bcc:	74 0a 90    	mov.w     [w4+30], w4
    2bce:	04 00 78    	mov.w     w4, w0
    2bd0:	fb 07 07    	rcall     0x3bc8 <_pin_set>

00002bd2 <.LSM250>:
        self->RTS = NULL;
    2bd2:	1e 02 78    	mov.w     [w14], w4
    2bd4:	80 02 eb    	clr.w     w5
    2bd6:	75 0a 98    	mov.w     w5, [w4+30]

00002bd8 <.L88>:
    }
    if (self->CTS) {
    2bd8:	1e 02 78    	mov.w     [w14], w4
    2bda:	04 12 90    	mov.w     [w4+32], w4
    2bdc:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2bde:	29 00 32    	bra       Z, 0x2c32 <.L85>

00002be0 <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2be0:	15 3a 80    	mov.w     0x742, w5
    2be2:	f4 0b 20    	mov.w     #0xbf, w4
    2be4:	04 83 62    	and.w     w5, w4, w6
    2be6:	64 04 20    	mov.w     #0x46, w4
    2be8:	75 05 20    	mov.w     #0x57, w5
    2bea:	27 74 20    	mov.w     #0x742, w7
    2bec:	84 4b 78    	mov.b     w4, [w7]
    2bee:	85 4b 78    	mov.b     w5, [w7]
    2bf0:	86 4b 78    	mov.b     w6, [w7]

00002bf2 <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2bf2:	1e 02 78    	mov.w     [w14], w4
    2bf4:	14 0a 90    	mov.w     [w4+18], w4
    2bf6:	9e 02 78    	mov.w     [w14], w5
    2bf8:	95 0a 90    	mov.w     [w5+18], w5
    2bfa:	15 03 78    	mov.w     [w5], w6
    2bfc:	9e 02 78    	mov.w     [w14], w5
    2bfe:	d5 52 90    	mov.b     [w5+21], w5
    2c00:	85 82 fb    	ze        w5, w5
    2c02:	f7 03 20    	mov.w     #0x3f, w7
    2c04:	85 3a dd    	sl.w      w7, w5, w5
    2c06:	86 82 72    	ior.w     w5, w6, w5
    2c08:	05 0a 78    	mov.w     w5, [w4]

00002c0a <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c0a:	15 3a 80    	mov.w     0x742, w5
    2c0c:	04 04 20    	mov.w     #0x40, w4
    2c0e:	05 03 72    	ior.w     w4, w5, w6
    2c10:	64 04 20    	mov.w     #0x46, w4
    2c12:	75 05 20    	mov.w     #0x57, w5
    2c14:	27 74 20    	mov.w     #0x742, w7
    2c16:	84 4b 78    	mov.b     w4, [w7]
    2c18:	85 4b 78    	mov.b     w5, [w7]
    2c1a:	86 4b 78    	mov.b     w6, [w7]

00002c1c <.LSM255>:
        self->CTS->owner = NULL;
    2c1c:	1e 02 78    	mov.w     [w14], w4
    2c1e:	04 12 90    	mov.w     [w4+32], w4
    2c20:	80 02 eb    	clr.w     w5
    2c22:	05 0a 98    	mov.w     w5, [w4+16]

00002c24 <.LSM256>:
        pin_digitalIn(self->CTS);
    2c24:	1e 02 78    	mov.w     [w14], w4
    2c26:	04 12 90    	mov.w     [w4+32], w4
    2c28:	04 00 78    	mov.w     w4, w0
    2c2a:	4a 07 07    	rcall     0x3ac0 <_pin_digitalIn>

00002c2c <.LSM257>:
        self->CTS = NULL;
    2c2c:	1e 02 78    	mov.w     [w14], w4
    2c2e:	80 02 eb    	clr.w     w5
    2c30:	05 12 98    	mov.w     w5, [w4+32]

00002c32 <.L85>:
    }
}
    2c32:	00 80 fa    	ulnk      
    2c34:	00 00 06    	return    

00002c36 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2c36:	04 00 fa    	lnk       #0x4
    2c38:	00 0f 78    	mov.w     w0, [w14]
    2c3a:	21 47 98    	mov.b     w1, [w14+2]

00002c3c <.LSM260>:
    if (self->putc)
    2c3c:	1e 02 78    	mov.w     [w14], w4
    2c3e:	44 1a 90    	mov.w     [w4+56], w4
    2c40:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2c42:	05 00 32    	bra       Z, 0x2c4e <.L90>

00002c44 <.LSM261>:
        self->putc(self, ch);
    2c44:	1e 02 78    	mov.w     [w14], w4
    2c46:	44 1a 90    	mov.w     [w4+56], w4
    2c48:	ae 40 90    	mov.b     [w14+2], w1
    2c4a:	1e 00 78    	mov.w     [w14], w0
    2c4c:	04 00 01    	call      w4

00002c4e <.L90>:
}
    2c4e:	00 80 fa    	ulnk      
    2c50:	00 00 06    	return    

00002c52 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2c52:	02 00 fa    	lnk       #0x2
    2c54:	00 0f 78    	mov.w     w0, [w14]

00002c56 <.LSM264>:
    if (self->getc)
    2c56:	1e 02 78    	mov.w     [w14], w4
    2c58:	54 1a 90    	mov.w     [w4+58], w4
    2c5a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2c5c:	06 00 32    	bra       Z, 0x2c6a <.L93>

00002c5e <.LSM265>:
        return self->getc(self);
    2c5e:	1e 02 78    	mov.w     [w14], w4
    2c60:	54 1a 90    	mov.w     [w4+58], w4
    2c62:	1e 00 78    	mov.w     [w14], w0
    2c64:	04 00 01    	call      w4
    2c66:	00 42 78    	mov.b     w0, w4
    2c68:	01 00 37    	bra       0x2c6c <.L94>

00002c6a <.L93>:
    else
        return 0xFF;
    2c6a:	00 c2 eb    	setm.b    w4

00002c6c <.L94>:
}
    2c6c:	04 40 78    	mov.b     w4, w0
    2c6e:	00 80 fa    	ulnk      
    2c70:	00 00 06    	return    

00002c72 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2c72:	02 00 fa    	lnk       #0x2
    2c74:	00 0f 78    	mov.w     w0, [w14]

00002c76 <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2c76:	1e 02 78    	mov.w     [w14], w4
    2c78:	14 02 90    	mov.w     [w4+2], w4
    2c7a:	94 02 78    	mov.w     [w4], w5
    2c7c:	04 40 20    	mov.w     #0x400, w4
    2c7e:	04 82 62    	and.w     w5, w4, w4
    2c80:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2c82:	08 00 3a    	bra       NZ, 0x2c94 <.L95>

00002c84 <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2c84:	1e 02 78    	mov.w     [w14], w4
    2c86:	14 02 90    	mov.w     [w4+2], w4
    2c88:	9e 02 78    	mov.w     [w14], w5
    2c8a:	95 02 90    	mov.w     [w5+2], w5
    2c8c:	15 03 78    	mov.w     [w5], w6
    2c8e:	05 40 20    	mov.w     #0x400, w5
    2c90:	86 82 72    	ior.w     w5, w6, w5
    2c92:	05 0a 78    	mov.w     w5, [w4]

00002c94 <.L95>:
}
    2c94:	00 80 fa    	ulnk      
    2c96:	00 00 06    	return    

00002c98 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2c98:	04 00 fa    	lnk       #0x4
    2c9a:	00 0f 78    	mov.w     w0, [w14]
    2c9c:	11 07 98    	mov.w     w1, [w14+2]

00002c9e <.LSM273>:
    while (*str)
    2c9e:	08 00 37    	bra       0x2cb0 <.L98>

00002ca0 <.L99>:
        uart_putc(self, *str++);
    2ca0:	1e 02 90    	mov.w     [w14+2], w4
    2ca2:	14 42 78    	mov.b     [w4], w4
    2ca4:	9e 02 90    	mov.w     [w14+2], w5
    2ca6:	85 02 e8    	inc.w     w5, w5
    2ca8:	15 07 98    	mov.w     w5, [w14+2]
    2caa:	84 40 78    	mov.b     w4, w1
    2cac:	1e 00 78    	mov.w     [w14], w0
    2cae:	c3 ff 07    	rcall     0x2c36 <_uart_putc>

00002cb0 <.L98>:
    2cb0:	1e 02 90    	mov.w     [w14+2], w4
    2cb2:	14 42 78    	mov.b     [w4], w4
    2cb4:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    2cb6:	f4 ff 3a    	bra       NZ, 0x2ca0 <.L99>

00002cb8 <.LSM276>:
    uart_flushTxBuffer(self);
    2cb8:	1e 00 78    	mov.w     [w14], w0
    2cba:	db ff 07    	rcall     0x2c72 <_uart_flushTxBuffer>

00002cbc <.LSM277>:
}
    2cbc:	00 80 fa    	ulnk      
    2cbe:	00 00 06    	return    

00002cc0 <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2cc0:	0a 00 fa    	lnk       #0xa
    2cc2:	20 07 98    	mov.w     w0, [w14+4]
    2cc4:	31 07 98    	mov.w     w1, [w14+6]
    2cc6:	42 07 98    	mov.w     w2, [w14+8]

00002cc8 <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2cc8:	4e 02 90    	mov.w     [w14+8], w4
    2cca:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2ccc:	88 00 32    	bra       Z, 0x2dde <.L113>

00002cce <.LSM280>:
        return;

    if (len==1) {
    2cce:	4e 02 90    	mov.w     [w14+8], w4
    2cd0:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    2cd2:	04 00 3a    	bra       NZ, 0x2cdc <.L103>

00002cd4 <.LSM281>:
        *str = '\0';
    2cd4:	3e 02 90    	mov.w     [w14+6], w4
    2cd6:	80 42 eb    	clr.b     w5
    2cd8:	05 4a 78    	mov.b     w5, [w4]

00002cda <.LSM282>:
        return;
    2cda:	82 00 37    	bra       0x2de0 <.L100>

00002cdc <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2cdc:	b1 c1 b3    	mov.b     #0x1b, w1
    2cde:	2e 00 90    	mov.w     [w14+4], w0
    2ce0:	aa ff 07    	rcall     0x2c36 <_uart_putc>

00002ce2 <.LSM284>:
    uart_putc(self, '7');
    2ce2:	71 c3 b3    	mov.b     #0x37, w1
    2ce4:	2e 00 90    	mov.w     [w14+4], w0
    2ce6:	a7 ff 07    	rcall     0x2c36 <_uart_putc>

00002ce8 <.LSM285>:
    uart_flushTxBuffer(self);
    2ce8:	2e 00 90    	mov.w     [w14+4], w0
    2cea:	c3 ff 07    	rcall     0x2c72 <_uart_flushTxBuffer>

00002cec <.LSM286>:
    start = str;
    2cec:	3e 02 90    	mov.w     [w14+6], w4
    2cee:	14 07 98    	mov.w     w4, [w14+2]

00002cf0 <.LSM287>:
    left = len;
    2cf0:	4e 02 90    	mov.w     [w14+8], w4
    2cf2:	04 0f 78    	mov.w     w4, [w14]
    2cf4:	03 00 37    	bra       0x2cfc <.L112>

00002cf6 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2cf6:	00 00 00    	nop       
    2cf8:	01 00 37    	bra       0x2cfc <.L112>

00002cfa <.L115>:
    2cfa:	00 00 00    	nop       

00002cfc <.L112>:
    2cfc:	2e 00 90    	mov.w     [w14+4], w0
    2cfe:	a9 ff 07    	rcall     0x2c52 <_uart_getc>
    2d00:	00 42 78    	mov.b     w0, w4
    2d02:	be 02 90    	mov.w     [w14+6], w5
    2d04:	84 4a 78    	mov.b     w4, [w5]

00002d06 <.LSM290>:
    2d06:	3e 02 90    	mov.w     [w14+6], w4
    2d08:	14 42 78    	mov.b     [w4], w4
    2d0a:	ed 4f 52    	sub.b     w4, #0xd, [w15]
    2d0c:	0c 00 3a    	bra       NZ, 0x2d26 <.L104>

00002d0e <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    2d0e:	3e 02 90    	mov.w     [w14+6], w4
    2d10:	80 42 eb    	clr.b     w5
    2d12:	05 4a 78    	mov.b     w5, [w4]

00002d14 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2d14:	a1 c0 b3    	mov.b     #0xa, w1
    2d16:	2e 00 90    	mov.w     [w14+4], w0
    2d18:	8e ff 07    	rcall     0x2c36 <_uart_putc>

00002d1a <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    2d1a:	d1 c0 b3    	mov.b     #0xd, w1
    2d1c:	2e 00 90    	mov.w     [w14+4], w0
    2d1e:	8b ff 07    	rcall     0x2c36 <_uart_putc>

00002d20 <.LSM294>:
    uart_flushTxBuffer(self);
    2d20:	2e 00 90    	mov.w     [w14+4], w0
    2d22:	a7 ff 07    	rcall     0x2c72 <_uart_flushTxBuffer>
    2d24:	5d 00 37    	bra       0x2de0 <.L100>

00002d26 <.L104>:
    2d26:	3e 02 90    	mov.w     [w14+6], w4
    2d28:	14 42 78    	mov.b     [w4], w4
    2d2a:	fb 4f 52    	sub.b     w4, #0x1b, [w15]
    2d2c:	16 00 3a    	bra       NZ, 0x2d5a <.L105>

00002d2e <.LSM296>:
    2d2e:	b1 c1 b3    	mov.b     #0x1b, w1
    2d30:	2e 00 90    	mov.w     [w14+4], w0
    2d32:	81 ff 07    	rcall     0x2c36 <_uart_putc>

00002d34 <.LSM297>:
    2d34:	81 c3 b3    	mov.b     #0x38, w1
    2d36:	2e 00 90    	mov.w     [w14+4], w0
    2d38:	7e ff 07    	rcall     0x2c36 <_uart_putc>

00002d3a <.LSM298>:
    2d3a:	b1 c1 b3    	mov.b     #0x1b, w1
    2d3c:	2e 00 90    	mov.w     [w14+4], w0
    2d3e:	7b ff 07    	rcall     0x2c36 <_uart_putc>

00002d40 <.LSM299>:
    2d40:	b1 c5 b3    	mov.b     #0x5b, w1
    2d42:	2e 00 90    	mov.w     [w14+4], w0
    2d44:	78 ff 07    	rcall     0x2c36 <_uart_putc>

00002d46 <.LSM300>:
    2d46:	b1 c4 b3    	mov.b     #0x4b, w1
    2d48:	2e 00 90    	mov.w     [w14+4], w0
    2d4a:	75 ff 07    	rcall     0x2c36 <_uart_putc>

00002d4c <.LSM301>:
    2d4c:	2e 00 90    	mov.w     [w14+4], w0
    2d4e:	91 ff 07    	rcall     0x2c72 <_uart_flushTxBuffer>

00002d50 <.LSM302>:
    2d50:	1e 02 90    	mov.w     [w14+2], w4
    2d52:	34 07 98    	mov.w     w4, [w14+6]

00002d54 <.LSM303>:
    2d54:	4e 02 90    	mov.w     [w14+8], w4
    2d56:	04 0f 78    	mov.w     w4, [w14]

00002d58 <.LSM304>:
    2d58:	41 00 37    	bra       0x2ddc <.L106>

00002d5a <.L105>:
    2d5a:	3e 02 90    	mov.w     [w14+6], w4
    2d5c:	14 42 78    	mov.b     [w4], w4
    2d5e:	e8 4f 52    	sub.b     w4, #0x8, [w15]
    2d60:	05 00 32    	bra       Z, 0x2d6c <.L107>

00002d62 <.LSM306>:
    2d62:	3e 02 90    	mov.w     [w14+6], w4
    2d64:	94 42 78    	mov.b     [w4], w5

00002d66 <.LSM307>:
    2d66:	f4 c7 b3    	mov.b     #0x7f, w4
    2d68:	84 cf 52    	sub.b     w5, w4, [w15]
    2d6a:	1a 00 3a    	bra       NZ, 0x2da0 <.L108>

00002d6c <.L107>:
    2d6c:	be 02 90    	mov.w     [w14+6], w5
    2d6e:	1e 02 90    	mov.w     [w14+2], w4
    2d70:	84 8f 52    	sub.w     w5, w4, [w15]
    2d72:	10 00 36    	bra       LEU, 0x2d94 <.L109>

00002d74 <.LSM309>:
    2d74:	81 c0 b3    	mov.b     #0x8, w1
    2d76:	2e 00 90    	mov.w     [w14+4], w0
    2d78:	5e ff 07    	rcall     0x2c36 <_uart_putc>

00002d7a <.LSM310>:
    2d7a:	01 c2 b3    	mov.b     #0x20, w1
    2d7c:	2e 00 90    	mov.w     [w14+4], w0
    2d7e:	5b ff 07    	rcall     0x2c36 <_uart_putc>

00002d80 <.LSM311>:
    2d80:	81 c0 b3    	mov.b     #0x8, w1
    2d82:	2e 00 90    	mov.w     [w14+4], w0
    2d84:	58 ff 07    	rcall     0x2c36 <_uart_putc>

00002d86 <.LSM312>:
    2d86:	2e 00 90    	mov.w     [w14+4], w0
    2d88:	74 ff 07    	rcall     0x2c72 <_uart_flushTxBuffer>

00002d8a <.LSM313>:
    2d8a:	3e 02 90    	mov.w     [w14+6], w4
    2d8c:	04 02 e9    	dec.w     w4, w4
    2d8e:	34 07 98    	mov.w     w4, [w14+6]

00002d90 <.LSM314>:
    2d90:	1e 0f e8    	inc.w     [w14], [w14]
    2d92:	05 00 37    	bra       0x2d9e <.L110>

00002d94 <.L109>:
    2d94:	71 c0 b3    	mov.b     #0x7, w1
    2d96:	2e 00 90    	mov.w     [w14+4], w0
    2d98:	4e ff 07    	rcall     0x2c36 <_uart_putc>

00002d9a <.LSM316>:
    2d9a:	2e 00 90    	mov.w     [w14+4], w0
    2d9c:	6a ff 07    	rcall     0x2c72 <_uart_flushTxBuffer>

00002d9e <.L110>:
    2d9e:	1e 00 37    	bra       0x2ddc <.L106>

00002da0 <.L108>:
    2da0:	1e 02 78    	mov.w     [w14], w4
    2da2:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    2da4:	06 00 3a    	bra       NZ, 0x2db2 <.L111>

00002da6 <.LSM319>:
    2da6:	71 c0 b3    	mov.b     #0x7, w1
    2da8:	2e 00 90    	mov.w     [w14+4], w0
    2daa:	45 ff 07    	rcall     0x2c36 <_uart_putc>

00002dac <.LSM320>:
    2dac:	2e 00 90    	mov.w     [w14+4], w0
    2dae:	61 ff 07    	rcall     0x2c72 <_uart_flushTxBuffer>

00002db0 <.LSM321>:
    2db0:	15 00 37    	bra       0x2ddc <.L106>

00002db2 <.L111>:
    2db2:	3e 02 90    	mov.w     [w14+6], w4
    2db4:	14 42 78    	mov.b     [w4], w4
    2db6:	ff 4f 52    	sub.b     w4, #0x1f, [w15]
    2db8:	9e ff 36    	bra       LEU, 0x2cf6 <.L114>
    2dba:	3e 02 90    	mov.w     [w14+6], w4
    2dbc:	94 42 78    	mov.b     [w4], w5
    2dbe:	e4 c7 b3    	mov.b     #0x7e, w4
    2dc0:	84 cf 52    	sub.b     w5, w4, [w15]
    2dc2:	9b ff 3e    	bra       GTU, 0x2cfa <.L115>

00002dc4 <.LSM323>:
    2dc4:	3e 02 90    	mov.w     [w14+6], w4
    2dc6:	14 42 78    	mov.b     [w4], w4
    2dc8:	84 40 78    	mov.b     w4, w1
    2dca:	2e 00 90    	mov.w     [w14+4], w0
    2dcc:	34 ff 07    	rcall     0x2c36 <_uart_putc>

00002dce <.LSM324>:
    2dce:	2e 00 90    	mov.w     [w14+4], w0
    2dd0:	50 ff 07    	rcall     0x2c72 <_uart_flushTxBuffer>

00002dd2 <.LSM325>:
    2dd2:	3e 02 90    	mov.w     [w14+6], w4
    2dd4:	04 02 e8    	inc.w     w4, w4
    2dd6:	34 07 98    	mov.w     w4, [w14+6]

00002dd8 <.LSM326>:
    2dd8:	1e 0f e9    	dec.w     [w14], [w14]

00002dda <.LSM327>:
    2dda:	90 ff 37    	bra       0x2cfc <.L112>

00002ddc <.L106>:
    2ddc:	8f ff 37    	bra       0x2cfc <.L112>

00002dde <.L113>:
    2dde:	00 00 00    	nop       

00002de0 <.L100>:
}
    2de0:	00 80 fa    	ulnk      
    2de2:	00 00 06    	return    

00002de4 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    2de4:	04 00 fa    	lnk       #0x4

00002de6 <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    2de6:	94 24 a8    	bset.b    0x494, #0x1

00002de8 <.LSM2>:
    U1ADDR = 0;
    2de8:	00 02 eb    	clr.w     w4
    2dea:	b4 24 88    	mov.w     w4, 0x496

00002dec <.LSM3>:
    U1EIR = 0xFF;
    2dec:	f4 0f 20    	mov.w     #0xff, w4
    2dee:	74 24 88    	mov.w     w4, 0x48e

00002df0 <.LSM4>:
    U1CONbits.PPBRST = 0;
    2df0:	94 24 a9    	bclr.b    0x494, #0x1

00002df2 <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    2df2:	a4 4a 20    	mov.w     #0x4aa, w4
    2df4:	14 07 98    	mov.w     w4, [w14+2]

00002df6 <.LSM6>:
    for (n = 0; n<16; n++)
    2df6:	00 42 eb    	clr.b     w4
    2df8:	04 4f 78    	mov.b     w4, [w14]
    2dfa:	08 00 37    	bra       0x2e0c <.L2>

00002dfc <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    2dfc:	9e 42 78    	mov.b     [w14], w5
    2dfe:	05 82 fb    	ze        w5, w4
    2e00:	04 02 42    	add.w     w4, w4, w4
    2e02:	9e 02 90    	mov.w     [w14+2], w5
    2e04:	04 82 42    	add.w     w5, w4, w4
    2e06:	80 02 eb    	clr.w     w5
    2e08:	05 0a 78    	mov.w     w5, [w4]

00002e0a <.LSM8>:
    2e0a:	1e 4f e8    	inc.b     [w14], [w14]

00002e0c <.L2>:
    2e0c:	1e 42 78    	mov.b     [w14], w4
    2e0e:	ef 4f 52    	sub.b     w4, #0xf, [w15]
    2e10:	f5 ff 36    	bra       LEU, 0x2dfc <.L3>

00002e12 <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    2e12:	d4 00 20    	mov.w     #0xd, w4
    2e14:	54 25 88    	mov.w     w4, 0x4aa

00002e16 <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2e16:	04 c4 b3    	mov.b     #0x40, w4
    2e18:	84 42 78    	mov.b     w4, w5
    2e1a:	06 c0 20    	mov.w     #0xc00, w6
    2e1c:	05 4b 78    	mov.b     w5, [w6]

00002e1e <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    2e1e:	84 ad 20    	mov.w     #0xad8, w4
    2e20:	14 60 88    	mov.w     w4, 0xc02

00002e22 <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    2e22:	84 c8 b3    	mov.b     #0x88, w4
    2e24:	84 42 78    	mov.b     w4, w5
    2e26:	16 c0 20    	mov.w     #0xc01, w6
    2e28:	05 4b 78    	mov.b     w5, [w6]

00002e2a <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    2e2a:	84 b1 20    	mov.w     #0xb18, w4
    2e2c:	34 60 88    	mov.w     w4, 0xc06

00002e2e <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    2e2e:	84 c0 b3    	mov.b     #0x8, w4
    2e30:	84 42 78    	mov.b     w4, w5
    2e32:	56 c0 20    	mov.w     #0xc05, w6
    2e34:	05 4b 78    	mov.b     w5, [w6]

00002e36 <.LSM15>:
    U1CNFG1 = 0x00;
    2e36:	00 02 eb    	clr.w     w4
    2e38:	34 25 88    	mov.w     w4, 0x4a6

00002e3a <.LSM16>:
    U1CNFG2 = 0x00;
    2e3a:	00 02 eb    	clr.w     w4
    2e3c:	44 25 88    	mov.w     w4, 0x4a8

00002e3e <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    2e3e:	04 c0 20    	mov.w     #0xc00, w4
    2e40:	48 22 de    	lsr.w     w4, #0x8, w4
    2e42:	c4 24 88    	mov.w     w4, 0x498

00002e44 <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    2e44:	86 44 a8    	bset.b    0x486, #0x2

00002e46 <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    2e46:	86 e4 a8    	bset.b    0x486, #0x7

00002e48 <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    2e48:	88 04 a8    	bset.b    0x488, #0x0

00002e4a <.LSM21>:
    U1CONbits.PKTDIS = 0;
    2e4a:	94 a4 a9    	bclr.b    0x494, #0x5

00002e4c <.LSM22>:
    USB_curr_config = 0x00;
    2e4c:	00 42 eb    	clr.b     w4
    2e4e:	84 42 78    	mov.b     w4, w5
    2e50:	16 b7 20    	mov.w     #0xb71, w6
    2e52:	05 4b 78    	mov.b     w5, [w6]

00002e54 <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    2e54:	00 42 eb    	clr.b     w4
    2e56:	84 42 78    	mov.b     w4, w5
    2e58:	46 b7 20    	mov.w     #0xb74, w6
    2e5a:	05 4b 78    	mov.b     w5, [w6]

00002e5c <.LSM24>:
    USB_device_status = 0x01;
    2e5c:	14 c0 b3    	mov.b     #0x1, w4
    2e5e:	84 42 78    	mov.b     w4, w5
    2e60:	26 b7 20    	mov.w     #0xb72, w6
    2e62:	05 4b 78    	mov.b     w5, [w6]

00002e64 <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    2e64:	00 c2 eb    	setm.b    w4
    2e66:	84 42 78    	mov.b     w4, w5
    2e68:	46 b6 20    	mov.w     #0xb64, w6
    2e6a:	05 4b 78    	mov.b     w5, [w6]

00002e6c <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    2e6c:	00 c2 eb    	setm.b    w4
    2e6e:	84 42 78    	mov.b     w4, w5
    2e70:	56 b6 20    	mov.w     #0xb65, w6
    2e72:	05 4b 78    	mov.b     w5, [w6]

00002e74 <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    2e74:	00 00 00    	nop       

00002e76 <.L4>:
    2e76:	a5 24 80    	mov.w     0x494, w5
    2e78:	04 04 20    	mov.w     #0x40, w4
    2e7a:	04 82 62    	and.w     w5, w4, w4
    2e7c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2e7e:	fb ff 3a    	bra       NZ, 0x2e76 <.L4>

00002e80 <.LSM28>:
}
    2e80:	00 80 fa    	ulnk      
    2e82:	00 00 06    	return    

00002e84 <_ServiceUSB>:

void ServiceUSB(void) {
    2e84:	06 00 fa    	lnk       #0x6

00002e86 <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    2e86:	54 24 80    	mov.w     0x48a, w4
    2e88:	62 02 62    	and.w     w4, #0x2, w4
    2e8a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2e8c:	05 00 32    	bra       Z, 0x2e98 <.L6>

00002e8e <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    2e8e:	f4 0f 20    	mov.w     #0xff, w4
    2e90:	74 24 88    	mov.w     w4, 0x48e

00002e92 <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    2e92:	24 00 20    	mov.w     #0x2, w4
    2e94:	54 24 88    	mov.w     w4, 0x48a
    2e96:	aa 00 37    	bra       0x2fec <.L5>

00002e98 <.L6>:
    } else if (U1IRbits.SOFIF) {
    2e98:	54 24 80    	mov.w     0x48a, w4
    2e9a:	64 02 62    	and.w     w4, #0x4, w4
    2e9c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2e9e:	03 00 32    	bra       Z, 0x2ea6 <.L8>

00002ea0 <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    2ea0:	44 00 20    	mov.w     #0x4, w4
    2ea2:	54 24 88    	mov.w     w4, 0x48a
    2ea4:	a3 00 37    	bra       0x2fec <.L5>

00002ea6 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    2ea6:	54 24 80    	mov.w     0x48a, w4
    2ea8:	70 02 62    	and.w     w4, #0x10, w4
    2eaa:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2eac:	03 00 32    	bra       Z, 0x2eb4 <.L9>

00002eae <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    2eae:	04 01 20    	mov.w     #0x10, w4
    2eb0:	54 24 88    	mov.w     w4, 0x48a
    2eb2:	9c 00 37    	bra       0x2fec <.L5>

00002eb4 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    2eb4:	55 24 80    	mov.w     0x48a, w5
    2eb6:	04 02 20    	mov.w     #0x20, w4
    2eb8:	04 82 62    	and.w     w5, w4, w4
    2eba:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2ebc:	03 00 32    	bra       Z, 0x2ec4 <.L10>

00002ebe <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    2ebe:	04 02 20    	mov.w     #0x20, w4
    2ec0:	54 24 88    	mov.w     w4, 0x48a
    2ec2:	94 00 37    	bra       0x2fec <.L5>

00002ec4 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    2ec4:	55 24 80    	mov.w     0x48a, w5
    2ec6:	04 08 20    	mov.w     #0x80, w4
    2ec8:	04 82 62    	and.w     w5, w4, w4
    2eca:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2ecc:	03 00 32    	bra       Z, 0x2ed4 <.L11>

00002ece <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    2ece:	04 08 20    	mov.w     #0x80, w4
    2ed0:	54 24 88    	mov.w     w4, 0x48a
    2ed2:	8c 00 37    	bra       0x2fec <.L5>

00002ed4 <.L11>:
    } else if (U1IRbits.URSTIF) {
    2ed4:	54 24 80    	mov.w     0x48a, w4
    2ed6:	61 02 62    	and.w     w4, #0x1, w4
    2ed8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2eda:	40 00 32    	bra       Z, 0x2f5c <.L12>

00002edc <.LSM42>:
        USB_curr_config = 0x00;
    2edc:	00 42 eb    	clr.b     w4
    2ede:	04 43 78    	mov.b     w4, w6
    2ee0:	15 b7 20    	mov.w     #0xb71, w5
    2ee2:	86 4a 78    	mov.b     w6, [w5]

00002ee4 <.LSM43>:
        while (U1IRbits.TRNIF) {
    2ee4:	08 00 37    	bra       0x2ef6 <.L13>

00002ee6 <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    2ee6:	84 00 20    	mov.w     #0x8, w4
    2ee8:	54 24 88    	mov.w     w4, 0x48a

00002eea <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    2eea:	00 00 00    	nop       

00002eec <.LSM46>:
            __builtin_nop();
    2eec:	00 00 00    	nop       

00002eee <.LSM47>:
            __builtin_nop();
    2eee:	00 00 00    	nop       

00002ef0 <.LSM48>:
            __builtin_nop();
    2ef0:	00 00 00    	nop       

00002ef2 <.LSM49>:
            __builtin_nop();
    2ef2:	00 00 00    	nop       

00002ef4 <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    2ef4:	00 00 00    	nop       

00002ef6 <.L13>:
    2ef6:	54 24 80    	mov.w     0x48a, w4
    2ef8:	68 02 62    	and.w     w4, #0x8, w4
    2efa:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2efc:	f4 ff 3a    	bra       NZ, 0x2ee6 <.L14>

00002efe <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    2efe:	a4 4a 20    	mov.w     #0x4aa, w4
    2f00:	14 07 98    	mov.w     w4, [w14+2]

00002f02 <.LSM53>:
        for (n = 0; n<16; n++)
    2f02:	00 42 eb    	clr.b     w4
    2f04:	04 4f 78    	mov.b     w4, [w14]
    2f06:	08 00 37    	bra       0x2f18 <.L15>

00002f08 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    2f08:	9e 42 78    	mov.b     [w14], w5
    2f0a:	05 82 fb    	ze        w5, w4
    2f0c:	04 02 42    	add.w     w4, w4, w4
    2f0e:	9e 02 90    	mov.w     [w14+2], w5
    2f10:	04 82 42    	add.w     w5, w4, w4
    2f12:	80 02 eb    	clr.w     w5
    2f14:	05 0a 78    	mov.w     w5, [w4]

00002f16 <.LSM55>:
    2f16:	1e 4f e8    	inc.b     [w14], [w14]

00002f18 <.L15>:
    2f18:	1e 42 78    	mov.b     [w14], w4
    2f1a:	ef 4f 52    	sub.b     w4, #0xf, [w15]
    2f1c:	f5 ff 36    	bra       LEU, 0x2f08 <.L16>

00002f1e <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2f1e:	04 c4 b3    	mov.b     #0x40, w4
    2f20:	84 42 78    	mov.b     w4, w5
    2f22:	06 c0 20    	mov.w     #0xc00, w6
    2f24:	05 4b 78    	mov.b     w5, [w6]

00002f26 <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    2f26:	84 ad 20    	mov.w     #0xad8, w4
    2f28:	14 60 88    	mov.w     w4, 0xc02

00002f2a <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    2f2a:	84 c8 b3    	mov.b     #0x88, w4
    2f2c:	84 42 78    	mov.b     w4, w5
    2f2e:	16 c0 20    	mov.w     #0xc01, w6
    2f30:	05 4b 78    	mov.b     w5, [w6]

00002f32 <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    2f32:	84 b1 20    	mov.w     #0xb18, w4
    2f34:	34 60 88    	mov.w     w4, 0xc06

00002f36 <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    2f36:	84 c0 b3    	mov.b     #0x8, w4
    2f38:	84 42 78    	mov.b     w4, w5
    2f3a:	56 c0 20    	mov.w     #0xc05, w6
    2f3c:	05 4b 78    	mov.b     w5, [w6]

00002f3e <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    2f3e:	00 02 eb    	clr.w     w4
    2f40:	b4 24 88    	mov.w     w4, 0x496

00002f42 <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    2f42:	f4 0f 20    	mov.w     #0xff, w4
    2f44:	54 24 88    	mov.w     w4, 0x48a

00002f46 <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    2f46:	d4 00 20    	mov.w     #0xd, w4
    2f48:	54 25 88    	mov.w     w4, 0x4aa

00002f4a <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    2f4a:	14 c0 b3    	mov.b     #0x1, w4
    2f4c:	84 42 78    	mov.b     w4, w5
    2f4e:	46 b7 20    	mov.w     #0xb74, w6
    2f50:	05 4b 78    	mov.b     w5, [w6]

00002f52 <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    2f52:	14 c0 b3    	mov.b     #0x1, w4
    2f54:	84 42 78    	mov.b     w4, w5
    2f56:	26 b7 20    	mov.w     #0xb72, w6
    2f58:	05 4b 78    	mov.b     w5, [w6]
    2f5a:	48 00 37    	bra       0x2fec <.L5>

00002f5c <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    2f5c:	54 24 80    	mov.w     0x48a, w4
    2f5e:	68 02 62    	and.w     w4, #0x8, w4
    2f60:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f62:	44 00 32    	bra       Z, 0x2fec <.L5>

00002f64 <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    2f64:	94 24 80    	mov.w     0x492, w4
    2f66:	43 22 de    	lsr.w     w4, #0x3, w4
    2f68:	c2 22 dd    	sl.w      w4, #0x2, w5
    2f6a:	04 c0 20    	mov.w     #0xc00, w4
    2f6c:	04 82 42    	add.w     w5, w4, w4
    2f6e:	24 07 98    	mov.w     w4, [w14+4]

00002f70 <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    2f70:	2e 02 90    	mov.w     [w14+4], w4
    2f72:	14 42 90    	mov.b     [w4+1], w4
    2f74:	84 42 78    	mov.b     w4, w5
    2f76:	96 b5 20    	mov.w     #0xb59, w6
    2f78:	05 4b 78    	mov.b     w5, [w6]

00002f7a <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    2f7a:	2e 02 90    	mov.w     [w14+4], w4
    2f7c:	14 42 78    	mov.b     [w4], w4
    2f7e:	84 42 78    	mov.b     w4, w5
    2f80:	86 b5 20    	mov.w     #0xb58, w6
    2f82:	05 4b 78    	mov.b     w5, [w6]

00002f84 <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    2f84:	2e 02 90    	mov.w     [w14+4], w4
    2f86:	14 02 90    	mov.w     [w4+2], w4
    2f88:	d4 5a 88    	mov.w     w4, 0xb5a

00002f8a <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    2f8a:	94 24 80    	mov.w     0x492, w4
    2f8c:	04 42 78    	mov.b     w4, w4
    2f8e:	84 42 78    	mov.b     w4, w5
    2f90:	36 b7 20    	mov.w     #0xb73, w6
    2f92:	05 4b 78    	mov.b     w5, [w6]

00002f94 <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    2f94:	84 00 20    	mov.w     #0x8, w4
    2f96:	54 24 88    	mov.w     w4, 0x48a

00002f98 <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    2f98:	00 42 eb    	clr.b     w4
    2f9a:	84 42 78    	mov.b     w4, w5
    2f9c:	06 b7 20    	mov.w     #0xb70, w6
    2f9e:	05 4b 78    	mov.b     w5, [w6]

00002fa0 <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    2fa0:	94 b5 20    	mov.w     #0xb59, w4
    2fa2:	14 42 78    	mov.b     [w4], w4
    2fa4:	84 82 fb    	ze        w4, w5
    2fa6:	c4 03 20    	mov.w     #0x3c, w4
    2fa8:	04 82 62    	and.w     w5, w4, w4
    2faa:	45 02 20    	mov.w     #0x24, w5
    2fac:	85 0f 52    	sub.w     w4, w5, [w15]
    2fae:	08 00 32    	bra       Z, 0x2fc0 <.L19>
    2fb0:	45 03 20    	mov.w     #0x34, w5
    2fb2:	85 0f 52    	sub.w     w4, w5, [w15]
    2fb4:	03 00 32    	bra       Z, 0x2fbc <.L20>
    2fb6:	e4 0f 52    	sub.w     w4, #0x4, [w15]
    2fb8:	05 00 32    	bra       Z, 0x2fc4 <.L18>
    2fba:	05 00 37    	bra       0x2fc6 <.L17>

00002fbc <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    2fbc:	19 00 07    	rcall     0x2ff0 <_ProcessSetupToken>

00002fbe <.LSM76>:
                break;
    2fbe:	03 00 37    	bra       0x2fc6 <.L17>

00002fc0 <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    2fc0:	5c 03 07    	rcall     0x367a <_ProcessInToken>

00002fc2 <.LSM78>:
                break;
    2fc2:	01 00 37    	bra       0x2fc6 <.L17>

00002fc4 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    2fc4:	93 03 07    	rcall     0x36ec <_ProcessOutToken>

00002fc6 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    2fc6:	04 b7 20    	mov.w     #0xb70, w4
    2fc8:	14 42 78    	mov.b     [w4], w4
    2fca:	04 82 fb    	ze        w4, w4
    2fcc:	61 02 62    	and.w     w4, #0x1, w4
    2fce:	04 42 78    	mov.b     w4, w4
    2fd0:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    2fd2:	0c 00 32    	bra       Z, 0x2fec <.L5>

00002fd4 <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    2fd4:	04 c4 b3    	mov.b     #0x40, w4
    2fd6:	84 42 78    	mov.b     w4, w5
    2fd8:	06 c0 20    	mov.w     #0xc00, w6
    2fda:	05 4b 78    	mov.b     w5, [w6]

00002fdc <.LSM82>:
            BD[EP0IN].status = 0x84;
    2fdc:	44 c8 b3    	mov.b     #0x84, w4
    2fde:	84 42 78    	mov.b     w4, w5
    2fe0:	56 c0 20    	mov.w     #0xc05, w6
    2fe2:	05 4b 78    	mov.b     w5, [w6]

00002fe4 <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    2fe4:	44 c8 b3    	mov.b     #0x84, w4
    2fe6:	84 42 78    	mov.b     w4, w5
    2fe8:	16 c0 20    	mov.w     #0xc01, w6
    2fea:	05 4b 78    	mov.b     w5, [w6]

00002fec <.L5>:
        }
    }
}
    2fec:	00 80 fa    	ulnk      
    2fee:	00 00 06    	return    

00002ff0 <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    2ff0:	02 00 fa    	lnk       #0x2

00002ff2 <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    2ff2:	d4 5a 80    	mov.w     0xb5a, w4
    2ff4:	04 0f 78    	mov.w     w4, [w14]

00002ff6 <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    2ff6:	1e 02 78    	mov.w     [w14], w4
    2ff8:	94 42 78    	mov.b     [w4], w5
    2ffa:	c4 b5 20    	mov.w     #0xb5c, w4
    2ffc:	05 4a 78    	mov.b     w5, [w4]
    2ffe:	1e 0f e8    	inc.w     [w14], [w14]

00003000 <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    3000:	1e 02 78    	mov.w     [w14], w4
    3002:	94 42 78    	mov.b     [w4], w5
    3004:	c4 b5 20    	mov.w     #0xb5c, w4
    3006:	15 42 98    	mov.b     w5, [w4+1]
    3008:	1e 0f e8    	inc.w     [w14], [w14]

0000300a <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    300a:	1e 02 78    	mov.w     [w14], w4
    300c:	94 42 78    	mov.b     [w4], w5
    300e:	c4 b5 20    	mov.w     #0xb5c, w4
    3010:	25 42 98    	mov.b     w5, [w4+2]
    3012:	1e 0f e8    	inc.w     [w14], [w14]

00003014 <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    3014:	1e 02 78    	mov.w     [w14], w4
    3016:	94 42 78    	mov.b     [w4], w5
    3018:	c4 b5 20    	mov.w     #0xb5c, w4
    301a:	35 42 98    	mov.b     w5, [w4+3]
    301c:	1e 0f e8    	inc.w     [w14], [w14]

0000301e <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    301e:	1e 02 78    	mov.w     [w14], w4
    3020:	94 42 78    	mov.b     [w4], w5
    3022:	c4 b5 20    	mov.w     #0xb5c, w4
    3024:	45 42 98    	mov.b     w5, [w4+4]
    3026:	1e 0f e8    	inc.w     [w14], [w14]

00003028 <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    3028:	1e 02 78    	mov.w     [w14], w4
    302a:	94 42 78    	mov.b     [w4], w5
    302c:	c4 b5 20    	mov.w     #0xb5c, w4
    302e:	55 42 98    	mov.b     w5, [w4+5]
    3030:	1e 0f e8    	inc.w     [w14], [w14]

00003032 <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    3032:	1e 02 78    	mov.w     [w14], w4
    3034:	94 42 78    	mov.b     [w4], w5
    3036:	c4 b5 20    	mov.w     #0xb5c, w4
    3038:	65 42 98    	mov.b     w5, [w4+6]
    303a:	1e 0f e8    	inc.w     [w14], [w14]

0000303c <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    303c:	1e 02 78    	mov.w     [w14], w4
    303e:	94 42 78    	mov.b     [w4], w5
    3040:	c4 b5 20    	mov.w     #0xb5c, w4
    3042:	75 42 98    	mov.b     w5, [w4+7]
    3044:	1e 0f e8    	inc.w     [w14], [w14]

00003046 <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    3046:	04 c4 b3    	mov.b     #0x40, w4
    3048:	04 43 78    	mov.b     w4, w6
    304a:	05 c0 20    	mov.w     #0xc00, w5
    304c:	86 4a 78    	mov.b     w6, [w5]

0000304e <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    304e:	84 c0 b3    	mov.b     #0x8, w4
    3050:	04 43 78    	mov.b     w4, w6
    3052:	55 c0 20    	mov.w     #0xc05, w5
    3054:	86 4a 78    	mov.b     w6, [w5]

00003056 <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    3056:	c4 b5 20    	mov.w     #0xb5c, w4
    3058:	14 42 78    	mov.b     [w4], w4
    305a:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    305c:	06 00 35    	bra       LT, 0x306a <.L22>
    305e:	c4 b5 20    	mov.w     #0xb5c, w4
    3060:	34 02 90    	mov.w     [w4+6], w4
    3062:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3064:	02 00 32    	bra       Z, 0x306a <.L22>
    3066:	84 cc b3    	mov.b     #0xc8, w4
    3068:	01 00 37    	bra       0x306c <.L23>

0000306a <.L22>:
    306a:	84 c8 b3    	mov.b     #0x88, w4

0000306c <.L23>:
    306c:	04 43 78    	mov.b     w4, w6
    306e:	15 c0 20    	mov.w     #0xc01, w5
    3070:	86 4a 78    	mov.b     w6, [w5]

00003072 <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    3072:	94 a4 a9    	bclr.b    0x494, #0x5

00003074 <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    3074:	00 c2 eb    	setm.b    w4
    3076:	04 43 78    	mov.b     w4, w6
    3078:	45 b6 20    	mov.w     #0xb64, w5
    307a:	86 4a 78    	mov.b     w6, [w5]

0000307c <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    307c:	00 c2 eb    	setm.b    w4
    307e:	04 43 78    	mov.b     w4, w6
    3080:	55 b6 20    	mov.w     #0xb65, w5
    3082:	86 4a 78    	mov.b     w6, [w5]

00003084 <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    3084:	c4 b5 20    	mov.w     #0xb5c, w4
    3086:	14 42 78    	mov.b     [w4], w4
    3088:	84 82 fb    	ze        w4, w5
    308a:	04 06 20    	mov.w     #0x60, w4
    308c:	04 82 62    	and.w     w5, w4, w4
    308e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3090:	04 00 32    	bra       Z, 0x309a <.L25>
    3092:	05 04 20    	mov.w     #0x40, w5
    3094:	85 0f 52    	sub.w     w4, w5, [w15]
    3096:	03 00 32    	bra       Z, 0x309e <.L26>
    3098:	04 00 37    	bra       0x30a2 <.L28>

0000309a <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    309a:	0b 00 07    	rcall     0x30b2 <_StandardRequests>

0000309c <.LSM103>:
            break;
    309c:	08 00 37    	bra       0x30ae <.L21>

0000309e <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    309e:	f8 06 07    	rcall     0x3e90 <_VendorRequests>

000030a0 <.LSM105>:
            break;
    30a0:	06 00 37    	bra       0x30ae <.L21>

000030a2 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    30a2:	04 b7 20    	mov.w     #0xb70, w4
    30a4:	14 42 78    	mov.b     [w4], w4
    30a6:	04 04 a0    	bset.b    w4, #0x0
    30a8:	04 43 78    	mov.b     w4, w6
    30aa:	05 b7 20    	mov.w     #0xb70, w5
    30ac:	86 4a 78    	mov.b     w6, [w5]

000030ae <.L21>:
    }
}
    30ae:	00 80 fa    	ulnk      
    30b0:	00 00 06    	return    

000030b2 <_StandardRequests>:

void StandardRequests(void) {
    30b2:	06 00 fa    	lnk       #0x6

000030b4 <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    30b4:	c4 b5 20    	mov.w     #0xb5c, w4
    30b6:	14 42 90    	mov.b     [w4+1], w4
    30b8:	04 82 fb    	ze        w4, w4
    30ba:	cf a2 de    	asr.w     w4, #0xf, w5
    30bc:	b6 00 20    	mov.w     #0xb, w6
    30be:	07 00 20    	mov.w     #0x0, w7
    30c0:	86 0f 52    	sub.w     w4, w6, [w15]
    30c2:	87 8f 5a    	subb.w    w5, w7, [w15]
    30c4:	d2 02 3e    	bra       GTU, 0x366a <.L30>
    30c6:	04 60 01    	bra       w4
    30c8:	0b 00 37    	bra       0x30e0 <.L31>
    30ca:	d1 00 37    	bra       0x326e <.L32>
    30cc:	ce 02 37    	bra       0x366a <.L30>
    30ce:	cf 00 37    	bra       0x326e <.L32>
    30d0:	cc 02 37    	bra       0x366a <.L30>
    30d2:	85 01 37    	bra       0x33de <.L33>
    30d4:	ab 01 37    	bra       0x342c <.L34>
    30d6:	c9 02 37    	bra       0x366a <.L30>
    30d8:	33 02 37    	bra       0x3540 <.L35>
    30da:	3f 02 37    	bra       0x355a <.L36>
    30dc:	75 02 37    	bra       0x35c8 <.L37>
    30de:	98 02 37    	bra       0x3610 <.L38>

000030e0 <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    30e0:	c4 b5 20    	mov.w     #0xb5c, w4
    30e2:	14 42 78    	mov.b     [w4], w4
    30e4:	04 82 fb    	ze        w4, w4
    30e6:	7f 02 62    	and.w     w4, #0x1f, w4
    30e8:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    30ea:	15 00 32    	bra       Z, 0x3116 <.L42>
    30ec:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    30ee:	3d 00 32    	bra       Z, 0x316a <.L43>
    30f0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    30f2:	b5 00 3a    	bra       NZ, 0x325e <.L126>

000030f4 <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    30f4:	34 60 80    	mov.w     0xc06, w4
    30f6:	25 b7 20    	mov.w     #0xb72, w5
    30f8:	95 42 78    	mov.b     [w5], w5
    30fa:	05 4a 78    	mov.b     w5, [w4]

000030fc <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    30fc:	34 60 80    	mov.w     0xc06, w4
    30fe:	04 02 e8    	inc.w     w4, w4
    3100:	80 42 eb    	clr.b     w5
    3102:	05 4a 78    	mov.b     w5, [w4]

00003104 <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    3104:	24 c0 b3    	mov.b     #0x2, w4
    3106:	04 43 78    	mov.b     w4, w6
    3108:	45 c0 20    	mov.w     #0xc04, w5
    310a:	86 4a 78    	mov.b     w6, [w5]

0000310c <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    310c:	84 cc b3    	mov.b     #0xc8, w4
    310e:	04 43 78    	mov.b     w4, w6
    3110:	55 c0 20    	mov.w     #0xc05, w5
    3112:	86 4a 78    	mov.b     w6, [w5]

00003114 <.LSM115>:
                    break;
    3114:	ab 00 37    	bra       0x326c <.L44>

00003116 <.L42>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    3116:	44 b7 20    	mov.w     #0xb74, w4
    3118:	14 42 78    	mov.b     [w4], w4
    311a:	04 82 fb    	ze        w4, w4
    311c:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    311e:	03 00 32    	bra       Z, 0x3126 <.L46>
    3120:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    3122:	08 00 32    	bra       Z, 0x3134 <.L47>
    3124:	21 00 37    	bra       0x3168 <.L45>

00003126 <.L46>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3126:	04 b7 20    	mov.w     #0xb70, w4
    3128:	14 42 78    	mov.b     [w4], w4
    312a:	04 04 a0    	bset.b    w4, #0x0
    312c:	04 43 78    	mov.b     w4, w6
    312e:	05 b7 20    	mov.w     #0xb70, w5
    3130:	86 4a 78    	mov.b     w6, [w5]

00003132 <.LSM118>:
                            break;
    3132:	1a 00 37    	bra       0x3168 <.L45>

00003134 <.L47>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3134:	c4 b5 20    	mov.w     #0xb5c, w4
    3136:	44 42 90    	mov.b     [w4+4], w4
    3138:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    313a:	10 00 3a    	bra       NZ, 0x315c <.L48>

0000313c <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    313c:	34 60 80    	mov.w     0xc06, w4
    313e:	80 42 eb    	clr.b     w5
    3140:	05 4a 78    	mov.b     w5, [w4]

00003142 <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    3142:	34 60 80    	mov.w     0xc06, w4
    3144:	04 02 e8    	inc.w     w4, w4
    3146:	80 42 eb    	clr.b     w5
    3148:	05 4a 78    	mov.b     w5, [w4]

0000314a <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    314a:	24 c0 b3    	mov.b     #0x2, w4
    314c:	04 43 78    	mov.b     w4, w6
    314e:	45 c0 20    	mov.w     #0xc04, w5
    3150:	86 4a 78    	mov.b     w6, [w5]

00003152 <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3152:	84 cc b3    	mov.b     #0xc8, w4
    3154:	04 43 78    	mov.b     w4, w6
    3156:	55 c0 20    	mov.w     #0xc05, w5
    3158:	86 4a 78    	mov.b     w6, [w5]
    315a:	06 00 37    	bra       0x3168 <.L45>

0000315c <.L48>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    315c:	04 b7 20    	mov.w     #0xb70, w4
    315e:	14 42 78    	mov.b     [w4], w4
    3160:	04 04 a0    	bset.b    w4, #0x0
    3162:	04 43 78    	mov.b     w4, w6
    3164:	05 b7 20    	mov.w     #0xb70, w5
    3166:	86 4a 78    	mov.b     w6, [w5]

00003168 <.L45>:
                            }
                    }
                    break;
    3168:	81 00 37    	bra       0x326c <.L44>

0000316a <.L43>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    316a:	44 b7 20    	mov.w     #0xb74, w4
    316c:	14 42 78    	mov.b     [w4], w4
    316e:	04 82 fb    	ze        w4, w4
    3170:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    3172:	03 00 32    	bra       Z, 0x317a <.L50>
    3174:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    3176:	2e 00 32    	bra       Z, 0x31d4 <.L51>
    3178:	6b 00 37    	bra       0x3250 <.L127>

0000317a <.L50>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    317a:	c4 b5 20    	mov.w     #0xb5c, w4
    317c:	44 42 90    	mov.b     [w4+4], w4
    317e:	04 82 fb    	ze        w4, w4
    3180:	6f 02 62    	and.w     w4, #0xf, w4
    3182:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3184:	20 00 3a    	bra       NZ, 0x31c6 <.L52>

00003186 <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    3186:	35 60 80    	mov.w     0xc06, w5
    3188:	c4 b5 20    	mov.w     #0xb5c, w4
    318a:	44 42 90    	mov.b     [w4+4], w4
    318c:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    318e:	07 00 3d    	bra       GE, 0x319e <.L53>
    3190:	54 c0 20    	mov.w     #0xc05, w4
    3192:	14 42 78    	mov.b     [w4], w4
    3194:	04 82 fb    	ze        w4, w4
    3196:	64 02 62    	and.w     w4, #0x4, w4
    3198:	42 a2 de    	asr.w     w4, #0x2, w4
    319a:	04 42 78    	mov.b     w4, w4
    319c:	06 00 37    	bra       0x31aa <.L54>

0000319e <.L53>:
    319e:	14 c0 20    	mov.w     #0xc01, w4
    31a0:	14 42 78    	mov.b     [w4], w4
    31a2:	04 82 fb    	ze        w4, w4
    31a4:	64 02 62    	and.w     w4, #0x4, w4
    31a6:	42 a2 de    	asr.w     w4, #0x2, w4
    31a8:	04 42 78    	mov.b     w4, w4

000031aa <.L54>:
    31aa:	84 4a 78    	mov.b     w4, [w5]

000031ac <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    31ac:	34 60 80    	mov.w     0xc06, w4
    31ae:	04 02 e8    	inc.w     w4, w4
    31b0:	80 42 eb    	clr.b     w5
    31b2:	05 4a 78    	mov.b     w5, [w4]

000031b4 <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    31b4:	24 c0 b3    	mov.b     #0x2, w4
    31b6:	04 43 78    	mov.b     w4, w6
    31b8:	45 c0 20    	mov.w     #0xc04, w5
    31ba:	86 4a 78    	mov.b     w6, [w5]

000031bc <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    31bc:	84 cc b3    	mov.b     #0xc8, w4
    31be:	04 43 78    	mov.b     w4, w6
    31c0:	55 c0 20    	mov.w     #0xc05, w5
    31c2:	86 4a 78    	mov.b     w6, [w5]
    31c4:	06 00 37    	bra       0x31d2 <.L55>

000031c6 <.L52>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    31c6:	04 b7 20    	mov.w     #0xb70, w4
    31c8:	14 42 78    	mov.b     [w4], w4
    31ca:	04 04 a0    	bset.b    w4, #0x0
    31cc:	04 43 78    	mov.b     w4, w6
    31ce:	05 b7 20    	mov.w     #0xb70, w5
    31d0:	86 4a 78    	mov.b     w6, [w5]

000031d2 <.L55>:
                            }
                            break;
    31d2:	44 00 37    	bra       0x325c <.L56>

000031d4 <.L51>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    31d4:	a4 4a 20    	mov.w     #0x4aa, w4
    31d6:	14 07 98    	mov.w     w4, [w14+2]

000031d8 <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    31d8:	c4 b5 20    	mov.w     #0xb5c, w4
    31da:	44 42 90    	mov.b     [w4+4], w4
    31dc:	6f 4f 62    	and.b     w4, #0xf, [w14]

000031de <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    31de:	9e 42 78    	mov.b     [w14], w5
    31e0:	05 82 fb    	ze        w5, w4
    31e2:	04 02 42    	add.w     w4, w4, w4
    31e4:	84 02 78    	mov.w     w4, w5
    31e6:	c4 b5 20    	mov.w     #0xb5c, w4
    31e8:	44 42 90    	mov.b     [w4+4], w4
    31ea:	04 02 fb    	se        w4, w4
    31ec:	4f 22 de    	lsr.w     w4, #0xf, w4
    31ee:	05 02 72    	ior.w     w4, w5, w4
    31f0:	c2 22 dd    	sl.w      w4, #0x2, w5
    31f2:	04 c0 20    	mov.w     #0xc00, w4
    31f4:	04 82 42    	add.w     w5, w4, w4
    31f6:	24 07 98    	mov.w     w4, [w14+4]

000031f8 <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    31f8:	1e 43 78    	mov.b     [w14], w6
    31fa:	06 82 fb    	ze        w6, w4
    31fc:	04 02 42    	add.w     w4, w4, w4
    31fe:	9e 02 90    	mov.w     [w14+2], w5
    3200:	04 82 42    	add.w     w5, w4, w4
    3202:	94 02 78    	mov.w     [w4], w5
    3204:	c4 b5 20    	mov.w     #0xb5c, w4
    3206:	44 42 90    	mov.b     [w4+4], w4
    3208:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    320a:	02 00 3d    	bra       GE, 0x3210 <.L57>
    320c:	44 00 20    	mov.w     #0x4, w4
    320e:	01 00 37    	bra       0x3212 <.L58>

00003210 <.L57>:
    3210:	84 00 20    	mov.w     #0x8, w4

00003212 <.L58>:
    3212:	04 82 62    	and.w     w5, w4, w4
    3214:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3216:	15 00 32    	bra       Z, 0x3242 <.L59>

00003218 <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    3218:	34 60 80    	mov.w     0xc06, w4
    321a:	ae 02 90    	mov.w     [w14+4], w5
    321c:	95 42 90    	mov.b     [w5+1], w5
    321e:	85 82 fb    	ze        w5, w5
    3220:	e4 82 62    	and.w     w5, #0x4, w5
    3222:	c2 aa de    	asr.w     w5, #0x2, w5
    3224:	85 42 78    	mov.b     w5, w5
    3226:	05 4a 78    	mov.b     w5, [w4]

00003228 <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    3228:	34 60 80    	mov.w     0xc06, w4
    322a:	04 02 e8    	inc.w     w4, w4
    322c:	80 42 eb    	clr.b     w5
    322e:	05 4a 78    	mov.b     w5, [w4]

00003230 <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    3230:	24 c0 b3    	mov.b     #0x2, w4
    3232:	04 43 78    	mov.b     w4, w6
    3234:	45 c0 20    	mov.w     #0xc04, w5
    3236:	86 4a 78    	mov.b     w6, [w5]

00003238 <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3238:	84 cc b3    	mov.b     #0xc8, w4
    323a:	04 43 78    	mov.b     w4, w6
    323c:	55 c0 20    	mov.w     #0xc05, w5
    323e:	86 4a 78    	mov.b     w6, [w5]
    3240:	06 00 37    	bra       0x324e <.L60>

00003242 <.L59>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3242:	04 b7 20    	mov.w     #0xb70, w4
    3244:	14 42 78    	mov.b     [w4], w4
    3246:	04 04 a0    	bset.b    w4, #0x0
    3248:	04 43 78    	mov.b     w4, w6
    324a:	05 b7 20    	mov.w     #0xb70, w5
    324c:	86 4a 78    	mov.b     w6, [w5]

0000324e <.L60>:
                            }
                            break;
    324e:	06 00 37    	bra       0x325c <.L56>

00003250 <.L127>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3250:	04 b7 20    	mov.w     #0xb70, w4
    3252:	14 42 78    	mov.b     [w4], w4
    3254:	04 04 a0    	bset.b    w4, #0x0
    3256:	04 43 78    	mov.b     w4, w6
    3258:	05 b7 20    	mov.w     #0xb70, w5
    325a:	86 4a 78    	mov.b     w6, [w5]

0000325c <.L56>:
                    }
                    break;
    325c:	07 00 37    	bra       0x326c <.L44>

0000325e <.L126>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    325e:	04 b7 20    	mov.w     #0xb70, w4
    3260:	14 42 78    	mov.b     [w4], w4
    3262:	04 04 a0    	bset.b    w4, #0x0
    3264:	04 43 78    	mov.b     w4, w6
    3266:	05 b7 20    	mov.w     #0xb70, w5
    3268:	86 4a 78    	mov.b     w6, [w5]

0000326a <.LSM147>:
            }
            break;
    326a:	05 02 37    	bra       0x3676 <.L29>

0000326c <.L44>:
    326c:	04 02 37    	bra       0x3676 <.L29>

0000326e <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    326e:	c4 b5 20    	mov.w     #0xb5c, w4
    3270:	14 42 78    	mov.b     [w4], w4
    3272:	04 82 fb    	ze        w4, w4
    3274:	7f 02 62    	and.w     w4, #0x1f, w4
    3276:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3278:	03 00 32    	bra       Z, 0x3280 <.L63>
    327a:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    327c:	28 00 32    	bra       Z, 0x32ce <.L64>
    327e:	a7 00 37    	bra       0x33ce <.L128>

00003280 <.L63>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    3280:	c4 b5 20    	mov.w     #0xb5c, w4
    3282:	24 42 90    	mov.b     [w4+2], w4
    3284:	04 82 fb    	ze        w4, w4
    3286:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    3288:	1b 00 3a    	bra       NZ, 0x32c0 <.L129>

0000328a <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    328a:	c4 b5 20    	mov.w     #0xb5c, w4
    328c:	14 42 90    	mov.b     [w4+1], w4
    328e:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    3290:	08 00 3a    	bra       NZ, 0x32a2 <.L67>

00003292 <.LSM151>:
                                USB_device_status &= 0xFE;
    3292:	25 b7 20    	mov.w     #0xb72, w5
    3294:	95 42 78    	mov.b     [w5], w5
    3296:	e4 cf b3    	mov.b     #0xfe, w4
    3298:	04 c2 62    	and.b     w5, w4, w4
    329a:	04 43 78    	mov.b     w4, w6
    329c:	25 b7 20    	mov.w     #0xb72, w5
    329e:	86 4a 78    	mov.b     w6, [w5]
    32a0:	06 00 37    	bra       0x32ae <.L68>

000032a2 <.L67>:
                            else
                                USB_device_status |= 0x01;
    32a2:	24 b7 20    	mov.w     #0xb72, w4
    32a4:	14 42 78    	mov.b     [w4], w4
    32a6:	04 04 a0    	bset.b    w4, #0x0
    32a8:	04 43 78    	mov.b     w4, w6
    32aa:	25 b7 20    	mov.w     #0xb72, w5
    32ac:	86 4a 78    	mov.b     w6, [w5]

000032ae <.L68>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    32ae:	00 42 eb    	clr.b     w4
    32b0:	04 43 78    	mov.b     w4, w6
    32b2:	45 c0 20    	mov.w     #0xc04, w5
    32b4:	86 4a 78    	mov.b     w6, [w5]

000032b6 <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    32b6:	84 cc b3    	mov.b     #0xc8, w4
    32b8:	04 43 78    	mov.b     w4, w6
    32ba:	55 c0 20    	mov.w     #0xc05, w5
    32bc:	86 4a 78    	mov.b     w6, [w5]

000032be <.LSM155>:
                            break;
    32be:	06 00 37    	bra       0x32cc <.L69>

000032c0 <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    32c0:	04 b7 20    	mov.w     #0xb70, w4
    32c2:	14 42 78    	mov.b     [w4], w4
    32c4:	04 04 a0    	bset.b    w4, #0x0
    32c6:	04 43 78    	mov.b     w4, w6
    32c8:	05 b7 20    	mov.w     #0xb70, w5
    32ca:	86 4a 78    	mov.b     w6, [w5]

000032cc <.L69>:
                    }
                    break;
    32cc:	87 00 37    	bra       0x33dc <.L70>

000032ce <.L64>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    32ce:	44 b7 20    	mov.w     #0xb74, w4
    32d0:	14 42 78    	mov.b     [w4], w4
    32d2:	04 82 fb    	ze        w4, w4
    32d4:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    32d6:	03 00 32    	bra       Z, 0x32de <.L72>
    32d8:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    32da:	17 00 32    	bra       Z, 0x330a <.L73>
    32dc:	71 00 37    	bra       0x33c0 <.L130>

000032de <.L72>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    32de:	c4 b5 20    	mov.w     #0xb5c, w4
    32e0:	44 42 90    	mov.b     [w4+4], w4
    32e2:	04 82 fb    	ze        w4, w4
    32e4:	6f 02 62    	and.w     w4, #0xf, w4
    32e6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    32e8:	09 00 3a    	bra       NZ, 0x32fc <.L74>

000032ea <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    32ea:	00 42 eb    	clr.b     w4
    32ec:	04 43 78    	mov.b     w4, w6
    32ee:	45 c0 20    	mov.w     #0xc04, w5
    32f0:	86 4a 78    	mov.b     w6, [w5]

000032f2 <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    32f2:	84 cc b3    	mov.b     #0xc8, w4
    32f4:	04 43 78    	mov.b     w4, w6
    32f6:	55 c0 20    	mov.w     #0xc05, w5
    32f8:	86 4a 78    	mov.b     w6, [w5]
    32fa:	06 00 37    	bra       0x3308 <.L75>

000032fc <.L74>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    32fc:	04 b7 20    	mov.w     #0xb70, w4
    32fe:	14 42 78    	mov.b     [w4], w4
    3300:	04 04 a0    	bset.b    w4, #0x0
    3302:	04 43 78    	mov.b     w4, w6
    3304:	05 b7 20    	mov.w     #0xb70, w5
    3306:	86 4a 78    	mov.b     w6, [w5]

00003308 <.L75>:
                            }
                            break;
    3308:	61 00 37    	bra       0x33cc <.L76>

0000330a <.L73>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    330a:	a4 4a 20    	mov.w     #0x4aa, w4
    330c:	14 07 98    	mov.w     w4, [w14+2]

0000330e <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    330e:	c4 b5 20    	mov.w     #0xb5c, w4
    3310:	44 42 90    	mov.b     [w4+4], w4
    3312:	6f 4f 62    	and.b     w4, #0xf, [w14]
    3314:	1e 42 78    	mov.b     [w14], w4
    3316:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    3318:	44 00 32    	bra       Z, 0x33a2 <.L77>

0000331a <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    331a:	9e 42 78    	mov.b     [w14], w5
    331c:	05 82 fb    	ze        w5, w4
    331e:	04 02 42    	add.w     w4, w4, w4
    3320:	84 02 78    	mov.w     w4, w5
    3322:	c4 b5 20    	mov.w     #0xb5c, w4
    3324:	44 42 90    	mov.b     [w4+4], w4
    3326:	04 02 fb    	se        w4, w4
    3328:	4f 22 de    	lsr.w     w4, #0xf, w4
    332a:	05 02 72    	ior.w     w4, w5, w4
    332c:	c2 22 dd    	sl.w      w4, #0x2, w5
    332e:	04 c0 20    	mov.w     #0xc00, w4
    3330:	04 82 42    	add.w     w5, w4, w4
    3332:	24 07 98    	mov.w     w4, [w14+4]

00003334 <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    3334:	c4 b5 20    	mov.w     #0xb5c, w4
    3336:	44 42 90    	mov.b     [w4+4], w4
    3338:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    333a:	1a 00 3d    	bra       GE, 0x3370 <.L78>

0000333c <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    333c:	1e 43 78    	mov.b     [w14], w6
    333e:	06 82 fb    	ze        w6, w4
    3340:	04 02 42    	add.w     w4, w4, w4
    3342:	9e 02 90    	mov.w     [w14+2], w5
    3344:	04 82 42    	add.w     w5, w4, w4
    3346:	14 02 78    	mov.w     [w4], w4
    3348:	64 02 62    	and.w     w4, #0x4, w4
    334a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    334c:	0a 00 32    	bra       Z, 0x3362 <.L79>

0000334e <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    334e:	c4 b5 20    	mov.w     #0xb5c, w4
    3350:	14 42 90    	mov.b     [w4+1], w4
    3352:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    3354:	02 00 3a    	bra       NZ, 0x335a <.L80>
    3356:	00 42 eb    	clr.b     w4
    3358:	01 00 37    	bra       0x335c <.L81>

0000335a <.L80>:
    335a:	44 c8 b3    	mov.b     #0x84, w4

0000335c <.L81>:
    335c:	ae 02 90    	mov.w     [w14+4], w5
    335e:	94 42 98    	mov.b     w4, [w5+1]
    3360:	20 00 37    	bra       0x33a2 <.L77>

00003362 <.L79>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3362:	04 b7 20    	mov.w     #0xb70, w4
    3364:	14 42 78    	mov.b     [w4], w4
    3366:	04 04 a0    	bset.b    w4, #0x0
    3368:	04 43 78    	mov.b     w4, w6
    336a:	05 b7 20    	mov.w     #0xb70, w5
    336c:	86 4a 78    	mov.b     w6, [w5]
    336e:	19 00 37    	bra       0x33a2 <.L77>

00003370 <.L78>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    3370:	9e 42 78    	mov.b     [w14], w5
    3372:	05 82 fb    	ze        w5, w4
    3374:	04 02 42    	add.w     w4, w4, w4
    3376:	9e 02 90    	mov.w     [w14+2], w5
    3378:	04 82 42    	add.w     w5, w4, w4
    337a:	14 02 78    	mov.w     [w4], w4
    337c:	68 02 62    	and.w     w4, #0x8, w4
    337e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3380:	0a 00 32    	bra       Z, 0x3396 <.L82>

00003382 <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    3382:	c4 b5 20    	mov.w     #0xb5c, w4
    3384:	14 42 90    	mov.b     [w4+1], w4
    3386:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    3388:	02 00 3a    	bra       NZ, 0x338e <.L83>
    338a:	84 c8 b3    	mov.b     #0x88, w4
    338c:	01 00 37    	bra       0x3390 <.L84>

0000338e <.L83>:
    338e:	44 c8 b3    	mov.b     #0x84, w4

00003390 <.L84>:
    3390:	ae 02 90    	mov.w     [w14+4], w5
    3392:	94 42 98    	mov.b     w4, [w5+1]
    3394:	06 00 37    	bra       0x33a2 <.L77>

00003396 <.L82>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3396:	04 b7 20    	mov.w     #0xb70, w4
    3398:	14 42 78    	mov.b     [w4], w4
    339a:	04 04 a0    	bset.b    w4, #0x0
    339c:	84 42 78    	mov.b     w4, w5
    339e:	06 b7 20    	mov.w     #0xb70, w6
    33a0:	05 4b 78    	mov.b     w5, [w6]

000033a2 <.L77>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    33a2:	04 b7 20    	mov.w     #0xb70, w4
    33a4:	14 42 78    	mov.b     [w4], w4
    33a6:	04 82 fb    	ze        w4, w4
    33a8:	61 02 62    	and.w     w4, #0x1, w4
    33aa:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    33ac:	08 00 3a    	bra       NZ, 0x33be <.L85>

000033ae <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    33ae:	00 42 eb    	clr.b     w4
    33b0:	84 42 78    	mov.b     w4, w5
    33b2:	46 c0 20    	mov.w     #0xc04, w6
    33b4:	05 4b 78    	mov.b     w5, [w6]

000033b6 <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    33b6:	84 cc b3    	mov.b     #0xc8, w4
    33b8:	84 42 78    	mov.b     w4, w5
    33ba:	56 c0 20    	mov.w     #0xc05, w6
    33bc:	05 4b 78    	mov.b     w5, [w6]

000033be <.L85>:
                            }
                            break;
    33be:	06 00 37    	bra       0x33cc <.L76>

000033c0 <.L130>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    33c0:	04 b7 20    	mov.w     #0xb70, w4
    33c2:	14 42 78    	mov.b     [w4], w4
    33c4:	04 04 a0    	bset.b    w4, #0x0
    33c6:	84 42 78    	mov.b     w4, w5
    33c8:	06 b7 20    	mov.w     #0xb70, w6
    33ca:	05 4b 78    	mov.b     w5, [w6]

000033cc <.L76>:
                    }
                    break;
    33cc:	07 00 37    	bra       0x33dc <.L70>

000033ce <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    33ce:	04 b7 20    	mov.w     #0xb70, w4
    33d0:	14 42 78    	mov.b     [w4], w4
    33d2:	04 04 a0    	bset.b    w4, #0x0
    33d4:	84 42 78    	mov.b     w4, w5
    33d6:	06 b7 20    	mov.w     #0xb70, w6
    33d8:	05 4b 78    	mov.b     w5, [w6]

000033da <.LSM181>:
            }
            break;
    33da:	4d 01 37    	bra       0x3676 <.L29>

000033dc <.L70>:
    33dc:	4c 01 37    	bra       0x3676 <.L29>

000033de <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    33de:	c4 b5 20    	mov.w     #0xb5c, w4
    33e0:	24 42 90    	mov.b     [w4+2], w4
    33e2:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    33e4:	07 00 3d    	bra       GE, 0x33f4 <.L86>

000033e6 <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    33e6:	04 b7 20    	mov.w     #0xb70, w4
    33e8:	14 42 78    	mov.b     [w4], w4
    33ea:	04 04 a0    	bset.b    w4, #0x0
    33ec:	84 42 78    	mov.b     w4, w5
    33ee:	06 b7 20    	mov.w     #0xb70, w6
    33f0:	05 4b 78    	mov.b     w5, [w6]

000033f2 <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    33f2:	41 01 37    	bra       0x3676 <.L29>

000033f4 <.L86>:
    33f4:	c4 b5 20    	mov.w     #0xb5c, w4
    33f6:	14 42 78    	mov.b     [w4], w4
    33f8:	84 42 78    	mov.b     w4, w5
    33fa:	46 b6 20    	mov.w     #0xb64, w6
    33fc:	05 4b 78    	mov.b     w5, [w6]

000033fe <.LSM186>:
    33fe:	c4 b5 20    	mov.w     #0xb5c, w4
    3400:	14 42 90    	mov.b     [w4+1], w4
    3402:	84 42 78    	mov.b     w4, w5
    3404:	56 b6 20    	mov.w     #0xb65, w6
    3406:	05 4b 78    	mov.b     w5, [w6]

00003408 <.LSM187>:
    3408:	c4 b5 20    	mov.w     #0xb5c, w4
    340a:	14 02 90    	mov.w     [w4+2], w4
    340c:	34 5b 88    	mov.w     w4, 0xb66

0000340e <.LSM188>:
    340e:	c4 b5 20    	mov.w     #0xb5c, w4
    3410:	24 02 90    	mov.w     [w4+4], w4
    3412:	44 5b 88    	mov.w     w4, 0xb68

00003414 <.LSM189>:
    3414:	c4 b5 20    	mov.w     #0xb5c, w4
    3416:	34 02 90    	mov.w     [w4+6], w4
    3418:	54 5b 88    	mov.w     w4, 0xb6a

0000341a <.LSM190>:
    341a:	00 42 eb    	clr.b     w4
    341c:	84 42 78    	mov.b     w4, w5
    341e:	46 c0 20    	mov.w     #0xc04, w6
    3420:	05 4b 78    	mov.b     w5, [w6]

00003422 <.LSM191>:
    3422:	84 cc b3    	mov.b     #0xc8, w4
    3424:	84 42 78    	mov.b     w4, w5
    3426:	56 c0 20    	mov.w     #0xc05, w6
    3428:	05 4b 78    	mov.b     w5, [w6]

0000342a <.LSM192>:
    342a:	25 01 37    	bra       0x3676 <.L29>

0000342c <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    342c:	c4 b5 20    	mov.w     #0xb5c, w4
    342e:	14 42 78    	mov.b     [w4], w4
    3430:	84 42 78    	mov.b     w4, w5
    3432:	46 b6 20    	mov.w     #0xb64, w6
    3434:	05 4b 78    	mov.b     w5, [w6]

00003436 <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    3436:	c4 b5 20    	mov.w     #0xb5c, w4
    3438:	14 42 90    	mov.b     [w4+1], w4
    343a:	84 42 78    	mov.b     w4, w5
    343c:	56 b6 20    	mov.w     #0xb65, w6
    343e:	05 4b 78    	mov.b     w5, [w6]

00003440 <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    3440:	c4 b5 20    	mov.w     #0xb5c, w4
    3442:	14 02 90    	mov.w     [w4+2], w4
    3444:	34 5b 88    	mov.w     w4, 0xb66

00003446 <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    3446:	c4 b5 20    	mov.w     #0xb5c, w4
    3448:	24 02 90    	mov.w     [w4+4], w4
    344a:	44 5b 88    	mov.w     w4, 0xb68

0000344c <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    344c:	c4 b5 20    	mov.w     #0xb5c, w4
    344e:	34 02 90    	mov.w     [w4+6], w4
    3450:	54 5b 88    	mov.w     w4, 0xb6a

00003452 <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    3452:	c4 b5 20    	mov.w     #0xb5c, w4
    3454:	34 42 90    	mov.b     [w4+3], w4
    3456:	04 82 fb    	ze        w4, w4
    3458:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    345a:	14 00 32    	bra       Z, 0x3484 <.L90>
    345c:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    345e:	3c 00 32    	bra       Z, 0x34d8 <.L91>
    3460:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    3462:	66 00 3a    	bra       NZ, 0x3530 <.L131>

00003464 <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    3464:	44 f8 29    	mov.w     #0x9f84, w4
    3466:	64 5b 88    	mov.w     w4, 0xb6c

00003468 <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3468:	64 5b 80    	mov.w     0xb6c, w4
    346a:	14 42 78    	mov.b     [w4], w4
    346c:	04 82 fb    	ze        w4, w4
    346e:	74 5b 88    	mov.w     w4, 0xb6e

00003470 <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3470:	c4 b5 20    	mov.w     #0xb5c, w4
    3472:	b4 02 90    	mov.w     [w4+6], w5
    3474:	74 5b 80    	mov.w     0xb6e, w4
    3476:	84 8f 52    	sub.w     w5, w4, [w15]
    3478:	03 00 31    	bra       C, 0x3480 <.L92>

0000347a <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    347a:	c4 b5 20    	mov.w     #0xb5c, w4
    347c:	34 02 90    	mov.w     [w4+6], w4
    347e:	74 5b 88    	mov.w     w4, 0xb6e

00003480 <.L92>:
                    }
                    SendDataPacket();
    3480:	60 01 07    	rcall     0x3742 <_SendDataPacket>

00003482 <.LSM204>:
                    break;
    3482:	5d 00 37    	bra       0x353e <.L93>

00003484 <.L90>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    3484:	c4 b5 20    	mov.w     #0xb5c, w4
    3486:	24 42 90    	mov.b     [w4+2], w4
    3488:	04 82 fb    	ze        w4, w4
    348a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    348c:	03 00 3a    	bra       NZ, 0x3494 <.L132>

0000348e <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    348e:	64 f9 29    	mov.w     #0x9f96, w4
    3490:	64 5b 88    	mov.w     w4, 0xb6c

00003492 <.LSM207>:
                            break;
    3492:	06 00 37    	bra       0x34a0 <.L96>

00003494 <.L132>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    3494:	04 b7 20    	mov.w     #0xb70, w4
    3496:	14 42 78    	mov.b     [w4], w4
    3498:	04 04 a0    	bset.b    w4, #0x0
    349a:	84 42 78    	mov.b     w4, w5
    349c:	06 b7 20    	mov.w     #0xb70, w6
    349e:	05 4b 78    	mov.b     w5, [w6]

000034a0 <.L96>:
                    }
                    if (!(USB_error_flags&0x01)) {
    34a0:	04 b7 20    	mov.w     #0xb70, w4
    34a2:	14 42 78    	mov.b     [w4], w4
    34a4:	04 82 fb    	ze        w4, w4
    34a6:	61 02 62    	and.w     w4, #0x1, w4
    34a8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    34aa:	15 00 3a    	bra       NZ, 0x34d6 <.L97>

000034ac <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    34ac:	64 5b 80    	mov.w     0xb6c, w4
    34ae:	04 82 e8    	inc2.w    w4, w4
    34b0:	14 42 78    	mov.b     [w4], w4
    34b2:	84 42 78    	mov.b     w4, w5
    34b4:	e6 b6 20    	mov.w     #0xb6e, w6
    34b6:	05 4b 78    	mov.b     w5, [w6]

000034b8 <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    34b8:	64 5b 80    	mov.w     0xb6c, w4
    34ba:	63 02 42    	add.w     w4, #0x3, w4
    34bc:	14 42 78    	mov.b     [w4], w4
    34be:	84 42 78    	mov.b     w4, w5
    34c0:	f6 b6 20    	mov.w     #0xb6f, w6
    34c2:	05 4b 78    	mov.b     w5, [w6]

000034c4 <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    34c4:	c4 b5 20    	mov.w     #0xb5c, w4
    34c6:	b4 02 90    	mov.w     [w4+6], w5
    34c8:	74 5b 80    	mov.w     0xb6e, w4
    34ca:	84 8f 52    	sub.w     w5, w4, [w15]
    34cc:	03 00 31    	bra       C, 0x34d4 <.L98>

000034ce <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    34ce:	c4 b5 20    	mov.w     #0xb5c, w4
    34d0:	34 02 90    	mov.w     [w4+6], w4
    34d2:	74 5b 88    	mov.w     w4, 0xb6e

000034d4 <.L98>:
                        }
                        SendDataPacket();
    34d4:	36 01 07    	rcall     0x3742 <_SendDataPacket>

000034d6 <.L97>:
                    }
                    break;
    34d6:	33 00 37    	bra       0x353e <.L93>

000034d8 <.L91>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    34d8:	c4 b5 20    	mov.w     #0xb5c, w4
    34da:	24 42 90    	mov.b     [w4+2], w4
    34dc:	04 82 fb    	ze        w4, w4
    34de:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    34e0:	07 00 32    	bra       Z, 0x34f0 <.L101>
    34e2:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    34e4:	08 00 32    	bra       Z, 0x34f6 <.L102>
    34e6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    34e8:	09 00 3a    	bra       NZ, 0x34fc <.L133>

000034ea <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    34ea:	84 fa 29    	mov.w     #0x9fa8, w4
    34ec:	64 5b 88    	mov.w     w4, 0xb6c

000034ee <.LSM218>:
                            break;
    34ee:	0c 00 37    	bra       0x3508 <.L103>

000034f0 <.L101>:
                        case 1:
                            USB_request.data_ptr = String1;
    34f0:	c4 fa 29    	mov.w     #0x9fac, w4
    34f2:	64 5b 88    	mov.w     w4, 0xb6c

000034f4 <.LSM220>:
                            break;
    34f4:	09 00 37    	bra       0x3508 <.L103>

000034f6 <.L102>:
                        case 2:
                            USB_request.data_ptr = String2;
    34f6:	64 fc 29    	mov.w     #0x9fc6, w4
    34f8:	64 5b 88    	mov.w     w4, 0xb6c

000034fa <.LSM222>:
                            break;
    34fa:	06 00 37    	bra       0x3508 <.L103>

000034fc <.L133>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    34fc:	04 b7 20    	mov.w     #0xb70, w4
    34fe:	14 42 78    	mov.b     [w4], w4
    3500:	04 04 a0    	bset.b    w4, #0x0
    3502:	84 42 78    	mov.b     w4, w5
    3504:	06 b7 20    	mov.w     #0xb70, w6
    3506:	05 4b 78    	mov.b     w5, [w6]

00003508 <.L103>:
                    }
                    if (!(USB_error_flags&0x01)) {
    3508:	04 b7 20    	mov.w     #0xb70, w4
    350a:	14 42 78    	mov.b     [w4], w4
    350c:	04 82 fb    	ze        w4, w4
    350e:	61 02 62    	and.w     w4, #0x1, w4
    3510:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3512:	0d 00 3a    	bra       NZ, 0x352e <.L104>

00003514 <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3514:	64 5b 80    	mov.w     0xb6c, w4
    3516:	14 42 78    	mov.b     [w4], w4
    3518:	04 82 fb    	ze        w4, w4
    351a:	74 5b 88    	mov.w     w4, 0xb6e

0000351c <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    351c:	c4 b5 20    	mov.w     #0xb5c, w4
    351e:	b4 02 90    	mov.w     [w4+6], w5
    3520:	74 5b 80    	mov.w     0xb6e, w4
    3522:	84 8f 52    	sub.w     w5, w4, [w15]
    3524:	03 00 31    	bra       C, 0x352c <.L105>

00003526 <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    3526:	c4 b5 20    	mov.w     #0xb5c, w4
    3528:	34 02 90    	mov.w     [w4+6], w4
    352a:	74 5b 88    	mov.w     w4, 0xb6e

0000352c <.L105>:
                        }
                        SendDataPacket();
    352c:	0a 01 07    	rcall     0x3742 <_SendDataPacket>

0000352e <.L104>:
                    }
                    break;
    352e:	07 00 37    	bra       0x353e <.L93>

00003530 <.L131>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    3530:	04 b7 20    	mov.w     #0xb70, w4
    3532:	14 42 78    	mov.b     [w4], w4
    3534:	04 04 a0    	bset.b    w4, #0x0
    3536:	84 42 78    	mov.b     w4, w5
    3538:	06 b7 20    	mov.w     #0xb70, w6
    353a:	05 4b 78    	mov.b     w5, [w6]

0000353c <.LSM231>:
            }
            break;
    353c:	9c 00 37    	bra       0x3676 <.L29>

0000353e <.L93>:
    353e:	9b 00 37    	bra       0x3676 <.L29>

00003540 <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    3540:	34 60 80    	mov.w     0xc06, w4
    3542:	15 b7 20    	mov.w     #0xb71, w5
    3544:	95 42 78    	mov.b     [w5], w5
    3546:	05 4a 78    	mov.b     w5, [w4]

00003548 <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    3548:	14 c0 b3    	mov.b     #0x1, w4
    354a:	84 42 78    	mov.b     w4, w5
    354c:	46 c0 20    	mov.w     #0xc04, w6
    354e:	05 4b 78    	mov.b     w5, [w6]

00003550 <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    3550:	84 cc b3    	mov.b     #0xc8, w4
    3552:	84 42 78    	mov.b     w4, w5
    3554:	56 c0 20    	mov.w     #0xc05, w6
    3556:	05 4b 78    	mov.b     w5, [w6]

00003558 <.LSM235>:
            break;
    3558:	8e 00 37    	bra       0x3676 <.L29>

0000355a <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    355a:	c4 b5 20    	mov.w     #0xb5c, w4
    355c:	24 42 90    	mov.b     [w4+2], w4
    355e:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    3560:	2c 00 3e    	bra       GTU, 0x35ba <.L106>

00003562 <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    3562:	a4 4a 20    	mov.w     #0x4aa, w4
    3564:	14 07 98    	mov.w     w4, [w14+2]

00003566 <.LSM238>:
                for (n = 1; n<16; n++)
    3566:	14 c0 b3    	mov.b     #0x1, w4
    3568:	04 4f 78    	mov.b     w4, [w14]
    356a:	08 00 37    	bra       0x357c <.L107>

0000356c <.L108>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    356c:	1e 43 78    	mov.b     [w14], w6
    356e:	06 82 fb    	ze        w6, w4
    3570:	04 02 42    	add.w     w4, w4, w4
    3572:	9e 02 90    	mov.w     [w14+2], w5
    3574:	04 82 42    	add.w     w5, w4, w4
    3576:	80 02 eb    	clr.w     w5
    3578:	05 0a 78    	mov.w     w5, [w4]

0000357a <.LSM240>:
    357a:	1e 4f e8    	inc.b     [w14], [w14]

0000357c <.L107>:
    357c:	1e 42 78    	mov.b     [w14], w4
    357e:	ef 4f 52    	sub.b     w4, #0xf, [w15]
    3580:	f5 ff 36    	bra       LEU, 0x356c <.L108>

00003582 <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    3582:	c4 b5 20    	mov.w     #0xb5c, w4
    3584:	24 42 90    	mov.b     [w4+2], w4
    3586:	04 43 78    	mov.b     w4, w6
    3588:	15 b7 20    	mov.w     #0xb71, w5
    358a:	86 4a 78    	mov.b     w6, [w5]
    358c:	14 b7 20    	mov.w     #0xb71, w4
    358e:	14 42 78    	mov.b     [w4], w4
    3590:	04 82 fb    	ze        w4, w4
    3592:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3594:	05 00 3a    	bra       NZ, 0x35a0 <.L134>

00003596 <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    3596:	24 c0 b3    	mov.b     #0x2, w4
    3598:	04 43 78    	mov.b     w4, w6
    359a:	45 b7 20    	mov.w     #0xb74, w5
    359c:	86 4a 78    	mov.b     w6, [w5]

0000359e <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    359e:	04 00 37    	bra       0x35a8 <.L111>

000035a0 <.L134>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    35a0:	34 c0 b3    	mov.b     #0x3, w4
    35a2:	04 43 78    	mov.b     w4, w6
    35a4:	45 b7 20    	mov.w     #0xb74, w5
    35a6:	86 4a 78    	mov.b     w6, [w5]

000035a8 <.L111>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    35a8:	00 42 eb    	clr.b     w4
    35aa:	04 43 78    	mov.b     w4, w6
    35ac:	45 c0 20    	mov.w     #0xc04, w5
    35ae:	86 4a 78    	mov.b     w6, [w5]

000035b0 <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    35b0:	84 cc b3    	mov.b     #0xc8, w4
    35b2:	04 43 78    	mov.b     w4, w6
    35b4:	55 c0 20    	mov.w     #0xc05, w5
    35b6:	86 4a 78    	mov.b     w6, [w5]

000035b8 <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    35b8:	5e 00 37    	bra       0x3676 <.L29>

000035ba <.L106>:
    35ba:	04 b7 20    	mov.w     #0xb70, w4
    35bc:	14 42 78    	mov.b     [w4], w4
    35be:	04 04 a0    	bset.b    w4, #0x0
    35c0:	04 43 78    	mov.b     w4, w6
    35c2:	05 b7 20    	mov.w     #0xb70, w5
    35c4:	86 4a 78    	mov.b     w6, [w5]

000035c6 <.LSM249>:
    35c6:	57 00 37    	bra       0x3676 <.L29>

000035c8 <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    35c8:	44 b7 20    	mov.w     #0xb74, w4
    35ca:	14 42 78    	mov.b     [w4], w4
    35cc:	04 82 fb    	ze        w4, w4
    35ce:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    35d0:	18 00 3a    	bra       NZ, 0x3602 <.L135>

000035d2 <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    35d2:	c4 b5 20    	mov.w     #0xb5c, w4
    35d4:	44 42 90    	mov.b     [w4+4], w4
    35d6:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    35d8:	0c 00 3a    	bra       NZ, 0x35f2 <.L115>

000035da <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    35da:	34 60 80    	mov.w     0xc06, w4
    35dc:	80 42 eb    	clr.b     w5
    35de:	05 4a 78    	mov.b     w5, [w4]

000035e0 <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    35e0:	14 c0 b3    	mov.b     #0x1, w4
    35e2:	04 43 78    	mov.b     w4, w6
    35e4:	45 c0 20    	mov.w     #0xc04, w5
    35e6:	86 4a 78    	mov.b     w6, [w5]

000035e8 <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    35e8:	84 cc b3    	mov.b     #0xc8, w4
    35ea:	04 43 78    	mov.b     w4, w6
    35ec:	55 c0 20    	mov.w     #0xc05, w5
    35ee:	86 4a 78    	mov.b     w6, [w5]
    35f0:	06 00 37    	bra       0x35fe <.L116>

000035f2 <.L115>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    35f2:	04 b7 20    	mov.w     #0xb70, w4
    35f4:	14 42 78    	mov.b     [w4], w4
    35f6:	04 04 a0    	bset.b    w4, #0x0
    35f8:	04 43 78    	mov.b     w4, w6
    35fa:	05 b7 20    	mov.w     #0xb70, w5
    35fc:	86 4a 78    	mov.b     w6, [w5]

000035fe <.L116>:
                    }
                    break;
    35fe:	00 00 00    	nop       

00003600 <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    3600:	3a 00 37    	bra       0x3676 <.L29>

00003602 <.L135>:
    3602:	04 b7 20    	mov.w     #0xb70, w4
    3604:	14 42 78    	mov.b     [w4], w4
    3606:	04 04 a0    	bset.b    w4, #0x0
    3608:	04 43 78    	mov.b     w4, w6
    360a:	05 b7 20    	mov.w     #0xb70, w5
    360c:	86 4a 78    	mov.b     w6, [w5]

0000360e <.LSM259>:
    360e:	33 00 37    	bra       0x3676 <.L29>

00003610 <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    3610:	44 b7 20    	mov.w     #0xb74, w4
    3612:	14 42 78    	mov.b     [w4], w4
    3614:	04 82 fb    	ze        w4, w4
    3616:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    3618:	21 00 3a    	bra       NZ, 0x365c <.L136>

0000361a <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    361a:	c4 b5 20    	mov.w     #0xb5c, w4
    361c:	44 42 90    	mov.b     [w4+4], w4
    361e:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    3620:	15 00 3a    	bra       NZ, 0x364c <.L120>

00003622 <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    3622:	c4 b5 20    	mov.w     #0xb5c, w4
    3624:	24 42 90    	mov.b     [w4+2], w4
    3626:	04 82 fb    	ze        w4, w4
    3628:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    362a:	09 00 3a    	bra       NZ, 0x363e <.L137>

0000362c <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    362c:	00 42 eb    	clr.b     w4
    362e:	04 43 78    	mov.b     w4, w6
    3630:	45 c0 20    	mov.w     #0xc04, w5
    3632:	86 4a 78    	mov.b     w6, [w5]

00003634 <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    3634:	84 cc b3    	mov.b     #0xc8, w4
    3636:	04 43 78    	mov.b     w4, w6
    3638:	55 c0 20    	mov.w     #0xc05, w5
    363a:	86 4a 78    	mov.b     w6, [w5]

0000363c <.LSM265>:
                                break;
    363c:	0d 00 37    	bra       0x3658 <.L124>

0000363e <.L137>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    363e:	04 b7 20    	mov.w     #0xb70, w4
    3640:	14 42 78    	mov.b     [w4], w4
    3642:	04 04 a0    	bset.b    w4, #0x0
    3644:	04 43 78    	mov.b     w4, w6
    3646:	05 b7 20    	mov.w     #0xb70, w5
    3648:	86 4a 78    	mov.b     w6, [w5]
    364a:	06 00 37    	bra       0x3658 <.L124>

0000364c <.L120>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    364c:	04 b7 20    	mov.w     #0xb70, w4
    364e:	14 42 78    	mov.b     [w4], w4
    3650:	04 04 a0    	bset.b    w4, #0x0
    3652:	04 43 78    	mov.b     w4, w6
    3654:	05 b7 20    	mov.w     #0xb70, w5
    3656:	86 4a 78    	mov.b     w6, [w5]

00003658 <.L124>:
                    }
                    break;
    3658:	00 00 00    	nop       

0000365a <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    365a:	0d 00 37    	bra       0x3676 <.L29>

0000365c <.L136>:
    365c:	04 b7 20    	mov.w     #0xb70, w4
    365e:	14 42 78    	mov.b     [w4], w4
    3660:	04 04 a0    	bset.b    w4, #0x0
    3662:	04 43 78    	mov.b     w4, w6
    3664:	05 b7 20    	mov.w     #0xb70, w5
    3666:	86 4a 78    	mov.b     w6, [w5]

00003668 <.LSM271>:
    3668:	06 00 37    	bra       0x3676 <.L29>

0000366a <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    366a:	04 b7 20    	mov.w     #0xb70, w4
    366c:	14 42 78    	mov.b     [w4], w4
    366e:	04 04 a0    	bset.b    w4, #0x0
    3670:	04 43 78    	mov.b     w4, w6
    3672:	05 b7 20    	mov.w     #0xb70, w5
    3674:	86 4a 78    	mov.b     w6, [w5]

00003676 <.L29>:
    }
}
    3676:	00 80 fa    	ulnk      
    3678:	00 00 06    	return    

0000367a <_ProcessInToken>:

void ProcessInToken(void) {
    367a:	00 00 fa    	lnk       #0x0

0000367c <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    367c:	34 b7 20    	mov.w     #0xb73, w4
    367e:	14 42 78    	mov.b     [w4], w4
    3680:	84 82 fb    	ze        w4, w5
    3682:	04 0f 20    	mov.w     #0xf0, w4
    3684:	04 82 62    	and.w     w5, w4, w4
    3686:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3688:	2f 00 3a    	bra       NZ, 0x36e8 <.L138>

0000368a <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    368a:	44 b6 20    	mov.w     #0xb64, w4
    368c:	14 42 78    	mov.b     [w4], w4
    368e:	84 82 fb    	ze        w4, w5
    3690:	04 06 20    	mov.w     #0x60, w4
    3692:	04 82 62    	and.w     w5, w4, w4
    3694:	05 02 20    	mov.w     #0x20, w5
    3696:	85 0f 52    	sub.w     w4, w5, [w15]
    3698:	23 00 32    	bra       Z, 0x36e0 <.L152>
    369a:	05 04 20    	mov.w     #0x40, w5
    369c:	85 0f 52    	sub.w     w4, w5, [w15]
    369e:	1e 00 32    	bra       Z, 0x36dc <.L144>
    36a0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    36a2:	21 00 3a    	bra       NZ, 0x36e6 <.L153>

000036a4 <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    36a4:	54 b6 20    	mov.w     #0xb65, w4
    36a6:	14 42 78    	mov.b     [w4], w4
    36a8:	04 82 fb    	ze        w4, w4
    36aa:	e5 0f 52    	sub.w     w4, #0x5, [w15]
    36ac:	03 00 32    	bra       Z, 0x36b4 <.L146>
    36ae:	e6 0f 52    	sub.w     w4, #0x6, [w15]
    36b0:	12 00 32    	bra       Z, 0x36d6 <.L147>

000036b2 <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    36b2:	17 00 37    	bra       0x36e2 <.L141>

000036b4 <.L146>:
    36b4:	64 b6 20    	mov.w     #0xb66, w4
    36b6:	14 42 78    	mov.b     [w4], w4
    36b8:	04 82 fb    	ze        w4, w4
    36ba:	b4 24 88    	mov.w     w4, 0x496
    36bc:	b4 24 80    	mov.w     0x496, w4
    36be:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    36c0:	05 00 3a    	bra       NZ, 0x36cc <.L151>

000036c2 <.LSM280>:
    36c2:	14 c0 b3    	mov.b     #0x1, w4
    36c4:	04 43 78    	mov.b     w4, w6
    36c6:	45 b7 20    	mov.w     #0xb74, w5
    36c8:	86 4a 78    	mov.b     w6, [w5]

000036ca <.LSM281>:
    36ca:	04 00 37    	bra       0x36d4 <.L150>

000036cc <.L151>:
    36cc:	24 c0 b3    	mov.b     #0x2, w4
    36ce:	04 43 78    	mov.b     w4, w6
    36d0:	45 b7 20    	mov.w     #0xb74, w5
    36d2:	86 4a 78    	mov.b     w6, [w5]

000036d4 <.L150>:
    36d4:	02 00 37    	bra       0x36da <.L145>

000036d6 <.L147>:
    36d6:	35 00 07    	rcall     0x3742 <_SendDataPacket>

000036d8 <.LSM285>:
    36d8:	00 00 00    	nop       

000036da <.L145>:
    36da:	03 00 37    	bra       0x36e2 <.L141>

000036dc <.L144>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    36dc:	2d 04 07    	rcall     0x3f38 <_VendorRequestsIn>

000036de <.LSM288>:
                    break;
    36de:	01 00 37    	bra       0x36e2 <.L141>

000036e0 <.L152>:
    36e0:	00 00 00    	nop       

000036e2 <.L141>:
            }
            break;
    36e2:	00 00 00    	nop       
    36e4:	01 00 37    	bra       0x36e8 <.L138>

000036e6 <.L153>:
    36e6:	00 00 00    	nop       

000036e8 <.L138>:
    }
}
    36e8:	00 80 fa    	ulnk      
    36ea:	00 00 06    	return    

000036ec <_ProcessOutToken>:

void ProcessOutToken(void) {
    36ec:	00 00 fa    	lnk       #0x0

000036ee <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    36ee:	34 b7 20    	mov.w     #0xb73, w4
    36f0:	14 42 78    	mov.b     [w4], w4
    36f2:	84 82 fb    	ze        w4, w5
    36f4:	04 0f 20    	mov.w     #0xf0, w4
    36f6:	04 82 62    	and.w     w5, w4, w4
    36f8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    36fa:	21 00 3a    	bra       NZ, 0x373e <.L154>

000036fc <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    36fc:	44 b6 20    	mov.w     #0xb64, w4
    36fe:	14 42 78    	mov.b     [w4], w4
    3700:	84 82 fb    	ze        w4, w5
    3702:	04 06 20    	mov.w     #0x60, w4
    3704:	04 82 62    	and.w     w5, w4, w4
    3706:	05 02 20    	mov.w     #0x20, w5
    3708:	85 0f 52    	sub.w     w4, w5, [w15]
    370a:	05 00 32    	bra       Z, 0x3716 <.L161>
    370c:	05 04 20    	mov.w     #0x40, w5
    370e:	85 0f 52    	sub.w     w4, w5, [w15]
    3710:	04 00 3a    	bra       NZ, 0x371a <.L162>

00003712 <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    3712:	1b 04 07    	rcall     0x3f4a <_VendorRequestsOut>

00003714 <.LSM296>:
                    break;
    3714:	03 00 37    	bra       0x371c <.L157>

00003716 <.L161>:
    3716:	00 00 00    	nop       
    3718:	01 00 37    	bra       0x371c <.L157>

0000371a <.L162>:
    371a:	00 00 00    	nop       

0000371c <.L157>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    371c:	04 c4 b3    	mov.b     #0x40, w4
    371e:	04 43 78    	mov.b     w4, w6
    3720:	05 c0 20    	mov.w     #0xc00, w5
    3722:	86 4a 78    	mov.b     w6, [w5]

00003724 <.LSM300>:
            BD[EP0OUT].status = 0x88;
    3724:	84 c8 b3    	mov.b     #0x88, w4
    3726:	04 43 78    	mov.b     w4, w6
    3728:	15 c0 20    	mov.w     #0xc01, w5
    372a:	86 4a 78    	mov.b     w6, [w5]

0000372c <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    372c:	00 42 eb    	clr.b     w4
    372e:	04 43 78    	mov.b     w4, w6
    3730:	45 c0 20    	mov.w     #0xc04, w5
    3732:	86 4a 78    	mov.b     w6, [w5]

00003734 <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3734:	84 cc b3    	mov.b     #0xc8, w4
    3736:	04 43 78    	mov.b     w4, w6
    3738:	55 c0 20    	mov.w     #0xc05, w5
    373a:	86 4a 78    	mov.b     w6, [w5]

0000373c <.LSM303>:
            break;
    373c:	00 00 00    	nop       

0000373e <.L154>:
    }
}
    373e:	00 80 fa    	ulnk      
    3740:	00 00 06    	return    

00003742 <_SendDataPacket>:

void SendDataPacket(void) {
    3742:	02 00 fa    	lnk       #0x2

00003744 <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    3744:	75 5b 80    	mov.w     0xb6e, w5
    3746:	f4 03 20    	mov.w     #0x3f, w4
    3748:	84 8f 52    	sub.w     w5, w4, [w15]
    374a:	0d 00 3e    	bra       GTU, 0x3766 <.L164>

0000374c <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    374c:	74 5b 80    	mov.w     0xb6e, w4
    374e:	04 4f 78    	mov.b     w4, [w14]

00003750 <.LSM308>:
        USB_request.bytes_left.w = 0;
    3750:	00 02 eb    	clr.w     w4
    3752:	74 5b 88    	mov.w     w4, 0xb6e

00003754 <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    3754:	00 c2 eb    	setm.b    w4
    3756:	04 43 78    	mov.b     w4, w6
    3758:	45 b6 20    	mov.w     #0xb64, w5
    375a:	86 4a 78    	mov.b     w6, [w5]

0000375c <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    375c:	00 c2 eb    	setm.b    w4
    375e:	04 43 78    	mov.b     w4, w6
    3760:	55 b6 20    	mov.w     #0xb65, w5
    3762:	86 4a 78    	mov.b     w6, [w5]
    3764:	05 00 37    	bra       0x3770 <.L165>

00003766 <.L164>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    3766:	04 c4 b3    	mov.b     #0x40, w4
    3768:	04 4f 78    	mov.b     w4, [w14]

0000376a <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    376a:	74 5b 80    	mov.w     0xb6e, w4
    376c:	04 04 b1    	sub.w     #0x40, w4
    376e:	74 5b 88    	mov.w     w4, 0xb6e

00003770 <.L165>:
    }
    for (n = 0; n<packet_length; n++) {
    3770:	00 42 eb    	clr.b     w4
    3772:	14 47 98    	mov.b     w4, [w14+1]
    3774:	0c 00 37    	bra       0x378e <.L166>

00003776 <.L167>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    3776:	35 60 80    	mov.w     0xc06, w5
    3778:	1e 42 90    	mov.b     [w14+1], w4
    377a:	04 82 fb    	ze        w4, w4
    377c:	84 82 42    	add.w     w5, w4, w5
    377e:	64 5b 80    	mov.w     0xb6c, w4
    3780:	14 43 78    	mov.b     [w4], w6
    3782:	86 4a 78    	mov.b     w6, [w5]
    3784:	04 02 e8    	inc.w     w4, w4
    3786:	64 5b 88    	mov.w     w4, 0xb6c

00003788 <.LSM315>:
    3788:	1e 42 90    	mov.b     [w14+1], w4
    378a:	04 42 e8    	inc.b     w4, w4
    378c:	14 47 98    	mov.b     w4, [w14+1]

0000378e <.L166>:
    378e:	1e 42 90    	mov.b     [w14+1], w4
    3790:	9e 4f 52    	sub.b     w4, [w14], [w15]
    3792:	f1 ff 39    	bra       NC, 0x3776 <.L167>

00003794 <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    3794:	9e 42 78    	mov.b     [w14], w5
    3796:	44 c0 20    	mov.w     #0xc04, w4
    3798:	05 4a 78    	mov.b     w5, [w4]

0000379a <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    379a:	54 c0 20    	mov.w     #0xc05, w4
    379c:	14 42 78    	mov.b     [w4], w4
    379e:	04 c2 ea    	com.b     w4, w4
    37a0:	06 c4 b3    	mov.b     #0x40, w6
    37a2:	86 42 62    	and.b     w4, w6, w5
    37a4:	84 c8 b3    	mov.b     #0x88, w4
    37a6:	04 c2 72    	ior.b     w5, w4, w4
    37a8:	04 43 78    	mov.b     w4, w6
    37aa:	55 c0 20    	mov.w     #0xc05, w5
    37ac:	86 4a 78    	mov.b     w6, [w5]

000037ae <.LSM318>:
}
    37ae:	00 80 fa    	ulnk      
    37b0:	00 00 06    	return    

000037b2 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    37b2:	04 00 fa    	lnk       #0x4
    37b4:	00 0f 78    	mov.w     w0, [w14]
    37b6:	11 07 98    	mov.w     w1, [w14+2]

000037b8 <.LSM1>:
    if (val)
    37b8:	1e 02 90    	mov.w     [w14+2], w4
    37ba:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    37bc:	0d 00 32    	bra       Z, 0x37d8 <.L2>

000037be <.LSM2>:
        bitset(self->port, self->bit);
    37be:	1e 02 78    	mov.w     [w14], w4
    37c0:	14 02 78    	mov.w     [w4], w4
    37c2:	9e 02 78    	mov.w     [w14], w5
    37c4:	95 02 78    	mov.w     [w5], w5
    37c6:	15 03 78    	mov.w     [w5], w6
    37c8:	9e 02 78    	mov.w     [w14], w5
    37ca:	e5 42 90    	mov.b     [w5+6], w5
    37cc:	85 82 fb    	ze        w5, w5
    37ce:	17 00 20    	mov.w     #0x1, w7
    37d0:	85 3a dd    	sl.w      w7, w5, w5
    37d2:	86 82 72    	ior.w     w5, w6, w5
    37d4:	05 0a 78    	mov.w     w5, [w4]
    37d6:	0d 00 37    	bra       0x37f2 <.L1>

000037d8 <.L2>:
    else
        bitclear(self->port, self->bit);
    37d8:	1e 02 78    	mov.w     [w14], w4
    37da:	14 02 78    	mov.w     [w4], w4
    37dc:	9e 02 78    	mov.w     [w14], w5
    37de:	95 02 78    	mov.w     [w5], w5
    37e0:	15 03 78    	mov.w     [w5], w6
    37e2:	9e 02 78    	mov.w     [w14], w5
    37e4:	e5 42 90    	mov.b     [w5+6], w5
    37e6:	85 82 fb    	ze        w5, w5
    37e8:	17 00 20    	mov.w     #0x1, w7
    37ea:	85 3a dd    	sl.w      w7, w5, w5
    37ec:	85 82 ea    	com.w     w5, w5
    37ee:	85 02 63    	and.w     w6, w5, w5
    37f0:	05 0a 78    	mov.w     w5, [w4]

000037f2 <.L1>:
}
    37f2:	00 80 fa    	ulnk      
    37f4:	00 00 06    	return    

000037f6 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    37f6:	02 00 fa    	lnk       #0x2
    37f8:	00 0f 78    	mov.w     w0, [w14]

000037fa <.LSM6>:
    return bitread(self->port, self->bit);
    37fa:	1e 02 78    	mov.w     [w14], w4
    37fc:	14 02 78    	mov.w     [w4], w4
    37fe:	94 02 78    	mov.w     [w4], w5
    3800:	1e 02 78    	mov.w     [w14], w4
    3802:	64 42 90    	mov.b     [w4+6], w4
    3804:	04 82 fb    	ze        w4, w4
    3806:	16 00 20    	mov.w     #0x1, w6
    3808:	04 32 dd    	sl.w      w6, w4, w4
    380a:	04 82 62    	and.w     w5, w4, w4
    380c:	04 f0 a7    	btsc.w    w4, #0xf
    380e:	04 02 ea    	neg.w     w4, w4
    3810:	04 02 ea    	neg.w     w4, w4
    3812:	4f 22 de    	lsr.w     w4, #0xf, w4

00003814 <.LSM7>:
}
    3814:	04 00 78    	mov.w     w4, w0
    3816:	00 80 fa    	ulnk      
    3818:	00 00 06    	return    

0000381a <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    381a:	02 00 fa    	lnk       #0x2
    381c:	00 0f 78    	mov.w     w0, [w14]

0000381e <.LSM9>:
    AD1CHS = self->annum;
    381e:	1e 02 78    	mov.w     [w14], w4
    3820:	44 02 90    	mov.w     [w4+8], w4
    3822:	44 19 88    	mov.w     w4, 0x328

00003824 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    3824:	20 23 a8    	bset.b    0x320, #0x1

00003826 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    3826:	00 00 00    	nop       

00003828 <.L6>:
    3828:	04 19 80    	mov.w     0x320, w4
    382a:	61 02 62    	and.w     w4, #0x1, w4
    382c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    382e:	fc ff 32    	bra       Z, 0x3828 <.L6>

00003830 <.LSM12>:
    return ADC1BUF0;
    3830:	04 18 80    	mov.w     0x300, w4

00003832 <.LSM13>:
}
    3832:	04 00 78    	mov.w     w4, w0
    3834:	00 80 fa    	ulnk      
    3836:	00 00 06    	return    

00003838 <_init_pin>:

void init_pin(void) {
    3838:	02 00 fa    	lnk       #0x2

0000383a <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    383a:	44 6d 20    	mov.w     #0x6d4, w4
    383c:	84 1f 78    	mov.w     w4, [w15++]
    383e:	47 01 20    	mov.w     #0x14, w7
    3840:	00 43 eb    	clr.b     w6
    3842:	80 82 eb    	setm.w    w5
    3844:	54 c0 b3    	mov.b     #0x5, w4
    3846:	80 01 eb    	clr.w     w3
    3848:	82 2d 20    	mov.w     #0x2d8, w2
    384a:	a1 2d 20    	mov.w     #0x2da, w1
    384c:	00 80 20    	mov.w     #0x800, w0
    384e:	0c 01 07    	rcall     0x3a68 <_pin_init>
    3850:	8f 87 e9    	dec2.w    w15, w15

00003852 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3852:	84 6d 20    	mov.w     #0x6d8, w4
    3854:	84 1f 78    	mov.w     w4, [w15++]
    3856:	97 01 20    	mov.w     #0x19, w7
    3858:	86 c0 b3    	mov.b     #0x8, w6
    385a:	80 82 eb    	setm.w    w5
    385c:	44 c0 b3    	mov.b     #0x4, w4
    385e:	80 01 eb    	clr.w     w3
    3860:	82 2d 20    	mov.w     #0x2d8, w2
    3862:	a1 2d 20    	mov.w     #0x2da, w1
    3864:	60 81 20    	mov.w     #0x816, w0
    3866:	00 01 07    	rcall     0x3a68 <_pin_init>
    3868:	8f 87 e9    	dec2.w    w15, w15

0000386a <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    386a:	a4 6c 20    	mov.w     #0x6ca, w4
    386c:	84 1f 78    	mov.w     w4, [w15++]
    386e:	a7 00 20    	mov.w     #0xa, w7
    3870:	00 43 eb    	clr.b     w6
    3872:	80 82 eb    	setm.w    w5
    3874:	44 c0 b3    	mov.b     #0x4, w4
    3876:	80 01 eb    	clr.w     w3
    3878:	82 2e 20    	mov.w     #0x2e8, w2
    387a:	a1 2e 20    	mov.w     #0x2ea, w1
    387c:	c0 82 20    	mov.w     #0x82c, w0
    387e:	f4 00 07    	rcall     0x3a68 <_pin_init>
    3880:	8f 87 e9    	dec2.w    w15, w15

00003882 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3882:	04 6d 20    	mov.w     #0x6d0, w4
    3884:	84 1f 78    	mov.w     w4, [w15++]
    3886:	17 01 20    	mov.w     #0x11, w7
    3888:	86 c0 b3    	mov.b     #0x8, w6
    388a:	80 82 eb    	setm.w    w5
    388c:	54 c0 b3    	mov.b     #0x5, w4
    388e:	80 01 eb    	clr.w     w3
    3890:	82 2e 20    	mov.w     #0x2e8, w2
    3892:	a1 2e 20    	mov.w     #0x2ea, w1
    3894:	20 84 20    	mov.w     #0x842, w0
    3896:	e8 00 07    	rcall     0x3a68 <_pin_init>
    3898:	8f 87 e9    	dec2.w    w15, w15

0000389a <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    389a:	c4 6d 20    	mov.w     #0x6dc, w4
    389c:	84 1f 78    	mov.w     w4, [w15++]
    389e:	d7 01 20    	mov.w     #0x1d, w7
    38a0:	86 c0 b3    	mov.b     #0x8, w6
    38a2:	f5 00 20    	mov.w     #0xf, w5
    38a4:	f4 c0 b3    	mov.b     #0xf, w4
    38a6:	23 4e 20    	mov.w     #0x4e2, w3
    38a8:	82 2c 20    	mov.w     #0x2c8, w2
    38aa:	a1 2c 20    	mov.w     #0x2ca, w1
    38ac:	80 85 20    	mov.w     #0x858, w0
    38ae:	dc 00 07    	rcall     0x3a68 <_pin_init>
    38b0:	8f 87 e9    	dec2.w    w15, w15

000038b2 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    38b2:	04 6d 20    	mov.w     #0x6d0, w4
    38b4:	84 1f 78    	mov.w     w4, [w15++]
    38b6:	07 01 20    	mov.w     #0x10, w7
    38b8:	00 43 eb    	clr.b     w6
    38ba:	80 82 eb    	setm.w    w5
    38bc:	34 c0 b3    	mov.b     #0x3, w4
    38be:	80 01 eb    	clr.w     w3
    38c0:	82 2e 20    	mov.w     #0x2e8, w2
    38c2:	a1 2e 20    	mov.w     #0x2ea, w1
    38c4:	e0 86 20    	mov.w     #0x86e, w0
    38c6:	d0 00 07    	rcall     0x3a68 <_pin_init>
    38c8:	8f 87 e9    	dec2.w    w15, w15

000038ca <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    38ca:	24 6c 20    	mov.w     #0x6c2, w4
    38cc:	84 1f 78    	mov.w     w4, [w15++]
    38ce:	27 00 20    	mov.w     #0x2, w7
    38d0:	00 43 eb    	clr.b     w6
    38d2:	80 82 eb    	setm.w    w5
    38d4:	84 c0 b3    	mov.b     #0x8, w4
    38d6:	80 01 eb    	clr.w     w3
    38d8:	82 2d 20    	mov.w     #0x2d8, w2
    38da:	a1 2d 20    	mov.w     #0x2da, w1
    38dc:	40 88 20    	mov.w     #0x884, w0
    38de:	c4 00 07    	rcall     0x3a68 <_pin_init>
    38e0:	8f 87 e9    	dec2.w    w15, w15

000038e2 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    38e2:	c4 6c 20    	mov.w     #0x6cc, w4
    38e4:	84 1f 78    	mov.w     w4, [w15++]
    38e6:	c7 00 20    	mov.w     #0xc, w7
    38e8:	00 43 eb    	clr.b     w6
    38ea:	80 82 eb    	setm.w    w5
    38ec:	b4 c0 b3    	mov.b     #0xb, w4
    38ee:	80 01 eb    	clr.w     w3
    38f0:	82 2d 20    	mov.w     #0x2d8, w2
    38f2:	a1 2d 20    	mov.w     #0x2da, w1
    38f4:	a0 89 20    	mov.w     #0x89a, w0
    38f6:	b8 00 07    	rcall     0x3a68 <_pin_init>
    38f8:	8f 87 e9    	dec2.w    w15, w15

000038fa <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    38fa:	44 6c 20    	mov.w     #0x6c4, w4
    38fc:	84 1f 78    	mov.w     w4, [w15++]
    38fe:	47 00 20    	mov.w     #0x4, w7
    3900:	00 43 eb    	clr.b     w6
    3902:	80 82 eb    	setm.w    w5
    3904:	94 c0 b3    	mov.b     #0x9, w4
    3906:	80 01 eb    	clr.w     w3
    3908:	82 2d 20    	mov.w     #0x2d8, w2
    390a:	a1 2d 20    	mov.w     #0x2da, w1
    390c:	00 8b 20    	mov.w     #0x8b0, w0
    390e:	ac 00 07    	rcall     0x3a68 <_pin_init>
    3910:	8f 87 e9    	dec2.w    w15, w15

00003912 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3912:	24 6c 20    	mov.w     #0x6c2, w4
    3914:	84 1f 78    	mov.w     w4, [w15++]
    3916:	37 00 20    	mov.w     #0x3, w7
    3918:	86 c0 b3    	mov.b     #0x8, w6
    391a:	80 82 eb    	setm.w    w5
    391c:	a4 c0 b3    	mov.b     #0xa, w4
    391e:	80 01 eb    	clr.w     w3
    3920:	82 2d 20    	mov.w     #0x2d8, w2
    3922:	a1 2d 20    	mov.w     #0x2da, w1
    3924:	60 8c 20    	mov.w     #0x8c6, w0
    3926:	a0 00 07    	rcall     0x3a68 <_pin_init>
    3928:	8f 87 e9    	dec2.w    w15, w15

0000392a <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    392a:	a4 6c 20    	mov.w     #0x6ca, w4
    392c:	84 1f 78    	mov.w     w4, [w15++]
    392e:	b7 00 20    	mov.w     #0xb, w7
    3930:	86 c0 b3    	mov.b     #0x8, w6
    3932:	80 82 eb    	setm.w    w5
    3934:	00 42 eb    	clr.b     w4
    3936:	80 01 eb    	clr.w     w3
    3938:	82 2d 20    	mov.w     #0x2d8, w2
    393a:	a1 2d 20    	mov.w     #0x2da, w1
    393c:	c0 8d 20    	mov.w     #0x8dc, w0
    393e:	94 00 07    	rcall     0x3a68 <_pin_init>
    3940:	8f 87 e9    	dec2.w    w15, w15

00003942 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3942:	84 6d 20    	mov.w     #0x6d8, w4
    3944:	84 1f 78    	mov.w     w4, [w15++]
    3946:	87 01 20    	mov.w     #0x18, w7
    3948:	00 43 eb    	clr.b     w6
    394a:	80 82 eb    	setm.w    w5
    394c:	14 c0 b3    	mov.b     #0x1, w4
    394e:	80 01 eb    	clr.w     w3
    3950:	82 2d 20    	mov.w     #0x2d8, w2
    3952:	a1 2d 20    	mov.w     #0x2da, w1
    3954:	20 8f 20    	mov.w     #0x8f2, w0
    3956:	88 00 07    	rcall     0x3a68 <_pin_init>
    3958:	8f 87 e9    	dec2.w    w15, w15

0000395a <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    395a:	64 6d 20    	mov.w     #0x6d6, w4
    395c:	84 1f 78    	mov.w     w4, [w15++]
    395e:	77 01 20    	mov.w     #0x17, w7
    3960:	86 c0 b3    	mov.b     #0x8, w6
    3962:	80 82 eb    	setm.w    w5
    3964:	24 c0 b3    	mov.b     #0x2, w4
    3966:	80 01 eb    	clr.w     w3
    3968:	82 2d 20    	mov.w     #0x2d8, w2
    396a:	a1 2d 20    	mov.w     #0x2da, w1
    396c:	80 90 20    	mov.w     #0x908, w0
    396e:	7c 00 07    	rcall     0x3a68 <_pin_init>
    3970:	8f 87 e9    	dec2.w    w15, w15

00003972 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3972:	64 6d 20    	mov.w     #0x6d6, w4
    3974:	84 1f 78    	mov.w     w4, [w15++]
    3976:	67 01 20    	mov.w     #0x16, w7
    3978:	00 43 eb    	clr.b     w6
    397a:	80 82 eb    	setm.w    w5
    397c:	34 c0 b3    	mov.b     #0x3, w4
    397e:	80 01 eb    	clr.w     w3
    3980:	82 2d 20    	mov.w     #0x2d8, w2
    3982:	a1 2d 20    	mov.w     #0x2da, w1
    3984:	e0 91 20    	mov.w     #0x91e, w0
    3986:	70 00 07    	rcall     0x3a68 <_pin_init>
    3988:	8f 87 e9    	dec2.w    w15, w15

0000398a <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    398a:	04 6c 20    	mov.w     #0x6c0, w4
    398c:	84 1f 78    	mov.w     w4, [w15++]
    398e:	80 03 eb    	clr.w     w7
    3990:	00 43 eb    	clr.b     w6
    3992:	80 02 eb    	clr.w     w5
    3994:	00 42 eb    	clr.b     w4
    3996:	23 4e 20    	mov.w     #0x4e2, w3
    3998:	82 2c 20    	mov.w     #0x2c8, w2
    399a:	a1 2c 20    	mov.w     #0x2ca, w1
    399c:	20 9a 20    	mov.w     #0x9a2, w0
    399e:	64 00 07    	rcall     0x3a68 <_pin_init>
    39a0:	8f 87 e9    	dec2.w    w15, w15

000039a2 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    39a2:	04 6c 20    	mov.w     #0x6c0, w4
    39a4:	84 1f 78    	mov.w     w4, [w15++]
    39a6:	17 00 20    	mov.w     #0x1, w7
    39a8:	86 c0 b3    	mov.b     #0x8, w6
    39aa:	15 00 20    	mov.w     #0x1, w5
    39ac:	14 c0 b3    	mov.b     #0x1, w4
    39ae:	23 4e 20    	mov.w     #0x4e2, w3
    39b0:	82 2c 20    	mov.w     #0x2c8, w2
    39b2:	a1 2c 20    	mov.w     #0x2ca, w1
    39b4:	c0 98 20    	mov.w     #0x98c, w0
    39b6:	58 00 07    	rcall     0x3a68 <_pin_init>
    39b8:	8f 87 e9    	dec2.w    w15, w15

000039ba <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    39ba:	c4 6c 20    	mov.w     #0x6cc, w4
    39bc:	84 1f 78    	mov.w     w4, [w15++]
    39be:	d7 00 20    	mov.w     #0xd, w7
    39c0:	86 c0 b3    	mov.b     #0x8, w6
    39c2:	25 00 20    	mov.w     #0x2, w5
    39c4:	24 c0 b3    	mov.b     #0x2, w4
    39c6:	23 4e 20    	mov.w     #0x4e2, w3
    39c8:	82 2c 20    	mov.w     #0x2c8, w2
    39ca:	a1 2c 20    	mov.w     #0x2ca, w1
    39cc:	60 97 20    	mov.w     #0x976, w0
    39ce:	4c 00 07    	rcall     0x3a68 <_pin_init>
    39d0:	8f 87 e9    	dec2.w    w15, w15

000039d2 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    39d2:	00 02 eb    	clr.w     w4
    39d4:	84 1f 78    	mov.w     w4, [w15++]
    39d6:	80 83 eb    	setm.w    w7
    39d8:	00 43 eb    	clr.b     w6
    39da:	35 00 20    	mov.w     #0x3, w5
    39dc:	34 c0 b3    	mov.b     #0x3, w4
    39de:	23 4e 20    	mov.w     #0x4e2, w3
    39e0:	82 2c 20    	mov.w     #0x2c8, w2
    39e2:	a1 2c 20    	mov.w     #0x2ca, w1
    39e4:	00 96 20    	mov.w     #0x960, w0
    39e6:	40 00 07    	rcall     0x3a68 <_pin_init>
    39e8:	8f 87 e9    	dec2.w    w15, w15

000039ea <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    39ea:	c4 6d 20    	mov.w     #0x6dc, w4
    39ec:	84 1f 78    	mov.w     w4, [w15++]
    39ee:	c7 01 20    	mov.w     #0x1c, w7
    39f0:	00 43 eb    	clr.b     w6
    39f2:	45 00 20    	mov.w     #0x4, w5
    39f4:	44 c0 b3    	mov.b     #0x4, w4
    39f6:	23 4e 20    	mov.w     #0x4e2, w3
    39f8:	82 2c 20    	mov.w     #0x2c8, w2
    39fa:	a1 2c 20    	mov.w     #0x2ca, w1
    39fc:	a0 94 20    	mov.w     #0x94a, w0
    39fe:	34 00 07    	rcall     0x3a68 <_pin_init>
    3a00:	8f 87 e9    	dec2.w    w15, w15

00003a02 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3a02:	24 6d 20    	mov.w     #0x6d2, w4
    3a04:	84 1f 78    	mov.w     w4, [w15++]
    3a06:	27 01 20    	mov.w     #0x12, w7
    3a08:	00 43 eb    	clr.b     w6
    3a0a:	55 00 20    	mov.w     #0x5, w5
    3a0c:	54 c0 b3    	mov.b     #0x5, w4
    3a0e:	23 4e 20    	mov.w     #0x4e2, w3
    3a10:	82 2c 20    	mov.w     #0x2c8, w2
    3a12:	a1 2c 20    	mov.w     #0x2ca, w1
    3a14:	40 93 20    	mov.w     #0x934, w0
    3a16:	28 00 07    	rcall     0x3a68 <_pin_init>
    3a18:	8f 87 e9    	dec2.w    w15, w15

00003a1a <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    3a1a:	00 02 eb    	clr.w     w4
    3a1c:	04 0f 78    	mov.w     w4, [w14]
    3a1e:	08 00 37    	bra       0x3a30 <.L8>

00003a20 <.L9>:
        pin_digitalIn(&D[i]);
    3a20:	1e 02 78    	mov.w     [w14], w4
    3a22:	76 22 b9    	mul.su    w4, #0x16, w4
    3a24:	84 02 78    	mov.w     w4, w5
    3a26:	04 80 20    	mov.w     #0x800, w4
    3a28:	04 82 42    	add.w     w5, w4, w4
    3a2a:	04 00 78    	mov.w     w4, w0
    3a2c:	49 00 07    	rcall     0x3ac0 <_pin_digitalIn>

00003a2e <.LSM37>:
    3a2e:	1e 0f e8    	inc.w     [w14], [w14]

00003a30 <.L8>:
    3a30:	1e 02 78    	mov.w     [w14], w4
    3a32:	ed 0f 52    	sub.w     w4, #0xd, [w15]
    3a34:	f5 ff 36    	bra       LEU, 0x3a20 <.L9>

00003a36 <.LSM38>:
    for (i = 0; i<6; i++)
    3a36:	00 02 eb    	clr.w     w4
    3a38:	04 0f 78    	mov.w     w4, [w14]
    3a3a:	08 00 37    	bra       0x3a4c <.L10>

00003a3c <.L11>:
        pin_analogIn(&A[i]);
    3a3c:	1e 02 78    	mov.w     [w14], w4
    3a3e:	76 22 b9    	mul.su    w4, #0x16, w4
    3a40:	84 02 78    	mov.w     w4, w5
    3a42:	44 93 20    	mov.w     #0x934, w4
    3a44:	04 82 42    	add.w     w5, w4, w4
    3a46:	04 00 78    	mov.w     w4, w0
    3a48:	97 00 07    	rcall     0x3b78 <_pin_analogIn>

00003a4a <.LSM40>:
    3a4a:	1e 0f e8    	inc.w     [w14], [w14]

00003a4c <.L10>:
    3a4c:	1e 02 78    	mov.w     [w14], w4
    3a4e:	e5 0f 52    	sub.w     w4, #0x5, [w15]
    3a50:	f5 ff 36    	bra       LEU, 0x3a3c <.L11>

00003a52 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    3a52:	04 2e 20    	mov.w     #0x2e0, w4
    3a54:	04 19 88    	mov.w     w4, 0x320

00003a56 <.LSM42>:
    AD1CON2 = 0;
    3a56:	00 02 eb    	clr.w     w4
    3a58:	14 19 88    	mov.w     w4, 0x322

00003a5a <.LSM43>:
    AD1CON3 = 0x0C40;
    3a5a:	04 c4 20    	mov.w     #0xc40, w4
    3a5c:	24 19 88    	mov.w     w4, 0x324

00003a5e <.LSM44>:
    AD1CHS = 0;
    3a5e:	00 02 eb    	clr.w     w4
    3a60:	44 19 88    	mov.w     w4, 0x328

00003a62 <.LSM45>:
    AD1CON1bits.ADON = 1;
    3a62:	21 e3 a8    	bset.b    0x321, #0x7

00003a64 <.LSM46>:
}
    3a64:	00 80 fa    	ulnk      
    3a66:	00 00 06    	return    

00003a68 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    3a68:	10 00 fa    	lnk       #0x10
    3a6a:	00 0f 78    	mov.w     w0, [w14]
    3a6c:	11 07 98    	mov.w     w1, [w14+2]
    3a6e:	22 07 98    	mov.w     w2, [w14+4]
    3a70:	33 07 98    	mov.w     w3, [w14+6]
    3a72:	04 4f 98    	mov.b     w4, [w14+8]
    3a74:	55 07 98    	mov.w     w5, [w14+10]
    3a76:	46 4f 98    	mov.b     w6, [w14+12]
    3a78:	77 07 98    	mov.w     w7, [w14+14]

00003a7a <.LSM48>:
    self->port = port;
    3a7a:	1e 02 78    	mov.w     [w14], w4
    3a7c:	9e 02 90    	mov.w     [w14+2], w5
    3a7e:	05 0a 78    	mov.w     w5, [w4]

00003a80 <.LSM49>:
    self->tris = tris;
    3a80:	1e 02 78    	mov.w     [w14], w4
    3a82:	ae 02 90    	mov.w     [w14+4], w5
    3a84:	15 02 98    	mov.w     w5, [w4+2]

00003a86 <.LSM50>:
    self->ans = ans;
    3a86:	1e 02 78    	mov.w     [w14], w4
    3a88:	be 02 90    	mov.w     [w14+6], w5
    3a8a:	25 02 98    	mov.w     w5, [w4+4]

00003a8c <.LSM51>:
    self->bit = bit;
    3a8c:	1e 02 78    	mov.w     [w14], w4
    3a8e:	8e 4a 90    	mov.b     [w14+8], w5
    3a90:	65 42 98    	mov.b     w5, [w4+6]

00003a92 <.LSM52>:
    self->annum = annum;
    3a92:	1e 02 78    	mov.w     [w14], w4
    3a94:	de 02 90    	mov.w     [w14+10], w5
    3a96:	45 02 98    	mov.w     w5, [w4+8]

00003a98 <.LSM53>:
    self->rpshift = rpshift;
    3a98:	1e 02 78    	mov.w     [w14], w4
    3a9a:	ce 4a 90    	mov.b     [w14+12], w5
    3a9c:	25 4a 98    	mov.b     w5, [w4+10]

00003a9e <.LSM54>:
    self->rpnum = rpnum;
    3a9e:	fe 02 90    	mov.w     [w14+14], w5
    3aa0:	1e 02 78    	mov.w     [w14], w4
    3aa2:	65 02 98    	mov.w     w5, [w4+12]

00003aa4 <.LSM55>:
    self->rpor = rpor;
    3aa4:	1e 02 78    	mov.w     [w14], w4
    3aa6:	ce ba 97    	mov.w     [w14-8], w5
    3aa8:	75 02 98    	mov.w     w5, [w4+14]

00003aaa <.LSM56>:
    self->owner = NULL;
    3aaa:	1e 02 78    	mov.w     [w14], w4
    3aac:	80 02 eb    	clr.w     w5
    3aae:	05 0a 98    	mov.w     w5, [w4+16]

00003ab0 <.LSM57>:
    self->write = NULL;
    3ab0:	1e 02 78    	mov.w     [w14], w4
    3ab2:	80 02 eb    	clr.w     w5
    3ab4:	15 0a 98    	mov.w     w5, [w4+18]

00003ab6 <.LSM58>:
    self->read = NULL;
    3ab6:	1e 02 78    	mov.w     [w14], w4
    3ab8:	80 02 eb    	clr.w     w5
    3aba:	25 0a 98    	mov.w     w5, [w4+20]

00003abc <.LSM59>:
}
    3abc:	00 80 fa    	ulnk      
    3abe:	00 00 06    	return    

00003ac0 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    3ac0:	02 00 fa    	lnk       #0x2
    3ac2:	00 0f 78    	mov.w     w0, [w14]

00003ac4 <.LSM61>:
    if (self->ans)
    3ac4:	1e 02 78    	mov.w     [w14], w4
    3ac6:	24 02 90    	mov.w     [w4+4], w4
    3ac8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3aca:	0d 00 32    	bra       Z, 0x3ae6 <.L14>

00003acc <.LSM62>:
        bitclear(self->ans, self->bit);
    3acc:	1e 02 78    	mov.w     [w14], w4
    3ace:	24 02 90    	mov.w     [w4+4], w4
    3ad0:	9e 02 78    	mov.w     [w14], w5
    3ad2:	a5 02 90    	mov.w     [w5+4], w5
    3ad4:	15 03 78    	mov.w     [w5], w6
    3ad6:	9e 02 78    	mov.w     [w14], w5
    3ad8:	e5 42 90    	mov.b     [w5+6], w5
    3ada:	85 82 fb    	ze        w5, w5
    3adc:	17 00 20    	mov.w     #0x1, w7
    3ade:	85 3a dd    	sl.w      w7, w5, w5
    3ae0:	85 82 ea    	com.w     w5, w5
    3ae2:	85 02 63    	and.w     w6, w5, w5
    3ae4:	05 0a 78    	mov.w     w5, [w4]

00003ae6 <.L14>:
    bitset(self->tris, self->bit);
    3ae6:	1e 02 78    	mov.w     [w14], w4
    3ae8:	14 02 90    	mov.w     [w4+2], w4
    3aea:	9e 02 78    	mov.w     [w14], w5
    3aec:	95 02 90    	mov.w     [w5+2], w5
    3aee:	15 03 78    	mov.w     [w5], w6
    3af0:	9e 02 78    	mov.w     [w14], w5
    3af2:	e5 42 90    	mov.b     [w5+6], w5
    3af4:	85 82 fb    	ze        w5, w5
    3af6:	17 00 20    	mov.w     #0x1, w7
    3af8:	85 3a dd    	sl.w      w7, w5, w5
    3afa:	86 82 72    	ior.w     w5, w6, w5
    3afc:	05 0a 78    	mov.w     w5, [w4]

00003afe <.LSM64>:
    self->write = NULL;
    3afe:	1e 02 78    	mov.w     [w14], w4
    3b00:	80 02 eb    	clr.w     w5
    3b02:	15 0a 98    	mov.w     w5, [w4+18]

00003b04 <.LSM65>:
    self->read = __digitalRead;    
    3b04:	1e 02 78    	mov.w     [w14], w4
    3b06:	65 7f 23    	mov.w     #0x37f6, w5
    3b08:	25 0a 98    	mov.w     w5, [w4+20]

00003b0a <.LSM66>:
}
    3b0a:	00 80 fa    	ulnk      
    3b0c:	00 00 06    	return    

00003b0e <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    3b0e:	02 00 fa    	lnk       #0x2
    3b10:	00 0f 78    	mov.w     w0, [w14]

00003b12 <.LSM68>:
    if (self->ans)
    3b12:	1e 02 78    	mov.w     [w14], w4
    3b14:	24 02 90    	mov.w     [w4+4], w4
    3b16:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3b18:	0d 00 32    	bra       Z, 0x3b34 <.L16>

00003b1a <.LSM69>:
        bitclear(self->ans, self->bit);
    3b1a:	1e 02 78    	mov.w     [w14], w4
    3b1c:	24 02 90    	mov.w     [w4+4], w4
    3b1e:	9e 02 78    	mov.w     [w14], w5
    3b20:	a5 02 90    	mov.w     [w5+4], w5
    3b22:	15 03 78    	mov.w     [w5], w6
    3b24:	9e 02 78    	mov.w     [w14], w5
    3b26:	e5 42 90    	mov.b     [w5+6], w5
    3b28:	85 82 fb    	ze        w5, w5
    3b2a:	17 00 20    	mov.w     #0x1, w7
    3b2c:	85 3a dd    	sl.w      w7, w5, w5
    3b2e:	85 82 ea    	com.w     w5, w5
    3b30:	85 02 63    	and.w     w6, w5, w5
    3b32:	05 0a 78    	mov.w     w5, [w4]

00003b34 <.L16>:
    bitclear(self->port, self->bit);
    3b34:	1e 02 78    	mov.w     [w14], w4
    3b36:	14 02 78    	mov.w     [w4], w4
    3b38:	9e 02 78    	mov.w     [w14], w5
    3b3a:	95 02 78    	mov.w     [w5], w5
    3b3c:	15 03 78    	mov.w     [w5], w6
    3b3e:	9e 02 78    	mov.w     [w14], w5
    3b40:	e5 42 90    	mov.b     [w5+6], w5
    3b42:	85 82 fb    	ze        w5, w5
    3b44:	17 00 20    	mov.w     #0x1, w7
    3b46:	85 3a dd    	sl.w      w7, w5, w5
    3b48:	85 82 ea    	com.w     w5, w5
    3b4a:	85 02 63    	and.w     w6, w5, w5
    3b4c:	05 0a 78    	mov.w     w5, [w4]

00003b4e <.LSM71>:
    bitclear(self->tris, self->bit);
    3b4e:	1e 02 78    	mov.w     [w14], w4
    3b50:	14 02 90    	mov.w     [w4+2], w4
    3b52:	9e 02 78    	mov.w     [w14], w5
    3b54:	95 02 90    	mov.w     [w5+2], w5
    3b56:	15 03 78    	mov.w     [w5], w6
    3b58:	9e 02 78    	mov.w     [w14], w5
    3b5a:	e5 42 90    	mov.b     [w5+6], w5
    3b5c:	85 82 fb    	ze        w5, w5
    3b5e:	17 00 20    	mov.w     #0x1, w7
    3b60:	85 3a dd    	sl.w      w7, w5, w5
    3b62:	85 82 ea    	com.w     w5, w5
    3b64:	85 02 63    	and.w     w6, w5, w5
    3b66:	05 0a 78    	mov.w     w5, [w4]

00003b68 <.LSM72>:
    self->write = __digitalWrite;
    3b68:	1e 02 78    	mov.w     [w14], w4
    3b6a:	25 7b 23    	mov.w     #0x37b2, w5
    3b6c:	15 0a 98    	mov.w     w5, [w4+18]

00003b6e <.LSM73>:
    self->read = __digitalRead;
    3b6e:	1e 02 78    	mov.w     [w14], w4
    3b70:	65 7f 23    	mov.w     #0x37f6, w5
    3b72:	25 0a 98    	mov.w     w5, [w4+20]

00003b74 <.LSM74>:
}
    3b74:	00 80 fa    	ulnk      
    3b76:	00 00 06    	return    

00003b78 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    3b78:	02 00 fa    	lnk       #0x2
    3b7a:	00 0f 78    	mov.w     w0, [w14]

00003b7c <.LSM76>:
    if (!(self->ans))
    3b7c:	1e 02 78    	mov.w     [w14], w4
    3b7e:	24 02 90    	mov.w     [w4+4], w4
    3b80:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3b82:	1f 00 32    	bra       Z, 0x3bc2 <.L20>

00003b84 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    3b84:	1e 02 78    	mov.w     [w14], w4
    3b86:	14 02 90    	mov.w     [w4+2], w4
    3b88:	9e 02 78    	mov.w     [w14], w5
    3b8a:	95 02 90    	mov.w     [w5+2], w5
    3b8c:	15 03 78    	mov.w     [w5], w6
    3b8e:	9e 02 78    	mov.w     [w14], w5
    3b90:	e5 42 90    	mov.b     [w5+6], w5
    3b92:	85 82 fb    	ze        w5, w5
    3b94:	17 00 20    	mov.w     #0x1, w7
    3b96:	85 3a dd    	sl.w      w7, w5, w5
    3b98:	86 82 72    	ior.w     w5, w6, w5
    3b9a:	05 0a 78    	mov.w     w5, [w4]

00003b9c <.LSM78>:
    bitset(self->ans, self->bit);
    3b9c:	1e 02 78    	mov.w     [w14], w4
    3b9e:	24 02 90    	mov.w     [w4+4], w4
    3ba0:	9e 02 78    	mov.w     [w14], w5
    3ba2:	a5 02 90    	mov.w     [w5+4], w5
    3ba4:	15 03 78    	mov.w     [w5], w6
    3ba6:	9e 02 78    	mov.w     [w14], w5
    3ba8:	e5 42 90    	mov.b     [w5+6], w5
    3baa:	85 82 fb    	ze        w5, w5
    3bac:	17 00 20    	mov.w     #0x1, w7
    3bae:	85 3a dd    	sl.w      w7, w5, w5
    3bb0:	86 82 72    	ior.w     w5, w6, w5
    3bb2:	05 0a 78    	mov.w     w5, [w4]

00003bb4 <.LSM79>:
    self->write = NULL;
    3bb4:	1e 02 78    	mov.w     [w14], w4
    3bb6:	80 02 eb    	clr.w     w5
    3bb8:	15 0a 98    	mov.w     w5, [w4+18]

00003bba <.LSM80>:
    self->read = __analogRead;
    3bba:	1e 02 78    	mov.w     [w14], w4
    3bbc:	a5 81 23    	mov.w     #0x381a, w5
    3bbe:	25 0a 98    	mov.w     w5, [w4+20]
    3bc0:	01 00 37    	bra       0x3bc4 <.L17>

00003bc2 <.L20>:
    3bc2:	00 00 00    	nop       

00003bc4 <.L17>:
}
    3bc4:	00 80 fa    	ulnk      
    3bc6:	00 00 06    	return    

00003bc8 <_pin_set>:

void pin_set(_PIN *self) {
    3bc8:	02 00 fa    	lnk       #0x2
    3bca:	00 0f 78    	mov.w     w0, [w14]

00003bcc <.LSM84>:
    if (self->write==__digitalWrite)
    3bcc:	1e 02 78    	mov.w     [w14], w4
    3bce:	94 0a 90    	mov.w     [w4+18], w5
    3bd0:	24 7b 23    	mov.w     #0x37b2, w4
    3bd2:	84 8f 52    	sub.w     w5, w4, [w15]
    3bd4:	0c 00 3a    	bra       NZ, 0x3bee <.L21>

00003bd6 <.LSM85>:
        bitset(self->port, self->bit);
    3bd6:	1e 02 78    	mov.w     [w14], w4
    3bd8:	14 02 78    	mov.w     [w4], w4
    3bda:	9e 02 78    	mov.w     [w14], w5
    3bdc:	95 02 78    	mov.w     [w5], w5
    3bde:	15 03 78    	mov.w     [w5], w6
    3be0:	9e 02 78    	mov.w     [w14], w5
    3be2:	e5 42 90    	mov.b     [w5+6], w5
    3be4:	85 82 fb    	ze        w5, w5
    3be6:	17 00 20    	mov.w     #0x1, w7
    3be8:	85 3a dd    	sl.w      w7, w5, w5
    3bea:	86 82 72    	ior.w     w5, w6, w5
    3bec:	05 0a 78    	mov.w     w5, [w4]

00003bee <.L21>:
}
    3bee:	00 80 fa    	ulnk      
    3bf0:	00 00 06    	return    

00003bf2 <_pin_clear>:

void pin_clear(_PIN *self) {
    3bf2:	02 00 fa    	lnk       #0x2
    3bf4:	00 0f 78    	mov.w     w0, [w14]

00003bf6 <.LSM88>:
    if (self->write==__digitalWrite)
    3bf6:	1e 02 78    	mov.w     [w14], w4
    3bf8:	94 0a 90    	mov.w     [w4+18], w5
    3bfa:	24 7b 23    	mov.w     #0x37b2, w4
    3bfc:	84 8f 52    	sub.w     w5, w4, [w15]
    3bfe:	0d 00 3a    	bra       NZ, 0x3c1a <.L23>

00003c00 <.LSM89>:
        bitclear(self->port, self->bit);
    3c00:	1e 02 78    	mov.w     [w14], w4
    3c02:	14 02 78    	mov.w     [w4], w4
    3c04:	9e 02 78    	mov.w     [w14], w5
    3c06:	95 02 78    	mov.w     [w5], w5
    3c08:	15 03 78    	mov.w     [w5], w6
    3c0a:	9e 02 78    	mov.w     [w14], w5
    3c0c:	e5 42 90    	mov.b     [w5+6], w5
    3c0e:	85 82 fb    	ze        w5, w5
    3c10:	17 00 20    	mov.w     #0x1, w7
    3c12:	85 3a dd    	sl.w      w7, w5, w5
    3c14:	85 82 ea    	com.w     w5, w5
    3c16:	85 02 63    	and.w     w6, w5, w5
    3c18:	05 0a 78    	mov.w     w5, [w4]

00003c1a <.L23>:
}
    3c1a:	00 80 fa    	ulnk      
    3c1c:	00 00 06    	return    

00003c1e <_pin_toggle>:

void pin_toggle(_PIN *self) {
    3c1e:	02 00 fa    	lnk       #0x2
    3c20:	00 0f 78    	mov.w     w0, [w14]

00003c22 <.LSM92>:
    if (self->write==__digitalWrite)
    3c22:	1e 02 78    	mov.w     [w14], w4
    3c24:	94 0a 90    	mov.w     [w4+18], w5
    3c26:	24 7b 23    	mov.w     #0x37b2, w4
    3c28:	84 8f 52    	sub.w     w5, w4, [w15]
    3c2a:	0c 00 3a    	bra       NZ, 0x3c44 <.L25>

00003c2c <.LSM93>:
        bitflip(self->port, self->bit);
    3c2c:	1e 02 78    	mov.w     [w14], w4
    3c2e:	14 02 78    	mov.w     [w4], w4
    3c30:	9e 02 78    	mov.w     [w14], w5
    3c32:	95 02 78    	mov.w     [w5], w5
    3c34:	15 03 78    	mov.w     [w5], w6
    3c36:	9e 02 78    	mov.w     [w14], w5
    3c38:	e5 42 90    	mov.b     [w5+6], w5
    3c3a:	85 82 fb    	ze        w5, w5
    3c3c:	17 00 20    	mov.w     #0x1, w7
    3c3e:	85 3a dd    	sl.w      w7, w5, w5
    3c40:	85 02 6b    	xor.w     w6, w5, w5
    3c42:	05 0a 78    	mov.w     w5, [w4]

00003c44 <.L25>:
}
    3c44:	00 80 fa    	ulnk      
    3c46:	00 00 06    	return    

00003c48 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    3c48:	04 00 fa    	lnk       #0x4
    3c4a:	00 0f 78    	mov.w     w0, [w14]
    3c4c:	11 07 98    	mov.w     w1, [w14+2]

00003c4e <.LSM96>:
    if (self->write)
    3c4e:	1e 02 78    	mov.w     [w14], w4
    3c50:	14 0a 90    	mov.w     [w4+18], w4
    3c52:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3c54:	05 00 32    	bra       Z, 0x3c60 <.L27>

00003c56 <.LSM97>:
        self->write(self, val);
    3c56:	1e 02 78    	mov.w     [w14], w4
    3c58:	14 0a 90    	mov.w     [w4+18], w4
    3c5a:	9e 00 90    	mov.w     [w14+2], w1
    3c5c:	1e 00 78    	mov.w     [w14], w0
    3c5e:	04 00 01    	call      w4

00003c60 <.L27>:
}
    3c60:	00 80 fa    	ulnk      
    3c62:	00 00 06    	return    

00003c64 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    3c64:	02 00 fa    	lnk       #0x2
    3c66:	00 0f 78    	mov.w     w0, [w14]

00003c68 <.LSM100>:
    if (self->read)
    3c68:	1e 02 78    	mov.w     [w14], w4
    3c6a:	24 0a 90    	mov.w     [w4+20], w4
    3c6c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3c6e:	06 00 32    	bra       Z, 0x3c7c <.L30>

00003c70 <.LSM101>:
        return self->read(self);
    3c70:	1e 02 78    	mov.w     [w14], w4
    3c72:	24 0a 90    	mov.w     [w4+20], w4
    3c74:	1e 00 78    	mov.w     [w14], w0
    3c76:	04 00 01    	call      w4
    3c78:	00 02 78    	mov.w     w0, w4
    3c7a:	01 00 37    	bra       0x3c7e <.L31>

00003c7c <.L30>:
    else
        return 0xFFFF;
    3c7c:	00 82 eb    	setm.w    w4

00003c7e <.L31>:
}
    3c7e:	04 00 78    	mov.w     w4, w0
    3c80:	00 80 fa    	ulnk      
    3c82:	00 00 06    	return    

00003c84 <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    3c84:	00 00 fa    	lnk       #0x0

00003c86 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    3c86:	74 c0 b3    	mov.b     #0x7, w4
    3c88:	63 4e 20    	mov.w     #0x4e6, w3
    3c8a:	82 2d 20    	mov.w     #0x2d8, w2
    3c8c:	a1 2d 20    	mov.w     #0x2da, w1
    3c8e:	60 b7 20    	mov.w     #0xb76, w0
    3c90:	20 00 07    	rcall     0x3cd2 <_led_init>

00003c92 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3c92:	00 42 eb    	clr.b     w4
    3c94:	a3 4e 20    	mov.w     #0x4ea, w3
    3c96:	82 2e 20    	mov.w     #0x2e8, w2
    3c98:	a1 2e 20    	mov.w     #0x2ea, w1
    3c9a:	e0 b7 20    	mov.w     #0xb7e, w0
    3c9c:	1a 00 07    	rcall     0x3cd2 <_led_init>

00003c9e <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    3c9e:	14 c0 b3    	mov.b     #0x1, w4
    3ca0:	a3 4e 20    	mov.w     #0x4ea, w3
    3ca2:	82 2e 20    	mov.w     #0x2e8, w2
    3ca4:	a1 2e 20    	mov.w     #0x2ea, w1
    3ca6:	60 b8 20    	mov.w     #0xb86, w0
    3ca8:	14 00 07    	rcall     0x3cd2 <_led_init>

00003caa <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3caa:	f4 c0 b3    	mov.b     #0xf, w4
    3cac:	43 4e 20    	mov.w     #0x4e4, w3
    3cae:	02 2d 20    	mov.w     #0x2d0, w2
    3cb0:	21 2d 20    	mov.w     #0x2d2, w1
    3cb2:	e0 b8 20    	mov.w     #0xb8e, w0
    3cb4:	ae 00 07    	rcall     0x3e12 <_sw_init>

00003cb6 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    3cb6:	c4 c0 b3    	mov.b     #0xc, w4
    3cb8:	43 4e 20    	mov.w     #0x4e4, w3
    3cba:	02 2d 20    	mov.w     #0x2d0, w2
    3cbc:	21 2d 20    	mov.w     #0x2d2, w1
    3cbe:	60 b9 20    	mov.w     #0xb96, w0
    3cc0:	a8 00 07    	rcall     0x3e12 <_sw_init>

00003cc2 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    3cc2:	c4 c0 b3    	mov.b     #0xc, w4
    3cc4:	23 4e 20    	mov.w     #0x4e2, w3
    3cc6:	82 2c 20    	mov.w     #0x2c8, w2
    3cc8:	a1 2c 20    	mov.w     #0x2ca, w1
    3cca:	e0 b9 20    	mov.w     #0xb9e, w0
    3ccc:	a2 00 07    	rcall     0x3e12 <_sw_init>

00003cce <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    3cce:	00 80 fa    	ulnk      
    3cd0:	00 00 06    	return    

00003cd2 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    3cd2:	0a 00 fa    	lnk       #0xa
    3cd4:	00 0f 78    	mov.w     w0, [w14]
    3cd6:	11 07 98    	mov.w     w1, [w14+2]
    3cd8:	22 07 98    	mov.w     w2, [w14+4]
    3cda:	33 07 98    	mov.w     w3, [w14+6]
    3cdc:	04 4f 98    	mov.b     w4, [w14+8]

00003cde <.LSM9>:
    self->port = port;
    3cde:	1e 02 78    	mov.w     [w14], w4
    3ce0:	9e 02 90    	mov.w     [w14+2], w5
    3ce2:	05 0a 78    	mov.w     w5, [w4]

00003ce4 <.LSM10>:
    self->tris = tris;
    3ce4:	1e 02 78    	mov.w     [w14], w4
    3ce6:	ae 02 90    	mov.w     [w14+4], w5
    3ce8:	15 02 98    	mov.w     w5, [w4+2]

00003cea <.LSM11>:
    self->ans = ans;
    3cea:	1e 02 78    	mov.w     [w14], w4
    3cec:	be 02 90    	mov.w     [w14+6], w5
    3cee:	25 02 98    	mov.w     w5, [w4+4]

00003cf0 <.LSM12>:
    self->bit = bit;
    3cf0:	1e 02 78    	mov.w     [w14], w4
    3cf2:	8e 4a 90    	mov.b     [w14+8], w5
    3cf4:	65 42 98    	mov.b     w5, [w4+6]

00003cf6 <.LSM13>:

    bitclear(self->ans, self->bit);
    3cf6:	1e 02 78    	mov.w     [w14], w4
    3cf8:	24 02 90    	mov.w     [w4+4], w4
    3cfa:	9e 02 78    	mov.w     [w14], w5
    3cfc:	a5 02 90    	mov.w     [w5+4], w5
    3cfe:	15 03 78    	mov.w     [w5], w6
    3d00:	9e 02 78    	mov.w     [w14], w5
    3d02:	e5 42 90    	mov.b     [w5+6], w5
    3d04:	85 82 fb    	ze        w5, w5
    3d06:	17 00 20    	mov.w     #0x1, w7
    3d08:	85 3a dd    	sl.w      w7, w5, w5
    3d0a:	85 82 ea    	com.w     w5, w5
    3d0c:	85 02 63    	and.w     w6, w5, w5
    3d0e:	05 0a 78    	mov.w     w5, [w4]

00003d10 <.LSM14>:
    bitclear(self->port, self->bit);
    3d10:	1e 02 78    	mov.w     [w14], w4
    3d12:	14 02 78    	mov.w     [w4], w4
    3d14:	9e 02 78    	mov.w     [w14], w5
    3d16:	95 02 78    	mov.w     [w5], w5
    3d18:	15 03 78    	mov.w     [w5], w6
    3d1a:	9e 02 78    	mov.w     [w14], w5
    3d1c:	e5 42 90    	mov.b     [w5+6], w5
    3d1e:	85 82 fb    	ze        w5, w5
    3d20:	17 00 20    	mov.w     #0x1, w7
    3d22:	85 3a dd    	sl.w      w7, w5, w5
    3d24:	85 82 ea    	com.w     w5, w5
    3d26:	85 02 63    	and.w     w6, w5, w5
    3d28:	05 0a 78    	mov.w     w5, [w4]

00003d2a <.LSM15>:
    bitclear(self->tris, self->bit);
    3d2a:	1e 02 78    	mov.w     [w14], w4
    3d2c:	14 02 90    	mov.w     [w4+2], w4
    3d2e:	9e 02 78    	mov.w     [w14], w5
    3d30:	95 02 90    	mov.w     [w5+2], w5
    3d32:	15 03 78    	mov.w     [w5], w6
    3d34:	9e 02 78    	mov.w     [w14], w5
    3d36:	e5 42 90    	mov.b     [w5+6], w5
    3d38:	85 82 fb    	ze        w5, w5
    3d3a:	17 00 20    	mov.w     #0x1, w7
    3d3c:	85 3a dd    	sl.w      w7, w5, w5
    3d3e:	85 82 ea    	com.w     w5, w5
    3d40:	85 02 63    	and.w     w6, w5, w5
    3d42:	05 0a 78    	mov.w     w5, [w4]

00003d44 <.LSM16>:
}
    3d44:	00 80 fa    	ulnk      
    3d46:	00 00 06    	return    

00003d48 <_led_on>:

void led_on(_LED *self) {
    3d48:	02 00 fa    	lnk       #0x2
    3d4a:	00 0f 78    	mov.w     w0, [w14]

00003d4c <.LSM18>:
    bitset(self->port, self->bit);
    3d4c:	1e 02 78    	mov.w     [w14], w4
    3d4e:	14 02 78    	mov.w     [w4], w4
    3d50:	9e 02 78    	mov.w     [w14], w5
    3d52:	95 02 78    	mov.w     [w5], w5
    3d54:	15 03 78    	mov.w     [w5], w6
    3d56:	9e 02 78    	mov.w     [w14], w5
    3d58:	e5 42 90    	mov.b     [w5+6], w5
    3d5a:	85 82 fb    	ze        w5, w5
    3d5c:	17 00 20    	mov.w     #0x1, w7
    3d5e:	85 3a dd    	sl.w      w7, w5, w5
    3d60:	86 82 72    	ior.w     w5, w6, w5
    3d62:	05 0a 78    	mov.w     w5, [w4]

00003d64 <.LSM19>:
}
    3d64:	00 80 fa    	ulnk      
    3d66:	00 00 06    	return    

00003d68 <_led_off>:

void led_off(_LED *self) {
    3d68:	02 00 fa    	lnk       #0x2
    3d6a:	00 0f 78    	mov.w     w0, [w14]

00003d6c <.LSM21>:
    bitclear(self->port, self->bit);
    3d6c:	1e 02 78    	mov.w     [w14], w4
    3d6e:	14 02 78    	mov.w     [w4], w4
    3d70:	9e 02 78    	mov.w     [w14], w5
    3d72:	95 02 78    	mov.w     [w5], w5
    3d74:	15 03 78    	mov.w     [w5], w6
    3d76:	9e 02 78    	mov.w     [w14], w5
    3d78:	e5 42 90    	mov.b     [w5+6], w5
    3d7a:	85 82 fb    	ze        w5, w5
    3d7c:	17 00 20    	mov.w     #0x1, w7
    3d7e:	85 3a dd    	sl.w      w7, w5, w5
    3d80:	85 82 ea    	com.w     w5, w5
    3d82:	85 02 63    	and.w     w6, w5, w5
    3d84:	05 0a 78    	mov.w     w5, [w4]

00003d86 <.LSM22>:
}
    3d86:	00 80 fa    	ulnk      
    3d88:	00 00 06    	return    

00003d8a <_led_toggle>:

void led_toggle(_LED *self) {
    3d8a:	02 00 fa    	lnk       #0x2
    3d8c:	00 0f 78    	mov.w     w0, [w14]

00003d8e <.LSM24>:
    bitflip(self->port, self->bit);
    3d8e:	1e 02 78    	mov.w     [w14], w4
    3d90:	14 02 78    	mov.w     [w4], w4
    3d92:	9e 02 78    	mov.w     [w14], w5
    3d94:	95 02 78    	mov.w     [w5], w5
    3d96:	15 03 78    	mov.w     [w5], w6
    3d98:	9e 02 78    	mov.w     [w14], w5
    3d9a:	e5 42 90    	mov.b     [w5+6], w5
    3d9c:	85 82 fb    	ze        w5, w5
    3d9e:	17 00 20    	mov.w     #0x1, w7
    3da0:	85 3a dd    	sl.w      w7, w5, w5
    3da2:	85 02 6b    	xor.w     w6, w5, w5
    3da4:	05 0a 78    	mov.w     w5, [w4]

00003da6 <.LSM25>:
}
    3da6:	00 80 fa    	ulnk      
    3da8:	00 00 06    	return    

00003daa <_led_write>:

void led_write(_LED *self, uint16_t val) {
    3daa:	04 00 fa    	lnk       #0x4
    3dac:	00 0f 78    	mov.w     w0, [w14]
    3dae:	11 07 98    	mov.w     w1, [w14+2]

00003db0 <.LSM27>:
    if (val)
    3db0:	1e 02 90    	mov.w     [w14+2], w4
    3db2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3db4:	0d 00 32    	bra       Z, 0x3dd0 <.L7>

00003db6 <.LSM28>:
        bitset(self->port, self->bit);
    3db6:	1e 02 78    	mov.w     [w14], w4
    3db8:	14 02 78    	mov.w     [w4], w4
    3dba:	9e 02 78    	mov.w     [w14], w5
    3dbc:	95 02 78    	mov.w     [w5], w5
    3dbe:	15 03 78    	mov.w     [w5], w6
    3dc0:	9e 02 78    	mov.w     [w14], w5
    3dc2:	e5 42 90    	mov.b     [w5+6], w5
    3dc4:	85 82 fb    	ze        w5, w5
    3dc6:	17 00 20    	mov.w     #0x1, w7
    3dc8:	85 3a dd    	sl.w      w7, w5, w5
    3dca:	86 82 72    	ior.w     w5, w6, w5
    3dcc:	05 0a 78    	mov.w     w5, [w4]
    3dce:	0d 00 37    	bra       0x3dea <.L6>

00003dd0 <.L7>:
    else
        bitclear(self->port, self->bit);
    3dd0:	1e 02 78    	mov.w     [w14], w4
    3dd2:	14 02 78    	mov.w     [w4], w4
    3dd4:	9e 02 78    	mov.w     [w14], w5
    3dd6:	95 02 78    	mov.w     [w5], w5
    3dd8:	15 03 78    	mov.w     [w5], w6
    3dda:	9e 02 78    	mov.w     [w14], w5
    3ddc:	e5 42 90    	mov.b     [w5+6], w5
    3dde:	85 82 fb    	ze        w5, w5
    3de0:	17 00 20    	mov.w     #0x1, w7
    3de2:	85 3a dd    	sl.w      w7, w5, w5
    3de4:	85 82 ea    	com.w     w5, w5
    3de6:	85 02 63    	and.w     w6, w5, w5
    3de8:	05 0a 78    	mov.w     w5, [w4]

00003dea <.L6>:
}
    3dea:	00 80 fa    	ulnk      
    3dec:	00 00 06    	return    

00003dee <_led_read>:

uint16_t led_read(_LED *self) {
    3dee:	02 00 fa    	lnk       #0x2
    3df0:	00 0f 78    	mov.w     w0, [w14]

00003df2 <.LSM32>:
    return bitread(self->port, self->bit);
    3df2:	1e 02 78    	mov.w     [w14], w4
    3df4:	14 02 78    	mov.w     [w4], w4
    3df6:	94 02 78    	mov.w     [w4], w5
    3df8:	1e 02 78    	mov.w     [w14], w4
    3dfa:	64 42 90    	mov.b     [w4+6], w4
    3dfc:	04 82 fb    	ze        w4, w4
    3dfe:	16 00 20    	mov.w     #0x1, w6
    3e00:	04 32 dd    	sl.w      w6, w4, w4
    3e02:	04 82 62    	and.w     w5, w4, w4
    3e04:	04 f0 a7    	btsc.w    w4, #0xf
    3e06:	04 02 ea    	neg.w     w4, w4
    3e08:	04 02 ea    	neg.w     w4, w4
    3e0a:	4f 22 de    	lsr.w     w4, #0xf, w4

00003e0c <.LSM33>:
}
    3e0c:	04 00 78    	mov.w     w4, w0
    3e0e:	00 80 fa    	ulnk      
    3e10:	00 00 06    	return    

00003e12 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    3e12:	0a 00 fa    	lnk       #0xa
    3e14:	00 0f 78    	mov.w     w0, [w14]
    3e16:	11 07 98    	mov.w     w1, [w14+2]
    3e18:	22 07 98    	mov.w     w2, [w14+4]
    3e1a:	33 07 98    	mov.w     w3, [w14+6]
    3e1c:	04 4f 98    	mov.b     w4, [w14+8]

00003e1e <.LSM35>:
    self->port = port;
    3e1e:	1e 02 78    	mov.w     [w14], w4
    3e20:	9e 02 90    	mov.w     [w14+2], w5
    3e22:	05 0a 78    	mov.w     w5, [w4]

00003e24 <.LSM36>:
    self->tris = tris;
    3e24:	1e 02 78    	mov.w     [w14], w4
    3e26:	ae 02 90    	mov.w     [w14+4], w5
    3e28:	15 02 98    	mov.w     w5, [w4+2]

00003e2a <.LSM37>:
    self->ans = ans;
    3e2a:	1e 02 78    	mov.w     [w14], w4
    3e2c:	be 02 90    	mov.w     [w14+6], w5
    3e2e:	25 02 98    	mov.w     w5, [w4+4]

00003e30 <.LSM38>:
    self->bit = bit;
    3e30:	1e 02 78    	mov.w     [w14], w4
    3e32:	8e 4a 90    	mov.b     [w14+8], w5
    3e34:	65 42 98    	mov.b     w5, [w4+6]

00003e36 <.LSM39>:

    bitclear(self->ans, self->bit);
    3e36:	1e 02 78    	mov.w     [w14], w4
    3e38:	24 02 90    	mov.w     [w4+4], w4
    3e3a:	9e 02 78    	mov.w     [w14], w5
    3e3c:	a5 02 90    	mov.w     [w5+4], w5
    3e3e:	15 03 78    	mov.w     [w5], w6
    3e40:	9e 02 78    	mov.w     [w14], w5
    3e42:	e5 42 90    	mov.b     [w5+6], w5
    3e44:	85 82 fb    	ze        w5, w5
    3e46:	17 00 20    	mov.w     #0x1, w7
    3e48:	85 3a dd    	sl.w      w7, w5, w5
    3e4a:	85 82 ea    	com.w     w5, w5
    3e4c:	85 02 63    	and.w     w6, w5, w5
    3e4e:	05 0a 78    	mov.w     w5, [w4]

00003e50 <.LSM40>:
    bitset(self->tris, self->bit);
    3e50:	1e 02 78    	mov.w     [w14], w4
    3e52:	14 02 90    	mov.w     [w4+2], w4
    3e54:	9e 02 78    	mov.w     [w14], w5
    3e56:	95 02 90    	mov.w     [w5+2], w5
    3e58:	15 03 78    	mov.w     [w5], w6
    3e5a:	9e 02 78    	mov.w     [w14], w5
    3e5c:	e5 42 90    	mov.b     [w5+6], w5
    3e5e:	85 82 fb    	ze        w5, w5
    3e60:	17 00 20    	mov.w     #0x1, w7
    3e62:	85 3a dd    	sl.w      w7, w5, w5
    3e64:	86 82 72    	ior.w     w5, w6, w5
    3e66:	05 0a 78    	mov.w     w5, [w4]

00003e68 <.LSM41>:
}
    3e68:	00 80 fa    	ulnk      
    3e6a:	00 00 06    	return    

00003e6c <_sw_read>:

uint16_t sw_read(_SW *self) {
    3e6c:	02 00 fa    	lnk       #0x2
    3e6e:	00 0f 78    	mov.w     w0, [w14]

00003e70 <.LSM43>:
    return bitread(self->port, self->bit);
    3e70:	1e 02 78    	mov.w     [w14], w4
    3e72:	14 02 78    	mov.w     [w4], w4
    3e74:	94 02 78    	mov.w     [w4], w5
    3e76:	1e 02 78    	mov.w     [w14], w4
    3e78:	64 42 90    	mov.b     [w4+6], w4
    3e7a:	04 82 fb    	ze        w4, w4
    3e7c:	16 00 20    	mov.w     #0x1, w6
    3e7e:	04 32 dd    	sl.w      w6, w4, w4
    3e80:	04 82 62    	and.w     w5, w4, w4
    3e82:	04 f0 a7    	btsc.w    w4, #0xf
    3e84:	04 02 ea    	neg.w     w4, w4
    3e86:	04 02 ea    	neg.w     w4, w4
    3e88:	4f 22 de    	lsr.w     w4, #0xf, w4

00003e8a <.LSM44>:
}
    3e8a:	04 00 78    	mov.w     w4, w0
    3e8c:	00 80 fa    	ulnk      
    3e8e:	00 00 06    	return    

00003e90 <_VendorRequests>:
//            USB_error_flags |= 0x01;                    // set Request Error Flag
//    }
//}

void VendorRequests(void) {
    3e90:	02 00 fa    	lnk       #0x2

00003e92 <.LSM1>:
    WORD temp;

    switch (USB_setup.bRequest) {
    3e92:	c4 b5 20    	mov.w     #0xb5c, w4
    3e94:	14 42 90    	mov.b     [w4+1], w4
    3e96:	04 82 fb    	ze        w4, w4
    3e98:	cf a2 de    	asr.w     w4, #0xf, w5
    3e9a:	36 00 20    	mov.w     #0x3, w6
    3e9c:	07 00 20    	mov.w     #0x0, w7
    3e9e:	86 0f 52    	sub.w     w4, w6, [w15]
    3ea0:	87 8f 5a    	subb.w    w5, w7, [w15]
    3ea2:	42 00 3e    	bra       GTU, 0x3f28 <.L2>
    3ea4:	04 60 01    	bra       w4
    3ea6:	03 00 37    	bra       0x3eae <.L3>
    3ea8:	0d 00 37    	bra       0x3ec4 <.L4>
    3eaa:	1b 00 37    	bra       0x3ee2 <.L5>
    3eac:	2c 00 37    	bra       0x3f06

00003eae <.L3>:
        case HELLO:
            printf("Hello World!\n");
    3eae:	a0 00 2a    	mov.w     #0xa00a, w0
    3eb0:	e1 ea 07    	rcall     0x1474 <_puts>

00003eb2 <.LSM3>:
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    3eb2:	00 42 eb    	clr.b     w4
    3eb4:	04 43 78    	mov.b     w4, w6
    3eb6:	45 c0 20    	mov.w     #0xc04, w5
    3eb8:	86 4a 78    	mov.b     w6, [w5]

00003eba <.LSM4>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    3eba:	84 cc b3    	mov.b     #0xc8, w4
    3ebc:	04 43 78    	mov.b     w4, w6
    3ebe:	55 c0 20    	mov.w     #0xc05, w5
    3ec0:	86 4a 78    	mov.b     w6, [w5]

00003ec2 <.LSM5>:
            break;
    3ec2:	38 00 37    	bra       0x3f34 <.L1>

00003ec4 <.L4>:
        case SET_VALS:
            val1 = USB_setup.wValue.w;
    3ec4:	c4 b5 20    	mov.w     #0xb5c, w4
    3ec6:	14 02 90    	mov.w     [w4+2], w4
    3ec8:	34 5d 88    	mov.w     w4, 0xba6

00003eca <.LSM7>:
            val2 = USB_setup.wIndex.w;
    3eca:	c4 b5 20    	mov.w     #0xb5c, w4
    3ecc:	24 02 90    	mov.w     [w4+4], w4
    3ece:	44 5d 88    	mov.w     w4, 0xba8

00003ed0 <.LSM8>:
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    3ed0:	00 42 eb    	clr.b     w4
    3ed2:	04 43 78    	mov.b     w4, w6
    3ed4:	45 c0 20    	mov.w     #0xc04, w5
    3ed6:	86 4a 78    	mov.b     w6, [w5]

00003ed8 <.LSM9>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    3ed8:	84 cc b3    	mov.b     #0xc8, w4
    3eda:	04 43 78    	mov.b     w4, w6
    3edc:	55 c0 20    	mov.w     #0xc05, w5
    3ede:	86 4a 78    	mov.b     w6, [w5]

00003ee0 <.LSM10>:
            break;
    3ee0:	29 00 37    	bra       0x3f34 <.L1>

00003ee2 <.L5>:
        case GET_VALS:
            temp.w = val1;
    3ee2:	34 5d 80    	mov.w     0xba6, w4
    3ee4:	04 0f 78    	mov.w     w4, [w14]

00003ee6 <.LSM12>:
            BD[EP0IN].address[0] = temp.b[0];
    3ee6:	34 60 80    	mov.w     0xc06, w4
    3ee8:	9e 42 78    	mov.b     [w14], w5
    3eea:	05 4a 78    	mov.b     w5, [w4]

00003eec <.LSM13>:
            BD[EP0IN].address[1] = temp.b[1];
    3eec:	34 60 80    	mov.w     0xc06, w4
    3eee:	04 02 e8    	inc.w     w4, w4
    3ef0:	9e 42 90    	mov.b     [w14+1], w5
    3ef2:	05 4a 78    	mov.b     w5, [w4]

00003ef4 <.LSM14>:
            //temp.w = val2;
            //BD[EP0IN].address[2] = temp.b[0];
            //BD[EP0IN].address[3] = temp.b[1];
            BD[EP0IN].bytecount = 2;    // set EP0 IN byte count to 4
    3ef4:	24 c0 b3    	mov.b     #0x2, w4
    3ef6:	04 43 78    	mov.b     w4, w6
    3ef8:	45 c0 20    	mov.w     #0xc04, w5
    3efa:	86 4a 78    	mov.b     w6, [w5]

00003efc <.LSM15>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    3efc:	84 cc b3    	mov.b     #0xc8, w4
    3efe:	04 43 78    	mov.b     w4, w6
    3f00:	55 c0 20    	mov.w     #0xc05, w5
    3f02:	86 4a 78    	mov.b     w6, [w5]

00003f04 <.LSM16>:
            break;            
    3f04:	17 00 37    	bra       0x3f34 <.L1>

00003f06 <.L6>:
        case PRINT_VALS:
            printf("val1 = %u, val2 = %u\n", val1, val2);
    3f06:	45 5d 80    	mov.w     0xba8, w5
    3f08:	34 5d 80    	mov.w     0xba6, w4
    3f0a:	85 1f 78    	mov.w     w5, [w15++]
    3f0c:	84 1f 78    	mov.w     w4, [w15++]
    3f0e:	74 01 2a    	mov.w     #0xa017, w4
    3f10:	84 1f 78    	mov.w     w4, [w15++]
    3f12:	ba ea 07    	rcall     0x1488 <__printf_cdnopuxX>
    3f14:	e6 87 57    	sub.w     w15, #0x6, w15

00003f16 <.LSM18>:
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0
    3f16:	00 42 eb    	clr.b     w4
    3f18:	04 43 78    	mov.b     w4, w6
    3f1a:	45 c0 20    	mov.w     #0xc04, w5
    3f1c:	86 4a 78    	mov.b     w6, [w5]

00003f1e <.LSM19>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    3f1e:	84 cc b3    	mov.b     #0xc8, w4
    3f20:	04 43 78    	mov.b     w4, w6
    3f22:	55 c0 20    	mov.w     #0xc05, w5
    3f24:	86 4a 78    	mov.b     w6, [w5]

00003f26 <.LSM20>:
            break;
    3f26:	06 00 37    	bra       0x3f34 <.L1>

00003f28 <.L2>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    3f28:	04 b7 20    	mov.w     #0xb70, w4
    3f2a:	14 42 78    	mov.b     [w4], w4
    3f2c:	04 04 a0    	bset.b    w4, #0x0
    3f2e:	04 43 78    	mov.b     w4, w6
    3f30:	05 b7 20    	mov.w     #0xb70, w5
    3f32:	86 4a 78    	mov.b     w6, [w5]

00003f34 <.L1>:
    }
}
    3f34:	00 80 fa    	ulnk      
    3f36:	00 00 06    	return    

00003f38 <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    3f38:	00 00 fa    	lnk       #0x0

00003f3a <.LSM24>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    3f3a:	04 b7 20    	mov.w     #0xb70, w4
    3f3c:	14 42 78    	mov.b     [w4], w4
    3f3e:	04 04 a0    	bset.b    w4, #0x0
    3f40:	04 43 78    	mov.b     w4, w6
    3f42:	05 b7 20    	mov.w     #0xb70, w5
    3f44:	86 4a 78    	mov.b     w6, [w5]

00003f46 <.LSM25>:
    }
}
    3f46:	00 80 fa    	ulnk      
    3f48:	00 00 06    	return    

00003f4a <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    3f4a:	00 00 fa    	lnk       #0x0

00003f4c <.LSM27>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    3f4c:	04 b7 20    	mov.w     #0xb70, w4
    3f4e:	14 42 78    	mov.b     [w4], w4
    3f50:	04 04 a0    	bset.b    w4, #0x0
    3f52:	04 43 78    	mov.b     w4, w6
    3f54:	05 b7 20    	mov.w     #0xb70, w5
    3f56:	86 4a 78    	mov.b     w6, [w5]

00003f58 <.LSM28>:
    }
}
    3f58:	00 80 fa    	ulnk      
    3f5a:	00 00 06    	return    

00003f5c <_main>:

int16_t main(void) {
    3f5c:	00 00 fa    	lnk       #0x0

00003f5e <.LSM30>:
    init_clock();
    3f5e:	04 10 20    	mov.w     #0x100, w4
    3f60:	24 3a 88    	mov.w     w4, 0x744

00003f62 <.LSM31>:
    init_uart();
    3f62:	25 f2 07    	rcall     0x23ae <_init_uart>

00003f64 <.LSM32>:
    init_ui();
    3f64:	8f fe 07    	rcall     0x3c84 <_init_ui>

00003f66 <.LSM33>:

    val1 = 0;
    3f66:	00 02 eb    	clr.w     w4
    3f68:	34 5d 88    	mov.w     w4, 0xba6

00003f6a <.LSM34>:
    val2 = 0;
    3f6a:	00 02 eb    	clr.w     w4
    3f6c:	44 5d 88    	mov.w     w4, 0xba8

00003f6e <.LSM35>:

    //led_on()
    InitUSB();                              // initialize the USB registers and serial interface engine
    3f6e:	3a f7 07    	rcall     0x2de4 <_InitUSB>

00003f70 <.LSM36>:
    while (USB_USWSTAT!=CONFIG_STATE) {     // while the peripheral is not configured...
    3f70:	03 00 37    	bra       0x3f78 <.L12>

00003f72 <.L13>:
        ServiceUSB();
    3f72:	88 f7 07    	rcall     0x2e84 <_ServiceUSB>

00003f74 <.LSM38>:
    led_on(&led2);
    3f74:	e0 b7 20    	mov.w     #0xb7e, w0
    3f76:	e8 fe 07    	rcall     0x3d48 <_led_on>

00003f78 <.L12>:
    3f78:	44 b7 20    	mov.w     #0xb74, w4
    3f7a:	14 42 78    	mov.b     [w4], w4
    3f7c:	e3 4f 52    	sub.b     w4, #0x3, [w15]
    3f7e:	f9 ff 3a    	bra       NZ, 0x3f72 <.L13>

00003f80 <.L14>:
                           // ...service USB requests
    }
    while (1) {
        ServiceUSB();                       // service any pending USB requests
    3f80:	81 f7 07    	rcall     0x2e84 <_ServiceUSB>

00003f82 <.LBE3>:
    }
    3f82:	fe ff 37    	bra       0x3f80
Disassembly of section .dinit:

00003f84 <.dinit>:
    3f84:	a6 0b 00    	nop       
    3f86:	04 00 00    	nop       
    3f88:	80 00 00    	nop       
    3f8a:	00 0c 00    	nop       
    3f8c:	80 00 00    	nop       
    3f8e:	80 00 00    	nop       
    3f90:	d8 0a 00    	nop       
    3f92:	9e 00 00    	nop       
    3f94:	80 00 00    	nop       
    3f96:	76 0b 00    	nop       
    3f98:	30 00 00    	nop       
    3f9a:	80 00 00    	nop       
    3f9c:	00 08 00    	nop       
    3f9e:	b8 01 00    	nop       
    3fa0:	80 00 00    	nop       
    3fa2:	b8 09 00    	nop       
    3fa4:	20 01 00    	nop       
    3fa6:	80 00 00    	nop       
    3fa8:	d4 0b 00    	nop       
    3faa:	24 00 00    	nop       
    3fac:	82 00 00    	nop       
    3fae:	fc 0b 00    	nop       
    3fb0:	00 fc 0b    	.pword 0x0bfc00
    3fb2:	09 00 00    	nop       
    3fb4:	00 02 00    	nop       
    3fb6:	fe 0b 00    	nop       
    3fb8:	00 fe 0b    	.pword 0x0bfe00
    3fba:	0e 02 01    	.pword 0x01020e
	...
    3fc2:	06 02 02    	call      0x206 <__DEFAULT_VECTOR-0xf06>
    3fc4:	00 00 00 
    3fc6:	f8 0b 00    	nop       
    3fc8:	02 00 00    	nop       
    3fca:	82 00 00    	nop       
    3fcc:	d4 0b 00    	nop       
    3fce:	fa 0b 00    	nop       
    3fd0:	02 00 00    	nop       
    3fd2:	80 00 00    	nop       
    3fd4:	fc 0b 00    	nop       
    3fd6:	02 00 00    	nop       
    3fd8:	80 00 00    	nop       
    3fda:	fe 0b 00    	nop       
    3fdc:	02 00 00    	nop       
    3fde:	80 00 00    	nop       
    3fe0:	aa 0b 00    	nop       
    3fe2:	2a 00 00    	nop       
    3fe4:	82 00 00    	nop       
    3fe6:	30 31 32    	bra       Z, 0xa248
    3fe8:	33 34 35    	bra       LT, 0xa850
    3fea:	36 37 38    	bra       NOV, 0xae58
    3fec:	39 41 42    	add.b     w4, [w9++], w2
    3fee:	43 44 45    	add.b     w10, [--w3], w8
    3ff0:	46 00 30    	bra       OV, 0x407e
    3ff2:	31 32 33    	bra       N, 0xa456
    3ff4:	34 35 36    	bra       LEU, 0xaa5e
    3ff6:	37 38 39    	bra       NC, 0xb066
    3ff8:	61 62 63    	and.b     w6, #0x1, [--w4]
    3ffa:	64 65 66    	and.b     w12, #0x4, [--w10]
    3ffc:	00 28 6e    	xor.w     w12, w0, [++w0]
    3ffe:	75 6c 6c    	xor.b     w8, #0x15, [++w8]
    4000:	29 00 00    	nop       
    4002:	80 0c 00    	nop       
    4004:	a0 00 00    	nop       
    4006:	82 00 00    	nop       
    4008:	01 00 00    	nop       
    400a:	00 00 00    	nop       
    400c:	00 00 0a    	.pword 0x0a0000
	...
    4012:	00 64 00    	nop       
	...
    4018:	e8 03 00    	nop       
    401a:	00 00 00    	nop       
    401c:	00 00 10    	subr.w    w0, w0, w0
    401e:	27 00 00    	nop       
    4020:	00 00 00    	nop       
    4022:	00 a0 86    	mov.w     0xd400, w0
    4024:	01 00 00    	nop       
    4026:	00 00 00    	nop       
    4028:	40 42 0f    	bra       SB, 0xc4aa
    402a:	00 00 00    	nop       
    402c:	00 00 80    	mov.w     0x0, w0
    402e:	96 98 00    	nop       
    4030:	00 00 00    	nop       
    4032:	00 00 e1    	cp.w      w0, w0
    4034:	f5 05 00    	nop       
    4036:	00 00 00    	nop       
    4038:	00 ca 9a    	mov.b     w0, [w4+328]
    403a:	3b 00 00    	nop       
    403c:	00 00 00    	nop       
    403e:	e4 0b 54    	sub.w     w8, #0x4, [w7]
    4040:	02 00 00    	nop       
    4042:	00 00 e8    	inc.w     w0, w0
    4044:	76 48 17    	subr.b    w14, #0x16, [w0]
    4046:	00 00 00    	nop       
    4048:	00 10 a5    	btst.c    w0, w2
    404a:	d4 e8 00    	nop       
    404c:	00 00 00    	nop       
    404e:	a0 72 4e    	.pword 0x4e72a0
    4050:	18 09 00    	nop       
    4052:	00 00 40    	add.w     w0, w0, w0
    4054:	7a 10 f3    	.pword 0xf3107a
    4056:	5a 00 00    	nop       
    4058:	00 80 c6    	mac       w6 * w7, B, [w8], w4, [w10], w4, w13
    405a:	a4 7e 8d    	mov.w     w4, 0xafd4
    405c:	03 00 00    	nop       
    405e:	00 c1 6f    	xor.b     w15, w0, w2
    4060:	f2 86 23    	mov.w     #0x386f, w2
    4062:	00 00 00    	nop       
    4064:	8a 5d 78    	mov.b     w10, [w11++]
    4066:	45 63 01    	.pword 0x016345
    4068:	00 00 64    	and.w     w8, w0, w0
    406a:	a7 b3 b6    	xor.w     0x13a7
    406c:	e0 0d 00    	nop       
    406e:	00 e8 89    	mov.w     w0, 0x3d00
    4070:	04 23 c7    	movsac    A, [w9+w12], w6, [w10]+=2, w4, w13
    4072:	8a 00 00    	nop       
    4074:	00 00 00    	nop       
Disassembly of section .isr:

00004076 <__DefaultInterrupt>:
    4076:	00 40 da    	.pword 0xda4000
    4078:	00 00 fe    	reset     
