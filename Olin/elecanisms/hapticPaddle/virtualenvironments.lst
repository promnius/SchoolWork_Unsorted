
virtualenvironments.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	0f e8 20    	mov.w     #0xe80, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	60 bc 24    	mov.w     #0x4bc6, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	60 49 02    	call      0x4960 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	60 09 20    	mov.w     #0x96, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	90 48 04    	goto      0x4890 <_Update_status>
    11e4:	00 00 00 
    11e6:	a0 48 04    	goto      0x48a0 <_printData>
    11e8:	00 00 00 
    11ea:	b4 42 04    	goto      0x42b4 <___digitalRead>
    11ec:	00 00 00 
    11ee:	70 42 04    	goto      0x4270 <___digitalWrite>
    11f0:	00 00 00 
    11f2:	d8 42 04    	goto      0x42d8 <___analogRead>
    11f4:	00 00 00 
    11f6:	aa 3d 04    	goto      0x3daa <___pwmWrite>
    11f8:	00 00 00 
    11fa:	78 3d 04    	goto      0x3d78 <___pwmRead>
    11fc:	00 00 00 
    11fe:	1c 3e 04    	goto      0x3e1c <___servoWrite>
    1200:	00 00 00 
    1202:	e6 3d 04    	goto      0x3de6 <___servoRead>
    1204:	00 00 00 
    1206:	cc 20 04    	goto      0x20cc <___putc_nobuffer>
    1208:	00 00 00 
    120a:	10 21 04    	goto      0x2110 <___putc_buffer>
    120c:	00 00 00 
    120e:	f0 20 04    	goto      0x20f0 <___getc_nobuffer>
    1210:	00 00 00 
    1212:	fe 21 04    	goto      0x21fe <___getc_buffer>
    1214:	00 00 00 

00001216 <___subsf3>:
    1216:	03 f0 a2    	btg.w     w3, #0xf

00001218 <___addsf3>:
    1218:	88 9f be    	mov.d     w8, [w15++]
    121a:	8a 9f be    	mov.d     w10, [w15++]
    121c:	8c 1f 78    	mov.w     w12, [w15++]
    121e:	f7 00 07    	rcall     0x140e <__funpack2>
    1220:	fe 00 33    	bra       N, 0x141e <__fPropagateNaN>
    1222:	64 50 e1    	cp.w      w10, #0x4
    1224:	4f 00 32    	bra       Z, 0x12c4 <aisinfinite>

00001226 <checkspecialb>:
    1226:	64 20 e1    	cp.w      w4, #0x4
    1228:	52 00 32    	bra       Z, 0x12ce <return2>
    122a:	03 82 6c    	xor.w     w9, w3, w4
    122c:	07 00 3b    	bra       NN, 0x123c <getsign>
    122e:	09 05 d0    	sl.w      w9, w10
    1230:	03 06 d0    	sl.w      w3, w12
    1232:	82 0f 54    	sub.w     w8, w2, [w15]
    1234:	0c 06 5d    	subb.w    w10, w12, w12
    1236:	02 00 39    	bra       NC, 0x123c <getsign>
    1238:	02 00 32    	bra       Z, 0x123e <gotsign>
    123a:	89 01 78    	mov.w     w9, w3

0000123c <getsign>:
    123c:	03 06 78    	mov.w     w3, w12

0000123e <gotsign>:
    123e:	85 82 55    	sub.w     w11, w5, w5
    1240:	04 00 3d    	bra       GE, 0x124a <expcanonical>
    1242:	00 03 fd    	exch      w0, w6
    1244:	81 03 fd    	exch      w1, w7
    1246:	85 02 ea    	neg.w     w5, w5
    1248:	8b 85 42    	add.w     w5, w11, w11

0000124a <expcanonical>:
    124a:	84 0f 72    	ior.w     w4, w4, [w15]
    124c:	02 00 3b    	bra       NN, 0x1252 <nonegate>
    124e:	60 00 10    	subr.w    w0, #0x0, w0
    1250:	e0 80 18    	subbr.w   w1, #0x0, w1

00001252 <nonegate>:
    1252:	60 11 b8    	mul.uu    w2, #0x0, w2
    1254:	00 05 eb    	clr.w     w10
    1256:	7a 28 e1    	cp.w      w5, #0x1a
    1258:	0a 00 39    	bra       NC, 0x126e <aligniter>
    125a:	06 00 78    	mov.w     w6, w0
    125c:	c7 5d dd    	sl.w      w11, #0x7, w11
    125e:	f7 07 b2    	and.w     #0x7f, w7
    1260:	87 80 75    	ior.w     w11, w7, w1
    1262:	2d 00 37    	bra       0x12be <signoff>

00001264 <align>:
    1264:	82 81 71    	ior.w     w3, w2, w3
    1266:	0a 01 78    	mov.w     w10, w2
    1268:	61 05 60    	and.w     w0, #0x1, w10
    126a:	81 80 d1    	asr.w     w1, w1
    126c:	00 80 d3    	rrc.w     w0, w0

0000126e <aligniter>:
    126e:	85 02 e9    	dec.w     w5, w5
    1270:	f9 ff 3b    	bra       NN, 0x1264 <align>

00001272 <aligned>:
    1272:	06 04 40    	add.w     w0, w6, w8
    1274:	87 84 48    	addc.w    w1, w7, w9
    1276:	02 00 3b    	bra       NN, 0x127c <normalizesum>
    1278:	60 04 14    	subr.w    w8, #0x0, w8
    127a:	e0 84 1c    	subbr.w   w9, #0x0, w9

0000127c <normalizesum>:
    127c:	09 88 a3    	btst.z    w9, #0x8
    127e:	07 00 32    	bra       Z, 0x128e <checknormal>
    1280:	8a 81 71    	ior.w     w3, w10, w3
    1282:	82 81 71    	ior.w     w3, w2, w3
    1284:	61 01 64    	and.w     w8, #0x1, w2
    1286:	89 04 d1    	lsr.w     w9, w9
    1288:	08 84 d3    	rrc.w     w8, w8
    128a:	8b 05 e8    	inc.w     w11, w11
    128c:	17 00 37    	bra       0x12bc <round>

0000128e <checknormal>:
    128e:	09 78 a3    	btst.z    w9, #0x7
    1290:	13 00 3a    	bra       NZ, 0x12b8 <discardguard>

00001292 <underflow>:
    1292:	0b 00 e0    	cp0.w     w11
    1294:	13 00 34    	bra       LE, 0x12bc <round>
    1296:	8b 05 e9    	dec.w     w11, w11
    1298:	08 04 44    	add.w     w8, w8, w8
    129a:	89 84 4c    	addc.w    w9, w9, w9
    129c:	0a 44 74    	ior.b     w8, w10, w8
    129e:	09 78 a3    	btst.z    w9, #0x7
    12a0:	0d 00 3a    	bra       NZ, 0x12bc <round>

000012a2 <normalizeloop>:
    12a2:	0b 00 e0    	cp0.w     w11
    12a4:	07 00 34    	bra       LE, 0x12b4 <normalizeexit>
    12a6:	8b 05 e9    	dec.w     w11, w11
    12a8:	08 04 44    	add.w     w8, w8, w8
    12aa:	89 84 4c    	addc.w    w9, w9, w9
    12ac:	01 00 3a    	bra       NZ, 0x12b0 <normalizetest>
    12ae:	0b 00 20    	mov.w     #0x0, w11

000012b0 <normalizetest>:
    12b0:	09 78 a3    	btst.z    w9, #0x7
    12b2:	f7 ff 32    	bra       Z, 0x12a2 <normalizeloop>

000012b4 <normalizeexit>:
    12b4:	00 01 eb    	clr.w     w2
    12b6:	02 00 37    	bra       0x12bc <round>

000012b8 <discardguard>:
    12b8:	82 81 71    	ior.w     w3, w2, w3
    12ba:	0a 01 78    	mov.w     w10, w2

000012bc <round>:
    12bc:	6d 00 07    	rcall     0x1398 <__fpack>

000012be <signoff>:
    12be:	0c f0 a7    	btsc.w    w12, #0xf
    12c0:	01 f0 a0    	bset.w    w1, #0xf
    12c2:	b6 00 37    	bra       0x1430 <__fbopExit>

000012c4 <aisinfinite>:
    12c4:	64 20 e1    	cp.w      w4, #0x4
    12c6:	02 00 3a    	bra       NZ, 0x12cc <return8>
    12c8:	83 8f 6c    	xor.w     w9, w3, [w15]
    12ca:	b6 00 33    	bra       N, 0x1438 <__fbopReturnNaN>

000012cc <return8>:
    12cc:	08 01 be    	mov.d     w8, w2

000012ce <return2>:
    12ce:	02 00 be    	mov.d     w2, w0
    12d0:	af 00 37    	bra       0x1430 <__fbopExit>

000012d2 <___divsf3>:
    12d2:	88 9f be    	mov.d     w8, [w15++]
    12d4:	8a 9f be    	mov.d     w10, [w15++]
    12d6:	8c 1f 78    	mov.w     w12, [w15++]
    12d8:	9a 00 07    	rcall     0x140e <__funpack2>
    12da:	a1 00 33    	bra       N, 0x141e <__fPropagateNaN>
    12dc:	03 86 6c    	xor.w     w9, w3, w12
    12de:	64 50 e1    	cp.w      w10, #0x4
    12e0:	2e 00 32    	bra       Z, 0x133e <aisinfinite>
    12e2:	64 20 e1    	cp.w      w4, #0x4
    12e4:	33 00 32    	bra       Z, 0x134c <returnZero>
    12e6:	61 50 e1    	cp.w      w10, #0x1
    12e8:	2f 00 32    	bra       Z, 0x1348 <aiszero>
    12ea:	61 20 e1    	cp.w      w4, #0x1
    12ec:	31 00 32    	bra       Z, 0x1350 <returnInf>

000012ee <finitenonzero>:
    12ee:	85 85 55    	sub.w     w11, w5, w11
    12f0:	eb 07 b0    	add.w     #0x7e, w11
    12f2:	09 00 20    	mov.w     #0x0, w9
    12f4:	08 04 20    	mov.w     #0x40, w8
    12f6:	05 00 37    	bra       0x1302 <diventry>

000012f8 <divnext>:
    12f8:	08 04 44    	add.w     w8, w8, w8
    12fa:	89 84 4c    	addc.w    w9, w9, w9
    12fc:	0a 00 31    	bra       C, 0x1312 <divdone>

000012fe <divloop>:
    12fe:	06 03 43    	add.w     w6, w6, w6
    1300:	87 83 4b    	addc.w    w7, w7, w7

00001302 <diventry>:
    1302:	00 01 53    	sub.w     w6, w0, w2
    1304:	81 81 5b    	subb.w    w7, w1, w3
    1306:	f8 ff 33    	bra       N, 0x12f8 <divnext>
    1308:	02 03 be    	mov.d     w2, w6
    130a:	08 00 a0    	bset.w    w8, #0x0
    130c:	08 04 44    	add.w     w8, w8, w8
    130e:	89 84 4c    	addc.w    w9, w9, w9
    1310:	f6 ff 39    	bra       NC, 0x12fe <divloop>

00001312 <divdone>:
    1312:	c6 39 dd    	sl.w      w7, #0x6, w3
    1314:	83 01 73    	ior.w     w6, w3, w3
    1316:	01 00 32    	bra       Z, 0x131a <stickyok>
    1318:	13 00 20    	mov.w     #0x1, w3

0000131a <stickyok>:
    131a:	89 04 d1    	lsr.w     w9, w9
    131c:	08 84 d3    	rrc.w     w8, w8
    131e:	09 98 a3    	btst.z    w9, #0x9
    1320:	05 00 32    	bra       Z, 0x132c <guardused>
    1322:	08 00 a7    	btsc.w    w8, #0x0
    1324:	03 00 a0    	bset.w    w3, #0x0
    1326:	89 04 d1    	lsr.w     w9, w9
    1328:	08 84 d3    	rrc.w     w8, w8
    132a:	8b 05 e8    	inc.w     w11, w11

0000132c <guardused>:
    132c:	89 04 d1    	lsr.w     w9, w9
    132e:	08 84 d3    	rrc.w     w8, w8
    1330:	00 01 eb    	clr.w     w2
    1332:	02 81 d2    	rlc.w     w2, w2
    1334:	31 00 07    	rcall     0x1398 <__fpack>

00001336 <return0>:
    1336:	01 f0 a1    	bclr.w    w1, #0xf
    1338:	0c f0 a7    	btsc.w    w12, #0xf
    133a:	01 f0 a0    	bset.w    w1, #0xf
    133c:	79 00 37    	bra       0x1430 <__fbopExit>

0000133e <aisinfinite>:
    133e:	64 20 e1    	cp.w      w4, #0x4
    1340:	7b 00 32    	bra       Z, 0x1438 <__fbopReturnNaN>

00001342 <return8>:
    1342:	08 01 be    	mov.d     w8, w2

00001344 <return2>:
    1344:	02 00 be    	mov.d     w2, w0
    1346:	f7 ff 37    	bra       0x1336 <return0>

00001348 <aiszero>:
    1348:	61 20 e1    	cp.w      w4, #0x1
    134a:	76 00 32    	bra       Z, 0x1438 <__fbopReturnNaN>

0000134c <returnZero>:
    134c:	60 00 b8    	mul.uu    w0, #0x0, w0
    134e:	f3 ff 37    	bra       0x1336 <return0>

00001350 <returnInf>:
    1350:	00 00 20    	mov.w     #0x0, w0
    1352:	01 f8 27    	mov.w     #0x7f80, w1
    1354:	f0 ff 37    	bra       0x1336 <return0>

00001356 <___eqsf2>:
    1356:	14 00 20    	mov.w     #0x1, w4
    1358:	b6 00 37    	bra       0x14c6 <__fcompare>

0000135a <___gesf2>:
    135a:	f4 ff 2f    	mov.w     #0xffff, w4
    135c:	b4 00 37    	bra       0x14c6 <__fcompare>

0000135e <___fixunssfsi>:
    135e:	00 01 be    	mov.d     w0, w2
    1360:	41 00 07    	rcall     0x13e4 <__funpack>
    1362:	04 70 a7    	btsc.w    w4, #0x7
    1364:	03 f0 a1    	bclr.w    w3, #0xf
    1366:	03 f8 a3    	btst.z    w3, #0xf
    1368:	13 00 3a    	bra       NZ, 0x1390 <returnzero>
    136a:	65 09 b1    	sub.w     #0x96, w5
    136c:	10 00 32    	bra       Z, 0x138e <exit>
    136e:	09 00 35    	bra       LT, 0x1382 <shiftright>
    1370:	69 28 e1    	cp.w      w5, #0x9
    1372:	02 00 35    	bra       LT, 0x1378 <shiftleft>
    1374:	01 00 28    	mov.w     #0x8000, w1
    1376:	00 00 05    	retlw.w   #0x0, w0

00001378 <shiftleft>:
    1378:	00 00 40    	add.w     w0, w0, w0
    137a:	81 80 48    	addc.w    w1, w1, w1
    137c:	85 02 e9    	dec.w     w5, w5
    137e:	fc ff 3a    	bra       NZ, 0x1378 <shiftleft>
    1380:	00 00 06    	return    

00001382 <shiftright>:
    1382:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1384:	05 00 35    	bra       LT, 0x1390 <returnzero>

00001386 <shiftrightloop>:
    1386:	81 00 d1    	lsr.w     w1, w1
    1388:	00 80 d3    	rrc.w     w0, w0
    138a:	85 02 e8    	inc.w     w5, w5
    138c:	fc ff 3a    	bra       NZ, 0x1386 <shiftrightloop>

0000138e <exit>:
    138e:	00 00 06    	return    

00001390 <returnzero>:
    1390:	80 00 eb    	clr.w     w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <___floatunsisf>:
    1394:	60 11 b8    	mul.uu    w2, #0x0, w2
    1396:	b2 00 37    	bra       0x14fc <___floatundisf>

00001398 <__fpack>:
    1398:	81 00 20    	mov.w     #0x8, w1
    139a:	61 80 55    	sub.w     w11, #0x1, w0
    139c:	0b 00 3d    	bra       GE, 0x13b4 <notsubnormal>
    139e:	0b 00 20    	mov.w     #0x0, w11
    13a0:	61 fe 2f    	mov.w     #0xffe6, w1
    13a2:	01 00 e1    	cp.w      w0, w1
    13a4:	1d 00 34    	bra       LE, 0x13e0 <zerosig>

000013a6 <subnormal>:
    13a6:	82 81 71    	ior.w     w3, w2, w3
    13a8:	61 01 64    	and.w     w8, #0x1, w2
    13aa:	89 04 d1    	lsr.w     w9, w9
    13ac:	08 84 d3    	rrc.w     w8, w8
    13ae:	00 00 e8    	inc.w     w0, w0
    13b0:	fa ff 3a    	bra       NZ, 0x13a6 <subnormal>
    13b2:	71 00 20    	mov.w     #0x7, w1

000013b4 <notsubnormal>:
    13b4:	61 00 64    	and.w     w8, #0x1, w0
    13b6:	03 00 70    	ior.w     w0, w3, w0
    13b8:	02 00 60    	and.w     w0, w2, w0
    13ba:	09 00 32    	bra       Z, 0x13ce <packupandgo>
    13bc:	61 04 44    	add.w     w8, #0x1, w8
    13be:	e0 84 4c    	addc.w    w9, #0x0, w9
    13c0:	09 88 a5    	btst.z    w9, w1
    13c2:	05 00 32    	bra       Z, 0x13ce <packupandgo>
    13c4:	8b 05 e8    	inc.w     w11, w11
    13c6:	68 08 e1    	cp.w      w1, #0x8
    13c8:	02 00 3a    	bra       NZ, 0x13ce <packupandgo>
    13ca:	89 04 d1    	lsr.w     w9, w9
    13cc:	08 84 d3    	rrc.w     w8, w8

000013ce <packupandgo>:
    13ce:	f2 0f 20    	mov.w     #0xff, w2
    13d0:	02 58 e1    	cp.w      w11, w2
    13d2:	05 00 3d    	bra       GE, 0x13de <overflow>
    13d4:	c7 5d dd    	sl.w      w11, #0x7, w11
    13d6:	f9 07 b2    	and.w     #0x7f, w9
    13d8:	89 80 75    	ior.w     w11, w9, w1
    13da:	08 00 78    	mov.w     w8, w0
    13dc:	00 00 06    	return    

000013de <overflow>:
    13de:	0b f8 27    	mov.w     #0x7f80, w11

000013e0 <zerosig>:
    13e0:	8b 00 78    	mov.w     w11, w1
    13e2:	00 00 05    	retlw.w   #0x0, w0

000013e4 <__funpack>:
    13e4:	c7 0a de    	lsr.w     w1, #0x7, w5
    13e6:	f1 07 b2    	and.w     #0x7f, w1
    13e8:	f5 0f b2    	and.w     #0xff, w5
    13ea:	08 00 32    	bra       Z, 0x13fc <zeroorsub>
    13ec:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13ee:	02 00 32    	bra       Z, 0x13f4 <nanorinf>

000013f0 <finitereturn>:
    13f0:	01 70 a0    	bset.w    w1, #0x7
    13f2:	24 00 05    	retlw.w   #0x2, w4

000013f4 <nanorinf>:
    13f4:	81 0f 70    	ior.w     w0, w1, [w15]
    13f6:	01 00 32    	bra       Z, 0x13fa <infinite>
    13f8:	04 08 05    	retlw.w   #0x80, w4

000013fa <infinite>:
    13fa:	44 00 05    	retlw.w   #0x4, w4

000013fc <zeroorsub>:
    13fc:	81 0f 70    	ior.w     w0, w1, [w15]
    13fe:	02 00 3a    	bra       NZ, 0x1404 <subnormal>
    1400:	14 00 05    	retlw.w   #0x1, w4

00001402 <normalize>:
    1402:	85 02 e9    	dec.w     w5, w5

00001404 <subnormal>:
    1404:	00 00 40    	add.w     w0, w0, w0
    1406:	81 c0 48    	addc.b    w1, w1, w1
    1408:	fc ff 3b    	bra       NN, 0x1402 <normalize>
    140a:	01 70 a0    	bset.w    w1, #0x7
    140c:	24 00 05    	retlw.w   #0x2, w4

0000140e <__funpack2>:
    140e:	00 04 be    	mov.d     w0, w8
    1410:	e9 ff 07    	rcall     0x13e4 <__funpack>
    1412:	00 03 be    	mov.d     w0, w6
    1414:	04 05 be    	mov.d     w4, w10
    1416:	02 00 be    	mov.d     w2, w0
    1418:	e5 ff 07    	rcall     0x13e4 <__funpack>
    141a:	84 4f 75    	ior.b     w10, w4, [w15]
    141c:	00 00 06    	return    

0000141e <__fPropagateNaN>:
    141e:	02 00 be    	mov.d     w2, w0
    1420:	64 50 e1    	cp.w      w10, #0x4
    1422:	05 00 36    	bra       LEU, 0x142e <return0>
    1424:	64 20 e1    	cp.w      w4, #0x4
    1426:	02 00 36    	bra       LEU, 0x142c <return8>
    1428:	09 68 a3    	btst.z    w9, #0x6
    142a:	01 00 3a    	bra       NZ, 0x142e <return0>

0000142c <return8>:
    142c:	08 00 be    	mov.d     w8, w0

0000142e <return0>:
    142e:	01 60 a0    	bset.w    w1, #0x6

00001430 <__fbopExit>:
    1430:	4f 06 78    	mov.w     [--w15], w12
    1432:	4f 05 be    	mov.d     [--w15], w10
    1434:	4f 04 be    	mov.d     [--w15], w8
    1436:	00 00 06    	return    

00001438 <__fbopReturnNaN>:
    1438:	f0 ff 2f    	mov.w     #0xffff, w0
    143a:	f1 ff 27    	mov.w     #0x7fff, w1
    143c:	f9 ff 37    	bra       0x1430 <__fbopExit>

0000143e <___mulsf3>:
    143e:	88 9f be    	mov.d     w8, [w15++]
    1440:	8a 9f be    	mov.d     w10, [w15++]
    1442:	8c 1f 78    	mov.w     w12, [w15++]
    1444:	e4 ff 07    	rcall     0x140e <__funpack2>
    1446:	eb ff 33    	bra       N, 0x141e <__fPropagateNaN>
    1448:	03 86 6c    	xor.w     w9, w3, w12
    144a:	64 50 e1    	cp.w      w10, #0x4
    144c:	24 00 32    	bra       Z, 0x1496 <aisinfinite>
    144e:	64 20 e1    	cp.w      w4, #0x4
    1450:	27 00 32    	bra       Z, 0x14a0 <bisinfinite>
    1452:	61 50 e1    	cp.w      w10, #0x1
    1454:	22 00 32    	bra       Z, 0x149a <return8>
    1456:	61 20 e1    	cp.w      w4, #0x1
    1458:	21 00 32    	bra       Z, 0x149c <return2>
    145a:	8b 85 42    	add.w     w5, w11, w11
    145c:	eb 07 b1    	sub.w     #0x7e, w11
    145e:	01 34 b8    	mul.uu    w6, w1, w8
    1460:	00 3a b8    	mul.uu    w7, w0, w4
    1462:	08 04 42    	add.w     w4, w8, w8
    1464:	89 84 4a    	addc.w    w5, w9, w9
    1466:	01 3a b8    	mul.uu    w7, w1, w4
    1468:	00 30 b8    	mul.uu    w6, w0, w0
    146a:	88 80 40    	add.w     w1, w8, w1
    146c:	09 01 4a    	addc.w    w4, w9, w2
    146e:	04 00 33    	bra       N, 0x1478 <formsticky>
    1470:	00 00 40    	add.w     w0, w0, w0
    1472:	81 80 48    	addc.w    w1, w1, w1
    1474:	02 01 49    	addc.w    w2, w2, w2
    1476:	8b 05 e9    	dec.w     w11, w11

00001478 <formsticky>:
    1478:	c9 09 dd    	sl.w      w1, #0x9, w3
    147a:	83 01 70    	ior.w     w0, w3, w3
    147c:	01 00 32    	bra       Z, 0x1480 <formRandSig>
    147e:	13 00 20    	mov.w     #0x1, w3

00001480 <formRandSig>:
    1480:	c8 14 de    	lsr.w     w2, #0x8, w9
    1482:	48 14 dd    	sl.w      w2, #0x8, w8
    1484:	47 09 de    	lsr.w     w1, #0x7, w2
    1486:	12 00 b2    	and.w     #0x1, w2
    1488:	c8 08 de    	lsr.w     w1, #0x8, w1
    148a:	08 84 70    	ior.w     w1, w8, w8
    148c:	85 ff 07    	rcall     0x1398 <__fpack>

0000148e <return0>:
    148e:	01 f0 a1    	bclr.w    w1, #0xf
    1490:	0c f0 a7    	btsc.w    w12, #0xf
    1492:	01 f0 a0    	bset.w    w1, #0xf
    1494:	cd ff 37    	bra       0x1430 <__fbopExit>

00001496 <aisinfinite>:
    1496:	61 20 e1    	cp.w      w4, #0x1
    1498:	cf ff 32    	bra       Z, 0x1438 <__fbopReturnNaN>

0000149a <return8>:
    149a:	08 01 be    	mov.d     w8, w2

0000149c <return2>:
    149c:	02 00 be    	mov.d     w2, w0
    149e:	f7 ff 37    	bra       0x148e <return0>

000014a0 <bisinfinite>:
    14a0:	61 50 e1    	cp.w      w10, #0x1
    14a2:	fc ff 3a    	bra       NZ, 0x149c <return2>
    14a4:	c9 ff 37    	bra       0x1438 <__fbopReturnNaN>

000014a6 <___udivsi3>:
    14a6:	60 22 b8    	mul.uu    w4, #0x0, w4
    14a8:	06 02 20    	mov.w     #0x20, w6

000014aa <nextbit>:
    14aa:	00 00 d0    	sl.w      w0, w0
    14ac:	81 80 d2    	rlc.w     w1, w1
    14ae:	04 82 d2    	rlc.w     w4, w4
    14b0:	85 82 d2    	rlc.w     w5, w5
    14b2:	00 00 a0    	bset.w    w0, #0x0
    14b4:	02 02 52    	sub.w     w4, w2, w4
    14b6:	83 82 5a    	subb.w    w5, w3, w5
    14b8:	03 00 31    	bra       C, 0x14c0 <iterate>
    14ba:	02 02 42    	add.w     w4, w2, w4
    14bc:	83 82 4a    	addc.w    w5, w3, w5
    14be:	00 00 a1    	bclr.w    w0, #0x0

000014c0 <iterate>:
    14c0:	06 03 e9    	dec.w     w6, w6
    14c2:	f3 ff 3a    	bra       NZ, 0x14aa <nextbit>
    14c4:	00 00 06    	return    

000014c6 <__fcompare>:
    14c6:	88 9f be    	mov.d     w8, [w15++]
    14c8:	8a 9f be    	mov.d     w10, [w15++]
    14ca:	84 1f 78    	mov.w     w4, [w15++]
    14cc:	a0 ff 07    	rcall     0x140e <__funpack2>
    14ce:	4f 00 78    	mov.w     [--w15], w0
    14d0:	11 00 33    	bra       N, 0x14f4 <exit>
    14d2:	f0 ff 2f    	mov.w     #0xffff, w0
    14d4:	83 8f 6c    	xor.w     w9, w3, [w15]
    14d6:	06 00 3b    	bra       NN, 0x14e4 <comparemag>
    14d8:	04 05 65    	and.w     w10, w4, w10
    14da:	0a 00 a7    	btsc.w    w10, #0x0
    14dc:	08 00 37    	bra       0x14ee <returnEqual>
    14de:	09 f0 a6    	btss.w    w9, #0xf
    14e0:	10 00 20    	mov.w     #0x1, w0
    14e2:	08 00 37    	bra       0x14f4 <exit>

000014e4 <comparemag>:
    14e4:	82 0f 54    	sub.w     w8, w2, [w15]
    14e6:	83 8f 5c    	subb.w    w9, w3, [w15]
    14e8:	03 00 39    	bra       NC, 0x14f0 <adjust>
    14ea:	10 00 20    	mov.w     #0x1, w0
    14ec:	01 00 3e    	bra       GTU, 0x14f0 <adjust>

000014ee <returnEqual>:
    14ee:	00 00 20    	mov.w     #0x0, w0

000014f0 <adjust>:
    14f0:	09 f0 a7    	btsc.w    w9, #0xf
    14f2:	00 00 ea    	neg.w     w0, w0

000014f4 <exit>:
    14f4:	4f 05 be    	mov.d     [--w15], w10
    14f6:	4f 04 be    	mov.d     [--w15], w8
    14f8:	00 00 e0    	cp0.w     w0
    14fa:	00 00 06    	return    

000014fc <___floatundisf>:
    14fc:	88 9f be    	mov.d     w8, [w15++]
    14fe:	8a 9f be    	mov.d     w10, [w15++]
    1500:	00 82 70    	ior.w     w1, w0, w4
    1502:	04 02 71    	ior.w     w2, w4, w4
    1504:	04 82 71    	ior.w     w3, w4, w4
    1506:	26 00 32    	bra       Z, 0x1554 <return0>
    1508:	00 04 be    	mov.d     w0, w8
    150a:	02 00 be    	mov.d     w2, w0
    150c:	60 11 b8    	mul.uu    w2, #0x0, w2
    150e:	6b 09 20    	mov.w     #0x96, w11
    1510:	95 02 20    	mov.w     #0x29, w5
    1512:	01 82 cf    	ff1l      w1, w4
    1514:	0a 00 39    	bra       NC, 0x152a <fixshift>
    1516:	05 41 b1    	sub.b     #0x10, w5
    1518:	00 82 cf    	ff1l      w0, w4
    151a:	07 00 39    	bra       NC, 0x152a <fixshift>
    151c:	05 41 b1    	sub.b     #0x10, w5
    151e:	09 82 cf    	ff1l      w9, w4
    1520:	04 00 39    	bra       NC, 0x152a <fixshift>
    1522:	05 41 b1    	sub.b     #0x10, w5
    1524:	08 82 cf    	ff1l      w8, w4
    1526:	01 00 39    	bra       NC, 0x152a <fixshift>
    1528:	05 41 b1    	sub.b     #0x10, w5

0000152a <fixshift>:
    152a:	05 42 52    	sub.b     w4, w5, w4
    152c:	12 00 32    	bra       Z, 0x1552 <round>
    152e:	0a 00 3b    	bra       NN, 0x1544 <shiftleft>

00001530 <shiftright>:
    1530:	82 81 71    	ior.w     w3, w2, w3
    1532:	61 01 64    	and.w     w8, #0x1, w2
    1534:	81 00 d1    	lsr.w     w1, w1
    1536:	00 80 d3    	rrc.w     w0, w0
    1538:	89 84 d3    	rrc.w     w9, w9
    153a:	08 84 d3    	rrc.w     w8, w8
    153c:	8b 05 e8    	inc.w     w11, w11
    153e:	04 42 e8    	inc.b     w4, w4
    1540:	f7 ff 3a    	bra       NZ, 0x1530 <shiftright>
    1542:	07 00 37    	bra       0x1552 <round>

00001544 <shiftleft>:
    1544:	08 04 44    	add.w     w8, w8, w8
    1546:	89 84 4c    	addc.w    w9, w9, w9
    1548:	00 00 48    	addc.w    w0, w0, w0
    154a:	81 80 48    	addc.w    w1, w1, w1
    154c:	8b 05 e9    	dec.w     w11, w11
    154e:	04 42 e9    	dec.b     w4, w4
    1550:	f9 ff 3a    	bra       NZ, 0x1544 <shiftleft>

00001552 <round>:
    1552:	22 ff 07    	rcall     0x1398 <__fpack>

00001554 <return0>:
    1554:	4f 05 be    	mov.d     [--w15], w10
    1556:	4f 04 be    	mov.d     [--w15], w8
    1558:	00 00 06    	return    

0000155a <__printf_cdnopuxX>:
    155a:	20 dc 20    	mov.w     #0xdc2, w0
    155c:	00 00 fa    	lnk       #0x0
    155e:	68 81 57    	sub.w     w15, #0x8, w2
    1560:	cf b8 97    	mov.w     [w15-8], w1
    1562:	02 00 07    	rcall     0x1568 <__vfprintf_cdnopuxX>
    1564:	00 80 fa    	ulnk      
    1566:	00 00 06    	return    

00001568 <__vfprintf_cdnopuxX>:
    1568:	ef 03 b0    	add.w     #0x3e, w15
    156a:	88 9f be    	mov.d     w8, [w15++]
    156c:	8a 9f be    	mov.d     w10, [w15++]
    156e:	8c 9f be    	mov.d     w12, [w15++]
    1570:	80 06 78    	mov.w     w0, w13
    1572:	8e 1f 78    	mov.w     w14, [w15++]
    1574:	00 07 eb    	clr.w     w14
    1576:	d1 af 9f    	mov.w     w1, [w15-38]
    1578:	a2 b7 9f    	mov.w     w2, [w15-28]
    157a:	66 03 37    	bra       0x1c48 <.L162>

0000157c <.L134>:
    157c:	df a8 97    	mov.w     [w15-38], w1
    157e:	54 c2 b3    	mov.b     #0x25, w4
    1580:	81 00 e8    	inc.w     w1, w1
    1582:	d1 af 9f    	mov.w     w1, [w15-38]
    1584:	84 4f 50    	sub.b     w0, w4, [w15]
    1586:	06 00 3a    	bra       NZ, 0x1594 <.L3>
    1588:	01 02 78    	mov.w     w1, w4
    158a:	00 06 eb    	clr.w     w12
    158c:	01 c3 b3    	mov.b     #0x30, w1
    158e:	00 c2 b3    	mov.b     #0x20, w0
    1590:	b7 c2 b3    	mov.b     #0x2b, w7
    1592:	0e 00 37    	bra       0x15b0 <.L163>

00001594 <.L3>:
    1594:	3d 02 90    	mov.w     [w13+6], w4
    1596:	04 04 b2    	and.w     #0x40, w4
    1598:	04 00 32    	bra       Z, 0x15a2 <.L5>
    159a:	1d 02 78    	mov.w     [w13], w4
    159c:	00 4a 78    	mov.b     w0, [w4]
    159e:	84 0e e8    	inc.w     w4, [w13]
    15a0:	05 00 37    	bra       0x15ac <.L6>

000015a2 <.L5>:
    15a2:	00 00 fb    	se        w0, w0
    15a4:	8d 00 78    	mov.w     w13, w1
    15a6:	5c 03 07    	rcall     0x1c60 <_fputc>
    15a8:	e1 0f 40    	add.w     w0, #0x1, [w15]
    15aa:	4e 03 32    	bra       Z, 0x1c48 <.L162>

000015ac <.L6>:
    15ac:	0e 07 e8    	inc.w     w14, w14
    15ae:	4c 03 37    	bra       0x1c48 <.L162>

000015b0 <.L163>:
    15b0:	84 02 78    	mov.w     w4, w5
    15b2:	d2 c2 b3    	mov.b     #0x2d, w2
    15b4:	34 43 78    	mov.b     [w4++], w6
    15b6:	82 4f 53    	sub.b     w6, w2, [w15]
    15b8:	09 00 32    	bra       Z, 0x15cc <.L11>
    15ba:	05 00 3c    	bra       GT, 0x15c6 <.L13>
    15bc:	80 4f 53    	sub.b     w6, w0, [w15]
    15be:	08 00 32    	bra       Z, 0x15d0 <.L9>
    15c0:	87 4f 53    	sub.b     w6, w7, [w15]
    15c2:	0c 00 3a    	bra       NZ, 0x15dc <.L8>
    15c4:	07 00 37    	bra       0x15d4 <.L175>

000015c6 <.L13>:
    15c6:	81 4f 53    	sub.b     w6, w1, [w15]
    15c8:	09 00 3a    	bra       NZ, 0x15dc <.L8>
    15ca:	06 00 37    	bra       0x15d8 <.L176>

000015cc <.L11>:
    15cc:	0c 30 a0    	bset.w    w12, #0x3
    15ce:	f0 ff 37    	bra       0x15b0 <.L163>

000015d0 <.L9>:
    15d0:	0c 00 a0    	bset.w    w12, #0x0
    15d2:	ee ff 37    	bra       0x15b0 <.L163>

000015d4 <.L175>:
    15d4:	0c 10 a0    	bset.w    w12, #0x1
    15d6:	ec ff 37    	bra       0x15b0 <.L163>

000015d8 <.L176>:
    15d8:	0c 20 a0    	bset.w    w12, #0x2
    15da:	ea ff 37    	bra       0x15b0 <.L163>

000015dc <.L8>:
    15dc:	62 02 66    	and.w     w12, #0x2, w4
    15de:	01 00 32    	bra       Z, 0x15e2 <.L15>
    15e0:	0c 00 a1    	bclr.w    w12, #0x0

000015e2 <.L15>:
    15e2:	68 02 66    	and.w     w12, #0x8, w4
    15e4:	01 00 32    	bra       Z, 0x15e8 <.L16>
    15e6:	0c 20 a1    	bclr.w    w12, #0x2

000015e8 <.L16>:
    15e8:	06 02 fb    	se        w6, w4
    15ea:	04 03 b1    	sub.w     #0x30, w4
    15ec:	e9 0f 52    	sub.w     w4, #0x9, [w15]
    15ee:	0c 00 3e    	bra       GTU, 0x1608 <.L17>
    15f0:	05 03 78    	mov.w     w5, w6
    15f2:	00 02 eb    	clr.w     w4

000015f4 <.L18>:
    15f4:	b6 03 fb    	se        [w6++], w7
    15f6:	6a 22 b9    	mul.su    w4, #0xa, w4
    15f8:	07 03 b1    	sub.w     #0x30, w7
    15fa:	86 02 78    	mov.w     w6, w5
    15fc:	04 82 43    	add.w     w7, w4, w4
    15fe:	96 03 fb    	se        [w6], w7
    1600:	07 03 b1    	sub.w     #0x30, w7
    1602:	e9 8f 53    	sub.w     w7, #0x9, [w15]
    1604:	f7 ff 36    	bra       LEU, 0x15f4 <.L18>
    1606:	08 00 37    	bra       0x1618 <.L19>

00001608 <.L17>:
    1608:	00 02 eb    	clr.w     w4
    160a:	a7 c2 b3    	mov.b     #0x2a, w7
    160c:	87 4f 53    	sub.b     w6, w7, [w15]
    160e:	04 00 3a    	bra       NZ, 0x1618 <.L19>
    1610:	af b1 97    	mov.w     [w15-28], w3
    1612:	85 02 e8    	inc.w     w5, w5
    1614:	43 02 78    	mov.w     [--w3], w4
    1616:	a3 b7 9f    	mov.w     w3, [w15-28]

00001618 <.L19>:
    1618:	00 03 eb    	clr.w     w6
    161a:	96 b7 9f    	mov.w     w6, [w15-30]
    161c:	e6 c2 b3    	mov.b     #0x2e, w6
    161e:	95 4f 13    	subr.b    w6, [w5], [w15]
    1620:	0c 00 3a    	bra       NZ, 0x163a <.L20>
    1622:	0c e0 a0    	bset.w    w12, #0xe
    1624:	64 43 53    	sub.b     w6, #0x4, w6
    1626:	d5 4f 13    	subr.b    w6, [++w5], [w15]
    1628:	03 00 32    	bra       Z, 0x1630 <.L21>
    162a:	05 03 78    	mov.w     w5, w6
    162c:	00 00 eb    	clr.w     w0
    162e:	09 00 37    	bra       0x1642 <.L22>

00001630 <.L21>:
    1630:	af b3 97    	mov.w     [w15-28], w7
    1632:	85 02 e8    	inc.w     w5, w5
    1634:	47 04 78    	mov.w     [--w7], w8
    1636:	a7 b7 9f    	mov.w     w7, [w15-28]
    1638:	98 b7 9f    	mov.w     w8, [w15-30]

0000163a <.L20>:
    163a:	05 03 78    	mov.w     w5, w6
    163c:	09 00 37    	bra       0x1650 <.L23>

0000163e <.L24>:
    163e:	6a 00 b9    	mul.su    w0, #0xa, w0
    1640:	00 80 43    	add.w     w7, w0, w0

00001642 <.L22>:
    1642:	86 02 78    	mov.w     w6, w5
    1644:	b6 03 fb    	se        [w6++], w7
    1646:	07 03 b1    	sub.w     #0x30, w7
    1648:	e9 8f 53    	sub.w     w7, #0x9, [w15]
    164a:	f9 ff 36    	bra       LEU, 0x163e <.L24>
    164c:	90 b7 9f    	mov.w     w0, [w15-30]
    164e:	f5 ff 37    	bra       0x163a <.L20>

00001650 <.L23>:
    1650:	b6 42 78    	mov.b     [w6++], w5
    1652:	ca c6 b3    	mov.b     #0x6c, w10
    1654:	d6 af 9f    	mov.w     w6, [w15-38]
    1656:	8a cf 52    	sub.b     w5, w10, [w15]
    1658:	25 00 32    	bra       Z, 0x16a4 <.L30>
    165a:	0f 00 3c    	bra       GT, 0x167a <.L35>
    165c:	36 c6 b3    	mov.b     #0x63, w6
    165e:	86 cf 52    	sub.b     w5, w6, [w15]
    1660:	9e 00 32    	bra       Z, 0x179e <.L28>
    1662:	04 00 3c    	bra       GT, 0x166c <.L36>
    1664:	e0 cf 52    	sub.b     w5, #0x0, [w15]
    1666:	f5 02 32    	bra       Z, 0x1c52 <.L26>
    1668:	6b 43 53    	sub.b     w6, #0xb, w6
    166a:	0f 00 37    	bra       0x168a <.L166>

0000166c <.L36>:
    166c:	46 c6 b3    	mov.b     #0x64, w6
    166e:	86 cf 52    	sub.b     w5, w6, [w15]
    1670:	17 00 32    	bra       Z, 0x16a0 <.L29>
    1672:	65 43 43    	add.b     w6, #0x5, w6
    1674:	86 cf 52    	sub.b     w5, w6, [w15]
    1676:	b2 00 3a    	bra       NZ, 0x17dc <.L25>
    1678:	13 00 37    	bra       0x16a0 <.L29>

0000167a <.L35>:
    167a:	36 c7 b3    	mov.b     #0x73, w6
    167c:	86 cf 52    	sub.b     w5, w6, [w15]
    167e:	1f 00 32    	bra       Z, 0x16be <.L32>
    1680:	07 00 3c    	bra       GT, 0x1690 <.L37>
    1682:	64 43 53    	sub.b     w6, #0x4, w6
    1684:	86 cf 52    	sub.b     w5, w6, [w15]
    1686:	14 00 32    	bra       Z, 0x16b0 <.L31>
    1688:	06 43 e8    	inc.b     w6, w6

0000168a <.L166>:
    168a:	86 cf 52    	sub.b     w5, w6, [w15]
    168c:	a7 00 3a    	bra       NZ, 0x17dc <.L25>
    168e:	13 00 37    	bra       0x16b6 <.L177>

00001690 <.L37>:
    1690:	56 c7 b3    	mov.b     #0x75, w6
    1692:	86 cf 52    	sub.b     w5, w6, [w15]
    1694:	aa 00 32    	bra       Z, 0x17ea <.L33>
    1696:	63 43 43    	add.b     w6, #0x3, w6
    1698:	86 cf 52    	sub.b     w5, w6, [w15]
    169a:	a0 00 3a    	bra       NZ, 0x17dc <.L25>
    169c:	e5 77 9f    	mov.b     w5, [w15-74]
    169e:	0d 00 37    	bra       0x16ba <.L38>

000016a0 <.L29>:
    16a0:	e5 77 9f    	mov.b     w5, [w15-74]
    16a2:	a5 00 37    	bra       0x17ee <.L39>

000016a4 <.L30>:
    16a4:	f0 03 66    	and.w     w12, #0x10, w7
    16a6:	05 01 20    	mov.w     #0x10, w5
    16a8:	01 00 32    	bra       Z, 0x16ac <.L40>
    16aa:	05 00 28    	mov.w     #0x8000, w5

000016ac <.L40>:
    16ac:	0c 86 72    	ior.w     w5, w12, w12
    16ae:	d0 ff 37    	bra       0x1650 <.L23>

000016b0 <.L31>:
    16b0:	e5 77 9f    	mov.b     w5, [w15-74]
    16b2:	0c 60 a0    	bset.w    w12, #0x6
    16b4:	9c 00 37    	bra       0x17ee <.L39>

000016b6 <.L177>:
    16b6:	e5 77 9f    	mov.b     w5, [w15-74]
    16b8:	0c 50 a0    	bset.w    w12, #0x5

000016ba <.L38>:
    16ba:	0c 70 a0    	bset.w    w12, #0x7
    16bc:	98 00 37    	bra       0x17ee <.L39>

000016be <.L32>:
    16be:	af b5 97    	mov.w     [w15-28], w11
    16c0:	e5 77 9f    	mov.b     w5, [w15-74]
    16c2:	cb 02 78    	mov.w     [--w11], w5
    16c4:	ab b7 9f    	mov.w     w11, [w15-28]
    16c6:	b5 b7 9f    	mov.w     w5, [w15-26]
    16c8:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    16ca:	02 00 3a    	bra       NZ, 0x16d0 <.L41>
    16cc:	e1 da 20    	mov.w     #0xdae, w1
    16ce:	b1 b7 9f    	mov.w     w1, [w15-26]

000016d0 <.L41>:
    16d0:	3f b3 97    	mov.w     [w15-26], w6
    16d2:	80 02 eb    	clr.w     w5
    16d4:	01 00 37    	bra       0x16d8 <.L42>

000016d6 <.L43>:
    16d6:	85 02 e8    	inc.w     w5, w5

000016d8 <.L42>:
    16d8:	e6 c3 7a    	mov.b     [w6+w5], w7
    16da:	e0 cf 53    	sub.b     w7, #0x0, [w15]
    16dc:	fc ff 3a    	bra       NZ, 0x16d6 <.L43>
    16de:	c5 b7 9f    	mov.w     w5, [w15-24]

000016e0 <.L44>:
    16e0:	1f b1 97    	mov.w     [w15-30], w2
    16e2:	e0 0f 51    	sub.w     w2, #0x0, [w15]
    16e4:	05 00 32    	bra       Z, 0x16f0 <.L45>
    16e6:	cf b1 97    	mov.w     [w15-24], w3
    16e8:	83 0f 51    	sub.w     w2, w3, [w15]
    16ea:	02 00 31    	bra       C, 0x16f0 <.L45>
    16ec:	82 02 78    	mov.w     w2, w5
    16ee:	c5 b7 9f    	mov.w     w5, [w15-24]

000016f0 <.L45>:
    16f0:	cf b2 97    	mov.w     [w15-24], w5
    16f2:	00 04 eb    	clr.w     w8
    16f4:	85 0f 52    	sub.w     w4, w5, [w15]
    16f6:	01 00 36    	bra       LEU, 0x16fa <.L46>
    16f8:	05 04 52    	sub.w     w4, w5, w8

000016fa <.L46>:
    16fa:	68 06 66    	and.w     w12, #0x8, w12
    16fc:	09 c2 b3    	mov.b     #0x20, w9
    16fe:	0f 00 32    	bra       Z, 0x171e <.L48>
    1700:	29 00 37    	bra       0x1754 <.L164>

00001702 <.L53>:
    1702:	3d 02 90    	mov.w     [w13+6], w4
    1704:	04 04 b2    	and.w     #0x40, w4
    1706:	04 00 32    	bra       Z, 0x1710 <.L50>
    1708:	1d 02 78    	mov.w     [w13], w4
    170a:	09 4a 78    	mov.b     w9, [w4]
    170c:	84 0e e8    	inc.w     w4, [w13]
    170e:	05 00 37    	bra       0x171a <.L51>

00001710 <.L50>:
    1710:	8d 00 78    	mov.w     w13, w1
    1712:	00 02 20    	mov.w     #0x20, w0
    1714:	a5 02 07    	rcall     0x1c60 <_fputc>
    1716:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1718:	01 00 32    	bra       Z, 0x171c <.L52>

0000171a <.L51>:
    171a:	0e 07 e8    	inc.w     w14, w14

0000171c <.L52>:
    171c:	08 04 e9    	dec.w     w8, w8

0000171e <.L48>:
    171e:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1720:	f0 ff 3a    	bra       NZ, 0x1702 <.L53>
    1722:	00 84 eb    	setm.w    w8
    1724:	17 00 37    	bra       0x1754 <.L164>

00001726 <.L57>:
    1726:	bd 02 90    	mov.w     [w13+6], w5
    1728:	05 04 b2    	and.w     #0x40, w5
    172a:	09 00 32    	bra       Z, 0x173e <.L54>
    172c:	88 02 78    	mov.w     w8, w5
    172e:	9d 03 78    	mov.w     [w13], w7
    1730:	35 43 78    	mov.b     [w5++], w6
    1732:	86 4b 78    	mov.b     w6, [w7]
    1734:	05 04 78    	mov.w     w5, w8
    1736:	87 0e e8    	inc.w     w7, [w13]
    1738:	e0 4f 53    	sub.b     w6, #0x0, [w15]
    173a:	0a 00 3a    	bra       NZ, 0x1750 <.L55>
    173c:	11 00 37    	bra       0x1760 <.L161>

0000173e <.L54>:
    173e:	88 02 78    	mov.w     w8, w5
    1740:	8d 00 78    	mov.w     w13, w1
    1742:	35 00 fb    	se        [w5++], w0
    1744:	84 bf 9f    	mov.w     w4, [w15-16]
    1746:	05 04 78    	mov.w     w5, w8
    1748:	8b 02 07    	rcall     0x1c60 <_fputc>
    174a:	0f ba 97    	mov.w     [w15-16], w4
    174c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    174e:	08 00 32    	bra       Z, 0x1760 <.L161>

00001750 <.L55>:
    1750:	0e 07 e8    	inc.w     w14, w14
    1752:	06 00 37    	bra       0x1760 <.L161>

00001754 <.L164>:
    1754:	0c 02 78    	mov.w     w12, w4
    1756:	08 06 78    	mov.w     w8, w12
    1758:	3f b4 97    	mov.w     [w15-26], w8
    175a:	cf b4 97    	mov.w     [w15-24], w9
    175c:	5f b5 97    	mov.w     [w15-22], w10
    175e:	ef b5 97    	mov.w     [w15-20], w11

00001760 <.L161>:
    1760:	89 02 78    	mov.w     w9, w5
    1762:	85 04 e9    	dec.w     w5, w9
    1764:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1766:	df ff 3a    	bra       NZ, 0x1726 <.L57>
    1768:	b8 b7 9f    	mov.w     w8, [w15-26]
    176a:	c9 b7 9f    	mov.w     w9, [w15-24]
    176c:	da b7 9f    	mov.w     w10, [w15-22]
    176e:	eb b7 9f    	mov.w     w11, [w15-20]
    1770:	0c 04 78    	mov.w     w12, w8
    1772:	09 c2 b3    	mov.b     #0x20, w9
    1774:	04 06 78    	mov.w     w4, w12
    1776:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1778:	0f 00 3a    	bra       NZ, 0x1798 <.L58>
    177a:	66 02 37    	bra       0x1c48 <.L162>

0000177c <.L62>:
    177c:	3d 02 90    	mov.w     [w13+6], w4
    177e:	04 04 b2    	and.w     #0x40, w4
    1780:	04 00 32    	bra       Z, 0x178a <.L59>
    1782:	1d 02 78    	mov.w     [w13], w4
    1784:	09 4a 78    	mov.b     w9, [w4]
    1786:	84 0e e8    	inc.w     w4, [w13]
    1788:	05 00 37    	bra       0x1794 <.L60>

0000178a <.L59>:
    178a:	8d 00 78    	mov.w     w13, w1
    178c:	00 02 20    	mov.w     #0x20, w0
    178e:	68 02 07    	rcall     0x1c60 <_fputc>
    1790:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1792:	01 00 32    	bra       Z, 0x1796 <.L61>

00001794 <.L60>:
    1794:	0e 07 e8    	inc.w     w14, w14

00001796 <.L61>:
    1796:	08 04 e9    	dec.w     w8, w8

00001798 <.L58>:
    1798:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    179a:	f0 ff 3a    	bra       NZ, 0x177c <.L62>
    179c:	55 02 37    	bra       0x1c48 <.L162>

0000179e <.L28>:
    179e:	af b0 97    	mov.w     [w15-28], w1
    17a0:	70 03 66    	and.w     w12, #0x10, w6
    17a2:	41 04 78    	mov.w     [--w1], w8
    17a4:	a1 b7 9f    	mov.w     w1, [w15-28]
    17a6:	cf c4 de    	asr.w     w8, #0xf, w9
    17a8:	09 05 78    	mov.w     w9, w10
    17aa:	8a 05 78    	mov.w     w10, w11
    17ac:	08 00 be    	mov.d     w8, w0
    17ae:	0a 01 be    	mov.d     w10, w2
    17b0:	48 00 de    	lsr.w     w0, #0x8, w0
    17b2:	c8 0a dd    	sl.w      w1, #0x8, w5
    17b4:	00 80 72    	ior.w     w5, w0, w0
    17b6:	e0 77 9f    	mov.b     w0, [w15-74]
    17b8:	e0 0f 53    	sub.w     w6, #0x0, [w15]
    17ba:	09 00 32    	bra       Z, 0x17ce <.L63>
    17bc:	e0 4f 50    	sub.b     w0, #0x0, [w15]
    17be:	07 00 32    	bra       Z, 0x17ce <.L63>
    17c0:	e1 4f 40    	add.b     w0, #0x1, [w15]
    17c2:	05 00 32    	bra       Z, 0x17ce <.L63>
    17c4:	26 00 20    	mov.w     #0x2, w6
    17c6:	f0 77 9f    	mov.b     w0, [w15-73]
    17c8:	88 7f 9f    	mov.b     w8, [w15-72]
    17ca:	c6 b7 9f    	mov.w     w6, [w15-24]
    17cc:	03 00 37    	bra       0x17d4 <.L64>

000017ce <.L63>:
    17ce:	17 00 20    	mov.w     #0x1, w7
    17d0:	c7 b7 9f    	mov.w     w7, [w15-24]
    17d2:	f8 77 9f    	mov.b     w8, [w15-73]

000017d4 <.L64>:
    17d4:	78 fb 2f    	mov.w     #0xffb7, w8
    17d6:	08 84 47    	add.w     w15, w8, w8
    17d8:	b8 b7 9f    	mov.w     w8, [w15-26]
    17da:	82 ff 37    	bra       0x16e0 <.L44>

000017dc <.L25>:
    17dc:	69 fb 2f    	mov.w     #0xffb6, w9
    17de:	1a 00 20    	mov.w     #0x1, w10
    17e0:	89 84 47    	add.w     w15, w9, w9
    17e2:	e5 77 9f    	mov.b     w5, [w15-74]
    17e4:	b9 b7 9f    	mov.w     w9, [w15-26]
    17e6:	ca b7 9f    	mov.w     w10, [w15-24]
    17e8:	7b ff 37    	bra       0x16e0 <.L44>

000017ea <.L33>:
    17ea:	e5 77 9f    	mov.b     w5, [w15-74]
    17ec:	0c 0c b3    	ior.w     #0xc0, w12

000017ee <.L39>:
    17ee:	8c 02 78    	mov.w     w12, w5
    17f0:	05 0c b2    	and.w     #0xc0, w5
    17f2:	3b 00 3a    	bra       NZ, 0x186a <.L65>
    17f4:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    17f6:	05 00 3d    	bra       GE, 0x1802 <.L66>
    17f8:	af b2 97    	mov.w     [w15-28], w5
    17fa:	45 01 be    	mov.d     [--w5], w2
    17fc:	45 00 be    	mov.d     [--w5], w0
    17fe:	a5 b7 9f    	mov.w     w5, [w15-28]
    1800:	0f 00 37    	bra       0x1820 <.L167>

00001802 <.L66>:
    1802:	f0 02 66    	and.w     w12, #0x10, w5
    1804:	12 00 32    	bra       Z, 0x182a <.L68>
    1806:	2f b4 97    	mov.w     [w15-28], w8
    1808:	48 03 be    	mov.d     [--w8], w6
    180a:	f6 9f 9f    	mov.w     w6, [w15-66]
    180c:	87 a7 9f    	mov.w     w7, [w15-64]
    180e:	a8 b7 9f    	mov.w     w8, [w15-28]
    1810:	98 02 90    	mov.w     [w8+2], w5
    1812:	cf aa de    	asr.w     w5, #0xf, w5
    1814:	95 a7 9f    	mov.w     w5, [w15-62]
    1816:	a5 a7 9f    	mov.w     w5, [w15-60]
    1818:	7f 98 97    	mov.w     [w15-66], w0
    181a:	8f a0 97    	mov.w     [w15-64], w1
    181c:	1f a1 97    	mov.w     [w15-62], w2
    181e:	af a1 97    	mov.w     [w15-60], w3

00001820 <.L167>:
    1820:	b0 b7 9f    	mov.w     w0, [w15-26]
    1822:	c1 b7 9f    	mov.w     w1, [w15-24]
    1824:	d2 b7 9f    	mov.w     w2, [w15-22]
    1826:	e3 b7 9f    	mov.w     w3, [w15-20]
    1828:	0b 00 37    	bra       0x1840 <.L67>

0000182a <.L68>:
    182a:	af b0 97    	mov.w     [w15-28], w1
    182c:	c1 02 78    	mov.w     [--w1], w5
    182e:	05 04 78    	mov.w     w5, w8
    1830:	cf c4 de    	asr.w     w8, #0xf, w9
    1832:	09 05 78    	mov.w     w9, w10
    1834:	8a 05 78    	mov.w     w10, w11
    1836:	a1 b7 9f    	mov.w     w1, [w15-28]
    1838:	b8 b7 9f    	mov.w     w8, [w15-26]
    183a:	c9 b7 9f    	mov.w     w9, [w15-24]
    183c:	da b7 9f    	mov.w     w10, [w15-22]
    183e:	eb b7 9f    	mov.w     w11, [w15-20]

00001840 <.L67>:
    1840:	3f b0 97    	mov.w     [w15-26], w0
    1842:	cf b0 97    	mov.w     [w15-24], w1
    1844:	5f b1 97    	mov.w     [w15-22], w2
    1846:	ef b1 97    	mov.w     [w15-20], w3
    1848:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    184a:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    184c:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    184e:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1850:	32 00 3d    	bra       GE, 0x18b6 <.L69>
    1852:	60 00 b8    	mul.uu    w0, #0x0, w0
    1854:	60 11 b8    	mul.uu    w2, #0x0, w2
    1856:	3f b4 97    	mov.w     [w15-26], w8
    1858:	cf b4 97    	mov.w     [w15-24], w9
    185a:	5f b5 97    	mov.w     [w15-22], w10
    185c:	ef b5 97    	mov.w     [w15-20], w11
    185e:	3c 00 b3    	ior.w     #0x3, w12
    1860:	08 04 50    	sub.w     w0, w8, w8
    1862:	89 84 58    	subb.w    w1, w9, w9
    1864:	0a 05 59    	subb.w    w2, w10, w10
    1866:	8b 85 59    	subb.w    w3, w11, w11
    1868:	22 00 37    	bra       0x18ae <.L168>

0000186a <.L65>:
    186a:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    186c:	05 00 3d    	bra       GE, 0x1878 <.L70>
    186e:	af b2 97    	mov.w     [w15-28], w5
    1870:	45 01 be    	mov.d     [--w5], w2
    1872:	45 00 be    	mov.d     [--w5], w0
    1874:	a5 b7 9f    	mov.w     w5, [w15-28]
    1876:	0f 00 37    	bra       0x1896 <.L169>

00001878 <.L70>:
    1878:	f0 02 66    	and.w     w12, #0x10, w5
    187a:	12 00 32    	bra       Z, 0x18a0 <.L71>
    187c:	2f b4 97    	mov.w     [w15-28], w8
    187e:	80 04 eb    	clr.w     w9
    1880:	48 03 be    	mov.d     [--w8], w6
    1882:	00 05 eb    	clr.w     w10
    1884:	96 af 9f    	mov.w     w6, [w15-46]
    1886:	a7 af 9f    	mov.w     w7, [w15-44]
    1888:	b9 af 9f    	mov.w     w9, [w15-42]
    188a:	ca af 9f    	mov.w     w10, [w15-40]
    188c:	1f a8 97    	mov.w     [w15-46], w0
    188e:	af a8 97    	mov.w     [w15-44], w1
    1890:	3f a9 97    	mov.w     [w15-42], w2
    1892:	cf a9 97    	mov.w     [w15-40], w3
    1894:	a8 b7 9f    	mov.w     w8, [w15-28]

00001896 <.L169>:
    1896:	b0 b7 9f    	mov.w     w0, [w15-26]
    1898:	c1 b7 9f    	mov.w     w1, [w15-24]
    189a:	d2 b7 9f    	mov.w     w2, [w15-22]
    189c:	e3 b7 9f    	mov.w     w3, [w15-20]
    189e:	0b 00 37    	bra       0x18b6 <.L69>

000018a0 <.L71>:
    18a0:	af b0 97    	mov.w     [w15-28], w1
    18a2:	c1 02 78    	mov.w     [--w1], w5
    18a4:	a1 b7 9f    	mov.w     w1, [w15-28]
    18a6:	05 04 78    	mov.w     w5, w8
    18a8:	09 00 20    	mov.w     #0x0, w9
    18aa:	0a 00 20    	mov.w     #0x0, w10
    18ac:	0b 00 20    	mov.w     #0x0, w11

000018ae <.L168>:
    18ae:	b8 b7 9f    	mov.w     w8, [w15-26]
    18b0:	c9 b7 9f    	mov.w     w9, [w15-24]
    18b2:	da b7 9f    	mov.w     w10, [w15-22]
    18b4:	eb b7 9f    	mov.w     w11, [w15-20]

000018b6 <.L69>:
    18b6:	9f b4 97    	mov.w     [w15-30], w9
    18b8:	e0 8f 54    	sub.w     w9, #0x0, [w15]
    18ba:	0d 00 3a    	bra       NZ, 0x18d6 <.L72>
    18bc:	1a 00 20    	mov.w     #0x1, w10
    18be:	3f b0 97    	mov.w     [w15-26], w0
    18c0:	cf b0 97    	mov.w     [w15-24], w1
    18c2:	5f b1 97    	mov.w     [w15-22], w2
    18c4:	ef b1 97    	mov.w     [w15-20], w3
    18c6:	9a b7 9f    	mov.w     w10, [w15-30]
    18c8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    18ca:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    18cc:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    18ce:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    18d0:	02 00 32    	bra       Z, 0x18d6 <.L72>
    18d2:	80 00 eb    	clr.w     w1
    18d4:	91 b7 9f    	mov.w     w1, [w15-30]

000018d6 <.L72>:
    18d6:	0c 01 78    	mov.w     w12, w2
    18d8:	05 04 20    	mov.w     #0x40, w5
    18da:	02 0c b2    	and.w     #0xc0, w2
    18dc:	82 b7 9f    	mov.w     w2, [w15-32]
    18de:	85 0f 51    	sub.w     w2, w5, [w15]
    18e0:	34 00 32    	bra       Z, 0x194a <.L76>
    18e2:	03 00 3c    	bra       GT, 0x18ea <.L78>
    18e4:	e0 0f 51    	sub.w     w2, #0x0, [w15]
    18e6:	08 00 32    	bra       Z, 0x18f8 <.L75>
    18e8:	48 00 37    	bra       0x197a <.L74>

000018ea <.L78>:
    18ea:	05 08 20    	mov.w     #0x80, w5
    18ec:	8f b1 97    	mov.w     [w15-32], w3
    18ee:	85 8f 51    	sub.w     w3, w5, [w15]
    18f0:	14 00 32    	bra       Z, 0x191a <.L77>
    18f2:	05 0c 20    	mov.w     #0xc0, w5
    18f4:	85 8f 51    	sub.w     w3, w5, [w15]
    18f6:	41 00 3a    	bra       NZ, 0x197a <.L74>

000018f8 <.L75>:
    18f8:	46 cf 20    	mov.w     #0xcf4, w6
    18fa:	15 c0 b3    	mov.b     #0x1, w5

000018fc <.L80>:
    18fc:	36 00 be    	mov.d     [w6++], w0
    18fe:	36 01 be    	mov.d     [w6++], w2
    1900:	3f b4 97    	mov.w     [w15-26], w8
    1902:	cf b4 97    	mov.w     [w15-24], w9
    1904:	5f b5 97    	mov.w     [w15-22], w10
    1906:	ef b5 97    	mov.w     [w15-20], w11
    1908:	00 40 e1    	cp.w      w8, w0
    190a:	01 c8 e1    	cpb.w     w9, w1
    190c:	02 d0 e1    	cpb.w     w10, w2
    190e:	03 d8 e1    	cpb.w     w11, w3
    1910:	33 00 39    	bra       NC, 0x1978 <.L170>
    1912:	85 42 e8    	inc.b     w5, w5
    1914:	f4 cf 52    	sub.b     w5, #0x14, [w15]
    1916:	f2 ff 3a    	bra       NZ, 0x18fc <.L80>
    1918:	2f 00 37    	bra       0x1978 <.L170>

0000191a <.L77>:
    191a:	15 c0 b3    	mov.b     #0x1, w5
    191c:	00 01 20    	mov.w     #0x10, w0
    191e:	01 00 20    	mov.w     #0x0, w1
    1920:	60 11 b8    	mul.uu    w2, #0x0, w2

00001922 <.L82>:
    1922:	3f b4 97    	mov.w     [w15-26], w8
    1924:	cf b4 97    	mov.w     [w15-24], w9
    1926:	5f b5 97    	mov.w     [w15-22], w10
    1928:	ef b5 97    	mov.w     [w15-20], w11
    192a:	00 40 e1    	cp.w      w8, w0
    192c:	01 c8 e1    	cpb.w     w9, w1
    192e:	02 d0 e1    	cpb.w     w10, w2
    1930:	03 d8 e1    	cpb.w     w11, w3
    1932:	22 00 39    	bra       NC, 0x1978 <.L170>
    1934:	49 00 20    	mov.w     #0x4, w9

00001936 <.LB705>:
    1936:	00 00 d0    	sl.w      w0, w0
    1938:	81 80 d2    	rlc.w     w1, w1
    193a:	02 81 d2    	rlc.w     w2, w2
    193c:	83 81 d2    	rlc.w     w3, w3
    193e:	89 04 e9    	dec.w     w9, w9
    1940:	fa ff 3a    	bra       NZ, 0x1936 <.LB705>
    1942:	85 42 e8    	inc.b     w5, w5
    1944:	f0 cf 52    	sub.b     w5, #0x10, [w15]
    1946:	ed ff 3a    	bra       NZ, 0x1922 <.L82>
    1948:	17 00 37    	bra       0x1978 <.L170>

0000194a <.L76>:
    194a:	15 c0 b3    	mov.b     #0x1, w5
    194c:	80 00 20    	mov.w     #0x8, w0
    194e:	01 00 20    	mov.w     #0x0, w1
    1950:	60 11 b8    	mul.uu    w2, #0x0, w2

00001952 <.L84>:
    1952:	3f b4 97    	mov.w     [w15-26], w8
    1954:	cf b4 97    	mov.w     [w15-24], w9
    1956:	5f b5 97    	mov.w     [w15-22], w10
    1958:	ef b5 97    	mov.w     [w15-20], w11
    195a:	00 40 e1    	cp.w      w8, w0
    195c:	01 c8 e1    	cpb.w     w9, w1
    195e:	02 d0 e1    	cpb.w     w10, w2
    1960:	03 d8 e1    	cpb.w     w11, w3
    1962:	0a 00 39    	bra       NC, 0x1978 <.L170>
    1964:	39 00 20    	mov.w     #0x3, w9

00001966 <.LB724>:
    1966:	00 00 d0    	sl.w      w0, w0
    1968:	81 80 d2    	rlc.w     w1, w1
    196a:	02 81 d2    	rlc.w     w2, w2
    196c:	83 81 d2    	rlc.w     w3, w3
    196e:	89 04 e9    	dec.w     w9, w9
    1970:	fa ff 3a    	bra       NZ, 0x1966 <.LB724>
    1972:	85 42 e8    	inc.b     w5, w5
    1974:	f5 cf 52    	sub.b     w5, #0x15, [w15]
    1976:	ed ff 3a    	bra       NZ, 0x1952 <.L84>

00001978 <.L170>:
    1978:	e5 77 9f    	mov.b     w5, [w15-74]

0000197a <.L74>:
    197a:	6f 75 97    	mov.b     [w15-74], w10
    197c:	9f b5 97    	mov.w     [w15-30], w11
    197e:	8a 02 fb    	se        w10, w5
    1980:	8b 8f 52    	sub.w     w5, w11, [w15]
    1982:	02 00 3d    	bra       GE, 0x1988 <.L85>
    1984:	eb 77 9f    	mov.b     w11, [w15-74]
    1986:	04 00 37    	bra       0x1990 <.L86>

00001988 <.L85>:
    1988:	1f b0 97    	mov.w     [w15-30], w0
    198a:	85 0f 50    	sub.w     w0, w5, [w15]
    198c:	01 00 3d    	bra       GE, 0x1990 <.L86>
    198e:	95 b7 9f    	mov.w     w5, [w15-30]

00001990 <.L86>:
    1990:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1992:	03 00 32    	bra       Z, 0x199a <.L87>
    1994:	e3 02 66    	and.w     w12, #0x3, w5
    1996:	01 00 32    	bra       Z, 0x199a <.L87>
    1998:	04 02 e9    	dec.w     w4, w4

0000199a <.L87>:
    199a:	05 00 24    	mov.w     #0x4000, w5
    199c:	85 02 66    	and.w     w12, w5, w5
    199e:	06 00 32    	bra       Z, 0x19ac <.L88>
    19a0:	9f b0 97    	mov.w     [w15-30], w1
    19a2:	81 0f 52    	sub.w     w4, w1, [w15]
    19a4:	02 00 34    	bra       LE, 0x19aa <.L139>
    19a6:	01 02 52    	sub.w     w4, w1, w4
    19a8:	01 00 37    	bra       0x19ac <.L88>

000019aa <.L139>:
    19aa:	00 02 eb    	clr.w     w4

000019ac <.L88>:
    19ac:	6f 71 97    	mov.b     [w15-74], w2
    19ae:	80 01 eb    	clr.w     w3
    19b0:	82 02 fb    	se        w2, w5
    19b2:	f3 af 9f    	mov.w     w3, [w15-34]
    19b4:	85 0f 52    	sub.w     w4, w5, [w15]
    19b6:	02 00 34    	bra       LE, 0x19bc <.L89>
    19b8:	85 02 52    	sub.w     w4, w5, w5
    19ba:	f5 af 9f    	mov.w     w5, [w15-34]

000019bc <.L89>:
    19bc:	64 02 66    	and.w     w12, #0x4, w4
    19be:	3b 00 32    	bra       Z, 0x1a36 <.L90>
    19c0:	e2 02 66    	and.w     w12, #0x2, w5
    19c2:	61 02 66    	and.w     w12, #0x1, w4
    19c4:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    19c6:	11 00 32    	bra       Z, 0x19ea <.L91>
    19c8:	bd 02 90    	mov.w     [w13+6], w5
    19ca:	05 04 b2    	and.w     #0x40, w5
    19cc:	08 00 32    	bra       Z, 0x19de <.L92>
    19ce:	9d 02 78    	mov.w     [w13], w5
    19d0:	b6 c2 b3    	mov.b     #0x2b, w6
    19d2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19d4:	01 00 32    	bra       Z, 0x19d8 <.L93>
    19d6:	06 c3 e8    	inc2.b    w6, w6

000019d8 <.L93>:
    19d8:	86 4a 78    	mov.b     w6, [w5]
    19da:	85 0e e8    	inc.w     w5, [w13]
    19dc:	15 00 37    	bra       0x1a08 <.L98>

000019de <.L92>:
    19de:	b0 02 20    	mov.w     #0x2b, w0
    19e0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19e2:	01 00 32    	bra       Z, 0x19e6 <.L95>
    19e4:	00 80 e8    	inc2.w    w0, w0

000019e6 <.L95>:
    19e6:	8d 00 78    	mov.w     w13, w1
    19e8:	0c 00 37    	bra       0x1a02 <.L172>

000019ea <.L91>:
    19ea:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    19ec:	0e 00 32    	bra       Z, 0x1a0a <.L96>
    19ee:	3d 02 90    	mov.w     [w13+6], w4
    19f0:	04 04 b2    	and.w     #0x40, w4
    19f2:	05 00 32    	bra       Z, 0x19fe <.L97>
    19f4:	1d 02 78    	mov.w     [w13], w4
    19f6:	05 c2 b3    	mov.b     #0x20, w5
    19f8:	05 4a 78    	mov.b     w5, [w4]
    19fa:	84 0e e8    	inc.w     w4, [w13]
    19fc:	05 00 37    	bra       0x1a08 <.L98>

000019fe <.L97>:
    19fe:	8d 00 78    	mov.w     w13, w1
    1a00:	00 02 20    	mov.w     #0x20, w0

00001a02 <.L172>:
    1a02:	2e 01 07    	rcall     0x1c60 <_fputc>
    1a04:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1a06:	01 00 32    	bra       Z, 0x1a0a <.L96>

00001a08 <.L98>:
    1a08:	0e 07 e8    	inc.w     w14, w14

00001a0a <.L96>:
    1a0a:	7f aa 97    	mov.w     [w15-34], w4
    1a0c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a0e:	4f 00 32    	bra       Z, 0x1aae <.L99>
    1a10:	08 c3 b3    	mov.b     #0x30, w8
    1a12:	84 04 78    	mov.w     w4, w9

00001a14 <.L150>:
    1a14:	3d 02 90    	mov.w     [w13+6], w4
    1a16:	04 04 b2    	and.w     #0x40, w4
    1a18:	04 00 32    	bra       Z, 0x1a22 <.L100>
    1a1a:	1d 02 78    	mov.w     [w13], w4
    1a1c:	08 4a 78    	mov.b     w8, [w4]
    1a1e:	84 0e e8    	inc.w     w4, [w13]
    1a20:	05 00 37    	bra       0x1a2c <.L101>

00001a22 <.L100>:
    1a22:	8d 00 78    	mov.w     w13, w1
    1a24:	00 03 20    	mov.w     #0x30, w0
    1a26:	1c 01 07    	rcall     0x1c60 <_fputc>
    1a28:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1a2a:	01 00 32    	bra       Z, 0x1a2e <.L102>

00001a2c <.L101>:
    1a2c:	0e 07 e8    	inc.w     w14, w14

00001a2e <.L102>:
    1a2e:	89 04 e9    	dec.w     w9, w9
    1a30:	f1 ff 3a    	bra       NZ, 0x1a14 <.L150>
    1a32:	f9 af 9f    	mov.w     w9, [w15-34]
    1a34:	3c 00 37    	bra       0x1aae <.L99>

00001a36 <.L90>:
    1a36:	ff aa 97    	mov.w     [w15-34], w5
    1a38:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1a3a:	14 00 32    	bra       Z, 0x1a64 <.L104>
    1a3c:	68 02 66    	and.w     w12, #0x8, w4
    1a3e:	12 00 3a    	bra       NZ, 0x1a64 <.L104>
    1a40:	08 c2 b3    	mov.b     #0x20, w8
    1a42:	85 04 78    	mov.w     w5, w9

00001a44 <.L151>:
    1a44:	3d 02 90    	mov.w     [w13+6], w4
    1a46:	04 04 b2    	and.w     #0x40, w4
    1a48:	04 00 32    	bra       Z, 0x1a52 <.L105>
    1a4a:	1d 02 78    	mov.w     [w13], w4
    1a4c:	08 4a 78    	mov.b     w8, [w4]
    1a4e:	84 0e e8    	inc.w     w4, [w13]
    1a50:	05 00 37    	bra       0x1a5c <.L106>

00001a52 <.L105>:
    1a52:	8d 00 78    	mov.w     w13, w1
    1a54:	00 02 20    	mov.w     #0x20, w0
    1a56:	04 01 07    	rcall     0x1c60 <_fputc>
    1a58:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1a5a:	01 00 32    	bra       Z, 0x1a5e <.L107>

00001a5c <.L106>:
    1a5c:	0e 07 e8    	inc.w     w14, w14

00001a5e <.L107>:
    1a5e:	89 04 e9    	dec.w     w9, w9
    1a60:	f1 ff 3a    	bra       NZ, 0x1a44 <.L151>
    1a62:	f9 af 9f    	mov.w     w9, [w15-34]

00001a64 <.L104>:
    1a64:	e2 02 66    	and.w     w12, #0x2, w5
    1a66:	61 02 66    	and.w     w12, #0x1, w4
    1a68:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1a6a:	11 00 32    	bra       Z, 0x1a8e <.L109>
    1a6c:	bd 02 90    	mov.w     [w13+6], w5
    1a6e:	05 04 b2    	and.w     #0x40, w5
    1a70:	08 00 32    	bra       Z, 0x1a82 <.L110>
    1a72:	9d 02 78    	mov.w     [w13], w5
    1a74:	b6 c2 b3    	mov.b     #0x2b, w6
    1a76:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a78:	01 00 32    	bra       Z, 0x1a7c <.L111>
    1a7a:	06 c3 e8    	inc2.b    w6, w6

00001a7c <.L111>:
    1a7c:	86 4a 78    	mov.b     w6, [w5]
    1a7e:	85 0e e8    	inc.w     w5, [w13]
    1a80:	15 00 37    	bra       0x1aac <.L115>

00001a82 <.L110>:
    1a82:	b0 02 20    	mov.w     #0x2b, w0
    1a84:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a86:	01 00 32    	bra       Z, 0x1a8a <.L113>
    1a88:	00 80 e8    	inc2.w    w0, w0

00001a8a <.L113>:
    1a8a:	8d 00 78    	mov.w     w13, w1
    1a8c:	0c 00 37    	bra       0x1aa6 <.L174>

00001a8e <.L109>:
    1a8e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a90:	0e 00 32    	bra       Z, 0x1aae <.L99>
    1a92:	3d 02 90    	mov.w     [w13+6], w4
    1a94:	04 04 b2    	and.w     #0x40, w4
    1a96:	05 00 32    	bra       Z, 0x1aa2 <.L114>
    1a98:	1d 02 78    	mov.w     [w13], w4
    1a9a:	05 c2 b3    	mov.b     #0x20, w5
    1a9c:	05 4a 78    	mov.b     w5, [w4]
    1a9e:	84 0e e8    	inc.w     w4, [w13]
    1aa0:	05 00 37    	bra       0x1aac <.L115>

00001aa2 <.L114>:
    1aa2:	8d 00 78    	mov.w     w13, w1
    1aa4:	00 02 20    	mov.w     #0x20, w0

00001aa6 <.L174>:
    1aa6:	dc 00 07    	rcall     0x1c60 <_fputc>
    1aa8:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1aaa:	01 00 32    	bra       Z, 0x1aae <.L99>

00001aac <.L115>:
    1aac:	0e 07 e8    	inc.w     w14, w14

00001aae <.L99>:
    1aae:	1f b3 97    	mov.w     [w15-30], w6
    1ab0:	c5 ce 20    	mov.w     #0xcec, w5
    1ab2:	06 02 e9    	dec.w     w6, w4
    1ab4:	f0 04 66    	and.w     w12, #0x10, w9
    1ab6:	c2 23 dd    	sl.w      w4, #0x2, w7
    1ab8:	0c 05 78    	mov.w     w12, w10
    1aba:	c7 a7 9f    	mov.w     w7, [w15-56]
    1abc:	0a 02 b2    	and.w     #0x20, w10
    1abe:	63 23 b9    	mul.su    w4, #0x3, w6
    1ac0:	e9 9f 9f    	mov.w     w9, [w15-68]
    1ac2:	06 04 78    	mov.w     w6, w8
    1ac4:	43 22 dd    	sl.w      w4, #0x3, w4
    1ac6:	b8 a7 9f    	mov.w     w8, [w15-58]
    1ac8:	85 02 42    	add.w     w4, w5, w5
    1aca:	da 9f 9f    	mov.w     w10, [w15-70]
    1acc:	e5 af 9f    	mov.w     w5, [w15-36]
    1ace:	a3 00 37    	bra       0x1c16 <.L116>

00001ad0 <.L129>:
    1ad0:	9f b5 97    	mov.w     [w15-30], w11
    1ad2:	0f b0 97    	mov.w     [w15-32], w0
    1ad4:	8b 05 e9    	dec.w     w11, w11
    1ad6:	01 04 20    	mov.w     #0x40, w1
    1ad8:	9b b7 9f    	mov.w     w11, [w15-30]
    1ada:	81 0f 50    	sub.w     w0, w1, [w15]
    1adc:	73 00 32    	bra       Z, 0x1bc4 <.L119>
    1ade:	03 00 3c    	bra       GT, 0x1ae6 <.L121>
    1ae0:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1ae2:	08 00 32    	bra       Z, 0x1af4 <.L118>
    1ae4:	7e 00 37    	bra       0x1be2 <.L117>

00001ae6 <.L121>:
    1ae6:	04 08 20    	mov.w     #0x80, w4
    1ae8:	0f b1 97    	mov.w     [w15-32], w2
    1aea:	84 0f 51    	sub.w     w2, w4, [w15]
    1aec:	56 00 32    	bra       Z, 0x1b9a <.L120>
    1aee:	04 0c 20    	mov.w     #0xc0, w4
    1af0:	84 0f 51    	sub.w     w2, w4, [w15]
    1af2:	77 00 3a    	bra       NZ, 0x1be2 <.L117>

00001af4 <.L118>:
    1af4:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1af6:	1f 00 3d    	bra       GE, 0x1b36 <.L122>
    1af8:	ef a9 97    	mov.w     [w15-36], w3
    1afa:	33 04 be    	mov.d     [w3++], w8
    1afc:	23 05 be    	mov.d     [w3--], w10
    1afe:	3f b0 97    	mov.w     [w15-26], w0
    1b00:	cf b0 97    	mov.w     [w15-24], w1
    1b02:	5f b1 97    	mov.w     [w15-22], w2
    1b04:	ef b1 97    	mov.w     [w15-20], w3
    1b06:	08 02 be    	mov.d     w8, w4
    1b08:	0a 03 be    	mov.d     w10, w6
    1b0a:	e1 01 07    	rcall     0x1ece <___udivdi3>
    1b0c:	08 02 be    	mov.d     w8, w4
    1b0e:	0a 03 be    	mov.d     w10, w6
    1b10:	e0 77 9f    	mov.b     w0, [w15-74]
    1b12:	00 00 fb    	se        w0, w0
    1b14:	cf 80 de    	asr.w     w0, #0xf, w1
    1b16:	01 01 78    	mov.w     w1, w2
    1b18:	82 01 78    	mov.w     w2, w3
    1b1a:	42 02 07    	rcall     0x1fa0 <___muldi3>
    1b1c:	3f b2 97    	mov.w     [w15-26], w4
    1b1e:	cf b2 97    	mov.w     [w15-24], w5
    1b20:	5f b3 97    	mov.w     [w15-22], w6
    1b22:	ef b3 97    	mov.w     [w15-20], w7
    1b24:	00 02 52    	sub.w     w4, w0, w4
    1b26:	81 82 5a    	subb.w    w5, w1, w5
    1b28:	02 03 5b    	subb.w    w6, w2, w6
    1b2a:	83 83 5b    	subb.w    w7, w3, w7
    1b2c:	b4 b7 9f    	mov.w     w4, [w15-26]
    1b2e:	c5 b7 9f    	mov.w     w5, [w15-24]
    1b30:	d6 b7 9f    	mov.w     w6, [w15-22]
    1b32:	e7 b7 9f    	mov.w     w7, [w15-20]
    1b34:	2e 00 37    	bra       0x1b92 <.L123>

00001b36 <.L122>:
    1b36:	ef 9a 97    	mov.w     [w15-68], w5
    1b38:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1b3a:	22 00 32    	bra       Z, 0x1b80 <.L124>
    1b3c:	6f ab 97    	mov.w     [w15-36], w6
    1b3e:	3f b2 97    	mov.w     [w15-26], w4
    1b40:	cf b2 97    	mov.w     [w15-24], w5
    1b42:	36 04 be    	mov.d     [w6++], w8
    1b44:	26 05 be    	mov.d     [w6--], w10
    1b46:	04 00 be    	mov.d     w4, w0
    1b48:	08 01 be    	mov.d     w8, w2
    1b4a:	84 bf 9f    	mov.w     w4, [w15-16]
    1b4c:	f5 b7 9f    	mov.w     w5, [w15-18]
    1b4e:	00 05 eb    	clr.w     w10
    1b50:	aa fc 07    	rcall     0x14a6 <___udivsi3>
    1b52:	08 01 be    	mov.d     w8, w2
    1b54:	e0 77 9f    	mov.b     w0, [w15-74]
    1b56:	00 00 fb    	se        w0, w0
    1b58:	cf 80 de    	asr.w     w0, #0xf, w1
    1b5a:	08 01 07    	rcall     0x1d6c <___mulp32eds3>
    1b5c:	0f ba 97    	mov.w     [w15-16], w4
    1b5e:	ff b2 97    	mov.w     [w15-18], w5
    1b60:	8a af 9f    	mov.w     w10, [w15-48]
    1b62:	00 04 52    	sub.w     w4, w0, w8
    1b64:	81 84 5a    	subb.w    w5, w1, w9
    1b66:	d8 a7 9f    	mov.w     w8, [w15-54]
    1b68:	e9 a7 9f    	mov.w     w9, [w15-52]
    1b6a:	80 04 eb    	clr.w     w9
    1b6c:	f9 a7 9f    	mov.w     w9, [w15-50]
    1b6e:	5f a0 97    	mov.w     [w15-54], w0
    1b70:	ef a0 97    	mov.w     [w15-52], w1
    1b72:	7f a1 97    	mov.w     [w15-50], w2
    1b74:	8f a9 97    	mov.w     [w15-48], w3
    1b76:	b0 b7 9f    	mov.w     w0, [w15-26]
    1b78:	c1 b7 9f    	mov.w     w1, [w15-24]
    1b7a:	d2 b7 9f    	mov.w     w2, [w15-22]
    1b7c:	e3 b7 9f    	mov.w     w3, [w15-20]
    1b7e:	09 00 37    	bra       0x1b92 <.L123>

00001b80 <.L124>:
    1b80:	ef a8 97    	mov.w     [w15-36], w1
    1b82:	3f b1 97    	mov.w     [w15-26], w2
    1b84:	11 02 78    	mov.w     [w1], w4
    1b86:	11 00 09    	repeat    #0x11
    1b88:	04 81 d8    	div.uw    w2, w4
    1b8a:	a4 00 20    	mov.w     #0xa, w4
    1b8c:	11 00 09    	repeat    #0x11
    1b8e:	04 80 d8    	div.uw    w0, w4
    1b90:	e1 77 9f    	mov.b     w1, [w15-74]

00001b92 <.L123>:
    1b92:	ef 71 97    	mov.b     [w15-74], w3
    1b94:	03 43 b0    	add.b     #0x30, w3
    1b96:	e3 77 9f    	mov.b     w3, [w15-74]
    1b98:	24 00 37    	bra       0x1be2 <.L117>

00001b9a <.L120>:
    1b9a:	d4 d9 20    	mov.w     #0xd9d, w4
    1b9c:	df 9a 97    	mov.w     [w15-70], w5
    1b9e:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1ba0:	01 00 32    	bra       Z, 0x1ba4 <.L125>
    1ba2:	c4 d8 20    	mov.w     #0xd8c, w4

00001ba4 <.L125>:
    1ba4:	3f b0 97    	mov.w     [w15-26], w0
    1ba6:	cf b0 97    	mov.w     [w15-24], w1
    1ba8:	5f b1 97    	mov.w     [w15-22], w2
    1baa:	ef b1 97    	mov.w     [w15-20], w3
    1bac:	4f a3 97    	mov.w     [w15-56], w6

00001bae <.LB1128>:
    1bae:	06 03 e9    	dec.w     w6, w6
    1bb0:	05 00 33    	bra       N, 0x1bbc <.LE1128>
    1bb2:	83 01 d1    	lsr.w     w3, w3
    1bb4:	02 81 d3    	rrc.w     w2, w2
    1bb6:	81 80 d3    	rrc.w     w1, w1
    1bb8:	00 80 d3    	rrc.w     w0, w0
    1bba:	f9 ff 37    	bra       0x1bae <.LB1128>

00001bbc <.LE1128>:
    1bbc:	6f 00 60    	and.w     w0, #0xf, w0
    1bbe:	64 40 78    	mov.b     [w4+w0], w0
    1bc0:	e0 77 9f    	mov.b     w0, [w15-74]
    1bc2:	0f 00 37    	bra       0x1be2 <.L117>

00001bc4 <.L119>:
    1bc4:	3f b2 97    	mov.w     [w15-26], w4
    1bc6:	cf b2 97    	mov.w     [w15-24], w5
    1bc8:	5f b3 97    	mov.w     [w15-22], w6
    1bca:	ef b3 97    	mov.w     [w15-20], w7
    1bcc:	3f a4 97    	mov.w     [w15-58], w8

00001bce <.LB1138>:
    1bce:	08 04 e9    	dec.w     w8, w8
    1bd0:	05 00 33    	bra       N, 0x1bdc <.LE1138>
    1bd2:	87 03 d1    	lsr.w     w7, w7
    1bd4:	06 83 d3    	rrc.w     w6, w6
    1bd6:	85 82 d3    	rrc.w     w5, w5
    1bd8:	04 82 d3    	rrc.w     w4, w4
    1bda:	f9 ff 37    	bra       0x1bce <.LB1138>

00001bdc <.LE1138>:
    1bdc:	67 42 62    	and.b     w4, #0x7, w4
    1bde:	04 43 b0    	add.b     #0x30, w4
    1be0:	e4 77 9f    	mov.b     w4, [w15-74]

00001be2 <.L117>:
    1be2:	3d 02 90    	mov.w     [w13+6], w4
    1be4:	04 04 b2    	and.w     #0x40, w4
    1be6:	07 00 32    	bra       Z, 0x1bf6 <.L126>
    1be8:	9d 02 78    	mov.w     [w13], w5
    1bea:	6f 72 97    	mov.b     [w15-74], w4
    1bec:	84 4a 78    	mov.b     w4, [w5]
    1bee:	85 0e e8    	inc.w     w5, [w13]
    1bf0:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    1bf2:	07 00 3a    	bra       NZ, 0x1c02 <.L127>
    1bf4:	07 00 37    	bra       0x1c04 <.L128>

00001bf6 <.L126>:
    1bf6:	ef 74 97    	mov.b     [w15-74], w9
    1bf8:	8d 00 78    	mov.w     w13, w1
    1bfa:	09 00 fb    	se        w9, w0
    1bfc:	31 00 07    	rcall     0x1c60 <_fputc>
    1bfe:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c00:	01 00 32    	bra       Z, 0x1c04 <.L128>

00001c02 <.L127>:
    1c02:	0e 07 e8    	inc.w     w14, w14

00001c04 <.L128>:
    1c04:	4f a5 97    	mov.w     [w15-56], w10
    1c06:	bf a5 97    	mov.w     [w15-58], w11
    1c08:	6f a8 97    	mov.w     [w15-36], w0
    1c0a:	64 05 55    	sub.w     w10, #0x4, w10
    1c0c:	e3 85 55    	sub.w     w11, #0x3, w11
    1c0e:	68 00 50    	sub.w     w0, #0x8, w0
    1c10:	ca a7 9f    	mov.w     w10, [w15-56]
    1c12:	bb a7 9f    	mov.w     w11, [w15-58]
    1c14:	e0 af 9f    	mov.w     w0, [w15-36]

00001c16 <.L116>:
    1c16:	9f b0 97    	mov.w     [w15-30], w1
    1c18:	e0 8f 50    	sub.w     w1, #0x0, [w15]
    1c1a:	5a ff 3a    	bra       NZ, 0x1ad0 <.L129>
    1c1c:	68 06 66    	and.w     w12, #0x8, w12
    1c1e:	14 00 32    	bra       Z, 0x1c48 <.L162>
    1c20:	7f a9 97    	mov.w     [w15-34], w2
    1c22:	e0 0f 51    	sub.w     w2, #0x0, [w15]
    1c24:	11 00 34    	bra       LE, 0x1c48 <.L162>
    1c26:	08 c2 b3    	mov.b     #0x20, w8
    1c28:	82 04 78    	mov.w     w2, w9

00001c2a <.L149>:
    1c2a:	3d 02 90    	mov.w     [w13+6], w4
    1c2c:	04 04 b2    	and.w     #0x40, w4
    1c2e:	04 00 32    	bra       Z, 0x1c38 <.L130>
    1c30:	1d 02 78    	mov.w     [w13], w4
    1c32:	08 4a 78    	mov.b     w8, [w4]
    1c34:	84 0e e8    	inc.w     w4, [w13]
    1c36:	05 00 37    	bra       0x1c42 <.L131>

00001c38 <.L130>:
    1c38:	8d 00 78    	mov.w     w13, w1
    1c3a:	00 02 20    	mov.w     #0x20, w0
    1c3c:	11 00 07    	rcall     0x1c60 <_fputc>
    1c3e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1c40:	01 00 32    	bra       Z, 0x1c44 <.L132>

00001c42 <.L131>:
    1c42:	0e 07 e8    	inc.w     w14, w14

00001c44 <.L132>:
    1c44:	89 04 e9    	dec.w     w9, w9
    1c46:	f1 ff 3a    	bra       NZ, 0x1c2a <.L149>

00001c48 <.L162>:
    1c48:	df a9 97    	mov.w     [w15-38], w3
    1c4a:	13 40 78    	mov.b     [w3], w0
    1c4c:	e0 77 9f    	mov.b     w0, [w15-74]
    1c4e:	e0 4f 50    	sub.b     w0, #0x0, [w15]
    1c50:	95 fc 3a    	bra       NZ, 0x157c <.L134>

00001c52 <.L26>:
    1c52:	0e 00 78    	mov.w     w14, w0
    1c54:	4f 07 78    	mov.w     [--w15], w14
    1c56:	4f 06 be    	mov.d     [--w15], w12
    1c58:	4f 05 be    	mov.d     [--w15], w10
    1c5a:	4f 04 be    	mov.d     [--w15], w8
    1c5c:	ef 03 b1    	sub.w     #0x3e, w15
    1c5e:	00 00 06    	return    

00001c60 <_fputc>:
    1c60:	88 9f be    	mov.d     w8, [w15++]
    1c62:	01 04 78    	mov.w     w1, w8
    1c64:	80 84 eb    	setm.w    w9
    1c66:	38 02 90    	mov.w     [w8+6], w4
    1c68:	e2 02 62    	and.w     w4, #0x2, w5
    1c6a:	3b 00 32    	bra       Z, 0x1ce2 <.L2>
    1c6c:	04 03 78    	mov.w     w4, w6
    1c6e:	98 02 90    	mov.w     [w8+2], w5
    1c70:	06 20 b2    	and.w     #0x200, w6
    1c72:	02 00 3a    	bra       NZ, 0x1c78 <.L3>
    1c74:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1c76:	35 00 3a    	bra       NZ, 0x1ce2 <.L2>

00001c78 <.L3>:
    1c78:	04 90 a0    	bset.w    w4, #0x9
    1c7a:	80 04 78    	mov.w     w0, w9
    1c7c:	34 04 98    	mov.w     w4, [w8+6]
    1c7e:	f9 0f b2    	and.w     #0xff, w9
    1c80:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1c82:	02 00 3a    	bra       NZ, 0x1c88 <.L4>
    1c84:	a8 02 90    	mov.w     [w8+4], w5
    1c86:	05 0c 78    	mov.w     w5, [w8]

00001c88 <.L4>:
    1c88:	ea 8f 54    	sub.w     w9, #0xa, [w15]
    1c8a:	05 00 3a    	bra       NZ, 0x1c96 <.L5>
    1c8c:	04 08 b2    	and.w     #0x80, w4
    1c8e:	03 00 3a    	bra       NZ, 0x1c96 <.L5>
    1c90:	88 00 78    	mov.w     w8, w1
    1c92:	d0 00 20    	mov.w     #0xd, w0
    1c94:	e5 ff 07    	rcall     0x1c60 <_fputc>

00001c96 <.L5>:
    1c96:	18 02 90    	mov.w     [w8+2], w4
    1c98:	d8 02 90    	mov.w     [w8+10], w5
    1c9a:	85 0f 52    	sub.w     w4, w5, [w15]
    1c9c:	0b 00 32    	bra       Z, 0x1cb4 <.L6>
    1c9e:	04 02 e8    	inc.w     w4, w4
    1ca0:	15 c0 b3    	mov.b     #0x1, w5
    1ca2:	14 04 98    	mov.w     w4, [w8+2]
    1ca4:	18 02 78    	mov.w     [w8], w4
    1ca6:	09 4a 78    	mov.b     w9, [w4]
    1ca8:	04 0c e8    	inc.w     w4, [w8]
    1caa:	c4 dd 20    	mov.w     #0xddc, w4
    1cac:	05 4a 78    	mov.b     w5, [w4]
    1cae:	ea 8f 54    	sub.w     w9, #0xa, [w15]
    1cb0:	18 00 3a    	bra       NZ, 0x1ce2 <.L2>
    1cb2:	05 00 37    	bra       0x1cbe <.L11>

00001cb4 <.L6>:
    1cb4:	09 40 78    	mov.b     w9, w0
    1cb6:	88 00 78    	mov.w     w8, w1
    1cb8:	17 00 07    	rcall     0x1ce8 <__flsbuf>
    1cba:	80 04 78    	mov.w     w0, w9
    1cbc:	12 00 37    	bra       0x1ce2 <.L2>

00001cbe <.L11>:
    1cbe:	38 02 90    	mov.w     [w8+6], w4
    1cc0:	04 10 b2    	and.w     #0x100, w4
    1cc2:	0f 00 32    	bra       Z, 0x1ce2 <.L2>
    1cc4:	18 01 90    	mov.w     [w8+2], w2
    1cc6:	a8 00 90    	mov.w     [w8+4], w1
    1cc8:	48 00 90    	mov.w     [w8+8], w0
    1cca:	8b 03 07    	rcall     0x23e2 <_write>
    1ccc:	18 02 90    	mov.w     [w8+2], w4
    1cce:	84 0f 50    	sub.w     w0, w4, [w15]
    1cd0:	04 00 32    	bra       Z, 0x1cda <.L8>
    1cd2:	38 02 90    	mov.w     [w8+6], w4
    1cd4:	04 03 b3    	ior.w     #0x30, w4
    1cd6:	34 04 98    	mov.w     w4, [w8+6]
    1cd8:	80 84 eb    	setm.w    w9

00001cda <.L8>:
    1cda:	00 02 eb    	clr.w     w4
    1cdc:	14 04 98    	mov.w     w4, [w8+2]
    1cde:	28 02 90    	mov.w     [w8+4], w4
    1ce0:	04 0c 78    	mov.w     w4, [w8]

00001ce2 <.L2>:
    1ce2:	09 00 78    	mov.w     w9, w0
    1ce4:	4f 04 be    	mov.d     [--w15], w8
    1ce6:	00 00 06    	return    

00001ce8 <__flsbuf>:
    1ce8:	02 00 fa    	lnk       #0x2
    1cea:	88 9f be    	mov.d     w8, [w15++]
    1cec:	01 04 78    	mov.w     w1, w8
    1cee:	a0 ff 9f    	mov.b     w0, [w15-6]
    1cf0:	38 02 90    	mov.w     [w8+6], w4
    1cf2:	84 02 78    	mov.w     w4, w5
    1cf4:	05 04 b2    	and.w     #0x40, w5
    1cf6:	02 00 32    	bra       Z, 0x1cfc <.L2>
    1cf8:	00 00 fb    	se        w0, w0
    1cfa:	35 00 37    	bra       0x1d66 <.L3>

00001cfc <.L2>:
    1cfc:	e2 02 62    	and.w     w4, #0x2, w5
    1cfe:	05 00 3a    	bra       NZ, 0x1d0a <.L4>
    1d00:	04 03 b3    	ior.w     #0x30, w4
    1d02:	15 04 98    	mov.w     w5, [w8+2]
    1d04:	34 04 98    	mov.w     w4, [w8+6]
    1d06:	00 80 eb    	setm.w    w0
    1d08:	2e 00 37    	bra       0x1d66 <.L3>

00001d0a <.L4>:
    1d0a:	d8 04 90    	mov.w     [w8+10], w9
    1d0c:	e0 8f 54    	sub.w     w9, #0x0, [w15]
    1d0e:	06 00 3a    	bra       NZ, 0x1d1c <.L5>
    1d10:	12 00 20    	mov.w     #0x1, w2
    1d12:	e6 80 57    	sub.w     w15, #0x6, w1
    1d14:	48 00 90    	mov.w     [w8+8], w0
    1d16:	65 03 07    	rcall     0x23e2 <_write>
    1d18:	19 04 98    	mov.w     w9, [w8+2]
    1d1a:	23 00 37    	bra       0x1d62 <.L7>

00001d1c <.L5>:
    1d1c:	a8 02 90    	mov.w     [w8+4], w5
    1d1e:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1d20:	08 00 3a    	bra       NZ, 0x1d32 <.L6>
    1d22:	05 de 20    	mov.w     #0xde0, w5
    1d24:	04 30 a0    	bset.w    w4, #0x3
    1d26:	25 04 98    	mov.w     w5, [w8+4]
    1d28:	05 0c 78    	mov.w     w5, [w8]
    1d2a:	34 04 98    	mov.w     w4, [w8+6]
    1d2c:	25 00 20    	mov.w     #0x2, w5
    1d2e:	55 04 98    	mov.w     w5, [w8+10]
    1d30:	15 04 98    	mov.w     w5, [w8+2]

00001d32 <.L6>:
    1d32:	18 01 90    	mov.w     [w8+2], w2
    1d34:	a8 00 90    	mov.w     [w8+4], w1
    1d36:	48 00 90    	mov.w     [w8+8], w0
    1d38:	54 03 07    	rcall     0x23e2 <_write>
    1d3a:	28 02 90    	mov.w     [w8+4], w4
    1d3c:	80 82 eb    	setm.w    w5
    1d3e:	15 04 98    	mov.w     w5, [w8+2]
    1d40:	af fa 97    	mov.b     [w15-6], w5
    1d42:	05 4a 78    	mov.b     w5, [w4]
    1d44:	04 0c e8    	inc.w     w4, [w8]
    1d46:	2f fa 97    	mov.b     [w15-6], w4
    1d48:	ea 4f 52    	sub.b     w4, #0xa, [w15]
    1d4a:	0b 00 3a    	bra       NZ, 0x1d62 <.L7>
    1d4c:	38 02 90    	mov.w     [w8+6], w4
    1d4e:	04 10 b2    	and.w     #0x100, w4
    1d50:	08 00 32    	bra       Z, 0x1d62 <.L7>
    1d52:	18 01 90    	mov.w     [w8+2], w2
    1d54:	a8 00 90    	mov.w     [w8+4], w1
    1d56:	48 00 90    	mov.w     [w8+8], w0
    1d58:	44 03 07    	rcall     0x23e2 <_write>
    1d5a:	00 02 eb    	clr.w     w4
    1d5c:	a8 02 90    	mov.w     [w8+4], w5
    1d5e:	14 04 98    	mov.w     w4, [w8+2]
    1d60:	05 0c 78    	mov.w     w5, [w8]

00001d62 <.L7>:
    1d62:	2f fa 97    	mov.b     [w15-6], w4
    1d64:	04 00 fb    	se        w4, w0

00001d66 <.L3>:
    1d66:	4f 04 be    	mov.d     [--w15], w8
    1d68:	00 80 fa    	ulnk      
    1d6a:	00 00 06    	return    

00001d6c <___mulp32eds3>:
    1d6c:	02 0a b9    	mul.su    w1, w2, w4
    1d6e:	00 1b b9    	mul.su    w3, w0, w6
    1d70:	02 00 b8    	mul.uu    w0, w2, w0
    1d72:	81 00 42    	add.w     w4, w1, w1
    1d74:	81 00 43    	add.w     w6, w1, w1
    1d76:	00 00 06    	return    

00001d78 <___PplusBdi>:
    1d78:	88 9f be    	mov.d     w8, [w15++]
    1d7a:	8a 9f be    	mov.d     w10, [w15++]
    1d7c:	30 04 be    	mov.d     [w0++], w8
    1d7e:	20 05 be    	mov.d     [w0--], w10
    1d80:	04 04 44    	add.w     w8, w4, w8
    1d82:	85 84 4c    	addc.w    w9, w5, w9
    1d84:	06 05 4d    	addc.w    w10, w6, w10
    1d86:	87 85 4d    	addc.w    w11, w7, w11
    1d88:	08 98 be    	mov.d     w8, [w0++]
    1d8a:	0a 90 be    	mov.d     w10, [w0--]
    1d8c:	04 40 e1    	cp.w      w8, w4
    1d8e:	05 c8 e1    	cpb.w     w9, w5
    1d90:	06 d0 e1    	cpb.w     w10, w6
    1d92:	07 d8 e1    	cpb.w     w11, w7
    1d94:	02 00 31    	bra       C, 0x1d9a <.L1>
    1d96:	68 00 40    	add.w     w0, #0x8, w0
    1d98:	10 08 e8    	inc.w     [w0], [w0]

00001d9a <.L1>:
    1d9a:	4f 05 be    	mov.d     [--w15], w10
    1d9c:	4f 04 be    	mov.d     [--w15], w8
    1d9e:	00 00 06    	return    

00001da0 <___PminusBdi>:
    1da0:	10 00 fa    	lnk       #0x10
    1da2:	88 9f be    	mov.d     w8, [w15++]
    1da4:	8a 9f be    	mov.d     w10, [w15++]
    1da6:	11 00 20    	mov.w     #0x1, w1
    1da8:	06 05 be    	mov.d     w6, w10
    1daa:	04 04 be    	mov.d     w4, w8
    1dac:	30 02 be    	mov.d     [w0++], w4
    1dae:	20 03 be    	mov.d     [w0--], w6
    1db0:	c4 b7 9f    	mov.w     w4, [w15-24]
    1db2:	d5 b7 9f    	mov.w     w5, [w15-22]
    1db4:	e6 b7 9f    	mov.w     w6, [w15-20]
    1db6:	f7 b7 9f    	mov.w     w7, [w15-18]
    1db8:	08 02 52    	sub.w     w4, w8, w4
    1dba:	89 82 5a    	subb.w    w5, w9, w5
    1dbc:	0a 03 5b    	subb.w    w6, w10, w6
    1dbe:	8b 83 5b    	subb.w    w7, w11, w7
    1dc0:	84 bf 9f    	mov.w     w4, [w15-16]
    1dc2:	95 bf 9f    	mov.w     w5, [w15-14]
    1dc4:	a6 bf 9f    	mov.w     w6, [w15-12]
    1dc6:	b7 bf 9f    	mov.w     w7, [w15-10]
    1dc8:	04 98 be    	mov.d     w4, [w0++]
    1dca:	06 98 be    	mov.d     w6, [w0++]
    1dcc:	4f b2 97    	mov.w     [w15-24], w4
    1dce:	df b2 97    	mov.w     [w15-22], w5
    1dd0:	6f b3 97    	mov.w     [w15-20], w6
    1dd2:	ff b3 97    	mov.w     [w15-18], w7
    1dd4:	08 20 e1    	cp.w      w4, w8
    1dd6:	09 a8 e1    	cpb.w     w5, w9
    1dd8:	0a b0 e1    	cpb.w     w6, w10
    1dda:	0b b8 e1    	cpb.w     w7, w11
    1ddc:	01 00 39    	bra       NC, 0x1de0 <.L4>
    1dde:	80 00 eb    	clr.w     w1

00001de0 <.L4>:
    1de0:	4f 05 be    	mov.d     [--w15], w10
    1de2:	10 88 10    	subr.w    w1, [w0], [w0]
    1de4:	4f 04 be    	mov.d     [--w15], w8
    1de6:	00 80 fa    	ulnk      
    1de8:	00 00 06    	return    

00001dea <___udivmoddi3>:
    1dea:	14 00 fa    	lnk       #0x14
    1dec:	88 9f be    	mov.d     w8, [w15++]
    1dee:	8a 9f be    	mov.d     w10, [w15++]
    1df0:	8c 9f be    	mov.d     w12, [w15++]
    1df2:	00 06 eb    	clr.w     w12
    1df4:	3e 00 07    	rcall     0x1e72 <L0>
    1df6:	cc b7 9f    	mov.w     w12, [w15-24]
    1df8:	bc b7 9f    	mov.w     w12, [w15-26]
    1dfa:	ac b7 9f    	mov.w     w12, [w15-28]
    1dfc:	9c b7 9f    	mov.w     w12, [w15-30]
    1dfe:	8c b7 9f    	mov.w     w12, [w15-32]
    1e00:	06 05 be    	mov.d     w6, w10
    1e02:	04 04 be    	mov.d     w4, w8
    1e04:	0d 04 20    	mov.w     #0x40, w13

00001e06 <.L9>:
    1e06:	4f b3 97    	mov.w     [w15-24], w6
    1e08:	bf b2 97    	mov.w     [w15-26], w5
    1e0a:	86 03 43    	add.w     w6, w6, w7
    1e0c:	2f b2 97    	mov.w     [w15-28], w4
    1e0e:	e0 0f 53    	sub.w     w6, #0x0, [w15]
    1e10:	04 00 3d    	bra       GE, 0x1e1a <.L6>
    1e12:	3d 00 07    	rcall     0x1e8e <.LPA0>
    1e14:	0f 00 40    	add.w     w0, w15, w0
    1e16:	b0 ff 07    	rcall     0x1d78 <___PplusBdi>
    1e18:	03 00 37    	bra       0x1e20 <.L7>

00001e1a <.L6>:
    1e1a:	39 00 07    	rcall     0x1e8e <.LPA0>
    1e1c:	0f 00 40    	add.w     w0, w15, w0
    1e1e:	c0 ff 07    	rcall     0x1da0 <___PminusBdi>

00001e20 <.L7>:
    1e20:	cf b2 97    	mov.w     [w15-24], w5
    1e22:	95 bf 9f    	mov.w     w5, [w15-14]
    1e24:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1e26:	09 00 35    	bra       LT, 0x1e3a <.L8>
    1e28:	2b 00 07    	rcall     0x1e80 <.LPA3>
    1e2a:	14 00 20    	mov.w     #0x1, w4
    1e2c:	05 00 20    	mov.w     #0x0, w5
    1e2e:	60 33 b8    	mul.uu    w6, #0x0, w6
    1e30:	00 00 72    	ior.w     w4, w0, w0
    1e32:	81 80 72    	ior.w     w5, w1, w1
    1e34:	02 01 73    	ior.w     w6, w2, w2
    1e36:	83 81 73    	ior.w     w7, w3, w3
    1e38:	1c 00 07    	rcall     0x1e72 <L0>

00001e3a <.L8>:
    1e3a:	0c 06 e8    	inc.w     w12, w12
    1e3c:	8d 0f 56    	sub.w     w12, w13, [w15]
    1e3e:	e3 ff 3a    	bra       NZ, 0x1e06 <.L9>
    1e40:	1f ba 97    	mov.w     [w15-14], w4
    1e42:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1e44:	05 00 3d    	bra       GE, 0x1e50 <.L10>
    1e46:	08 02 be    	mov.d     w8, w4
    1e48:	0a 03 be    	mov.d     w10, w6
    1e4a:	00 fe 2f    	mov.w     #0xffe0, w0
    1e4c:	0f 00 40    	add.w     w0, w15, w0
    1e4e:	94 ff 07    	rcall     0x1d78 <___PplusBdi>

00001e50 <.L10>:
    1e50:	4f aa 97    	mov.w     [w15-40], w4
    1e52:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1e54:	08 00 3a    	bra       NZ, 0x1e66 <.L11>
    1e56:	0f b4 97    	mov.w     [w15-32], w8
    1e58:	9f b4 97    	mov.w     [w15-30], w9
    1e5a:	2f b5 97    	mov.w     [w15-28], w10
    1e5c:	bf b5 97    	mov.w     [w15-26], w11
    1e5e:	d8 b7 9f    	mov.w     w8, [w15-22]
    1e60:	e9 b7 9f    	mov.w     w9, [w15-20]
    1e62:	fa b7 9f    	mov.w     w10, [w15-18]
    1e64:	8b bf 9f    	mov.w     w11, [w15-16]

00001e66 <.L11>:
    1e66:	0c 00 07    	rcall     0x1e80 <.LPA3>
    1e68:	4f 06 be    	mov.d     [--w15], w12
    1e6a:	4f 05 be    	mov.d     [--w15], w10
    1e6c:	4f 04 be    	mov.d     [--w15], w8
    1e6e:	00 80 fa    	ulnk      
    1e70:	00 00 06    	return    

00001e72 <L0>:
    1e72:	01 00 07    	rcall     0x1e76 <.LPA6>
    1e74:	00 00 06    	return    

00001e76 <.LPA6>:
    1e76:	90 b7 9f    	mov.w     w0, [w15-30]
    1e78:	a1 b7 9f    	mov.w     w1, [w15-28]
    1e7a:	b2 b7 9f    	mov.w     w2, [w15-26]
    1e7c:	c3 b7 9f    	mov.w     w3, [w15-24]
    1e7e:	00 00 06    	return    

00001e80 <.LPA3>:
    1e80:	01 00 07    	rcall     0x1e84 <.LPA5>
    1e82:	00 00 06    	return    

00001e84 <.LPA5>:
    1e84:	1f b0 97    	mov.w     [w15-30], w0
    1e86:	af b0 97    	mov.w     [w15-28], w1
    1e88:	3f b1 97    	mov.w     [w15-26], w2
    1e8a:	cf b1 97    	mov.w     [w15-24], w3
    1e8c:	00 00 06    	return    

00001e8e <.LPA0>:
    1e8e:	4f 2b de    	lsr.w     w5, #0xf, w6
    1e90:	f9 ff 07    	rcall     0x1e84 <.LPA5>
    1e92:	86 83 73    	ior.w     w7, w6, w7
    1e94:	85 82 42    	add.w     w5, w5, w5
    1e96:	4f 23 de    	lsr.w     w4, #0xf, w6
    1e98:	a7 b7 9f    	mov.w     w7, [w15-28]
    1e9a:	86 82 72    	ior.w     w5, w6, w5
    1e9c:	04 02 42    	add.w     w4, w4, w4
    1e9e:	95 b7 9f    	mov.w     w5, [w15-30]
    1ea0:	ff aa 97    	mov.w     [w15-34], w5
    1ea2:	4f 2b de    	lsr.w     w5, #0xf, w6
    1ea4:	85 82 42    	add.w     w5, w5, w5
    1ea6:	06 02 72    	ior.w     w4, w6, w4
    1ea8:	84 b7 9f    	mov.w     w4, [w15-32]
    1eaa:	6f aa 97    	mov.w     [w15-36], w4
    1eac:	4f 23 de    	lsr.w     w4, #0xf, w6
    1eae:	04 02 42    	add.w     w4, w4, w4
    1eb0:	86 82 72    	ior.w     w5, w6, w5
    1eb2:	f5 af 9f    	mov.w     w5, [w15-34]
    1eb4:	4f 18 de    	lsr.w     w3, #0xf, w0
    1eb6:	00 02 72    	ior.w     w4, w0, w4
    1eb8:	e5 ff 07    	rcall     0x1e84 <.LPA5>
    1eba:	e4 af 9f    	mov.w     w4, [w15-36]
    1ebc:	00 00 40    	add.w     w0, w0, w0
    1ebe:	81 80 48    	addc.w    w1, w1, w1
    1ec0:	02 01 49    	addc.w    w2, w2, w2
    1ec2:	83 81 49    	addc.w    w3, w3, w3
    1ec4:	08 02 be    	mov.d     w8, w4
    1ec6:	0a 03 be    	mov.d     w10, w6
    1ec8:	d6 ff 07    	rcall     0x1e76 <.LPA6>
    1eca:	00 fe 2f    	mov.w     #0xffe0, w0
    1ecc:	00 00 06    	return    

00001ece <___udivdi3>:
    1ece:	88 1f 78    	mov.w     w8, [w15++]
    1ed0:	18 00 20    	mov.w     #0x1, w8
    1ed2:	88 1f 78    	mov.w     w8, [w15++]
    1ed4:	8a ff 07    	rcall     0x1dea <___udivmoddi3>
    1ed6:	8f 87 e9    	dec2.w    w15, w15
    1ed8:	4f 04 78    	mov.w     [--w15], w8
    1eda:	00 00 06    	return    

00001edc <___umoddi3>:
    1edc:	80 1f eb    	clr.w     [w15++]
    1ede:	85 ff 07    	rcall     0x1dea <___udivmoddi3>
    1ee0:	8f 87 e9    	dec2.w    w15, w15
    1ee2:	00 00 06    	return    

00001ee4 <___divdi3>:
    1ee4:	88 9f be    	mov.d     w8, [w15++]
    1ee6:	8a 9f be    	mov.d     w10, [w15++]
    1ee8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1eea:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1eec:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1eee:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1ef0:	0c 00 3d    	bra       GE, 0x1f0a <.L16>
    1ef2:	60 44 b8    	mul.uu    w8, #0x0, w8
    1ef4:	60 55 b8    	mul.uu    w10, #0x0, w10
    1ef6:	00 00 54    	sub.w     w8, w0, w0
    1ef8:	81 80 5c    	subb.w    w9, w1, w1
    1efa:	02 01 5d    	subb.w    w10, w2, w2
    1efc:	83 81 5d    	subb.w    w11, w3, w3
    1efe:	18 00 20    	mov.w     #0x1, w8
    1f00:	15 00 07    	rcall     0x1f2c <L0>
    1f02:	08 00 3d    	bra       GE, 0x1f14 <.L17>
    1f04:	18 00 07    	rcall     0x1f36 <.LPA1>
    1f06:	00 04 eb    	clr.w     w8
    1f08:	05 00 37    	bra       0x1f14 <.L17>

00001f0a <.L16>:
    1f0a:	00 04 eb    	clr.w     w8
    1f0c:	0f 00 07    	rcall     0x1f2c <L0>
    1f0e:	02 00 3d    	bra       GE, 0x1f14 <.L17>
    1f10:	12 00 07    	rcall     0x1f36 <.LPA1>
    1f12:	18 00 20    	mov.w     #0x1, w8

00001f14 <.L17>:
    1f14:	dc ff 07    	rcall     0x1ece <___udivdi3>
    1f16:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1f18:	06 00 32    	bra       Z, 0x1f26 <.L18>
    1f1a:	60 22 b8    	mul.uu    w4, #0x0, w4
    1f1c:	60 33 b8    	mul.uu    w6, #0x0, w6
    1f1e:	00 00 52    	sub.w     w4, w0, w0
    1f20:	81 80 5a    	subb.w    w5, w1, w1
    1f22:	02 01 5b    	subb.w    w6, w2, w2
    1f24:	83 81 5b    	subb.w    w7, w3, w3

00001f26 <.L18>:
    1f26:	4f 05 be    	mov.d     [--w15], w10
    1f28:	4f 04 be    	mov.d     [--w15], w8
    1f2a:	00 00 06    	return    

00001f2c <L0>:
    1f2c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f2e:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f30:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1f32:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1f34:	00 00 06    	return    

00001f36 <.LPA1>:
    1f36:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f38:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f3a:	04 02 54    	sub.w     w8, w4, w4
    1f3c:	85 82 5c    	subb.w    w9, w5, w5
    1f3e:	06 03 5d    	subb.w    w10, w6, w6
    1f40:	87 83 5d    	subb.w    w11, w7, w7
    1f42:	00 00 06    	return    

00001f44 <___moddi3>:
    1f44:	88 9f be    	mov.d     w8, [w15++]
    1f46:	8a 9f be    	mov.d     w10, [w15++]
    1f48:	8c 1f 78    	mov.w     w12, [w15++]
    1f4a:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1f4c:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1f4e:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1f50:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1f52:	0d 00 3d    	bra       GE, 0x1f6e <.L22>
    1f54:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f56:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f58:	1c 00 20    	mov.w     #0x1, w12
    1f5a:	00 00 54    	sub.w     w8, w0, w0
    1f5c:	81 80 5c    	subb.w    w9, w1, w1
    1f5e:	02 01 5d    	subb.w    w10, w2, w2
    1f60:	83 81 5d    	subb.w    w11, w3, w3
    1f62:	08 20 e1    	cp.w      w4, w8
    1f64:	09 a8 e1    	cpb.w     w5, w9
    1f66:	0a b0 e1    	cpb.w     w6, w10
    1f68:	0b b8 e1    	cpb.w     w7, w11
    1f6a:	0d 00 3d    	bra       GE, 0x1f86 <.L23>
    1f6c:	08 00 37    	bra       0x1f7e <.L27>

00001f6e <.L22>:
    1f6e:	00 06 eb    	clr.w     w12
    1f70:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f72:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f74:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1f76:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1f78:	06 00 3d    	bra       GE, 0x1f86 <.L23>
    1f7a:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f7c:	60 55 b8    	mul.uu    w10, #0x0, w10

00001f7e <.L27>:
    1f7e:	04 02 54    	sub.w     w8, w4, w4
    1f80:	85 82 5c    	subb.w    w9, w5, w5
    1f82:	06 03 5d    	subb.w    w10, w6, w6
    1f84:	87 83 5d    	subb.w    w11, w7, w7

00001f86 <.L23>:
    1f86:	aa ff 07    	rcall     0x1edc <___umoddi3>
    1f88:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1f8a:	06 00 32    	bra       Z, 0x1f98 <.L24>
    1f8c:	60 22 b8    	mul.uu    w4, #0x0, w4
    1f8e:	60 33 b8    	mul.uu    w6, #0x0, w6
    1f90:	00 00 52    	sub.w     w4, w0, w0
    1f92:	81 80 5a    	subb.w    w5, w1, w1
    1f94:	02 01 5b    	subb.w    w6, w2, w2
    1f96:	83 81 5b    	subb.w    w7, w3, w3

00001f98 <.L24>:
    1f98:	4f 06 78    	mov.w     [--w15], w12
    1f9a:	4f 05 be    	mov.d     [--w15], w10
    1f9c:	4f 04 be    	mov.d     [--w15], w8
    1f9e:	00 00 06    	return    

00001fa0 <___muldi3>:
    1fa0:	88 9f be    	mov.d     w8, [w15++]
    1fa2:	8a 9f be    	mov.d     w10, [w15++]
    1fa4:	8c 1f 78    	mov.w     w12, [w15++]
    1fa6:	00 06 eb    	clr.w     w12
    1fa8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1faa:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1fac:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1fae:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1fb0:	07 00 3d    	bra       GE, 0x1fc0 <.L2>
    1fb2:	60 44 b8    	mul.uu    w8, #0x0, w8
    1fb4:	60 55 b8    	mul.uu    w10, #0x0, w10
    1fb6:	1c 00 20    	mov.w     #0x1, w12
    1fb8:	00 00 54    	sub.w     w8, w0, w0
    1fba:	81 80 5c    	subb.w    w9, w1, w1
    1fbc:	02 01 5d    	subb.w    w10, w2, w2
    1fbe:	83 81 5d    	subb.w    w11, w3, w3

00001fc0 <.L2>:
    1fc0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1fc2:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1fc4:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1fc6:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1fc8:	07 00 3d    	bra       GE, 0x1fd8 <.L3>
    1fca:	60 44 b8    	mul.uu    w8, #0x0, w8
    1fcc:	60 55 b8    	mul.uu    w10, #0x0, w10
    1fce:	0c 00 a2    	btg.w     w12, #0x0
    1fd0:	04 02 54    	sub.w     w8, w4, w4
    1fd2:	85 82 5c    	subb.w    w9, w5, w5
    1fd4:	06 03 5d    	subb.w    w10, w6, w6
    1fd6:	87 83 5d    	subb.w    w11, w7, w7

00001fd8 <.L3>:
    1fd8:	0c 00 07    	rcall     0x1ff2 <___umuldi3>
    1fda:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1fdc:	06 00 32    	bra       Z, 0x1fea <.L4>
    1fde:	60 22 b8    	mul.uu    w4, #0x0, w4
    1fe0:	60 33 b8    	mul.uu    w6, #0x0, w6
    1fe2:	00 00 52    	sub.w     w4, w0, w0
    1fe4:	81 80 5a    	subb.w    w5, w1, w1
    1fe6:	02 01 5b    	subb.w    w6, w2, w2
    1fe8:	83 81 5b    	subb.w    w7, w3, w3

00001fea <.L4>:
    1fea:	4f 06 78    	mov.w     [--w15], w12
    1fec:	4f 05 be    	mov.d     [--w15], w10
    1fee:	4f 04 be    	mov.d     [--w15], w8
    1ff0:	00 00 06    	return    

00001ff2 <___umuldi3>:
    1ff2:	88 9f be    	mov.d     w8, [w15++]
    1ff4:	8a 9f be    	mov.d     w10, [w15++]
    1ff6:	8c 9f be    	mov.d     w12, [w15++]
    1ff8:	04 04 b8    	mul.uu    w0, w4, w8
    1ffa:	05 06 b8    	mul.uu    w0, w5, w12
    1ffc:	89 04 46    	add.w     w12, w9, w9
    1ffe:	60 85 4e    	addc.w    w13, #0x0, w10
    2000:	06 06 b8    	mul.uu    w0, w6, w12
    2002:	0a 05 46    	add.w     w12, w10, w10
    2004:	e0 85 4e    	addc.w    w13, #0x0, w11
    2006:	07 06 b8    	mul.uu    w0, w7, w12
    2008:	8b 05 46    	add.w     w12, w11, w11
    200a:	04 0e b8    	mul.uu    w1, w4, w12
    200c:	89 04 46    	add.w     w12, w9, w9
    200e:	0a 85 4e    	addc.w    w13, w10, w10
    2010:	e0 85 4d    	addc.w    w11, #0x0, w11
    2012:	05 0e b8    	mul.uu    w1, w5, w12
    2014:	0a 05 46    	add.w     w12, w10, w10
    2016:	8b 85 4e    	addc.w    w13, w11, w11
    2018:	06 0e b8    	mul.uu    w1, w6, w12
    201a:	8b 05 46    	add.w     w12, w11, w11
    201c:	04 16 b8    	mul.uu    w2, w4, w12
    201e:	0a 05 46    	add.w     w12, w10, w10
    2020:	8b 85 4e    	addc.w    w13, w11, w11
    2022:	05 16 b8    	mul.uu    w2, w5, w12
    2024:	8b 05 46    	add.w     w12, w11, w11
    2026:	04 1e b8    	mul.uu    w3, w4, w12
    2028:	8b 05 46    	add.w     w12, w11, w11
    202a:	08 00 be    	mov.d     w8, w0
    202c:	0a 01 be    	mov.d     w10, w2
    202e:	4f 06 be    	mov.d     [--w15], w12
    2030:	4f 05 be    	mov.d     [--w15], w10
    2032:	4f 04 be    	mov.d     [--w15], w8
    2034:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	a2 38 04    	goto      0x38a2 <__T1Interrupt>
    1026:	00 00 00 
    1028:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	c8 38 04    	goto      0x38c8 <__T2Interrupt>
    1032:	00 00 00 
    1034:	ee 38 04    	goto      0x38ee <__T3Interrupt>
    1036:	00 00 00 
    1038:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	d8 22 04    	goto      0x22d8 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	b2 22 04    	goto      0x22b2 <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	14 39 04    	goto      0x3914 <__T4Interrupt>
    1072:	00 00 00 
    1074:	3a 39 04    	goto      0x393a <__T5Interrupt>
    1076:	00 00 00 
    1078:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	24 23 04    	goto      0x2324 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	fe 22 04    	goto      0x22fe <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	70 23 04    	goto      0x2370 <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	4a 23 04    	goto      0x234a <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	bc 23 04    	goto      0x23bc <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	96 23 04    	goto      0x2396 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	e0 4c 04    	goto      0x4ce0 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a036 <_Device>:
    a036:	12 01       	.word 0x112
    a038:	00 02       	.word 0x200
    a03a:	00 00       	.word 0
    a03c:	00 40       	.word 0x4000
    a03e:	66 66       	.word 0x6666
    a040:	03 00       	.word 0x3
    a042:	00 00       	.word 0
    a044:	01 02       	.word 0x201
    a046:	00 01       	.word 0x100

0000a048 <_Configuration1>:
    a048:	09 02       	.word 0x209
    a04a:	12 00       	.word 0x12
    a04c:	01 01       	.word 0x101
    a04e:	00 a0       	.word 0xa000
    a050:	32 09       	.word 0x932
    a052:	04 00       	.word 0x4
    a054:	00 00       	.word 0
    a056:	ff 00       	.word 0xff
    a058:	ff 00       	.word 0xff

0000a05a <_String0>:
    a05a:	04 03       	.word 0x304
    a05c:	09 04       	.word 0x409

0000a05e <_String1>:
    a05e:	1a 03       	.word 0x31a
    a060:	4f 00       	.word 0x4f
    a062:	6c 00       	.word 0x6c
    a064:	69 00       	.word 0x69
    a066:	6e 00       	.word 0x6e
    a068:	20 00       	.word 0x20
    a06a:	43 00       	.word 0x43
    a06c:	6f 00       	.word 0x6f
    a06e:	6c 00       	.word 0x6c
    a070:	6c 00       	.word 0x6c
    a072:	65 00       	.word 0x65
    a074:	67 00       	.word 0x67
    a076:	65 00       	.word 0x65

0000a078 <_String2>:
    a078:	44 03       	.word 0x344
    a07a:	45 00       	.word 0x45
    a07c:	6c 00       	.word 0x6c
    a07e:	65 00       	.word 0x65
    a080:	63 00       	.word 0x63
    a082:	61 00       	.word 0x61
    a084:	6e 00       	.word 0x6e
    a086:	69 00       	.word 0x69
    a088:	73 00       	.word 0x73
    a08a:	6d 00       	.word 0x6d
    a08c:	73 00       	.word 0x73
    a08e:	20 00       	.word 0x20
    a090:	4d 00       	.word 0x4d
    a092:	69 00       	.word 0x69
    a094:	6e 00       	.word 0x6e
    a096:	69 00       	.word 0x69
    a098:	70 00       	.word 0x70
    a09a:	72 00       	.word 0x72
    a09c:	6f 00       	.word 0x6f
    a09e:	6a 00       	.word 0x6a
    a0a0:	65 00       	.word 0x65
    a0a2:	63 00       	.word 0x63
    a0a4:	74 00       	.word 0x74
    a0a6:	20 00       	.word 0x20
    a0a8:	32 00       	.word 0x32
    a0aa:	20 00       	.word 0x20
    a0ac:	46 00       	.word 0x46
    a0ae:	69 00       	.word 0x69
    a0b0:	72 00       	.word 0x72
    a0b2:	6d 00       	.word 0x6d
    a0b4:	77 00       	.word 0x77
    a0b6:	61 00       	.word 0x61
    a0b8:	72 00       	.word 0x72
    a0ba:	65 00       	.word 0x65

0000a0bc <.LC0>:
    a0bc:	25 64       	.word 0x6425
    a0be:	3a 25       	.word 0x253a
    a0c0:	64 3a       	.word 0x3a64
    a0c2:	25 64       	.word 0x6425
    a0c4:	3a 25       	.word 0x253a
    a0c6:	64 3a       	.word 0x3a64
    a0c8:	25 64       	.word 0x6425
    a0ca:	0a 00       	.word 0xa
Disassembly of section .text:

000020cc <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    20cc:	04 00 fa    	lnk       #0x4
    20ce:	00 0f 78    	mov.w     w0, [w14]
    20d0:	21 47 98    	mov.b     w1, [w14+2]

000020d2 <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    20d2:	00 00 00    	nop       

000020d4 <.L2>:
    20d4:	1e 02 78    	mov.w     [w14], w4
    20d6:	14 02 90    	mov.w     [w4+2], w4
    20d8:	94 02 78    	mov.w     [w4], w5
    20da:	04 20 20    	mov.w     #0x200, w4
    20dc:	04 82 62    	and.w     w5, w4, w4
    20de:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    20e0:	f9 ff 3a    	bra       NZ, 0x20d4 <.L2>

000020e2 <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    20e2:	1e 02 78    	mov.w     [w14], w4
    20e4:	24 02 90    	mov.w     [w4+4], w4
    20e6:	ae 42 90    	mov.b     [w14+2], w5
    20e8:	85 82 fb    	ze        w5, w5
    20ea:	05 0a 78    	mov.w     w5, [w4]

000020ec <.LSM3>:
}
    20ec:	00 80 fa    	ulnk      
    20ee:	00 00 06    	return    

000020f0 <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    20f0:	02 00 fa    	lnk       #0x2
    20f2:	00 0f 78    	mov.w     w0, [w14]

000020f4 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    20f4:	00 00 00    	nop       

000020f6 <.L4>:
    20f6:	1e 02 78    	mov.w     [w14], w4
    20f8:	14 02 90    	mov.w     [w4+2], w4
    20fa:	14 02 78    	mov.w     [w4], w4
    20fc:	61 02 62    	and.w     w4, #0x1, w4
    20fe:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2100:	fa ff 32    	bra       Z, 0x20f6 <.L4>

00002102 <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    2102:	1e 02 78    	mov.w     [w14], w4
    2104:	34 02 90    	mov.w     [w4+6], w4
    2106:	14 02 78    	mov.w     [w4], w4
    2108:	04 42 78    	mov.b     w4, w4

0000210a <.LSM7>:
}
    210a:	04 40 78    	mov.b     w4, w0
    210c:	00 80 fa    	ulnk      
    210e:	00 00 06    	return    

00002110 <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    2110:	04 00 fa    	lnk       #0x4
    2112:	00 0f 78    	mov.w     w0, [w14]
    2114:	21 47 98    	mov.b     w1, [w14+2]

00002116 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    2116:	00 00 00    	nop       

00002118 <.L6>:
    2118:	1e 02 78    	mov.w     [w14], w4
    211a:	d4 12 90    	mov.w     [w4+42], w5
    211c:	1e 02 78    	mov.w     [w14], w4
    211e:	24 12 90    	mov.w     [w4+36], w4
    2120:	84 8f 52    	sub.w     w5, w4, [w15]
    2122:	fa ff 32    	bra       Z, 0x2118 <.L6>

00002124 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    2124:	1e 02 78    	mov.w     [w14], w4
    2126:	94 12 90    	mov.w     [w4+34], w5
    2128:	1e 02 78    	mov.w     [w14], w4
    212a:	44 12 90    	mov.w     [w4+40], w4
    212c:	04 82 42    	add.w     w5, w4, w4
    212e:	2e 40 90    	mov.b     [w14+2], w0
    2130:	00 4a 78    	mov.b     w0, [w4]

00002132 <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    2132:	1e 02 78    	mov.w     [w14], w4
    2134:	44 12 90    	mov.w     [w4+40], w4
    2136:	84 02 e8    	inc.w     w4, w5
    2138:	1e 02 78    	mov.w     [w14], w4
    213a:	24 12 90    	mov.w     [w4+36], w4
    213c:	11 00 09    	repeat    #0x11
    213e:	84 82 d8    	div.uw    w5, w4
    2140:	01 02 78    	mov.w     w1, w4
    2142:	84 02 78    	mov.w     w4, w5
    2144:	1e 02 78    	mov.w     [w14], w4
    2146:	45 12 98    	mov.w     w5, [w4+40]

00002148 <.LSM12>:
    self->TXbuffer.count++;
    2148:	1e 02 78    	mov.w     [w14], w4
    214a:	54 12 90    	mov.w     [w4+42], w4
    214c:	84 02 e8    	inc.w     w4, w5
    214e:	1e 02 78    	mov.w     [w14], w4
    2150:	55 12 98    	mov.w     w5, [w4+42]

00002152 <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    2152:	1e 02 78    	mov.w     [w14], w4
    2154:	d4 12 90    	mov.w     [w4+42], w5
    2156:	1e 02 78    	mov.w     [w14], w4
    2158:	34 1a 90    	mov.w     [w4+54], w4
    215a:	84 8f 52    	sub.w     w5, w4, [w15]
    215c:	08 00 39    	bra       NC, 0x216e <.L5>

0000215e <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    215e:	1e 02 78    	mov.w     [w14], w4
    2160:	14 02 90    	mov.w     [w4+2], w4
    2162:	9e 02 78    	mov.w     [w14], w5
    2164:	95 02 90    	mov.w     [w5+2], w5
    2166:	15 03 78    	mov.w     [w5], w6
    2168:	05 40 20    	mov.w     #0x400, w5
    216a:	86 82 72    	ior.w     w5, w6, w5
    216c:	05 0a 78    	mov.w     w5, [w4]

0000216e <.L5>:
                                                    // transmission
}
    216e:	00 80 fa    	ulnk      
    2170:	00 00 06    	return    

00002172 <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    2172:	04 00 fa    	lnk       #0x4
    2174:	10 07 98    	mov.w     w0, [w14+2]

00002176 <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2176:	1e 02 90    	mov.w     [w14+2], w4
    2178:	54 02 90    	mov.w     [w4+10], w4
    217a:	9e 02 90    	mov.w     [w14+2], w5
    217c:	d5 02 90    	mov.w     [w5+10], w5
    217e:	15 03 78    	mov.w     [w5], w6
    2180:	9e 02 90    	mov.w     [w14+2], w5
    2182:	e5 4a 90    	mov.b     [w5+14], w5
    2184:	85 82 fb    	ze        w5, w5
    2186:	17 00 20    	mov.w     #0x1, w7
    2188:	85 3a dd    	sl.w      w7, w5, w5
    218a:	85 82 ea    	com.w     w5, w5
    218c:	85 02 63    	and.w     w6, w5, w5
    218e:	05 0a 78    	mov.w     w5, [w4]

00002190 <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    2190:	1e 02 90    	mov.w     [w14+2], w4
    2192:	54 12 90    	mov.w     [w4+42], w4
    2194:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2196:	25 00 3a    	bra       NZ, 0x21e2 <.L13>

00002198 <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    2198:	1e 02 90    	mov.w     [w14+2], w4
    219a:	14 02 90    	mov.w     [w4+2], w4
    219c:	9e 02 90    	mov.w     [w14+2], w5
    219e:	95 02 90    	mov.w     [w5+2], w5
    21a0:	15 03 78    	mov.w     [w5], w6
    21a2:	f5 bf 2f    	mov.w     #0xfbff, w5
    21a4:	85 02 63    	and.w     w6, w5, w5
    21a6:	05 0a 78    	mov.w     w5, [w4]

000021a8 <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    21a8:	1d 00 37    	bra       0x21e4 <.L10>

000021aa <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    21aa:	1e 02 90    	mov.w     [w14+2], w4
    21ac:	94 12 90    	mov.w     [w4+34], w5
    21ae:	1e 02 90    	mov.w     [w14+2], w4
    21b0:	34 12 90    	mov.w     [w4+38], w4
    21b2:	04 82 42    	add.w     w5, w4, w4
    21b4:	14 4f 78    	mov.b     [w4], [w14]

000021b6 <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    21b6:	1e 02 90    	mov.w     [w14+2], w4
    21b8:	34 12 90    	mov.w     [w4+38], w4
    21ba:	84 02 e8    	inc.w     w4, w5
    21bc:	1e 02 90    	mov.w     [w14+2], w4
    21be:	24 12 90    	mov.w     [w4+36], w4
    21c0:	11 00 09    	repeat    #0x11
    21c2:	84 82 d8    	div.uw    w5, w4
    21c4:	01 02 78    	mov.w     w1, w4
    21c6:	84 02 78    	mov.w     w4, w5
    21c8:	1e 02 90    	mov.w     [w14+2], w4
    21ca:	35 12 98    	mov.w     w5, [w4+38]

000021cc <.LSM23>:
        self->TXbuffer.count--;
    21cc:	1e 02 90    	mov.w     [w14+2], w4
    21ce:	54 12 90    	mov.w     [w4+42], w4
    21d0:	84 02 e9    	dec.w     w4, w5
    21d2:	1e 02 90    	mov.w     [w14+2], w4
    21d4:	55 12 98    	mov.w     w5, [w4+42]

000021d6 <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    21d6:	1e 02 90    	mov.w     [w14+2], w4
    21d8:	24 02 90    	mov.w     [w4+4], w4
    21da:	1e 43 78    	mov.b     [w14], w6
    21dc:	86 82 fb    	ze        w6, w5
    21de:	05 0a 78    	mov.w     w5, [w4]
    21e0:	01 00 37    	bra       0x21e4 <.L10>

000021e2 <.L13>:
    21e2:	00 00 00    	nop       

000021e4 <.L10>:
    21e4:	1e 02 90    	mov.w     [w14+2], w4
    21e6:	14 02 90    	mov.w     [w4+2], w4
    21e8:	94 02 78    	mov.w     [w4], w5
    21ea:	04 20 20    	mov.w     #0x200, w4
    21ec:	04 82 62    	and.w     w5, w4, w4
    21ee:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    21f0:	04 00 3a    	bra       NZ, 0x21fa <.L8>
    21f2:	1e 02 90    	mov.w     [w14+2], w4
    21f4:	54 12 90    	mov.w     [w4+42], w4
    21f6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    21f8:	d8 ff 3a    	bra       NZ, 0x21aa <.L12>

000021fa <.L8>:
    }
}
    21fa:	00 80 fa    	ulnk      
    21fc:	00 00 06    	return    

000021fe <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    21fe:	04 00 fa    	lnk       #0x4
    2200:	10 07 98    	mov.w     w0, [w14+2]

00002202 <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    2202:	00 00 00    	nop       

00002204 <.L15>:
    2204:	1e 02 90    	mov.w     [w14+2], w4
    2206:	24 1a 90    	mov.w     [w4+52], w4
    2208:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    220a:	fc ff 32    	bra       Z, 0x2204 <.L15>

0000220c <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    220c:	1e 02 90    	mov.w     [w14+2], w4
    220e:	e4 12 90    	mov.w     [w4+44], w5
    2210:	1e 02 90    	mov.w     [w14+2], w4
    2212:	04 1a 90    	mov.w     [w4+48], w4
    2214:	04 82 42    	add.w     w5, w4, w4
    2216:	14 4f 78    	mov.b     [w4], [w14]

00002218 <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    2218:	1e 02 90    	mov.w     [w14+2], w4
    221a:	04 1a 90    	mov.w     [w4+48], w4
    221c:	84 02 e8    	inc.w     w4, w5
    221e:	1e 02 90    	mov.w     [w14+2], w4
    2220:	74 12 90    	mov.w     [w4+46], w4
    2222:	11 00 09    	repeat    #0x11
    2224:	84 82 d8    	div.uw    w5, w4
    2226:	01 02 78    	mov.w     w1, w4
    2228:	84 02 78    	mov.w     w4, w5
    222a:	1e 02 90    	mov.w     [w14+2], w4
    222c:	05 1a 98    	mov.w     w5, [w4+48]

0000222e <.LSM31>:
    self->RXbuffer.count--;
    222e:	1e 02 90    	mov.w     [w14+2], w4
    2230:	24 1a 90    	mov.w     [w4+52], w4
    2232:	84 02 e9    	dec.w     w4, w5
    2234:	1e 02 90    	mov.w     [w14+2], w4
    2236:	25 1a 98    	mov.w     w5, [w4+52]

00002238 <.LSM32>:
    return ch;
    2238:	1e 42 78    	mov.b     [w14], w4

0000223a <.LSM33>:
}
    223a:	04 40 78    	mov.b     w4, w0
    223c:	00 80 fa    	ulnk      
    223e:	00 00 06    	return    

00002240 <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    2240:	02 00 fa    	lnk       #0x2
    2242:	00 0f 78    	mov.w     w0, [w14]

00002244 <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2244:	1e 02 78    	mov.w     [w14], w4
    2246:	54 02 90    	mov.w     [w4+10], w4
    2248:	9e 02 78    	mov.w     [w14], w5
    224a:	d5 02 90    	mov.w     [w5+10], w5
    224c:	15 03 78    	mov.w     [w5], w6
    224e:	9e 02 78    	mov.w     [w14], w5
    2250:	f5 4a 90    	mov.b     [w5+15], w5
    2252:	85 82 fb    	ze        w5, w5
    2254:	17 00 20    	mov.w     #0x1, w7
    2256:	85 3a dd    	sl.w      w7, w5, w5
    2258:	85 82 ea    	com.w     w5, w5
    225a:	85 02 63    	and.w     w6, w5, w5
    225c:	05 0a 78    	mov.w     w5, [w4]

0000225e <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    225e:	1a 00 37    	bra       0x2294 <.L17>

00002260 <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    2260:	1e 02 78    	mov.w     [w14], w4
    2262:	e4 12 90    	mov.w     [w4+44], w5
    2264:	1e 02 78    	mov.w     [w14], w4
    2266:	14 1a 90    	mov.w     [w4+50], w4
    2268:	04 82 42    	add.w     w5, w4, w4
    226a:	9e 02 78    	mov.w     [w14], w5
    226c:	b5 02 90    	mov.w     [w5+6], w5
    226e:	95 02 78    	mov.w     [w5], w5
    2270:	85 42 78    	mov.b     w5, w5
    2272:	05 4a 78    	mov.b     w5, [w4]

00002274 <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    2274:	1e 02 78    	mov.w     [w14], w4
    2276:	14 1a 90    	mov.w     [w4+50], w4
    2278:	84 02 e8    	inc.w     w4, w5
    227a:	1e 02 78    	mov.w     [w14], w4
    227c:	74 12 90    	mov.w     [w4+46], w4
    227e:	11 00 09    	repeat    #0x11
    2280:	84 82 d8    	div.uw    w5, w4
    2282:	01 02 78    	mov.w     w1, w4
    2284:	84 02 78    	mov.w     w4, w5
    2286:	1e 02 78    	mov.w     [w14], w4
    2288:	15 1a 98    	mov.w     w5, [w4+50]

0000228a <.LSM39>:
        self->RXbuffer.count++;
    228a:	1e 02 78    	mov.w     [w14], w4
    228c:	24 1a 90    	mov.w     [w4+52], w4
    228e:	84 02 e8    	inc.w     w4, w5
    2290:	1e 02 78    	mov.w     [w14], w4
    2292:	25 1a 98    	mov.w     w5, [w4+52]

00002294 <.L17>:
    2294:	1e 02 78    	mov.w     [w14], w4
    2296:	14 02 90    	mov.w     [w4+2], w4
    2298:	14 02 78    	mov.w     [w4], w4
    229a:	61 02 62    	and.w     w4, #0x1, w4
    229c:	04 42 78    	mov.b     w4, w4
    229e:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    22a0:	06 00 32    	bra       Z, 0x22ae <.L16>

000022a2 <.LSM41>:
    22a2:	1e 02 78    	mov.w     [w14], w4
    22a4:	a4 1a 90    	mov.w     [w4+52], w5
    22a6:	1e 02 78    	mov.w     [w14], w4
    22a8:	74 12 90    	mov.w     [w4+46], w4

000022aa <.LSM42>:
    22aa:	84 8f 52    	sub.w     w5, w4, [w15]
    22ac:	d9 ff 3a    	bra       NZ, 0x2260 <.L19>

000022ae <.L16>:
    }
}
    22ae:	00 80 fa    	ulnk      
    22b0:	00 00 06    	return    

000022b2 <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    22b2:	36 00 f8    	push      0x36
    22b4:	80 9f be    	mov.d     w0, [w15++]
    22b6:	82 9f be    	mov.d     w2, [w15++]
    22b8:	84 9f be    	mov.d     w4, [w15++]
    22ba:	86 9f be    	mov.d     w6, [w15++]
    22bc:	32 00 f8    	push      0x32
    22be:	00 20 20    	mov.w     #0x200, w0
    22c0:	90 01 88    	mov.w     w0, 0x32
    22c2:	00 00 fa    	lnk       #0x0

000022c4 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    22c4:	80 9b 20    	mov.w     #0x9b8, w0
    22c6:	55 ff 07    	rcall     0x2172 <___serviceTxInterrupt>

000022c8 <.LSM46>:
}
    22c8:	00 80 fa    	ulnk      
    22ca:	32 00 f9    	pop       0x32
    22cc:	4f 03 be    	mov.d     [--w15], w6
    22ce:	4f 02 be    	mov.d     [--w15], w4
    22d0:	4f 01 be    	mov.d     [--w15], w2
    22d2:	4f 00 be    	mov.d     [--w15], w0
    22d4:	36 00 f9    	pop       0x36
    22d6:	00 40 06    	retfie    

000022d8 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    22d8:	36 00 f8    	push      0x36
    22da:	80 9f be    	mov.d     w0, [w15++]
    22dc:	82 9f be    	mov.d     w2, [w15++]
    22de:	84 9f be    	mov.d     w4, [w15++]
    22e0:	86 9f be    	mov.d     w6, [w15++]
    22e2:	32 00 f8    	push      0x32
    22e4:	00 20 20    	mov.w     #0x200, w0
    22e6:	90 01 88    	mov.w     w0, 0x32
    22e8:	00 00 fa    	lnk       #0x0

000022ea <.LSM48>:
    __serviceRxInterrupt(&uart1);
    22ea:	80 9b 20    	mov.w     #0x9b8, w0
    22ec:	a9 ff 07    	rcall     0x2240 <___serviceRxInterrupt>

000022ee <.LSM49>:
}
    22ee:	00 80 fa    	ulnk      
    22f0:	32 00 f9    	pop       0x32
    22f2:	4f 03 be    	mov.d     [--w15], w6
    22f4:	4f 02 be    	mov.d     [--w15], w4
    22f6:	4f 01 be    	mov.d     [--w15], w2
    22f8:	4f 00 be    	mov.d     [--w15], w0
    22fa:	36 00 f9    	pop       0x36
    22fc:	00 40 06    	retfie    

000022fe <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    22fe:	36 00 f8    	push      0x36
    2300:	80 9f be    	mov.d     w0, [w15++]
    2302:	82 9f be    	mov.d     w2, [w15++]
    2304:	84 9f be    	mov.d     w4, [w15++]
    2306:	86 9f be    	mov.d     w6, [w15++]
    2308:	32 00 f8    	push      0x32
    230a:	00 20 20    	mov.w     #0x200, w0
    230c:	90 01 88    	mov.w     w0, 0x32
    230e:	00 00 fa    	lnk       #0x0

00002310 <.LSM51>:
    __serviceTxInterrupt(&uart2);
    2310:	40 9f 20    	mov.w     #0x9f4, w0
    2312:	2f ff 07    	rcall     0x2172 <___serviceTxInterrupt>

00002314 <.LSM52>:
}
    2314:	00 80 fa    	ulnk      
    2316:	32 00 f9    	pop       0x32
    2318:	4f 03 be    	mov.d     [--w15], w6
    231a:	4f 02 be    	mov.d     [--w15], w4
    231c:	4f 01 be    	mov.d     [--w15], w2
    231e:	4f 00 be    	mov.d     [--w15], w0
    2320:	36 00 f9    	pop       0x36
    2322:	00 40 06    	retfie    

00002324 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2324:	36 00 f8    	push      0x36
    2326:	80 9f be    	mov.d     w0, [w15++]
    2328:	82 9f be    	mov.d     w2, [w15++]
    232a:	84 9f be    	mov.d     w4, [w15++]
    232c:	86 9f be    	mov.d     w6, [w15++]
    232e:	32 00 f8    	push      0x32
    2330:	00 20 20    	mov.w     #0x200, w0
    2332:	90 01 88    	mov.w     w0, 0x32
    2334:	00 00 fa    	lnk       #0x0

00002336 <.LSM54>:
    __serviceRxInterrupt(&uart2);
    2336:	40 9f 20    	mov.w     #0x9f4, w0
    2338:	83 ff 07    	rcall     0x2240 <___serviceRxInterrupt>

0000233a <.LSM55>:
}
    233a:	00 80 fa    	ulnk      
    233c:	32 00 f9    	pop       0x32
    233e:	4f 03 be    	mov.d     [--w15], w6
    2340:	4f 02 be    	mov.d     [--w15], w4
    2342:	4f 01 be    	mov.d     [--w15], w2
    2344:	4f 00 be    	mov.d     [--w15], w0
    2346:	36 00 f9    	pop       0x36
    2348:	00 40 06    	retfie    

0000234a <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    234a:	36 00 f8    	push      0x36
    234c:	80 9f be    	mov.d     w0, [w15++]
    234e:	82 9f be    	mov.d     w2, [w15++]
    2350:	84 9f be    	mov.d     w4, [w15++]
    2352:	86 9f be    	mov.d     w6, [w15++]
    2354:	32 00 f8    	push      0x32
    2356:	00 20 20    	mov.w     #0x200, w0
    2358:	90 01 88    	mov.w     w0, 0x32
    235a:	00 00 fa    	lnk       #0x0

0000235c <.LSM57>:
    __serviceTxInterrupt(&uart3);
    235c:	00 a3 20    	mov.w     #0xa30, w0
    235e:	09 ff 07    	rcall     0x2172 <___serviceTxInterrupt>

00002360 <.LSM58>:
}
    2360:	00 80 fa    	ulnk      
    2362:	32 00 f9    	pop       0x32
    2364:	4f 03 be    	mov.d     [--w15], w6
    2366:	4f 02 be    	mov.d     [--w15], w4
    2368:	4f 01 be    	mov.d     [--w15], w2
    236a:	4f 00 be    	mov.d     [--w15], w0
    236c:	36 00 f9    	pop       0x36
    236e:	00 40 06    	retfie    

00002370 <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    2370:	36 00 f8    	push      0x36
    2372:	80 9f be    	mov.d     w0, [w15++]
    2374:	82 9f be    	mov.d     w2, [w15++]
    2376:	84 9f be    	mov.d     w4, [w15++]
    2378:	86 9f be    	mov.d     w6, [w15++]
    237a:	32 00 f8    	push      0x32
    237c:	00 20 20    	mov.w     #0x200, w0
    237e:	90 01 88    	mov.w     w0, 0x32
    2380:	00 00 fa    	lnk       #0x0

00002382 <.LSM60>:
    __serviceRxInterrupt(&uart3);
    2382:	00 a3 20    	mov.w     #0xa30, w0
    2384:	5d ff 07    	rcall     0x2240 <___serviceRxInterrupt>

00002386 <.LSM61>:
}
    2386:	00 80 fa    	ulnk      
    2388:	32 00 f9    	pop       0x32
    238a:	4f 03 be    	mov.d     [--w15], w6
    238c:	4f 02 be    	mov.d     [--w15], w4
    238e:	4f 01 be    	mov.d     [--w15], w2
    2390:	4f 00 be    	mov.d     [--w15], w0
    2392:	36 00 f9    	pop       0x36
    2394:	00 40 06    	retfie    

00002396 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    2396:	36 00 f8    	push      0x36
    2398:	80 9f be    	mov.d     w0, [w15++]
    239a:	82 9f be    	mov.d     w2, [w15++]
    239c:	84 9f be    	mov.d     w4, [w15++]
    239e:	86 9f be    	mov.d     w6, [w15++]
    23a0:	32 00 f8    	push      0x32
    23a2:	00 20 20    	mov.w     #0x200, w0
    23a4:	90 01 88    	mov.w     w0, 0x32
    23a6:	00 00 fa    	lnk       #0x0

000023a8 <.LSM63>:
    __serviceTxInterrupt(&uart4);
    23a8:	c0 a6 20    	mov.w     #0xa6c, w0
    23aa:	e3 fe 07    	rcall     0x2172 <___serviceTxInterrupt>

000023ac <.LSM64>:
}
    23ac:	00 80 fa    	ulnk      
    23ae:	32 00 f9    	pop       0x32
    23b0:	4f 03 be    	mov.d     [--w15], w6
    23b2:	4f 02 be    	mov.d     [--w15], w4
    23b4:	4f 01 be    	mov.d     [--w15], w2
    23b6:	4f 00 be    	mov.d     [--w15], w0
    23b8:	36 00 f9    	pop       0x36
    23ba:	00 40 06    	retfie    

000023bc <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    23bc:	36 00 f8    	push      0x36
    23be:	80 9f be    	mov.d     w0, [w15++]
    23c0:	82 9f be    	mov.d     w2, [w15++]
    23c2:	84 9f be    	mov.d     w4, [w15++]
    23c4:	86 9f be    	mov.d     w6, [w15++]
    23c6:	32 00 f8    	push      0x32
    23c8:	00 20 20    	mov.w     #0x200, w0
    23ca:	90 01 88    	mov.w     w0, 0x32
    23cc:	00 00 fa    	lnk       #0x0

000023ce <.LSM66>:
    __serviceRxInterrupt(&uart4);
    23ce:	c0 a6 20    	mov.w     #0xa6c, w0
    23d0:	37 ff 07    	rcall     0x2240 <___serviceRxInterrupt>

000023d2 <.LSM67>:
}
    23d2:	00 80 fa    	ulnk      
    23d4:	32 00 f9    	pop       0x32
    23d6:	4f 03 be    	mov.d     [--w15], w6
    23d8:	4f 02 be    	mov.d     [--w15], w4
    23da:	4f 01 be    	mov.d     [--w15], w2
    23dc:	4f 00 be    	mov.d     [--w15], w0
    23de:	36 00 f9    	pop       0x36
    23e0:	00 40 06    	retfie    

000023e2 <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    23e2:	08 00 fa    	lnk       #0x8
    23e4:	10 07 98    	mov.w     w0, [w14+2]
    23e6:	21 07 98    	mov.w     w1, [w14+4]
    23e8:	32 07 98    	mov.w     w2, [w14+6]

000023ea <.LSM69>:
    int16_t i;

    switch (handle) {
    23ea:	1e 02 90    	mov.w     [w14+2], w4
    23ec:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    23ee:	29 00 35    	bra       LT, 0x2442 <.L37>
    23f0:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    23f2:	03 00 34    	bra       LE, 0x23fa <.L30>
    23f4:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    23f6:	13 00 32    	bra       Z, 0x241e <.L31>

000023f8 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    23f8:	25 00 37    	bra       0x2444 <.L34>

000023fa <.L30>:
    23fa:	00 02 eb    	clr.w     w4
    23fc:	04 0f 78    	mov.w     w4, [w14]
    23fe:	0a 00 37    	bra       0x2414 <.L32>

00002400 <.L33>:
    2400:	2e 02 90    	mov.w     [w14+4], w4
    2402:	94 42 78    	mov.b     [w4], w5
    2404:	2e 02 90    	mov.w     [w14+4], w4
    2406:	04 02 e8    	inc.w     w4, w4
    2408:	24 07 98    	mov.w     w4, [w14+4]
    240a:	44 55 80    	mov.w     0xaa8, w4
    240c:	85 40 78    	mov.b     w5, w1
    240e:	04 00 78    	mov.w     w4, w0
    2410:	61 04 07    	rcall     0x2cd4 <_uart_putc>

00002412 <.LSM73>:
    2412:	1e 0f e8    	inc.w     [w14], [w14]

00002414 <.L32>:
    2414:	9e 02 78    	mov.w     [w14], w5
    2416:	3e 02 90    	mov.w     [w14+6], w4
    2418:	84 8f 52    	sub.w     w5, w4, [w15]
    241a:	f2 ff 39    	bra       NC, 0x2400 <.L33>

0000241c <.LSM74>:
    241c:	13 00 37    	bra       0x2444 <.L34>

0000241e <.L31>:
    241e:	00 02 eb    	clr.w     w4
    2420:	04 0f 78    	mov.w     w4, [w14]
    2422:	0a 00 37    	bra       0x2438 <.L35>

00002424 <.L36>:
    2424:	2e 02 90    	mov.w     [w14+4], w4
    2426:	94 42 78    	mov.b     [w4], w5
    2428:	2e 02 90    	mov.w     [w14+4], w4
    242a:	04 02 e8    	inc.w     w4, w4
    242c:	24 07 98    	mov.w     w4, [w14+4]
    242e:	54 55 80    	mov.w     0xaaa, w4
    2430:	85 40 78    	mov.b     w5, w1
    2432:	04 00 78    	mov.w     w4, w0
    2434:	4f 04 07    	rcall     0x2cd4 <_uart_putc>

00002436 <.LSM77>:
    2436:	1e 0f e8    	inc.w     [w14], [w14]

00002438 <.L35>:
    2438:	9e 02 78    	mov.w     [w14], w5
    243a:	3e 02 90    	mov.w     [w14+6], w4
    243c:	84 8f 52    	sub.w     w5, w4, [w15]
    243e:	f2 ff 39    	bra       NC, 0x2424 <.L36>

00002440 <.LSM78>:
    2440:	01 00 37    	bra       0x2444 <.L34>

00002442 <.L37>:
    2442:	00 00 00    	nop       

00002444 <.L34>:
    }
    return len;
    2444:	3e 02 90    	mov.w     [w14+6], w4

00002446 <.LSM81>:
}
    2446:	04 00 78    	mov.w     w4, w0
    2448:	00 80 fa    	ulnk      
    244a:	00 00 06    	return    

0000244c <_init_uart>:

void init_uart(void) {
    244c:	00 00 fa    	lnk       #0x0

0000244e <.LSM83>:
    init_pin();
    244e:	53 0f 07    	rcall     0x42f6 <_init_pin>

00002450 <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2450:	44 6d 20    	mov.w     #0x6d4, w4
    2452:	84 1f 78    	mov.w     w4, [w15++]
    2454:	57 01 20    	mov.w     #0x15, w7
    2456:	86 c0 b3    	mov.b     #0x8, w6
    2458:	80 82 eb    	setm.w    w5
    245a:	64 c0 b3    	mov.b     #0x6, w4
    245c:	80 01 eb    	clr.w     w3
    245e:	02 2f 20    	mov.w     #0x2f0, w2
    2460:	21 2f 20    	mov.w     #0x2f2, w1
    2462:	c0 aa 20    	mov.w     #0xaac, w0
    2464:	60 10 07    	rcall     0x4526 <_pin_init>
    2466:	8f 87 e9    	dec2.w    w15, w15

00002468 <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    2468:	a4 6d 20    	mov.w     #0x6da, w4
    246a:	84 1f 78    	mov.w     w4, [w15++]
    246c:	a7 01 20    	mov.w     #0x1a, w7
    246e:	00 43 eb    	clr.b     w6
    2470:	80 82 eb    	setm.w    w5
    2472:	74 c0 b3    	mov.b     #0x7, w4
    2474:	80 01 eb    	clr.w     w3
    2476:	02 2f 20    	mov.w     #0x2f0, w2
    2478:	21 2f 20    	mov.w     #0x2f2, w1
    247a:	20 ac 20    	mov.w     #0xac2, w0
    247c:	54 10 07    	rcall     0x4526 <_pin_init>
    247e:	8f 87 e9    	dec2.w    w15, w15

00002480 <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    2480:	44 00 20    	mov.w     #0x4, w4
    2482:	84 1f 78    	mov.w     w4, [w15++]
    2484:	34 00 20    	mov.w     #0x3, w4
    2486:	84 1f 78    	mov.w     w4, [w15++]
    2488:	84 c0 b3    	mov.b     #0x8, w4
    248a:	84 1f 78    	mov.w     w4, [w15++]
    248c:	00 42 eb    	clr.b     w4
    248e:	84 1f 78    	mov.w     w4, [w15++]
    2490:	44 6a 20    	mov.w     #0x6a4, w4
    2492:	84 1f 78    	mov.w     w4, [w15++]
    2494:	44 6a 20    	mov.w     #0x6a4, w4
    2496:	84 1f 78    	mov.w     w4, [w15++]
    2498:	b4 c0 b3    	mov.b     #0xb, w4
    249a:	84 1f 78    	mov.w     w4, [w15++]
    249c:	c4 c0 b3    	mov.b     #0xc, w4
    249e:	84 1f 78    	mov.w     w4, [w15++]
    24a0:	47 09 20    	mov.w     #0x94, w7
    24a2:	46 08 20    	mov.w     #0x84, w6
    24a4:	85 22 20    	mov.w     #0x228, w5
    24a6:	64 22 20    	mov.w     #0x226, w4
    24a8:	43 22 20    	mov.w     #0x224, w3
    24aa:	22 22 20    	mov.w     #0x222, w2
    24ac:	01 22 20    	mov.w     #0x220, w1
    24ae:	80 9b 20    	mov.w     #0x9b8, w0
    24b0:	6b 00 07    	rcall     0x2588 <_uart_init>
    24b2:	f0 87 57    	sub.w     w15, #0x10, w15

000024b4 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    24b4:	64 00 20    	mov.w     #0x6, w4
    24b6:	84 1f 78    	mov.w     w4, [w15++]
    24b8:	54 00 20    	mov.w     #0x5, w4
    24ba:	84 1f 78    	mov.w     w4, [w15++]
    24bc:	84 c0 b3    	mov.b     #0x8, w4
    24be:	84 1f 78    	mov.w     w4, [w15++]
    24c0:	00 42 eb    	clr.b     w4
    24c2:	84 1f 78    	mov.w     w4, [w15++]
    24c4:	64 6a 20    	mov.w     #0x6a6, w4
    24c6:	84 1f 78    	mov.w     w4, [w15++]
    24c8:	64 6a 20    	mov.w     #0x6a6, w4
    24ca:	84 1f 78    	mov.w     w4, [w15++]
    24cc:	e4 c0 b3    	mov.b     #0xe, w4
    24ce:	84 1f 78    	mov.w     w4, [w15++]
    24d0:	f4 c0 b3    	mov.b     #0xf, w4
    24d2:	84 1f 78    	mov.w     w4, [w15++]
    24d4:	67 09 20    	mov.w     #0x96, w7
    24d6:	66 08 20    	mov.w     #0x86, w6
    24d8:	85 23 20    	mov.w     #0x238, w5
    24da:	64 23 20    	mov.w     #0x236, w4
    24dc:	43 23 20    	mov.w     #0x234, w3
    24de:	22 23 20    	mov.w     #0x232, w2
    24e0:	01 23 20    	mov.w     #0x230, w1
    24e2:	40 9f 20    	mov.w     #0x9f4, w0
    24e4:	51 00 07    	rcall     0x2588 <_uart_init>
    24e6:	f0 87 57    	sub.w     w15, #0x10, w15

000024e8 <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    24e8:	d4 01 20    	mov.w     #0x1d, w4
    24ea:	84 1f 78    	mov.w     w4, [w15++]
    24ec:	c4 01 20    	mov.w     #0x1c, w4
    24ee:	84 1f 78    	mov.w     w4, [w15++]
    24f0:	84 c0 b3    	mov.b     #0x8, w4
    24f2:	84 1f 78    	mov.w     w4, [w15++]
    24f4:	84 c0 b3    	mov.b     #0x8, w4
    24f6:	84 1f 78    	mov.w     w4, [w15++]
    24f8:	a4 6a 20    	mov.w     #0x6aa, w4
    24fa:	84 1f 78    	mov.w     w4, [w15++]
    24fc:	24 6a 20    	mov.w     #0x6a2, w4
    24fe:	84 1f 78    	mov.w     w4, [w15++]
    2500:	24 c0 b3    	mov.b     #0x2, w4
    2502:	84 1f 78    	mov.w     w4, [w15++]
    2504:	34 c0 b3    	mov.b     #0x3, w4
    2506:	84 1f 78    	mov.w     w4, [w15++]
    2508:	e7 09 20    	mov.w     #0x9e, w7
    250a:	e6 08 20    	mov.w     #0x8e, w6
    250c:	85 25 20    	mov.w     #0x258, w5
    250e:	64 25 20    	mov.w     #0x256, w4
    2510:	43 25 20    	mov.w     #0x254, w3
    2512:	22 25 20    	mov.w     #0x252, w2
    2514:	01 25 20    	mov.w     #0x250, w1
    2516:	00 a3 20    	mov.w     #0xa30, w0
    2518:	37 00 07    	rcall     0x2588 <_uart_init>
    251a:	f0 87 57    	sub.w     w15, #0x10, w15

0000251c <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    251c:	f4 01 20    	mov.w     #0x1f, w4
    251e:	84 1f 78    	mov.w     w4, [w15++]
    2520:	e4 01 20    	mov.w     #0x1e, w4
    2522:	84 1f 78    	mov.w     w4, [w15++]
    2524:	84 c0 b3    	mov.b     #0x8, w4
    2526:	84 1f 78    	mov.w     w4, [w15++]
    2528:	00 42 eb    	clr.b     w4
    252a:	84 1f 78    	mov.w     w4, [w15++]
    252c:	64 6b 20    	mov.w     #0x6b6, w4
    252e:	84 1f 78    	mov.w     w4, [w15++]
    2530:	64 6b 20    	mov.w     #0x6b6, w4
    2532:	84 1f 78    	mov.w     w4, [w15++]
    2534:	84 c0 b3    	mov.b     #0x8, w4
    2536:	84 1f 78    	mov.w     w4, [w15++]
    2538:	94 c0 b3    	mov.b     #0x9, w4
    253a:	84 1f 78    	mov.w     w4, [w15++]
    253c:	e7 09 20    	mov.w     #0x9e, w7
    253e:	e6 08 20    	mov.w     #0x8e, w6
    2540:	85 2b 20    	mov.w     #0x2b8, w5
    2542:	64 2b 20    	mov.w     #0x2b6, w4
    2544:	43 2b 20    	mov.w     #0x2b4, w3
    2546:	22 2b 20    	mov.w     #0x2b2, w2
    2548:	01 2b 20    	mov.w     #0x2b0, w1
    254a:	c0 a6 20    	mov.w     #0xa6c, w0
    254c:	1d 00 07    	rcall     0x2588 <_uart_init>
    254e:	f0 87 57    	sub.w     w15, #0x10, w15

00002550 <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 115200., 'N', 1, 
    2550:	00 02 eb    	clr.w     w4
    2552:	84 1f 78    	mov.w     w4, [w15++]
    2554:	00 02 eb    	clr.w     w4
    2556:	84 1f 78    	mov.w     w4, [w15++]
    2558:	00 02 eb    	clr.w     w4
    255a:	84 1f 78    	mov.w     w4, [w15++]
    255c:	00 02 eb    	clr.w     w4
    255e:	84 1f 78    	mov.w     w4, [w15++]
    2560:	00 02 eb    	clr.w     w4
    2562:	84 1f 78    	mov.w     w4, [w15++]
    2564:	14 00 20    	mov.w     #0x1, w4
    2566:	84 1f 78    	mov.w     w4, [w15++]
    2568:	e5 c4 b3    	mov.b     #0x4e, w5
    256a:	06 00 20    	mov.w     #0x0, w6
    256c:	17 7e 24    	mov.w     #0x47e1, w7
    256e:	00 02 eb    	clr.w     w4
    2570:	80 01 eb    	clr.w     w3
    2572:	22 ac 20    	mov.w     #0xac2, w2
    2574:	c1 aa 20    	mov.w     #0xaac, w1
    2576:	80 9b 20    	mov.w     #0x9b8, w0
    2578:	72 00 07    	rcall     0x265e <_uart_open>
    257a:	ec 87 57    	sub.w     w15, #0xc, w15

0000257c <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    257c:	84 9b 20    	mov.w     #0x9b8, w4
    257e:	44 55 88    	mov.w     w4, 0xaa8

00002580 <.LSM92>:
    _stderr = &uart1;
    2580:	84 9b 20    	mov.w     #0x9b8, w4
    2582:	54 55 88    	mov.w     w4, 0xaaa

00002584 <.LSM93>:
}
    2584:	00 80 fa    	ulnk      
    2586:	00 00 06    	return    

00002588 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    2588:	10 00 fa    	lnk       #0x10
    258a:	00 0f 78    	mov.w     w0, [w14]
    258c:	11 07 98    	mov.w     w1, [w14+2]
    258e:	22 07 98    	mov.w     w2, [w14+4]
    2590:	33 07 98    	mov.w     w3, [w14+6]
    2592:	44 07 98    	mov.w     w4, [w14+8]
    2594:	55 07 98    	mov.w     w5, [w14+10]
    2596:	66 07 98    	mov.w     w6, [w14+12]
    2598:	77 07 98    	mov.w     w7, [w14+14]

0000259a <.LSM95>:
    self->UxMODE = UxMODE;
    259a:	1e 02 78    	mov.w     [w14], w4
    259c:	9e 02 90    	mov.w     [w14+2], w5
    259e:	05 0a 78    	mov.w     w5, [w4]

000025a0 <.LSM96>:
    self->UxSTA = UxSTA;
    25a0:	1e 02 78    	mov.w     [w14], w4
    25a2:	ae 02 90    	mov.w     [w14+4], w5
    25a4:	15 02 98    	mov.w     w5, [w4+2]

000025a6 <.LSM97>:
    self->UxTXREG = UxTXREG;
    25a6:	1e 02 78    	mov.w     [w14], w4
    25a8:	be 02 90    	mov.w     [w14+6], w5
    25aa:	25 02 98    	mov.w     w5, [w4+4]

000025ac <.LSM98>:
    self->UxRXREG = UxRXREG;
    25ac:	1e 02 78    	mov.w     [w14], w4
    25ae:	ce 02 90    	mov.w     [w14+8], w5
    25b0:	35 02 98    	mov.w     w5, [w4+6]

000025b2 <.LSM99>:
    self->UxBRG = UxBRG;
    25b2:	1e 02 78    	mov.w     [w14], w4
    25b4:	de 02 90    	mov.w     [w14+10], w5
    25b6:	45 02 98    	mov.w     w5, [w4+8]

000025b8 <.LSM100>:
    self->IFSy = IFSy;
    25b8:	1e 02 78    	mov.w     [w14], w4
    25ba:	ee 02 90    	mov.w     [w14+12], w5
    25bc:	55 02 98    	mov.w     w5, [w4+10]

000025be <.LSM101>:
    self->IECy = IECy;
    25be:	1e 02 78    	mov.w     [w14], w4
    25c0:	fe 02 90    	mov.w     [w14+14], w5
    25c2:	65 02 98    	mov.w     w5, [w4+12]

000025c4 <.LSM102>:
    self->UxTXIF = UxTXIF;
    25c4:	1e 02 78    	mov.w     [w14], w4
    25c6:	8e fa 97    	mov.b     [w14-8], w5
    25c8:	65 4a 98    	mov.b     w5, [w4+14]

000025ca <.LSM103>:
    self->UxRXIF = UxRXIF;
    25ca:	1e 02 78    	mov.w     [w14], w4
    25cc:	ee f2 97    	mov.b     [w14-10], w5
    25ce:	75 4a 98    	mov.b     w5, [w4+15]

000025d0 <.LSM104>:
    self->RXrpinr = RXrpinr;
    25d0:	1e 02 78    	mov.w     [w14], w4
    25d2:	ae ba 97    	mov.w     [w14-12], w5
    25d4:	05 0a 98    	mov.w     w5, [w4+16]

000025d6 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    25d6:	1e 02 78    	mov.w     [w14], w4
    25d8:	9e ba 97    	mov.w     [w14-14], w5
    25da:	15 0a 98    	mov.w     w5, [w4+18]

000025dc <.LSM106>:
    self->RXrpshift = RXrpshift;
    25dc:	1e 02 78    	mov.w     [w14], w4
    25de:	8e f2 97    	mov.b     [w14-16], w5
    25e0:	45 52 98    	mov.b     w5, [w4+20]

000025e2 <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    25e2:	1e 02 78    	mov.w     [w14], w4
    25e4:	ee ea 97    	mov.b     [w14-18], w5
    25e6:	55 52 98    	mov.b     w5, [w4+21]

000025e8 <.LSM108>:
    self->TXrpnum = TXrpnum;
    25e8:	1e 02 78    	mov.w     [w14], w4
    25ea:	ee b2 97    	mov.w     [w14-20], w5
    25ec:	35 0a 98    	mov.w     w5, [w4+22]

000025ee <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    25ee:	1e 02 78    	mov.w     [w14], w4
    25f0:	de b2 97    	mov.w     [w14-22], w5
    25f2:	45 0a 98    	mov.w     w5, [w4+24]

000025f4 <.LSM110>:
    self->TX = NULL;
    25f4:	1e 02 78    	mov.w     [w14], w4
    25f6:	80 02 eb    	clr.w     w5
    25f8:	55 0a 98    	mov.w     w5, [w4+26]

000025fa <.LSM111>:
    self->RX = NULL;
    25fa:	1e 02 78    	mov.w     [w14], w4
    25fc:	80 02 eb    	clr.w     w5
    25fe:	65 0a 98    	mov.w     w5, [w4+28]

00002600 <.LSM112>:
    self->RTS = NULL;
    2600:	1e 02 78    	mov.w     [w14], w4
    2602:	80 02 eb    	clr.w     w5
    2604:	75 0a 98    	mov.w     w5, [w4+30]

00002606 <.LSM113>:
    self->CTS = NULL;
    2606:	1e 02 78    	mov.w     [w14], w4
    2608:	80 02 eb    	clr.w     w5
    260a:	05 12 98    	mov.w     w5, [w4+32]

0000260c <.LSM114>:
    self->TXbuffer.data = NULL;
    260c:	1e 02 78    	mov.w     [w14], w4
    260e:	80 02 eb    	clr.w     w5
    2610:	15 12 98    	mov.w     w5, [w4+34]

00002612 <.LSM115>:
    self->TXbuffer.length = 0;
    2612:	1e 02 78    	mov.w     [w14], w4
    2614:	80 02 eb    	clr.w     w5
    2616:	25 12 98    	mov.w     w5, [w4+36]

00002618 <.LSM116>:
    self->TXbuffer.head = 0;
    2618:	1e 02 78    	mov.w     [w14], w4
    261a:	80 02 eb    	clr.w     w5
    261c:	35 12 98    	mov.w     w5, [w4+38]

0000261e <.LSM117>:
    self->TXbuffer.tail = 0;
    261e:	1e 02 78    	mov.w     [w14], w4
    2620:	80 02 eb    	clr.w     w5
    2622:	45 12 98    	mov.w     w5, [w4+40]

00002624 <.LSM118>:
    self->TXbuffer.count = 0;
    2624:	1e 02 78    	mov.w     [w14], w4
    2626:	80 02 eb    	clr.w     w5
    2628:	55 12 98    	mov.w     w5, [w4+42]

0000262a <.LSM119>:
    self->RXbuffer.data = NULL;
    262a:	1e 02 78    	mov.w     [w14], w4
    262c:	80 02 eb    	clr.w     w5
    262e:	65 12 98    	mov.w     w5, [w4+44]

00002630 <.LSM120>:
    self->RXbuffer.length = 0;
    2630:	1e 02 78    	mov.w     [w14], w4
    2632:	80 02 eb    	clr.w     w5
    2634:	75 12 98    	mov.w     w5, [w4+46]

00002636 <.LSM121>:
    self->RXbuffer.head = 0;
    2636:	1e 02 78    	mov.w     [w14], w4
    2638:	80 02 eb    	clr.w     w5
    263a:	05 1a 98    	mov.w     w5, [w4+48]

0000263c <.LSM122>:
    self->RXbuffer.tail = 0;
    263c:	1e 02 78    	mov.w     [w14], w4
    263e:	80 02 eb    	clr.w     w5
    2640:	15 1a 98    	mov.w     w5, [w4+50]

00002642 <.LSM123>:
    self->RXbuffer.count = 0;
    2642:	1e 02 78    	mov.w     [w14], w4
    2644:	80 02 eb    	clr.w     w5
    2646:	25 1a 98    	mov.w     w5, [w4+52]

00002648 <.LSM124>:
    self->TXthreshold = 1;
    2648:	1e 02 78    	mov.w     [w14], w4
    264a:	15 00 20    	mov.w     #0x1, w5
    264c:	35 1a 98    	mov.w     w5, [w4+54]

0000264e <.LSM125>:
    self->putc = NULL;
    264e:	1e 02 78    	mov.w     [w14], w4
    2650:	80 02 eb    	clr.w     w5
    2652:	45 1a 98    	mov.w     w5, [w4+56]

00002654 <.LSM126>:
    self->getc = NULL;
    2654:	1e 02 78    	mov.w     [w14], w4
    2656:	80 02 eb    	clr.w     w5
    2658:	55 1a 98    	mov.w     w5, [w4+58]

0000265a <.LSM127>:
}
    265a:	00 80 fa    	ulnk      
    265c:	00 00 06    	return    

0000265e <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    265e:	10 00 fa    	lnk       #0x10
    2660:	88 1f 78    	mov.w     w8, [w15++]
    2662:	00 0f 78    	mov.w     w0, [w14]
    2664:	11 07 98    	mov.w     w1, [w14+2]
    2666:	22 07 98    	mov.w     w2, [w14+4]
    2668:	33 07 98    	mov.w     w3, [w14+6]
    266a:	44 07 98    	mov.w     w4, [w14+8]
    266c:	56 07 98    	mov.w     w6, [w14+10]
    266e:	67 07 98    	mov.w     w7, [w14+12]
    2670:	65 4f 98    	mov.b     w5, [w14+14]

00002672 <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    2672:	1e 02 78    	mov.w     [w14], w4
    2674:	14 02 78    	mov.w     [w4], w4
    2676:	80 02 eb    	clr.w     w5
    2678:	05 0a 78    	mov.w     w5, [w4]

0000267a <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    267a:	1e 02 90    	mov.w     [w14+2], w4
    267c:	64 02 90    	mov.w     [w4+12], w4
    267e:	e1 0f 42    	add.w     w4, #0x1, [w15]
    2680:	1b 02 32    	bra       Z, 0x2ab8 <.L73>
    2682:	2e 02 90    	mov.w     [w14+4], w4
    2684:	64 02 90    	mov.w     [w4+12], w4
    2686:	e1 0f 42    	add.w     w4, #0x1, [w15]
    2688:	19 02 32    	bra       Z, 0x2abc <.L74>

0000268a <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    268a:	1e 02 90    	mov.w     [w14+2], w4
    268c:	04 0a 90    	mov.w     [w4+16], w4
    268e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2690:	69 00 3a    	bra       NZ, 0x2764 <.L44>
    2692:	2e 02 90    	mov.w     [w14+4], w4
    2694:	04 0a 90    	mov.w     [w4+16], w4
    2696:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2698:	65 00 3a    	bra       NZ, 0x2764 <.L44>

0000269a <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    269a:	1e 00 90    	mov.w     [w14+2], w0
    269c:	97 0f 07    	rcall     0x45cc <_pin_digitalOut>

0000269e <.LSM133>:
        pin_set(TX);
    269e:	1e 00 90    	mov.w     [w14+2], w0
    26a0:	f2 0f 07    	rcall     0x4686 <_pin_set>

000026a2 <.LSM134>:
        pin_digitalIn(RX);
    26a2:	2e 00 90    	mov.w     [w14+4], w0
    26a4:	6c 0f 07    	rcall     0x457e <_pin_digitalIn>

000026a6 <.LSM135>:
        self->TX = TX;
    26a6:	1e 02 78    	mov.w     [w14], w4
    26a8:	9e 02 90    	mov.w     [w14+2], w5
    26aa:	55 0a 98    	mov.w     w5, [w4+26]

000026ac <.LSM136>:
        TX->owner = (void *)self;
    26ac:	1e 02 90    	mov.w     [w14+2], w4
    26ae:	9e 02 78    	mov.w     [w14], w5
    26b0:	05 0a 98    	mov.w     w5, [w4+16]

000026b2 <.LSM137>:
        TX->write = NULL;
    26b2:	1e 02 90    	mov.w     [w14+2], w4
    26b4:	80 02 eb    	clr.w     w5
    26b6:	15 0a 98    	mov.w     w5, [w4+18]

000026b8 <.LSM138>:
        TX->read = NULL;
    26b8:	1e 02 90    	mov.w     [w14+2], w4
    26ba:	80 02 eb    	clr.w     w5
    26bc:	25 0a 98    	mov.w     w5, [w4+20]

000026be <.LSM139>:
        self->RX = RX;
    26be:	1e 02 78    	mov.w     [w14], w4
    26c0:	ae 02 90    	mov.w     [w14+4], w5
    26c2:	65 0a 98    	mov.w     w5, [w4+28]

000026c4 <.LSM140>:
        RX->owner = (void *)self;
    26c4:	2e 02 90    	mov.w     [w14+4], w4
    26c6:	9e 02 78    	mov.w     [w14], w5
    26c8:	05 0a 98    	mov.w     w5, [w4+16]

000026ca <.LSM141>:
        RX->write = NULL;
    26ca:	2e 02 90    	mov.w     [w14+4], w4
    26cc:	80 02 eb    	clr.w     w5
    26ce:	15 0a 98    	mov.w     w5, [w4+18]

000026d0 <.LSM142>:
        RX->read = NULL;
    26d0:	2e 02 90    	mov.w     [w14+4], w4
    26d2:	80 02 eb    	clr.w     w5
    26d4:	25 0a 98    	mov.w     w5, [w4+20]

000026d6 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    26d6:	15 3a 80    	mov.w     0x742, w5
    26d8:	f4 0b 20    	mov.w     #0xbf, w4
    26da:	04 83 62    	and.w     w5, w4, w6
    26dc:	64 04 20    	mov.w     #0x46, w4
    26de:	75 05 20    	mov.w     #0x57, w5
    26e0:	27 74 20    	mov.w     #0x742, w7
    26e2:	84 4b 78    	mov.b     w4, [w7]
    26e4:	85 4b 78    	mov.b     w5, [w7]
    26e6:	86 4b 78    	mov.b     w6, [w7]

000026e8 <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    26e8:	1e 02 90    	mov.w     [w14+2], w4
    26ea:	74 02 90    	mov.w     [w4+14], w4
    26ec:	9e 02 90    	mov.w     [w14+2], w5
    26ee:	f5 02 90    	mov.w     [w5+14], w5
    26f0:	15 03 78    	mov.w     [w5], w6
    26f2:	9e 02 90    	mov.w     [w14+2], w5
    26f4:	a5 4a 90    	mov.b     [w5+10], w5
    26f6:	85 82 fb    	ze        w5, w5
    26f8:	f7 03 20    	mov.w     #0x3f, w7
    26fa:	85 3a dd    	sl.w      w7, w5, w5
    26fc:	85 82 ea    	com.w     w5, w5
    26fe:	85 02 63    	and.w     w6, w5, w5
    2700:	05 0a 78    	mov.w     w5, [w4]

00002702 <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    2702:	1e 02 90    	mov.w     [w14+2], w4
    2704:	74 02 90    	mov.w     [w4+14], w4
    2706:	9e 02 90    	mov.w     [w14+2], w5
    2708:	f5 02 90    	mov.w     [w5+14], w5
    270a:	15 03 78    	mov.w     [w5], w6
    270c:	9e 02 78    	mov.w     [w14], w5
    270e:	b5 0b 90    	mov.w     [w5+22], w7
    2710:	9e 02 90    	mov.w     [w14+2], w5
    2712:	a5 4a 90    	mov.b     [w5+10], w5
    2714:	85 82 fb    	ze        w5, w5
    2716:	85 3a dd    	sl.w      w7, w5, w5
    2718:	86 82 72    	ior.w     w5, w6, w5
    271a:	05 0a 78    	mov.w     w5, [w4]

0000271c <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    271c:	1e 02 78    	mov.w     [w14], w4
    271e:	04 0a 90    	mov.w     [w4+16], w4
    2720:	9e 02 78    	mov.w     [w14], w5
    2722:	85 0a 90    	mov.w     [w5+16], w5
    2724:	15 03 78    	mov.w     [w5], w6
    2726:	9e 02 78    	mov.w     [w14], w5
    2728:	c5 52 90    	mov.b     [w5+20], w5
    272a:	85 82 fb    	ze        w5, w5
    272c:	f7 03 20    	mov.w     #0x3f, w7
    272e:	85 3a dd    	sl.w      w7, w5, w5
    2730:	85 82 ea    	com.w     w5, w5
    2732:	85 02 63    	and.w     w6, w5, w5
    2734:	05 0a 78    	mov.w     w5, [w4]

00002736 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    2736:	1e 02 78    	mov.w     [w14], w4
    2738:	04 0a 90    	mov.w     [w4+16], w4
    273a:	9e 02 78    	mov.w     [w14], w5
    273c:	85 0a 90    	mov.w     [w5+16], w5
    273e:	15 03 78    	mov.w     [w5], w6
    2740:	ae 02 90    	mov.w     [w14+4], w5
    2742:	e5 03 90    	mov.w     [w5+12], w7
    2744:	9e 02 78    	mov.w     [w14], w5
    2746:	c5 52 90    	mov.b     [w5+20], w5
    2748:	85 82 fb    	ze        w5, w5
    274a:	85 3a dd    	sl.w      w7, w5, w5
    274c:	86 82 72    	ior.w     w5, w6, w5
    274e:	05 0a 78    	mov.w     w5, [w4]

00002750 <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2750:	15 3a 80    	mov.w     0x742, w5
    2752:	04 04 20    	mov.w     #0x40, w4
    2754:	05 03 72    	ior.w     w4, w5, w6
    2756:	64 04 20    	mov.w     #0x46, w4
    2758:	75 05 20    	mov.w     #0x57, w5
    275a:	27 74 20    	mov.w     #0x742, w7
    275c:	84 4b 78    	mov.b     w4, [w7]
    275e:	85 4b 78    	mov.b     w5, [w7]
    2760:	86 4b 78    	mov.b     w6, [w7]
    2762:	0a 00 37    	bra       0x2778 <.L45>

00002764 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    2764:	1e 02 78    	mov.w     [w14], w4
    2766:	d4 0a 90    	mov.w     [w4+26], w5
    2768:	1e 02 90    	mov.w     [w14+2], w4
    276a:	84 8f 52    	sub.w     w5, w4, [w15]
    276c:	a9 01 3a    	bra       NZ, 0x2ac0 <.L75>
    276e:	1e 02 78    	mov.w     [w14], w4
    2770:	e4 0a 90    	mov.w     [w4+28], w5
    2772:	2e 02 90    	mov.w     [w14+4], w4
    2774:	84 8f 52    	sub.w     w5, w4, [w15]
    2776:	a6 01 3a    	bra       NZ, 0x2ac4 <.L76>

00002778 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    2778:	3e 02 90    	mov.w     [w14+6], w4
    277a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    277c:	87 00 32    	bra       Z, 0x288c <.L47>
    277e:	4e 02 90    	mov.w     [w14+8], w4
    2780:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2782:	84 00 32    	bra       Z, 0x288c <.L47>

00002784 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    2784:	3e 02 90    	mov.w     [w14+6], w4
    2786:	64 02 90    	mov.w     [w4+12], w4
    2788:	e1 0f 42    	add.w     w4, #0x1, [w15]
    278a:	9e 01 32    	bra       Z, 0x2ac8 <.L77>
    278c:	4e 02 90    	mov.w     [w14+8], w4
    278e:	64 02 90    	mov.w     [w4+12], w4
    2790:	e1 0f 42    	add.w     w4, #0x1, [w15]
    2792:	9c 01 32    	bra       Z, 0x2acc <.L78>

00002794 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    2794:	3e 02 90    	mov.w     [w14+6], w4
    2796:	04 0a 90    	mov.w     [w4+16], w4
    2798:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    279a:	69 00 3a    	bra       NZ, 0x286e <.L50>
    279c:	4e 02 90    	mov.w     [w14+8], w4
    279e:	04 0a 90    	mov.w     [w4+16], w4
    27a0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    27a2:	65 00 3a    	bra       NZ, 0x286e <.L50>

000027a4 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    27a4:	3e 00 90    	mov.w     [w14+6], w0
    27a6:	12 0f 07    	rcall     0x45cc <_pin_digitalOut>

000027a8 <.LSM154>:
            pin_set(RTS);
    27a8:	3e 00 90    	mov.w     [w14+6], w0
    27aa:	6d 0f 07    	rcall     0x4686 <_pin_set>

000027ac <.LSM155>:
            pin_digitalIn(CTS);
    27ac:	4e 00 90    	mov.w     [w14+8], w0
    27ae:	e7 0e 07    	rcall     0x457e <_pin_digitalIn>

000027b0 <.LSM156>:
            self->RTS = RTS;
    27b0:	1e 02 78    	mov.w     [w14], w4
    27b2:	be 02 90    	mov.w     [w14+6], w5
    27b4:	75 0a 98    	mov.w     w5, [w4+30]

000027b6 <.LSM157>:
            RTS->owner = (void *)self;
    27b6:	3e 02 90    	mov.w     [w14+6], w4
    27b8:	9e 02 78    	mov.w     [w14], w5
    27ba:	05 0a 98    	mov.w     w5, [w4+16]

000027bc <.LSM158>:
            RTS->write = NULL;
    27bc:	3e 02 90    	mov.w     [w14+6], w4
    27be:	80 02 eb    	clr.w     w5
    27c0:	15 0a 98    	mov.w     w5, [w4+18]

000027c2 <.LSM159>:
            RTS->read = NULL;
    27c2:	3e 02 90    	mov.w     [w14+6], w4
    27c4:	80 02 eb    	clr.w     w5
    27c6:	25 0a 98    	mov.w     w5, [w4+20]

000027c8 <.LSM160>:
            self->CTS = CTS;
    27c8:	1e 02 78    	mov.w     [w14], w4
    27ca:	ce 02 90    	mov.w     [w14+8], w5
    27cc:	05 12 98    	mov.w     w5, [w4+32]

000027ce <.LSM161>:
            CTS->owner = (void *)self;
    27ce:	4e 02 90    	mov.w     [w14+8], w4
    27d0:	9e 02 78    	mov.w     [w14], w5
    27d2:	05 0a 98    	mov.w     w5, [w4+16]

000027d4 <.LSM162>:
            CTS->write = NULL;
    27d4:	4e 02 90    	mov.w     [w14+8], w4
    27d6:	80 02 eb    	clr.w     w5
    27d8:	15 0a 98    	mov.w     w5, [w4+18]

000027da <.LSM163>:
            CTS->read = NULL;
    27da:	4e 02 90    	mov.w     [w14+8], w4
    27dc:	80 02 eb    	clr.w     w5
    27de:	25 0a 98    	mov.w     w5, [w4+20]

000027e0 <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    27e0:	15 3a 80    	mov.w     0x742, w5
    27e2:	f4 0b 20    	mov.w     #0xbf, w4
    27e4:	04 83 62    	and.w     w5, w4, w6
    27e6:	64 04 20    	mov.w     #0x46, w4
    27e8:	75 05 20    	mov.w     #0x57, w5
    27ea:	27 74 20    	mov.w     #0x742, w7
    27ec:	84 4b 78    	mov.b     w4, [w7]
    27ee:	85 4b 78    	mov.b     w5, [w7]
    27f0:	86 4b 78    	mov.b     w6, [w7]

000027f2 <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    27f2:	3e 02 90    	mov.w     [w14+6], w4
    27f4:	74 02 90    	mov.w     [w4+14], w4
    27f6:	be 02 90    	mov.w     [w14+6], w5
    27f8:	f5 02 90    	mov.w     [w5+14], w5
    27fa:	15 03 78    	mov.w     [w5], w6
    27fc:	be 02 90    	mov.w     [w14+6], w5
    27fe:	a5 4a 90    	mov.b     [w5+10], w5
    2800:	85 82 fb    	ze        w5, w5
    2802:	f7 03 20    	mov.w     #0x3f, w7
    2804:	85 3a dd    	sl.w      w7, w5, w5
    2806:	85 82 ea    	com.w     w5, w5
    2808:	85 02 63    	and.w     w6, w5, w5
    280a:	05 0a 78    	mov.w     w5, [w4]

0000280c <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    280c:	3e 02 90    	mov.w     [w14+6], w4
    280e:	74 02 90    	mov.w     [w4+14], w4
    2810:	be 02 90    	mov.w     [w14+6], w5
    2812:	f5 02 90    	mov.w     [w5+14], w5
    2814:	15 03 78    	mov.w     [w5], w6
    2816:	9e 02 78    	mov.w     [w14], w5
    2818:	c5 0b 90    	mov.w     [w5+24], w7
    281a:	be 02 90    	mov.w     [w14+6], w5
    281c:	a5 4a 90    	mov.b     [w5+10], w5
    281e:	85 82 fb    	ze        w5, w5
    2820:	85 3a dd    	sl.w      w7, w5, w5
    2822:	86 82 72    	ior.w     w5, w6, w5
    2824:	05 0a 78    	mov.w     w5, [w4]

00002826 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    2826:	1e 02 78    	mov.w     [w14], w4
    2828:	14 0a 90    	mov.w     [w4+18], w4
    282a:	9e 02 78    	mov.w     [w14], w5
    282c:	95 0a 90    	mov.w     [w5+18], w5
    282e:	15 03 78    	mov.w     [w5], w6
    2830:	9e 02 78    	mov.w     [w14], w5
    2832:	d5 52 90    	mov.b     [w5+21], w5
    2834:	85 82 fb    	ze        w5, w5
    2836:	f7 03 20    	mov.w     #0x3f, w7
    2838:	85 3a dd    	sl.w      w7, w5, w5
    283a:	85 82 ea    	com.w     w5, w5
    283c:	85 02 63    	and.w     w6, w5, w5
    283e:	05 0a 78    	mov.w     w5, [w4]

00002840 <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    2840:	1e 02 78    	mov.w     [w14], w4
    2842:	14 0a 90    	mov.w     [w4+18], w4
    2844:	9e 02 78    	mov.w     [w14], w5
    2846:	95 0a 90    	mov.w     [w5+18], w5
    2848:	15 03 78    	mov.w     [w5], w6
    284a:	ce 02 90    	mov.w     [w14+8], w5
    284c:	e5 03 90    	mov.w     [w5+12], w7
    284e:	9e 02 78    	mov.w     [w14], w5
    2850:	d5 52 90    	mov.b     [w5+21], w5
    2852:	85 82 fb    	ze        w5, w5
    2854:	85 3a dd    	sl.w      w7, w5, w5
    2856:	86 82 72    	ior.w     w5, w6, w5
    2858:	05 0a 78    	mov.w     w5, [w4]

0000285a <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    285a:	15 3a 80    	mov.w     0x742, w5
    285c:	04 04 20    	mov.w     #0x40, w4
    285e:	05 03 72    	ior.w     w4, w5, w6
    2860:	64 04 20    	mov.w     #0x46, w4
    2862:	75 05 20    	mov.w     #0x57, w5
    2864:	27 74 20    	mov.w     #0x742, w7
    2866:	84 4b 78    	mov.b     w4, [w7]
    2868:	85 4b 78    	mov.b     w5, [w7]
    286a:	86 4b 78    	mov.b     w6, [w7]
    286c:	0a 00 37    	bra       0x2882 <.L51>

0000286e <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    286e:	1e 02 78    	mov.w     [w14], w4
    2870:	f4 0a 90    	mov.w     [w4+30], w5
    2872:	3e 02 90    	mov.w     [w14+6], w4
    2874:	84 8f 52    	sub.w     w5, w4, [w15]
    2876:	2c 01 3a    	bra       NZ, 0x2ad0 <.L79>
    2878:	1e 02 78    	mov.w     [w14], w4
    287a:	84 12 90    	mov.w     [w4+32], w5
    287c:	4e 02 90    	mov.w     [w14+8], w4
    287e:	84 8f 52    	sub.w     w5, w4, [w15]
    2880:	29 01 3a    	bra       NZ, 0x2ad4 <.L80>

00002882 <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    2882:	1e 02 78    	mov.w     [w14], w4
    2884:	14 02 78    	mov.w     [w4], w4
    2886:	05 20 20    	mov.w     #0x200, w5
    2888:	05 0a 78    	mov.w     w5, [w4]
    288a:	06 00 37    	bra       0x2898 <.L53>

0000288c <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    288c:	3e 02 90    	mov.w     [w14+6], w4
    288e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2890:	23 01 3a    	bra       NZ, 0x2ad8 <.L81>
    2892:	4e 02 90    	mov.w     [w14+8], w4
    2894:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2896:	22 01 3a    	bra       NZ, 0x2adc <.L82>

00002898 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    2898:	18 c0 b3    	mov.b     #0x1, w8
    289a:	02 40 22    	mov.w     #0x2400, w2
    289c:	43 a7 24    	mov.w     #0x4a74, w3
    289e:	5e 00 90    	mov.w     [w14+10], w0
    28a0:	ee 00 90    	mov.w     [w14+12], w1
    28a2:	5b f5 07    	rcall     0x135a <___gesf2>
    28a4:	00 02 78    	mov.w     w0, w4
    28a6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    28a8:	01 00 3c    	bra       GT, 0x28ac <.L55>
    28aa:	00 44 eb    	clr.b     w8

000028ac <.L55>:
    28ac:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    28ae:	04 00 32    	bra       Z, 0x28b8 <.L56>

000028b0 <.LSM174>:
        baudrate = FCY/4.;
    28b0:	04 40 22    	mov.w     #0x2400, w4
    28b2:	45 a7 24    	mov.w     #0x4a74, w5
    28b4:	54 07 98    	mov.w     w4, [w14+10]
    28b6:	65 07 98    	mov.w     w5, [w14+12]

000028b8 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    28b8:	18 c0 b3    	mov.b     #0x1, w8
    28ba:	02 40 22    	mov.w     #0x2400, w2
    28bc:	43 17 24    	mov.w     #0x4174, w3
    28be:	5e 00 90    	mov.w     [w14+10], w0
    28c0:	ee 00 90    	mov.w     [w14+12], w1
    28c2:	49 f5 07    	rcall     0x1356 <___eqsf2>
    28c4:	00 02 78    	mov.w     w0, w4
    28c6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    28c8:	01 00 35    	bra       LT, 0x28cc <.L57>
    28ca:	00 44 eb    	clr.b     w8

000028cc <.L57>:
    28cc:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    28ce:	04 00 32    	bra       Z, 0x28d8 <.L58>

000028d0 <.LSM176>:
        baudrate = FCY/(16.*65536.);
    28d0:	04 40 22    	mov.w     #0x2400, w4
    28d2:	45 17 24    	mov.w     #0x4174, w5
    28d4:	54 07 98    	mov.w     w4, [w14+10]
    28d6:	65 07 98    	mov.w     w5, [w14+12]

000028d8 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    28d8:	18 c0 b3    	mov.b     #0x1, w8
    28da:	02 40 22    	mov.w     #0x2400, w2
    28dc:	43 27 24    	mov.w     #0x4274, w3
    28de:	5e 00 90    	mov.w     [w14+10], w0
    28e0:	ee 00 90    	mov.w     [w14+12], w1
    28e2:	39 f5 07    	rcall     0x1356 <___eqsf2>
    28e4:	00 02 78    	mov.w     w0, w4
    28e6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    28e8:	01 00 34    	bra       LE, 0x28ec <.L59>
    28ea:	00 44 eb    	clr.b     w8

000028ec <.L59>:
    28ec:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    28ee:	14 00 32    	bra       Z, 0x2918 <.L60>

000028f0 <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    28f0:	1e 02 78    	mov.w     [w14], w4
    28f2:	44 04 90    	mov.w     [w4+8], w8
    28f4:	5e 01 90    	mov.w     [w14+10], w2
    28f6:	ee 01 90    	mov.w     [w14+12], w3
    28f8:	00 40 22    	mov.w     #0x2400, w0
    28fa:	41 97 24    	mov.w     #0x4974, w1
    28fc:	ea f4 07    	rcall     0x12d2 <___divsf3>
    28fe:	00 02 be    	mov.d     w0, w4
    2900:	02 00 20    	mov.w     #0x0, w2
    2902:	03 f0 23    	mov.w     #0x3f00, w3
    2904:	04 00 be    	mov.d     w4, w0
    2906:	88 f4 07    	rcall     0x1218 <___addsf3>
    2908:	00 02 be    	mov.d     w0, w4
    290a:	04 00 be    	mov.d     w4, w0
    290c:	28 f5 07    	rcall     0x135e <___fixunssfsi>
    290e:	00 02 be    	mov.d     w0, w4
    2910:	04 02 78    	mov.w     w4, w4
    2912:	04 02 e9    	dec.w     w4, w4
    2914:	04 0c 78    	mov.w     w4, [w8]
    2916:	1a 00 37    	bra       0x294c <.L61>

00002918 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2918:	1e 02 78    	mov.w     [w14], w4
    291a:	14 02 78    	mov.w     [w4], w4
    291c:	9e 02 78    	mov.w     [w14], w5
    291e:	95 02 78    	mov.w     [w5], w5
    2920:	95 02 78    	mov.w     [w5], w5
    2922:	05 30 a0    	bset.w    w5, #0x3
    2924:	05 0a 78    	mov.w     w5, [w4]

00002926 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2926:	1e 02 78    	mov.w     [w14], w4
    2928:	44 04 90    	mov.w     [w4+8], w8
    292a:	5e 01 90    	mov.w     [w14+10], w2
    292c:	ee 01 90    	mov.w     [w14+12], w3
    292e:	00 40 22    	mov.w     #0x2400, w0
    2930:	41 a7 24    	mov.w     #0x4a74, w1
    2932:	cf f4 07    	rcall     0x12d2 <___divsf3>
    2934:	00 02 be    	mov.d     w0, w4
    2936:	02 00 20    	mov.w     #0x0, w2
    2938:	03 f0 23    	mov.w     #0x3f00, w3
    293a:	04 00 be    	mov.d     w4, w0
    293c:	6d f4 07    	rcall     0x1218 <___addsf3>
    293e:	00 02 be    	mov.d     w0, w4
    2940:	04 00 be    	mov.d     w4, w0
    2942:	0d f5 07    	rcall     0x135e <___fixunssfsi>
    2944:	00 02 be    	mov.d     w0, w4
    2946:	04 02 78    	mov.w     w4, w4
    2948:	04 02 e9    	dec.w     w4, w4
    294a:	04 0c 78    	mov.w     w4, [w8]

0000294c <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    294c:	ee 4a 90    	mov.b     [w14+14], w5
    294e:	54 c4 b3    	mov.b     #0x45, w4
    2950:	84 cf 52    	sub.b     w5, w4, [w15]
    2952:	04 00 32    	bra       Z, 0x295c <.L62>
    2954:	ee 4a 90    	mov.b     [w14+14], w5
    2956:	54 c6 b3    	mov.b     #0x65, w4
    2958:	84 cf 52    	sub.b     w5, w4, [w15]
    295a:	08 00 3a    	bra       NZ, 0x296c <.L63>

0000295c <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    295c:	1e 02 78    	mov.w     [w14], w4
    295e:	14 02 78    	mov.w     [w4], w4
    2960:	9e 02 78    	mov.w     [w14], w5
    2962:	95 02 78    	mov.w     [w5], w5
    2964:	95 02 78    	mov.w     [w5], w5
    2966:	05 10 a0    	bset.w    w5, #0x1
    2968:	05 0a 78    	mov.w     w5, [w4]
    296a:	18 00 37    	bra       0x299c <.L64>

0000296c <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    296c:	ee 4a 90    	mov.b     [w14+14], w5
    296e:	f4 c4 b3    	mov.b     #0x4f, w4
    2970:	84 cf 52    	sub.b     w5, w4, [w15]
    2972:	04 00 32    	bra       Z, 0x297c <.L65>
    2974:	ee 4a 90    	mov.b     [w14+14], w5
    2976:	f4 c6 b3    	mov.b     #0x6f, w4
    2978:	84 cf 52    	sub.b     w5, w4, [w15]
    297a:	08 00 3a    	bra       NZ, 0x298c <.L66>

0000297c <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    297c:	1e 02 78    	mov.w     [w14], w4
    297e:	14 02 78    	mov.w     [w4], w4
    2980:	9e 02 78    	mov.w     [w14], w5
    2982:	95 02 78    	mov.w     [w5], w5
    2984:	95 02 78    	mov.w     [w5], w5
    2986:	05 20 a0    	bset.w    w5, #0x2
    2988:	05 0a 78    	mov.w     w5, [w4]
    298a:	08 00 37    	bra       0x299c <.L64>

0000298c <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    298c:	ee 4a 90    	mov.b     [w14+14], w5
    298e:	e4 c4 b3    	mov.b     #0x4e, w4
    2990:	84 cf 52    	sub.b     w5, w4, [w15]
    2992:	04 00 32    	bra       Z, 0x299c <.L64>
    2994:	ee 4a 90    	mov.b     [w14+14], w5
    2996:	e4 c6 b3    	mov.b     #0x6e, w4
    2998:	84 cf 52    	sub.b     w5, w4, [w15]
    299a:	a2 00 3a    	bra       NZ, 0x2ae0 <.L83>

0000299c <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    299c:	4e ba 97    	mov.w     [w14-8], w4
    299e:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    29a0:	08 00 3a    	bra       NZ, 0x29b2 <.L67>

000029a2 <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    29a2:	1e 02 78    	mov.w     [w14], w4
    29a4:	14 02 78    	mov.w     [w4], w4
    29a6:	9e 02 78    	mov.w     [w14], w5
    29a8:	95 02 78    	mov.w     [w5], w5
    29aa:	95 02 78    	mov.w     [w5], w5
    29ac:	05 00 a0    	bset.w    w5, #0x0
    29ae:	05 0a 78    	mov.w     w5, [w4]
    29b0:	03 00 37    	bra       0x29b8 <.L68>

000029b2 <.L67>:
    } else if (stopbits!=1) {
    29b2:	4e ba 97    	mov.w     [w14-8], w4
    29b4:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    29b6:	96 00 3a    	bra       NZ, 0x2ae4 <.L84>

000029b8 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    29b8:	2e ba 97    	mov.w     [w14-12], w4
    29ba:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    29bc:	04 00 3a    	bra       NZ, 0x29c6 <.L69>

000029be <.LSM190>:
        self->putc = __putc_nobuffer;
    29be:	1e 02 78    	mov.w     [w14], w4
    29c0:	c5 0c 22    	mov.w     #0x20cc, w5
    29c2:	45 1a 98    	mov.w     w5, [w4+56]
    29c4:	36 00 37    	bra       0x2a32 <.L70>

000029c6 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    29c6:	1e 02 78    	mov.w     [w14], w4
    29c8:	14 02 90    	mov.w     [w4+2], w4
    29ca:	9e 02 78    	mov.w     [w14], w5
    29cc:	95 02 90    	mov.w     [w5+2], w5
    29ce:	15 03 78    	mov.w     [w5], w6
    29d0:	05 00 22    	mov.w     #0x2000, w5
    29d2:	86 82 72    	ior.w     w5, w6, w5
    29d4:	05 0a 78    	mov.w     w5, [w4]

000029d6 <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    29d6:	1e 02 78    	mov.w     [w14], w4
    29d8:	ae ba 97    	mov.w     [w14-12], w5
    29da:	15 12 98    	mov.w     w5, [w4+34]

000029dc <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    29dc:	1e 02 78    	mov.w     [w14], w4
    29de:	9e ba 97    	mov.w     [w14-14], w5
    29e0:	25 12 98    	mov.w     w5, [w4+36]

000029e2 <.LSM194>:
        self->TXbuffer.head = 0;
    29e2:	1e 02 78    	mov.w     [w14], w4
    29e4:	80 02 eb    	clr.w     w5
    29e6:	35 12 98    	mov.w     w5, [w4+38]

000029e8 <.LSM195>:
        self->TXbuffer.tail = 0;
    29e8:	1e 02 78    	mov.w     [w14], w4
    29ea:	80 02 eb    	clr.w     w5
    29ec:	45 12 98    	mov.w     w5, [w4+40]

000029ee <.LSM196>:
        self->TXbuffer.count = 0;
    29ee:	1e 02 78    	mov.w     [w14], w4
    29f0:	80 02 eb    	clr.w     w5
    29f2:	55 12 98    	mov.w     w5, [w4+42]

000029f4 <.LSM197>:
        self->TXthreshold = TXthreshold;
    29f4:	1e 02 78    	mov.w     [w14], w4
    29f6:	be ba 97    	mov.w     [w14-10], w5
    29f8:	35 1a 98    	mov.w     w5, [w4+54]

000029fa <.LSM198>:
        self->putc = __putc_buffer;
    29fa:	1e 02 78    	mov.w     [w14], w4
    29fc:	05 11 22    	mov.w     #0x2110, w5
    29fe:	45 1a 98    	mov.w     w5, [w4+56]

00002a00 <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2a00:	1e 02 78    	mov.w     [w14], w4
    2a02:	54 02 90    	mov.w     [w4+10], w4
    2a04:	9e 02 78    	mov.w     [w14], w5
    2a06:	d5 02 90    	mov.w     [w5+10], w5
    2a08:	15 03 78    	mov.w     [w5], w6
    2a0a:	9e 02 78    	mov.w     [w14], w5
    2a0c:	e5 4a 90    	mov.b     [w5+14], w5
    2a0e:	85 82 fb    	ze        w5, w5
    2a10:	17 00 20    	mov.w     #0x1, w7
    2a12:	85 3a dd    	sl.w      w7, w5, w5
    2a14:	85 82 ea    	com.w     w5, w5
    2a16:	85 02 63    	and.w     w6, w5, w5
    2a18:	05 0a 78    	mov.w     w5, [w4]

00002a1a <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2a1a:	1e 02 78    	mov.w     [w14], w4
    2a1c:	64 02 90    	mov.w     [w4+12], w4
    2a1e:	9e 02 78    	mov.w     [w14], w5
    2a20:	e5 02 90    	mov.w     [w5+12], w5
    2a22:	15 03 78    	mov.w     [w5], w6
    2a24:	9e 02 78    	mov.w     [w14], w5
    2a26:	e5 4a 90    	mov.b     [w5+14], w5
    2a28:	85 82 fb    	ze        w5, w5
    2a2a:	17 00 20    	mov.w     #0x1, w7
    2a2c:	85 3a dd    	sl.w      w7, w5, w5
    2a2e:	86 82 72    	ior.w     w5, w6, w5
    2a30:	05 0a 78    	mov.w     w5, [w4]

00002a32 <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2a32:	0e ba 97    	mov.w     [w14-16], w4
    2a34:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2a36:	04 00 3a    	bra       NZ, 0x2a40 <.L71>

00002a38 <.LSM202>:
        self->getc = __getc_nobuffer;
    2a38:	1e 02 78    	mov.w     [w14], w4
    2a3a:	05 0f 22    	mov.w     #0x20f0, w5
    2a3c:	55 1a 98    	mov.w     w5, [w4+58]
    2a3e:	2b 00 37    	bra       0x2a96 <.L72>

00002a40 <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2a40:	1e 02 78    	mov.w     [w14], w4
    2a42:	8e ba 97    	mov.w     [w14-16], w5
    2a44:	65 12 98    	mov.w     w5, [w4+44]

00002a46 <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    2a46:	1e 02 78    	mov.w     [w14], w4
    2a48:	fe b2 97    	mov.w     [w14-18], w5
    2a4a:	75 12 98    	mov.w     w5, [w4+46]

00002a4c <.LSM205>:
        self->RXbuffer.head = 0;
    2a4c:	1e 02 78    	mov.w     [w14], w4
    2a4e:	80 02 eb    	clr.w     w5
    2a50:	05 1a 98    	mov.w     w5, [w4+48]

00002a52 <.LSM206>:
        self->RXbuffer.tail = 0;
    2a52:	1e 02 78    	mov.w     [w14], w4
    2a54:	80 02 eb    	clr.w     w5
    2a56:	15 1a 98    	mov.w     w5, [w4+50]

00002a58 <.LSM207>:
        self->RXbuffer.count = 0;
    2a58:	1e 02 78    	mov.w     [w14], w4
    2a5a:	80 02 eb    	clr.w     w5
    2a5c:	25 1a 98    	mov.w     w5, [w4+52]

00002a5e <.LSM208>:
        self->getc = __getc_buffer;
    2a5e:	1e 02 78    	mov.w     [w14], w4
    2a60:	e5 1f 22    	mov.w     #0x21fe, w5
    2a62:	55 1a 98    	mov.w     w5, [w4+58]

00002a64 <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2a64:	1e 02 78    	mov.w     [w14], w4
    2a66:	54 02 90    	mov.w     [w4+10], w4
    2a68:	9e 02 78    	mov.w     [w14], w5
    2a6a:	d5 02 90    	mov.w     [w5+10], w5
    2a6c:	15 03 78    	mov.w     [w5], w6
    2a6e:	9e 02 78    	mov.w     [w14], w5
    2a70:	f5 4a 90    	mov.b     [w5+15], w5
    2a72:	85 82 fb    	ze        w5, w5
    2a74:	17 00 20    	mov.w     #0x1, w7
    2a76:	85 3a dd    	sl.w      w7, w5, w5
    2a78:	85 82 ea    	com.w     w5, w5
    2a7a:	85 02 63    	and.w     w6, w5, w5
    2a7c:	05 0a 78    	mov.w     w5, [w4]

00002a7e <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    2a7e:	1e 02 78    	mov.w     [w14], w4
    2a80:	64 02 90    	mov.w     [w4+12], w4
    2a82:	9e 02 78    	mov.w     [w14], w5
    2a84:	e5 02 90    	mov.w     [w5+12], w5
    2a86:	15 03 78    	mov.w     [w5], w6
    2a88:	9e 02 78    	mov.w     [w14], w5
    2a8a:	f5 4a 90    	mov.b     [w5+15], w5
    2a8c:	85 82 fb    	ze        w5, w5
    2a8e:	17 00 20    	mov.w     #0x1, w7
    2a90:	85 3a dd    	sl.w      w7, w5, w5
    2a92:	86 82 72    	ior.w     w5, w6, w5
    2a94:	05 0a 78    	mov.w     w5, [w4]

00002a96 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    2a96:	1e 02 78    	mov.w     [w14], w4
    2a98:	14 02 78    	mov.w     [w4], w4
    2a9a:	9e 02 78    	mov.w     [w14], w5
    2a9c:	95 02 78    	mov.w     [w5], w5
    2a9e:	15 03 78    	mov.w     [w5], w6
    2aa0:	05 00 28    	mov.w     #0x8000, w5
    2aa2:	86 82 72    	ior.w     w5, w6, w5
    2aa4:	05 0a 78    	mov.w     w5, [w4]

00002aa6 <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2aa6:	1e 02 78    	mov.w     [w14], w4
    2aa8:	14 02 90    	mov.w     [w4+2], w4
    2aaa:	9e 02 78    	mov.w     [w14], w5
    2aac:	95 02 90    	mov.w     [w5+2], w5
    2aae:	15 03 78    	mov.w     [w5], w6
    2ab0:	05 40 20    	mov.w     #0x400, w5
    2ab2:	86 82 72    	ior.w     w5, w6, w5
    2ab4:	05 0a 78    	mov.w     w5, [w4]
    2ab6:	17 00 37    	bra       0x2ae6 <.L40>

00002ab8 <.L73>:
    2ab8:	00 00 00    	nop       
    2aba:	15 00 37    	bra       0x2ae6 <.L40>

00002abc <.L74>:
    2abc:	00 00 00    	nop       
    2abe:	13 00 37    	bra       0x2ae6 <.L40>

00002ac0 <.L75>:
    2ac0:	00 00 00    	nop       
    2ac2:	11 00 37    	bra       0x2ae6 <.L40>

00002ac4 <.L76>:
    2ac4:	00 00 00    	nop       
    2ac6:	0f 00 37    	bra       0x2ae6 <.L40>

00002ac8 <.L77>:
    2ac8:	00 00 00    	nop       
    2aca:	0d 00 37    	bra       0x2ae6 <.L40>

00002acc <.L78>:
    2acc:	00 00 00    	nop       
    2ace:	0b 00 37    	bra       0x2ae6 <.L40>

00002ad0 <.L79>:
    2ad0:	00 00 00    	nop       
    2ad2:	09 00 37    	bra       0x2ae6 <.L40>

00002ad4 <.L80>:
    2ad4:	00 00 00    	nop       
    2ad6:	07 00 37    	bra       0x2ae6 <.L40>

00002ad8 <.L81>:
    2ad8:	00 00 00    	nop       
    2ada:	05 00 37    	bra       0x2ae6 <.L40>

00002adc <.L82>:
    2adc:	00 00 00    	nop       
    2ade:	03 00 37    	bra       0x2ae6 <.L40>

00002ae0 <.L83>:
    2ae0:	00 00 00    	nop       
    2ae2:	01 00 37    	bra       0x2ae6 <.L40>

00002ae4 <.L84>:
    2ae4:	00 00 00    	nop       

00002ae6 <.L40>:
}
    2ae6:	4f 04 78    	mov.w     [--w15], w8
    2ae8:	00 80 fa    	ulnk      
    2aea:	00 00 06    	return    

00002aec <_uart_close>:

void uart_close(_UART *self) {
    2aec:	02 00 fa    	lnk       #0x2
    2aee:	00 0f 78    	mov.w     w0, [w14]

00002af0 <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2af0:	1e 02 78    	mov.w     [w14], w4
    2af2:	14 02 90    	mov.w     [w4+2], w4
    2af4:	9e 02 78    	mov.w     [w14], w5
    2af6:	95 02 90    	mov.w     [w5+2], w5
    2af8:	15 03 78    	mov.w     [w5], w6
    2afa:	f5 bf 2f    	mov.w     #0xfbff, w5
    2afc:	85 02 63    	and.w     w6, w5, w5
    2afe:	05 0a 78    	mov.w     w5, [w4]

00002b00 <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    2b00:	1e 02 78    	mov.w     [w14], w4
    2b02:	14 02 78    	mov.w     [w4], w4
    2b04:	80 02 eb    	clr.w     w5
    2b06:	05 0a 78    	mov.w     w5, [w4]

00002b08 <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    2b08:	1e 02 78    	mov.w     [w14], w4
    2b0a:	64 02 90    	mov.w     [w4+12], w4
    2b0c:	9e 02 78    	mov.w     [w14], w5
    2b0e:	e5 02 90    	mov.w     [w5+12], w5
    2b10:	15 03 78    	mov.w     [w5], w6
    2b12:	9e 02 78    	mov.w     [w14], w5
    2b14:	e5 4a 90    	mov.b     [w5+14], w5
    2b16:	85 82 fb    	ze        w5, w5
    2b18:	17 00 20    	mov.w     #0x1, w7
    2b1a:	85 3a dd    	sl.w      w7, w5, w5
    2b1c:	85 82 ea    	com.w     w5, w5
    2b1e:	85 02 63    	and.w     w6, w5, w5
    2b20:	05 0a 78    	mov.w     w5, [w4]

00002b22 <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2b22:	1e 02 78    	mov.w     [w14], w4
    2b24:	64 02 90    	mov.w     [w4+12], w4
    2b26:	9e 02 78    	mov.w     [w14], w5
    2b28:	e5 02 90    	mov.w     [w5+12], w5
    2b2a:	15 03 78    	mov.w     [w5], w6
    2b2c:	9e 02 78    	mov.w     [w14], w5
    2b2e:	f5 4a 90    	mov.b     [w5+15], w5
    2b30:	85 82 fb    	ze        w5, w5
    2b32:	17 00 20    	mov.w     #0x1, w7
    2b34:	85 3a dd    	sl.w      w7, w5, w5
    2b36:	85 82 ea    	com.w     w5, w5
    2b38:	85 02 63    	and.w     w6, w5, w5
    2b3a:	05 0a 78    	mov.w     w5, [w4]

00002b3c <.LSM226>:
    self->putc = NULL;
    2b3c:	1e 02 78    	mov.w     [w14], w4
    2b3e:	80 02 eb    	clr.w     w5
    2b40:	45 1a 98    	mov.w     w5, [w4+56]

00002b42 <.LSM227>:
    self->getc = NULL;
    2b42:	1e 02 78    	mov.w     [w14], w4
    2b44:	80 02 eb    	clr.w     w5
    2b46:	55 1a 98    	mov.w     w5, [w4+58]

00002b48 <.LSM228>:
    if (self->TX) {
    2b48:	1e 02 78    	mov.w     [w14], w4
    2b4a:	54 0a 90    	mov.w     [w4+26], w4
    2b4c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2b4e:	31 00 32    	bra       Z, 0x2bb2 <.L86>

00002b50 <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2b50:	15 3a 80    	mov.w     0x742, w5
    2b52:	f4 0b 20    	mov.w     #0xbf, w4
    2b54:	04 83 62    	and.w     w5, w4, w6
    2b56:	64 04 20    	mov.w     #0x46, w4
    2b58:	75 05 20    	mov.w     #0x57, w5
    2b5a:	27 74 20    	mov.w     #0x742, w7
    2b5c:	84 4b 78    	mov.b     w4, [w7]
    2b5e:	85 4b 78    	mov.b     w5, [w7]
    2b60:	86 4b 78    	mov.b     w6, [w7]

00002b62 <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2b62:	1e 02 78    	mov.w     [w14], w4
    2b64:	54 0a 90    	mov.w     [w4+26], w4
    2b66:	74 02 90    	mov.w     [w4+14], w4
    2b68:	9e 02 78    	mov.w     [w14], w5
    2b6a:	d5 0a 90    	mov.w     [w5+26], w5
    2b6c:	f5 02 90    	mov.w     [w5+14], w5
    2b6e:	15 03 78    	mov.w     [w5], w6
    2b70:	9e 02 78    	mov.w     [w14], w5
    2b72:	d5 0a 90    	mov.w     [w5+26], w5
    2b74:	a5 4a 90    	mov.b     [w5+10], w5
    2b76:	85 82 fb    	ze        w5, w5
    2b78:	f7 03 20    	mov.w     #0x3f, w7
    2b7a:	85 3a dd    	sl.w      w7, w5, w5
    2b7c:	85 82 ea    	com.w     w5, w5
    2b7e:	85 02 63    	and.w     w6, w5, w5
    2b80:	05 0a 78    	mov.w     w5, [w4]

00002b82 <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2b82:	15 3a 80    	mov.w     0x742, w5
    2b84:	04 04 20    	mov.w     #0x40, w4
    2b86:	05 03 72    	ior.w     w4, w5, w6
    2b88:	64 04 20    	mov.w     #0x46, w4
    2b8a:	75 05 20    	mov.w     #0x57, w5
    2b8c:	27 74 20    	mov.w     #0x742, w7
    2b8e:	84 4b 78    	mov.b     w4, [w7]
    2b90:	85 4b 78    	mov.b     w5, [w7]
    2b92:	86 4b 78    	mov.b     w6, [w7]

00002b94 <.LSM232>:
        self->TX->owner = NULL;
    2b94:	1e 02 78    	mov.w     [w14], w4
    2b96:	54 0a 90    	mov.w     [w4+26], w4
    2b98:	80 02 eb    	clr.w     w5
    2b9a:	05 0a 98    	mov.w     w5, [w4+16]

00002b9c <.LSM233>:
        pin_digitalOut(self->TX);
    2b9c:	1e 02 78    	mov.w     [w14], w4
    2b9e:	54 0a 90    	mov.w     [w4+26], w4
    2ba0:	04 00 78    	mov.w     w4, w0
    2ba2:	14 0d 07    	rcall     0x45cc <_pin_digitalOut>

00002ba4 <.LSM234>:
        pin_set(self->TX);
    2ba4:	1e 02 78    	mov.w     [w14], w4
    2ba6:	54 0a 90    	mov.w     [w4+26], w4
    2ba8:	04 00 78    	mov.w     w4, w0
    2baa:	6d 0d 07    	rcall     0x4686 <_pin_set>

00002bac <.LSM235>:
        self->TX = NULL;
    2bac:	1e 02 78    	mov.w     [w14], w4
    2bae:	80 02 eb    	clr.w     w5
    2bb0:	55 0a 98    	mov.w     w5, [w4+26]

00002bb2 <.L86>:
    }
    if (self->RX) {
    2bb2:	1e 02 78    	mov.w     [w14], w4
    2bb4:	64 0a 90    	mov.w     [w4+28], w4
    2bb6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2bb8:	29 00 32    	bra       Z, 0x2c0c <.L87>

00002bba <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2bba:	15 3a 80    	mov.w     0x742, w5
    2bbc:	f4 0b 20    	mov.w     #0xbf, w4
    2bbe:	04 83 62    	and.w     w5, w4, w6
    2bc0:	64 04 20    	mov.w     #0x46, w4
    2bc2:	75 05 20    	mov.w     #0x57, w5
    2bc4:	27 74 20    	mov.w     #0x742, w7
    2bc6:	84 4b 78    	mov.b     w4, [w7]
    2bc8:	85 4b 78    	mov.b     w5, [w7]
    2bca:	86 4b 78    	mov.b     w6, [w7]

00002bcc <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2bcc:	1e 02 78    	mov.w     [w14], w4
    2bce:	04 0a 90    	mov.w     [w4+16], w4
    2bd0:	9e 02 78    	mov.w     [w14], w5
    2bd2:	85 0a 90    	mov.w     [w5+16], w5
    2bd4:	15 03 78    	mov.w     [w5], w6
    2bd6:	9e 02 78    	mov.w     [w14], w5
    2bd8:	c5 52 90    	mov.b     [w5+20], w5
    2bda:	85 82 fb    	ze        w5, w5
    2bdc:	f7 03 20    	mov.w     #0x3f, w7
    2bde:	85 3a dd    	sl.w      w7, w5, w5
    2be0:	86 82 72    	ior.w     w5, w6, w5
    2be2:	05 0a 78    	mov.w     w5, [w4]

00002be4 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2be4:	15 3a 80    	mov.w     0x742, w5
    2be6:	04 04 20    	mov.w     #0x40, w4
    2be8:	05 03 72    	ior.w     w4, w5, w6
    2bea:	64 04 20    	mov.w     #0x46, w4
    2bec:	75 05 20    	mov.w     #0x57, w5
    2bee:	27 74 20    	mov.w     #0x742, w7
    2bf0:	84 4b 78    	mov.b     w4, [w7]
    2bf2:	85 4b 78    	mov.b     w5, [w7]
    2bf4:	86 4b 78    	mov.b     w6, [w7]

00002bf6 <.LSM240>:
        self->RX->owner = NULL;
    2bf6:	1e 02 78    	mov.w     [w14], w4
    2bf8:	64 0a 90    	mov.w     [w4+28], w4
    2bfa:	80 02 eb    	clr.w     w5
    2bfc:	05 0a 98    	mov.w     w5, [w4+16]

00002bfe <.LSM241>:
        pin_digitalIn(self->RX);
    2bfe:	1e 02 78    	mov.w     [w14], w4
    2c00:	64 0a 90    	mov.w     [w4+28], w4
    2c02:	04 00 78    	mov.w     w4, w0
    2c04:	bc 0c 07    	rcall     0x457e <_pin_digitalIn>

00002c06 <.LSM242>:
        self->RX = NULL;
    2c06:	1e 02 78    	mov.w     [w14], w4
    2c08:	80 02 eb    	clr.w     w5
    2c0a:	65 0a 98    	mov.w     w5, [w4+28]

00002c0c <.L87>:
    }
    if (self->RTS) {
    2c0c:	1e 02 78    	mov.w     [w14], w4
    2c0e:	74 0a 90    	mov.w     [w4+30], w4
    2c10:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2c12:	31 00 32    	bra       Z, 0x2c76 <.L88>

00002c14 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2c14:	15 3a 80    	mov.w     0x742, w5
    2c16:	f4 0b 20    	mov.w     #0xbf, w4
    2c18:	04 83 62    	and.w     w5, w4, w6
    2c1a:	64 04 20    	mov.w     #0x46, w4
    2c1c:	75 05 20    	mov.w     #0x57, w5
    2c1e:	27 74 20    	mov.w     #0x742, w7
    2c20:	84 4b 78    	mov.b     w4, [w7]
    2c22:	85 4b 78    	mov.b     w5, [w7]
    2c24:	86 4b 78    	mov.b     w6, [w7]

00002c26 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2c26:	1e 02 78    	mov.w     [w14], w4
    2c28:	74 0a 90    	mov.w     [w4+30], w4
    2c2a:	74 02 90    	mov.w     [w4+14], w4
    2c2c:	9e 02 78    	mov.w     [w14], w5
    2c2e:	f5 0a 90    	mov.w     [w5+30], w5
    2c30:	f5 02 90    	mov.w     [w5+14], w5
    2c32:	15 03 78    	mov.w     [w5], w6
    2c34:	9e 02 78    	mov.w     [w14], w5
    2c36:	f5 0a 90    	mov.w     [w5+30], w5
    2c38:	a5 4a 90    	mov.b     [w5+10], w5
    2c3a:	85 82 fb    	ze        w5, w5
    2c3c:	f7 03 20    	mov.w     #0x3f, w7
    2c3e:	85 3a dd    	sl.w      w7, w5, w5
    2c40:	85 82 ea    	com.w     w5, w5
    2c42:	85 02 63    	and.w     w6, w5, w5
    2c44:	05 0a 78    	mov.w     w5, [w4]

00002c46 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c46:	15 3a 80    	mov.w     0x742, w5
    2c48:	04 04 20    	mov.w     #0x40, w4
    2c4a:	05 03 72    	ior.w     w4, w5, w6
    2c4c:	64 04 20    	mov.w     #0x46, w4
    2c4e:	75 05 20    	mov.w     #0x57, w5
    2c50:	27 74 20    	mov.w     #0x742, w7
    2c52:	84 4b 78    	mov.b     w4, [w7]
    2c54:	85 4b 78    	mov.b     w5, [w7]
    2c56:	86 4b 78    	mov.b     w6, [w7]

00002c58 <.LSM247>:
        self->RTS->owner = NULL;
    2c58:	1e 02 78    	mov.w     [w14], w4
    2c5a:	74 0a 90    	mov.w     [w4+30], w4
    2c5c:	80 02 eb    	clr.w     w5
    2c5e:	05 0a 98    	mov.w     w5, [w4+16]

00002c60 <.LSM248>:
        pin_digitalOut(self->RTS);
    2c60:	1e 02 78    	mov.w     [w14], w4
    2c62:	74 0a 90    	mov.w     [w4+30], w4
    2c64:	04 00 78    	mov.w     w4, w0
    2c66:	b2 0c 07    	rcall     0x45cc <_pin_digitalOut>

00002c68 <.LSM249>:
        pin_set(self->RTS);
    2c68:	1e 02 78    	mov.w     [w14], w4
    2c6a:	74 0a 90    	mov.w     [w4+30], w4
    2c6c:	04 00 78    	mov.w     w4, w0
    2c6e:	0b 0d 07    	rcall     0x4686 <_pin_set>

00002c70 <.LSM250>:
        self->RTS = NULL;
    2c70:	1e 02 78    	mov.w     [w14], w4
    2c72:	80 02 eb    	clr.w     w5
    2c74:	75 0a 98    	mov.w     w5, [w4+30]

00002c76 <.L88>:
    }
    if (self->CTS) {
    2c76:	1e 02 78    	mov.w     [w14], w4
    2c78:	04 12 90    	mov.w     [w4+32], w4
    2c7a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2c7c:	29 00 32    	bra       Z, 0x2cd0 <.L85>

00002c7e <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2c7e:	15 3a 80    	mov.w     0x742, w5
    2c80:	f4 0b 20    	mov.w     #0xbf, w4
    2c82:	04 83 62    	and.w     w5, w4, w6
    2c84:	64 04 20    	mov.w     #0x46, w4
    2c86:	75 05 20    	mov.w     #0x57, w5
    2c88:	27 74 20    	mov.w     #0x742, w7
    2c8a:	84 4b 78    	mov.b     w4, [w7]
    2c8c:	85 4b 78    	mov.b     w5, [w7]
    2c8e:	86 4b 78    	mov.b     w6, [w7]

00002c90 <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2c90:	1e 02 78    	mov.w     [w14], w4
    2c92:	14 0a 90    	mov.w     [w4+18], w4
    2c94:	9e 02 78    	mov.w     [w14], w5
    2c96:	95 0a 90    	mov.w     [w5+18], w5
    2c98:	15 03 78    	mov.w     [w5], w6
    2c9a:	9e 02 78    	mov.w     [w14], w5
    2c9c:	d5 52 90    	mov.b     [w5+21], w5
    2c9e:	85 82 fb    	ze        w5, w5
    2ca0:	f7 03 20    	mov.w     #0x3f, w7
    2ca2:	85 3a dd    	sl.w      w7, w5, w5
    2ca4:	86 82 72    	ior.w     w5, w6, w5
    2ca6:	05 0a 78    	mov.w     w5, [w4]

00002ca8 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ca8:	15 3a 80    	mov.w     0x742, w5
    2caa:	04 04 20    	mov.w     #0x40, w4
    2cac:	05 03 72    	ior.w     w4, w5, w6
    2cae:	64 04 20    	mov.w     #0x46, w4
    2cb0:	75 05 20    	mov.w     #0x57, w5
    2cb2:	27 74 20    	mov.w     #0x742, w7
    2cb4:	84 4b 78    	mov.b     w4, [w7]
    2cb6:	85 4b 78    	mov.b     w5, [w7]
    2cb8:	86 4b 78    	mov.b     w6, [w7]

00002cba <.LSM255>:
        self->CTS->owner = NULL;
    2cba:	1e 02 78    	mov.w     [w14], w4
    2cbc:	04 12 90    	mov.w     [w4+32], w4
    2cbe:	80 02 eb    	clr.w     w5
    2cc0:	05 0a 98    	mov.w     w5, [w4+16]

00002cc2 <.LSM256>:
        pin_digitalIn(self->CTS);
    2cc2:	1e 02 78    	mov.w     [w14], w4
    2cc4:	04 12 90    	mov.w     [w4+32], w4
    2cc6:	04 00 78    	mov.w     w4, w0
    2cc8:	5a 0c 07    	rcall     0x457e <_pin_digitalIn>

00002cca <.LSM257>:
        self->CTS = NULL;
    2cca:	1e 02 78    	mov.w     [w14], w4
    2ccc:	80 02 eb    	clr.w     w5
    2cce:	05 12 98    	mov.w     w5, [w4+32]

00002cd0 <.L85>:
    }
}
    2cd0:	00 80 fa    	ulnk      
    2cd2:	00 00 06    	return    

00002cd4 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2cd4:	04 00 fa    	lnk       #0x4
    2cd6:	00 0f 78    	mov.w     w0, [w14]
    2cd8:	21 47 98    	mov.b     w1, [w14+2]

00002cda <.LSM260>:
    if (self->putc)
    2cda:	1e 02 78    	mov.w     [w14], w4
    2cdc:	44 1a 90    	mov.w     [w4+56], w4
    2cde:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2ce0:	05 00 32    	bra       Z, 0x2cec <.L90>

00002ce2 <.LSM261>:
        self->putc(self, ch);
    2ce2:	1e 02 78    	mov.w     [w14], w4
    2ce4:	44 1a 90    	mov.w     [w4+56], w4
    2ce6:	ae 40 90    	mov.b     [w14+2], w1
    2ce8:	1e 00 78    	mov.w     [w14], w0
    2cea:	04 00 01    	call      w4

00002cec <.L90>:
}
    2cec:	00 80 fa    	ulnk      
    2cee:	00 00 06    	return    

00002cf0 <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2cf0:	02 00 fa    	lnk       #0x2
    2cf2:	00 0f 78    	mov.w     w0, [w14]

00002cf4 <.LSM264>:
    if (self->getc)
    2cf4:	1e 02 78    	mov.w     [w14], w4
    2cf6:	54 1a 90    	mov.w     [w4+58], w4
    2cf8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2cfa:	06 00 32    	bra       Z, 0x2d08 <.L93>

00002cfc <.LSM265>:
        return self->getc(self);
    2cfc:	1e 02 78    	mov.w     [w14], w4
    2cfe:	54 1a 90    	mov.w     [w4+58], w4
    2d00:	1e 00 78    	mov.w     [w14], w0
    2d02:	04 00 01    	call      w4
    2d04:	00 42 78    	mov.b     w0, w4
    2d06:	01 00 37    	bra       0x2d0a <.L94>

00002d08 <.L93>:
    else
        return 0xFF;
    2d08:	00 c2 eb    	setm.b    w4

00002d0a <.L94>:
}
    2d0a:	04 40 78    	mov.b     w4, w0
    2d0c:	00 80 fa    	ulnk      
    2d0e:	00 00 06    	return    

00002d10 <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2d10:	02 00 fa    	lnk       #0x2
    2d12:	00 0f 78    	mov.w     w0, [w14]

00002d14 <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2d14:	1e 02 78    	mov.w     [w14], w4
    2d16:	14 02 90    	mov.w     [w4+2], w4
    2d18:	94 02 78    	mov.w     [w4], w5
    2d1a:	04 40 20    	mov.w     #0x400, w4
    2d1c:	04 82 62    	and.w     w5, w4, w4
    2d1e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2d20:	08 00 3a    	bra       NZ, 0x2d32 <.L95>

00002d22 <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2d22:	1e 02 78    	mov.w     [w14], w4
    2d24:	14 02 90    	mov.w     [w4+2], w4
    2d26:	9e 02 78    	mov.w     [w14], w5
    2d28:	95 02 90    	mov.w     [w5+2], w5
    2d2a:	15 03 78    	mov.w     [w5], w6
    2d2c:	05 40 20    	mov.w     #0x400, w5
    2d2e:	86 82 72    	ior.w     w5, w6, w5
    2d30:	05 0a 78    	mov.w     w5, [w4]

00002d32 <.L95>:
}
    2d32:	00 80 fa    	ulnk      
    2d34:	00 00 06    	return    

00002d36 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2d36:	04 00 fa    	lnk       #0x4
    2d38:	00 0f 78    	mov.w     w0, [w14]
    2d3a:	11 07 98    	mov.w     w1, [w14+2]

00002d3c <.LSM273>:
    while (*str)
    2d3c:	08 00 37    	bra       0x2d4e <.L98>

00002d3e <.L99>:
        uart_putc(self, *str++);
    2d3e:	1e 02 90    	mov.w     [w14+2], w4
    2d40:	14 42 78    	mov.b     [w4], w4
    2d42:	9e 02 90    	mov.w     [w14+2], w5
    2d44:	85 02 e8    	inc.w     w5, w5
    2d46:	15 07 98    	mov.w     w5, [w14+2]
    2d48:	84 40 78    	mov.b     w4, w1
    2d4a:	1e 00 78    	mov.w     [w14], w0
    2d4c:	c3 ff 07    	rcall     0x2cd4 <_uart_putc>

00002d4e <.L98>:
    2d4e:	1e 02 90    	mov.w     [w14+2], w4
    2d50:	14 42 78    	mov.b     [w4], w4
    2d52:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    2d54:	f4 ff 3a    	bra       NZ, 0x2d3e <.L99>

00002d56 <.LSM276>:
    uart_flushTxBuffer(self);
    2d56:	1e 00 78    	mov.w     [w14], w0
    2d58:	db ff 07    	rcall     0x2d10 <_uart_flushTxBuffer>

00002d5a <.LSM277>:
}
    2d5a:	00 80 fa    	ulnk      
    2d5c:	00 00 06    	return    

00002d5e <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2d5e:	0a 00 fa    	lnk       #0xa
    2d60:	20 07 98    	mov.w     w0, [w14+4]
    2d62:	31 07 98    	mov.w     w1, [w14+6]
    2d64:	42 07 98    	mov.w     w2, [w14+8]

00002d66 <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2d66:	4e 02 90    	mov.w     [w14+8], w4
    2d68:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2d6a:	88 00 32    	bra       Z, 0x2e7c <.L113>

00002d6c <.LSM280>:
        return;

    if (len==1) {
    2d6c:	4e 02 90    	mov.w     [w14+8], w4
    2d6e:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    2d70:	04 00 3a    	bra       NZ, 0x2d7a <.L103>

00002d72 <.LSM281>:
        *str = '\0';
    2d72:	3e 02 90    	mov.w     [w14+6], w4
    2d74:	80 42 eb    	clr.b     w5
    2d76:	05 4a 78    	mov.b     w5, [w4]

00002d78 <.LSM282>:
        return;
    2d78:	82 00 37    	bra       0x2e7e <.L100>

00002d7a <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2d7a:	b1 c1 b3    	mov.b     #0x1b, w1
    2d7c:	2e 00 90    	mov.w     [w14+4], w0
    2d7e:	aa ff 07    	rcall     0x2cd4 <_uart_putc>

00002d80 <.LSM284>:
    uart_putc(self, '7');
    2d80:	71 c3 b3    	mov.b     #0x37, w1
    2d82:	2e 00 90    	mov.w     [w14+4], w0
    2d84:	a7 ff 07    	rcall     0x2cd4 <_uart_putc>

00002d86 <.LSM285>:
    uart_flushTxBuffer(self);
    2d86:	2e 00 90    	mov.w     [w14+4], w0
    2d88:	c3 ff 07    	rcall     0x2d10 <_uart_flushTxBuffer>

00002d8a <.LSM286>:
    start = str;
    2d8a:	3e 02 90    	mov.w     [w14+6], w4
    2d8c:	14 07 98    	mov.w     w4, [w14+2]

00002d8e <.LSM287>:
    left = len;
    2d8e:	4e 02 90    	mov.w     [w14+8], w4
    2d90:	04 0f 78    	mov.w     w4, [w14]
    2d92:	03 00 37    	bra       0x2d9a <.L112>

00002d94 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2d94:	00 00 00    	nop       
    2d96:	01 00 37    	bra       0x2d9a <.L112>

00002d98 <.L115>:
    2d98:	00 00 00    	nop       

00002d9a <.L112>:
    2d9a:	2e 00 90    	mov.w     [w14+4], w0
    2d9c:	a9 ff 07    	rcall     0x2cf0 <_uart_getc>
    2d9e:	00 42 78    	mov.b     w0, w4
    2da0:	be 02 90    	mov.w     [w14+6], w5
    2da2:	84 4a 78    	mov.b     w4, [w5]

00002da4 <.LSM290>:
    2da4:	3e 02 90    	mov.w     [w14+6], w4
    2da6:	14 42 78    	mov.b     [w4], w4
    2da8:	ed 4f 52    	sub.b     w4, #0xd, [w15]
    2daa:	0c 00 3a    	bra       NZ, 0x2dc4 <.L104>

00002dac <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    2dac:	3e 02 90    	mov.w     [w14+6], w4
    2dae:	80 42 eb    	clr.b     w5
    2db0:	05 4a 78    	mov.b     w5, [w4]

00002db2 <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2db2:	a1 c0 b3    	mov.b     #0xa, w1
    2db4:	2e 00 90    	mov.w     [w14+4], w0
    2db6:	8e ff 07    	rcall     0x2cd4 <_uart_putc>

00002db8 <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    2db8:	d1 c0 b3    	mov.b     #0xd, w1
    2dba:	2e 00 90    	mov.w     [w14+4], w0
    2dbc:	8b ff 07    	rcall     0x2cd4 <_uart_putc>

00002dbe <.LSM294>:
    uart_flushTxBuffer(self);
    2dbe:	2e 00 90    	mov.w     [w14+4], w0
    2dc0:	a7 ff 07    	rcall     0x2d10 <_uart_flushTxBuffer>
    2dc2:	5d 00 37    	bra       0x2e7e <.L100>

00002dc4 <.L104>:
    2dc4:	3e 02 90    	mov.w     [w14+6], w4
    2dc6:	14 42 78    	mov.b     [w4], w4
    2dc8:	fb 4f 52    	sub.b     w4, #0x1b, [w15]
    2dca:	16 00 3a    	bra       NZ, 0x2df8 <.L105>

00002dcc <.LSM296>:
    2dcc:	b1 c1 b3    	mov.b     #0x1b, w1
    2dce:	2e 00 90    	mov.w     [w14+4], w0
    2dd0:	81 ff 07    	rcall     0x2cd4 <_uart_putc>

00002dd2 <.LSM297>:
    2dd2:	81 c3 b3    	mov.b     #0x38, w1
    2dd4:	2e 00 90    	mov.w     [w14+4], w0
    2dd6:	7e ff 07    	rcall     0x2cd4 <_uart_putc>

00002dd8 <.LSM298>:
    2dd8:	b1 c1 b3    	mov.b     #0x1b, w1
    2dda:	2e 00 90    	mov.w     [w14+4], w0
    2ddc:	7b ff 07    	rcall     0x2cd4 <_uart_putc>

00002dde <.LSM299>:
    2dde:	b1 c5 b3    	mov.b     #0x5b, w1
    2de0:	2e 00 90    	mov.w     [w14+4], w0
    2de2:	78 ff 07    	rcall     0x2cd4 <_uart_putc>

00002de4 <.LSM300>:
    2de4:	b1 c4 b3    	mov.b     #0x4b, w1
    2de6:	2e 00 90    	mov.w     [w14+4], w0
    2de8:	75 ff 07    	rcall     0x2cd4 <_uart_putc>

00002dea <.LSM301>:
    2dea:	2e 00 90    	mov.w     [w14+4], w0
    2dec:	91 ff 07    	rcall     0x2d10 <_uart_flushTxBuffer>

00002dee <.LSM302>:
    2dee:	1e 02 90    	mov.w     [w14+2], w4
    2df0:	34 07 98    	mov.w     w4, [w14+6]

00002df2 <.LSM303>:
    2df2:	4e 02 90    	mov.w     [w14+8], w4
    2df4:	04 0f 78    	mov.w     w4, [w14]

00002df6 <.LSM304>:
    2df6:	41 00 37    	bra       0x2e7a <.L106>

00002df8 <.L105>:
    2df8:	3e 02 90    	mov.w     [w14+6], w4
    2dfa:	14 42 78    	mov.b     [w4], w4
    2dfc:	e8 4f 52    	sub.b     w4, #0x8, [w15]
    2dfe:	05 00 32    	bra       Z, 0x2e0a <.L107>

00002e00 <.LSM306>:
    2e00:	3e 02 90    	mov.w     [w14+6], w4
    2e02:	94 42 78    	mov.b     [w4], w5

00002e04 <.LSM307>:
    2e04:	f4 c7 b3    	mov.b     #0x7f, w4
    2e06:	84 cf 52    	sub.b     w5, w4, [w15]
    2e08:	1a 00 3a    	bra       NZ, 0x2e3e <.L108>

00002e0a <.L107>:
    2e0a:	be 02 90    	mov.w     [w14+6], w5
    2e0c:	1e 02 90    	mov.w     [w14+2], w4
    2e0e:	84 8f 52    	sub.w     w5, w4, [w15]
    2e10:	10 00 36    	bra       LEU, 0x2e32 <.L109>

00002e12 <.LSM309>:
    2e12:	81 c0 b3    	mov.b     #0x8, w1
    2e14:	2e 00 90    	mov.w     [w14+4], w0
    2e16:	5e ff 07    	rcall     0x2cd4 <_uart_putc>

00002e18 <.LSM310>:
    2e18:	01 c2 b3    	mov.b     #0x20, w1
    2e1a:	2e 00 90    	mov.w     [w14+4], w0
    2e1c:	5b ff 07    	rcall     0x2cd4 <_uart_putc>

00002e1e <.LSM311>:
    2e1e:	81 c0 b3    	mov.b     #0x8, w1
    2e20:	2e 00 90    	mov.w     [w14+4], w0
    2e22:	58 ff 07    	rcall     0x2cd4 <_uart_putc>

00002e24 <.LSM312>:
    2e24:	2e 00 90    	mov.w     [w14+4], w0
    2e26:	74 ff 07    	rcall     0x2d10 <_uart_flushTxBuffer>

00002e28 <.LSM313>:
    2e28:	3e 02 90    	mov.w     [w14+6], w4
    2e2a:	04 02 e9    	dec.w     w4, w4
    2e2c:	34 07 98    	mov.w     w4, [w14+6]

00002e2e <.LSM314>:
    2e2e:	1e 0f e8    	inc.w     [w14], [w14]
    2e30:	05 00 37    	bra       0x2e3c <.L110>

00002e32 <.L109>:
    2e32:	71 c0 b3    	mov.b     #0x7, w1
    2e34:	2e 00 90    	mov.w     [w14+4], w0
    2e36:	4e ff 07    	rcall     0x2cd4 <_uart_putc>

00002e38 <.LSM316>:
    2e38:	2e 00 90    	mov.w     [w14+4], w0
    2e3a:	6a ff 07    	rcall     0x2d10 <_uart_flushTxBuffer>

00002e3c <.L110>:
    2e3c:	1e 00 37    	bra       0x2e7a <.L106>

00002e3e <.L108>:
    2e3e:	1e 02 78    	mov.w     [w14], w4
    2e40:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    2e42:	06 00 3a    	bra       NZ, 0x2e50 <.L111>

00002e44 <.LSM319>:
    2e44:	71 c0 b3    	mov.b     #0x7, w1
    2e46:	2e 00 90    	mov.w     [w14+4], w0
    2e48:	45 ff 07    	rcall     0x2cd4 <_uart_putc>

00002e4a <.LSM320>:
    2e4a:	2e 00 90    	mov.w     [w14+4], w0
    2e4c:	61 ff 07    	rcall     0x2d10 <_uart_flushTxBuffer>

00002e4e <.LSM321>:
    2e4e:	15 00 37    	bra       0x2e7a <.L106>

00002e50 <.L111>:
    2e50:	3e 02 90    	mov.w     [w14+6], w4
    2e52:	14 42 78    	mov.b     [w4], w4
    2e54:	ff 4f 52    	sub.b     w4, #0x1f, [w15]
    2e56:	9e ff 36    	bra       LEU, 0x2d94 <.L114>
    2e58:	3e 02 90    	mov.w     [w14+6], w4
    2e5a:	94 42 78    	mov.b     [w4], w5
    2e5c:	e4 c7 b3    	mov.b     #0x7e, w4
    2e5e:	84 cf 52    	sub.b     w5, w4, [w15]
    2e60:	9b ff 3e    	bra       GTU, 0x2d98 <.L115>

00002e62 <.LSM323>:
    2e62:	3e 02 90    	mov.w     [w14+6], w4
    2e64:	14 42 78    	mov.b     [w4], w4
    2e66:	84 40 78    	mov.b     w4, w1
    2e68:	2e 00 90    	mov.w     [w14+4], w0
    2e6a:	34 ff 07    	rcall     0x2cd4 <_uart_putc>

00002e6c <.LSM324>:
    2e6c:	2e 00 90    	mov.w     [w14+4], w0
    2e6e:	50 ff 07    	rcall     0x2d10 <_uart_flushTxBuffer>

00002e70 <.LSM325>:
    2e70:	3e 02 90    	mov.w     [w14+6], w4
    2e72:	04 02 e8    	inc.w     w4, w4
    2e74:	34 07 98    	mov.w     w4, [w14+6]

00002e76 <.LSM326>:
    2e76:	1e 0f e9    	dec.w     [w14], [w14]

00002e78 <.LSM327>:
    2e78:	90 ff 37    	bra       0x2d9a <.L112>

00002e7a <.L106>:
    2e7a:	8f ff 37    	bra       0x2d9a <.L112>

00002e7c <.L113>:
    2e7c:	00 00 00    	nop       

00002e7e <.L100>:
}
    2e7e:	00 80 fa    	ulnk      
    2e80:	00 00 06    	return    

00002e82 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    2e82:	04 00 fa    	lnk       #0x4

00002e84 <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    2e84:	94 24 a8    	bset.b    0x494, #0x1

00002e86 <.LSM2>:
    U1ADDR = 0;
    2e86:	00 02 eb    	clr.w     w4
    2e88:	b4 24 88    	mov.w     w4, 0x496

00002e8a <.LSM3>:
    U1EIR = 0xFF;
    2e8a:	f4 0f 20    	mov.w     #0xff, w4
    2e8c:	74 24 88    	mov.w     w4, 0x48e

00002e8e <.LSM4>:
    U1CONbits.PPBRST = 0;
    2e8e:	94 24 a9    	bclr.b    0x494, #0x1

00002e90 <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    2e90:	a4 4a 20    	mov.w     #0x4aa, w4
    2e92:	14 07 98    	mov.w     w4, [w14+2]

00002e94 <.LSM6>:
    for (n = 0; n<16; n++)
    2e94:	00 42 eb    	clr.b     w4
    2e96:	04 4f 78    	mov.b     w4, [w14]
    2e98:	08 00 37    	bra       0x2eaa <.L2>

00002e9a <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    2e9a:	9e 42 78    	mov.b     [w14], w5
    2e9c:	05 82 fb    	ze        w5, w4
    2e9e:	04 02 42    	add.w     w4, w4, w4
    2ea0:	9e 02 90    	mov.w     [w14+2], w5
    2ea2:	04 82 42    	add.w     w5, w4, w4
    2ea4:	80 02 eb    	clr.w     w5
    2ea6:	05 0a 78    	mov.w     w5, [w4]

00002ea8 <.LSM8>:
    2ea8:	1e 4f e8    	inc.b     [w14], [w14]

00002eaa <.L2>:
    2eaa:	1e 42 78    	mov.b     [w14], w4
    2eac:	ef 4f 52    	sub.b     w4, #0xf, [w15]
    2eae:	f5 ff 36    	bra       LEU, 0x2e9a <.L3>

00002eb0 <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    2eb0:	d4 00 20    	mov.w     #0xd, w4
    2eb2:	54 25 88    	mov.w     w4, 0x4aa

00002eb4 <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2eb4:	04 c4 b3    	mov.b     #0x40, w4
    2eb6:	84 42 78    	mov.b     w4, w5
    2eb8:	06 e0 20    	mov.w     #0xe00, w6
    2eba:	05 4b 78    	mov.b     w5, [w6]

00002ebc <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    2ebc:	a4 b7 20    	mov.w     #0xb7a, w4
    2ebe:	14 70 88    	mov.w     w4, 0xe02

00002ec0 <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    2ec0:	84 c8 b3    	mov.b     #0x88, w4
    2ec2:	84 42 78    	mov.b     w4, w5
    2ec4:	16 e0 20    	mov.w     #0xe01, w6
    2ec6:	05 4b 78    	mov.b     w5, [w6]

00002ec8 <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    2ec8:	a4 bb 20    	mov.w     #0xbba, w4
    2eca:	34 70 88    	mov.w     w4, 0xe06

00002ecc <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    2ecc:	84 c0 b3    	mov.b     #0x8, w4
    2ece:	84 42 78    	mov.b     w4, w5
    2ed0:	56 e0 20    	mov.w     #0xe05, w6
    2ed2:	05 4b 78    	mov.b     w5, [w6]

00002ed4 <.LSM15>:
    U1CNFG1 = 0x00;
    2ed4:	00 02 eb    	clr.w     w4
    2ed6:	34 25 88    	mov.w     w4, 0x4a6

00002ed8 <.LSM16>:
    U1CNFG2 = 0x00;
    2ed8:	00 02 eb    	clr.w     w4
    2eda:	44 25 88    	mov.w     w4, 0x4a8

00002edc <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    2edc:	04 e0 20    	mov.w     #0xe00, w4
    2ede:	48 22 de    	lsr.w     w4, #0x8, w4
    2ee0:	c4 24 88    	mov.w     w4, 0x498

00002ee2 <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    2ee2:	86 44 a8    	bset.b    0x486, #0x2

00002ee4 <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    2ee4:	86 e4 a8    	bset.b    0x486, #0x7

00002ee6 <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    2ee6:	88 04 a8    	bset.b    0x488, #0x0

00002ee8 <.LSM21>:
    U1CONbits.PKTDIS = 0;
    2ee8:	94 a4 a9    	bclr.b    0x494, #0x5

00002eea <.LSM22>:
    USB_curr_config = 0x00;
    2eea:	00 42 eb    	clr.b     w4
    2eec:	84 42 78    	mov.b     w4, w5
    2eee:	36 c1 20    	mov.w     #0xc13, w6
    2ef0:	05 4b 78    	mov.b     w5, [w6]

00002ef2 <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    2ef2:	00 42 eb    	clr.b     w4
    2ef4:	84 42 78    	mov.b     w4, w5
    2ef6:	66 c1 20    	mov.w     #0xc16, w6
    2ef8:	05 4b 78    	mov.b     w5, [w6]

00002efa <.LSM24>:
    USB_device_status = 0x01;
    2efa:	14 c0 b3    	mov.b     #0x1, w4
    2efc:	84 42 78    	mov.b     w4, w5
    2efe:	46 c1 20    	mov.w     #0xc14, w6
    2f00:	05 4b 78    	mov.b     w5, [w6]

00002f02 <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    2f02:	00 c2 eb    	setm.b    w4
    2f04:	84 42 78    	mov.b     w4, w5
    2f06:	66 c0 20    	mov.w     #0xc06, w6
    2f08:	05 4b 78    	mov.b     w5, [w6]

00002f0a <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    2f0a:	00 c2 eb    	setm.b    w4
    2f0c:	84 42 78    	mov.b     w4, w5
    2f0e:	76 c0 20    	mov.w     #0xc07, w6
    2f10:	05 4b 78    	mov.b     w5, [w6]

00002f12 <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    2f12:	00 00 00    	nop       

00002f14 <.L4>:
    2f14:	a5 24 80    	mov.w     0x494, w5
    2f16:	04 04 20    	mov.w     #0x40, w4
    2f18:	04 82 62    	and.w     w5, w4, w4
    2f1a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f1c:	fb ff 3a    	bra       NZ, 0x2f14 <.L4>

00002f1e <.LSM28>:
}
    2f1e:	00 80 fa    	ulnk      
    2f20:	00 00 06    	return    

00002f22 <_ServiceUSB>:

void ServiceUSB(void) {
    2f22:	06 00 fa    	lnk       #0x6

00002f24 <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    2f24:	54 24 80    	mov.w     0x48a, w4
    2f26:	62 02 62    	and.w     w4, #0x2, w4
    2f28:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f2a:	05 00 32    	bra       Z, 0x2f36 <.L6>

00002f2c <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    2f2c:	f4 0f 20    	mov.w     #0xff, w4
    2f2e:	74 24 88    	mov.w     w4, 0x48e

00002f30 <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    2f30:	24 00 20    	mov.w     #0x2, w4
    2f32:	54 24 88    	mov.w     w4, 0x48a
    2f34:	aa 00 37    	bra       0x308a <.L5>

00002f36 <.L6>:
    } else if (U1IRbits.SOFIF) {
    2f36:	54 24 80    	mov.w     0x48a, w4
    2f38:	64 02 62    	and.w     w4, #0x4, w4
    2f3a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f3c:	03 00 32    	bra       Z, 0x2f44 <.L8>

00002f3e <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    2f3e:	44 00 20    	mov.w     #0x4, w4
    2f40:	54 24 88    	mov.w     w4, 0x48a
    2f42:	a3 00 37    	bra       0x308a <.L5>

00002f44 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    2f44:	54 24 80    	mov.w     0x48a, w4
    2f46:	70 02 62    	and.w     w4, #0x10, w4
    2f48:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f4a:	03 00 32    	bra       Z, 0x2f52 <.L9>

00002f4c <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    2f4c:	04 01 20    	mov.w     #0x10, w4
    2f4e:	54 24 88    	mov.w     w4, 0x48a
    2f50:	9c 00 37    	bra       0x308a <.L5>

00002f52 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    2f52:	55 24 80    	mov.w     0x48a, w5
    2f54:	04 02 20    	mov.w     #0x20, w4
    2f56:	04 82 62    	and.w     w5, w4, w4
    2f58:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f5a:	03 00 32    	bra       Z, 0x2f62 <.L10>

00002f5c <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    2f5c:	04 02 20    	mov.w     #0x20, w4
    2f5e:	54 24 88    	mov.w     w4, 0x48a
    2f60:	94 00 37    	bra       0x308a <.L5>

00002f62 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    2f62:	55 24 80    	mov.w     0x48a, w5
    2f64:	04 08 20    	mov.w     #0x80, w4
    2f66:	04 82 62    	and.w     w5, w4, w4
    2f68:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f6a:	03 00 32    	bra       Z, 0x2f72 <.L11>

00002f6c <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    2f6c:	04 08 20    	mov.w     #0x80, w4
    2f6e:	54 24 88    	mov.w     w4, 0x48a
    2f70:	8c 00 37    	bra       0x308a <.L5>

00002f72 <.L11>:
    } else if (U1IRbits.URSTIF) {
    2f72:	54 24 80    	mov.w     0x48a, w4
    2f74:	61 02 62    	and.w     w4, #0x1, w4
    2f76:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f78:	40 00 32    	bra       Z, 0x2ffa <.L12>

00002f7a <.LSM42>:
        USB_curr_config = 0x00;
    2f7a:	00 42 eb    	clr.b     w4
    2f7c:	04 43 78    	mov.b     w4, w6
    2f7e:	35 c1 20    	mov.w     #0xc13, w5
    2f80:	86 4a 78    	mov.b     w6, [w5]

00002f82 <.LSM43>:
        while (U1IRbits.TRNIF) {
    2f82:	08 00 37    	bra       0x2f94 <.L13>

00002f84 <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    2f84:	84 00 20    	mov.w     #0x8, w4
    2f86:	54 24 88    	mov.w     w4, 0x48a

00002f88 <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    2f88:	00 00 00    	nop       

00002f8a <.LSM46>:
            __builtin_nop();
    2f8a:	00 00 00    	nop       

00002f8c <.LSM47>:
            __builtin_nop();
    2f8c:	00 00 00    	nop       

00002f8e <.LSM48>:
            __builtin_nop();
    2f8e:	00 00 00    	nop       

00002f90 <.LSM49>:
            __builtin_nop();
    2f90:	00 00 00    	nop       

00002f92 <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    2f92:	00 00 00    	nop       

00002f94 <.L13>:
    2f94:	54 24 80    	mov.w     0x48a, w4
    2f96:	68 02 62    	and.w     w4, #0x8, w4
    2f98:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f9a:	f4 ff 3a    	bra       NZ, 0x2f84 <.L14>

00002f9c <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    2f9c:	a4 4a 20    	mov.w     #0x4aa, w4
    2f9e:	14 07 98    	mov.w     w4, [w14+2]

00002fa0 <.LSM53>:
        for (n = 0; n<16; n++)
    2fa0:	00 42 eb    	clr.b     w4
    2fa2:	04 4f 78    	mov.b     w4, [w14]
    2fa4:	08 00 37    	bra       0x2fb6 <.L15>

00002fa6 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    2fa6:	9e 42 78    	mov.b     [w14], w5
    2fa8:	05 82 fb    	ze        w5, w4
    2faa:	04 02 42    	add.w     w4, w4, w4
    2fac:	9e 02 90    	mov.w     [w14+2], w5
    2fae:	04 82 42    	add.w     w5, w4, w4
    2fb0:	80 02 eb    	clr.w     w5
    2fb2:	05 0a 78    	mov.w     w5, [w4]

00002fb4 <.LSM55>:
    2fb4:	1e 4f e8    	inc.b     [w14], [w14]

00002fb6 <.L15>:
    2fb6:	1e 42 78    	mov.b     [w14], w4
    2fb8:	ef 4f 52    	sub.b     w4, #0xf, [w15]
    2fba:	f5 ff 36    	bra       LEU, 0x2fa6 <.L16>

00002fbc <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2fbc:	04 c4 b3    	mov.b     #0x40, w4
    2fbe:	84 42 78    	mov.b     w4, w5
    2fc0:	06 e0 20    	mov.w     #0xe00, w6
    2fc2:	05 4b 78    	mov.b     w5, [w6]

00002fc4 <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    2fc4:	a4 b7 20    	mov.w     #0xb7a, w4
    2fc6:	14 70 88    	mov.w     w4, 0xe02

00002fc8 <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    2fc8:	84 c8 b3    	mov.b     #0x88, w4
    2fca:	84 42 78    	mov.b     w4, w5
    2fcc:	16 e0 20    	mov.w     #0xe01, w6
    2fce:	05 4b 78    	mov.b     w5, [w6]

00002fd0 <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    2fd0:	a4 bb 20    	mov.w     #0xbba, w4
    2fd2:	34 70 88    	mov.w     w4, 0xe06

00002fd4 <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    2fd4:	84 c0 b3    	mov.b     #0x8, w4
    2fd6:	84 42 78    	mov.b     w4, w5
    2fd8:	56 e0 20    	mov.w     #0xe05, w6
    2fda:	05 4b 78    	mov.b     w5, [w6]

00002fdc <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    2fdc:	00 02 eb    	clr.w     w4
    2fde:	b4 24 88    	mov.w     w4, 0x496

00002fe0 <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    2fe0:	f4 0f 20    	mov.w     #0xff, w4
    2fe2:	54 24 88    	mov.w     w4, 0x48a

00002fe4 <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    2fe4:	d4 00 20    	mov.w     #0xd, w4
    2fe6:	54 25 88    	mov.w     w4, 0x4aa

00002fe8 <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    2fe8:	14 c0 b3    	mov.b     #0x1, w4
    2fea:	84 42 78    	mov.b     w4, w5
    2fec:	66 c1 20    	mov.w     #0xc16, w6
    2fee:	05 4b 78    	mov.b     w5, [w6]

00002ff0 <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    2ff0:	14 c0 b3    	mov.b     #0x1, w4
    2ff2:	84 42 78    	mov.b     w4, w5
    2ff4:	46 c1 20    	mov.w     #0xc14, w6
    2ff6:	05 4b 78    	mov.b     w5, [w6]
    2ff8:	48 00 37    	bra       0x308a <.L5>

00002ffa <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    2ffa:	54 24 80    	mov.w     0x48a, w4
    2ffc:	68 02 62    	and.w     w4, #0x8, w4
    2ffe:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3000:	44 00 32    	bra       Z, 0x308a <.L5>

00003002 <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    3002:	94 24 80    	mov.w     0x492, w4
    3004:	43 22 de    	lsr.w     w4, #0x3, w4
    3006:	c2 22 dd    	sl.w      w4, #0x2, w5
    3008:	04 e0 20    	mov.w     #0xe00, w4
    300a:	04 82 42    	add.w     w5, w4, w4
    300c:	24 07 98    	mov.w     w4, [w14+4]

0000300e <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    300e:	2e 02 90    	mov.w     [w14+4], w4
    3010:	14 42 90    	mov.b     [w4+1], w4
    3012:	84 42 78    	mov.b     w4, w5
    3014:	b6 bf 20    	mov.w     #0xbfb, w6
    3016:	05 4b 78    	mov.b     w5, [w6]

00003018 <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    3018:	2e 02 90    	mov.w     [w14+4], w4
    301a:	14 42 78    	mov.b     [w4], w4
    301c:	84 42 78    	mov.b     w4, w5
    301e:	a6 bf 20    	mov.w     #0xbfa, w6
    3020:	05 4b 78    	mov.b     w5, [w6]

00003022 <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    3022:	2e 02 90    	mov.w     [w14+4], w4
    3024:	14 02 90    	mov.w     [w4+2], w4
    3026:	e4 5f 88    	mov.w     w4, 0xbfc

00003028 <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    3028:	94 24 80    	mov.w     0x492, w4
    302a:	04 42 78    	mov.b     w4, w4
    302c:	84 42 78    	mov.b     w4, w5
    302e:	56 c1 20    	mov.w     #0xc15, w6
    3030:	05 4b 78    	mov.b     w5, [w6]

00003032 <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    3032:	84 00 20    	mov.w     #0x8, w4
    3034:	54 24 88    	mov.w     w4, 0x48a

00003036 <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    3036:	00 42 eb    	clr.b     w4
    3038:	84 42 78    	mov.b     w4, w5
    303a:	26 c1 20    	mov.w     #0xc12, w6
    303c:	05 4b 78    	mov.b     w5, [w6]

0000303e <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    303e:	b4 bf 20    	mov.w     #0xbfb, w4
    3040:	14 42 78    	mov.b     [w4], w4
    3042:	84 82 fb    	ze        w4, w5
    3044:	c4 03 20    	mov.w     #0x3c, w4
    3046:	04 82 62    	and.w     w5, w4, w4
    3048:	45 02 20    	mov.w     #0x24, w5
    304a:	85 0f 52    	sub.w     w4, w5, [w15]
    304c:	08 00 32    	bra       Z, 0x305e <.L19>
    304e:	45 03 20    	mov.w     #0x34, w5
    3050:	85 0f 52    	sub.w     w4, w5, [w15]
    3052:	03 00 32    	bra       Z, 0x305a <.L20>
    3054:	e4 0f 52    	sub.w     w4, #0x4, [w15]
    3056:	05 00 32    	bra       Z, 0x3062 <.L18>
    3058:	05 00 37    	bra       0x3064 <.L17>

0000305a <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    305a:	19 00 07    	rcall     0x308e <_ProcessSetupToken>

0000305c <.LSM76>:
                break;
    305c:	03 00 37    	bra       0x3064 <.L17>

0000305e <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    305e:	5c 03 07    	rcall     0x3718 <_ProcessInToken>

00003060 <.LSM78>:
                break;
    3060:	01 00 37    	bra       0x3064 <.L17>

00003062 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    3062:	93 03 07    	rcall     0x378a <_ProcessOutToken>

00003064 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    3064:	24 c1 20    	mov.w     #0xc12, w4
    3066:	14 42 78    	mov.b     [w4], w4
    3068:	04 82 fb    	ze        w4, w4
    306a:	61 02 62    	and.w     w4, #0x1, w4
    306c:	04 42 78    	mov.b     w4, w4
    306e:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    3070:	0c 00 32    	bra       Z, 0x308a <.L5>

00003072 <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    3072:	04 c4 b3    	mov.b     #0x40, w4
    3074:	84 42 78    	mov.b     w4, w5
    3076:	06 e0 20    	mov.w     #0xe00, w6
    3078:	05 4b 78    	mov.b     w5, [w6]

0000307a <.LSM82>:
            BD[EP0IN].status = 0x84;
    307a:	44 c8 b3    	mov.b     #0x84, w4
    307c:	84 42 78    	mov.b     w4, w5
    307e:	56 e0 20    	mov.w     #0xe05, w6
    3080:	05 4b 78    	mov.b     w5, [w6]

00003082 <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    3082:	44 c8 b3    	mov.b     #0x84, w4
    3084:	84 42 78    	mov.b     w4, w5
    3086:	16 e0 20    	mov.w     #0xe01, w6
    3088:	05 4b 78    	mov.b     w5, [w6]

0000308a <.L5>:
        }
    }
}
    308a:	00 80 fa    	ulnk      
    308c:	00 00 06    	return    

0000308e <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    308e:	02 00 fa    	lnk       #0x2

00003090 <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    3090:	e4 5f 80    	mov.w     0xbfc, w4
    3092:	04 0f 78    	mov.w     w4, [w14]

00003094 <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    3094:	1e 02 78    	mov.w     [w14], w4
    3096:	94 42 78    	mov.b     [w4], w5
    3098:	e4 bf 20    	mov.w     #0xbfe, w4
    309a:	05 4a 78    	mov.b     w5, [w4]
    309c:	1e 0f e8    	inc.w     [w14], [w14]

0000309e <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    309e:	1e 02 78    	mov.w     [w14], w4
    30a0:	94 42 78    	mov.b     [w4], w5
    30a2:	e4 bf 20    	mov.w     #0xbfe, w4
    30a4:	15 42 98    	mov.b     w5, [w4+1]
    30a6:	1e 0f e8    	inc.w     [w14], [w14]

000030a8 <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    30a8:	1e 02 78    	mov.w     [w14], w4
    30aa:	94 42 78    	mov.b     [w4], w5
    30ac:	e4 bf 20    	mov.w     #0xbfe, w4
    30ae:	25 42 98    	mov.b     w5, [w4+2]
    30b0:	1e 0f e8    	inc.w     [w14], [w14]

000030b2 <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    30b2:	1e 02 78    	mov.w     [w14], w4
    30b4:	94 42 78    	mov.b     [w4], w5
    30b6:	e4 bf 20    	mov.w     #0xbfe, w4
    30b8:	35 42 98    	mov.b     w5, [w4+3]
    30ba:	1e 0f e8    	inc.w     [w14], [w14]

000030bc <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    30bc:	1e 02 78    	mov.w     [w14], w4
    30be:	94 42 78    	mov.b     [w4], w5
    30c0:	e4 bf 20    	mov.w     #0xbfe, w4
    30c2:	45 42 98    	mov.b     w5, [w4+4]
    30c4:	1e 0f e8    	inc.w     [w14], [w14]

000030c6 <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    30c6:	1e 02 78    	mov.w     [w14], w4
    30c8:	94 42 78    	mov.b     [w4], w5
    30ca:	e4 bf 20    	mov.w     #0xbfe, w4
    30cc:	55 42 98    	mov.b     w5, [w4+5]
    30ce:	1e 0f e8    	inc.w     [w14], [w14]

000030d0 <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    30d0:	1e 02 78    	mov.w     [w14], w4
    30d2:	94 42 78    	mov.b     [w4], w5
    30d4:	e4 bf 20    	mov.w     #0xbfe, w4
    30d6:	65 42 98    	mov.b     w5, [w4+6]
    30d8:	1e 0f e8    	inc.w     [w14], [w14]

000030da <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    30da:	1e 02 78    	mov.w     [w14], w4
    30dc:	94 42 78    	mov.b     [w4], w5
    30de:	e4 bf 20    	mov.w     #0xbfe, w4
    30e0:	75 42 98    	mov.b     w5, [w4+7]
    30e2:	1e 0f e8    	inc.w     [w14], [w14]

000030e4 <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    30e4:	04 c4 b3    	mov.b     #0x40, w4
    30e6:	04 43 78    	mov.b     w4, w6
    30e8:	05 e0 20    	mov.w     #0xe00, w5
    30ea:	86 4a 78    	mov.b     w6, [w5]

000030ec <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    30ec:	84 c0 b3    	mov.b     #0x8, w4
    30ee:	04 43 78    	mov.b     w4, w6
    30f0:	55 e0 20    	mov.w     #0xe05, w5
    30f2:	86 4a 78    	mov.b     w6, [w5]

000030f4 <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    30f4:	e4 bf 20    	mov.w     #0xbfe, w4
    30f6:	14 42 78    	mov.b     [w4], w4
    30f8:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    30fa:	06 00 35    	bra       LT, 0x3108 <.L22>
    30fc:	e4 bf 20    	mov.w     #0xbfe, w4
    30fe:	34 02 90    	mov.w     [w4+6], w4
    3100:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3102:	02 00 32    	bra       Z, 0x3108 <.L22>
    3104:	84 cc b3    	mov.b     #0xc8, w4
    3106:	01 00 37    	bra       0x310a <.L23>

00003108 <.L22>:
    3108:	84 c8 b3    	mov.b     #0x88, w4

0000310a <.L23>:
    310a:	04 43 78    	mov.b     w4, w6
    310c:	15 e0 20    	mov.w     #0xe01, w5
    310e:	86 4a 78    	mov.b     w6, [w5]

00003110 <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    3110:	94 a4 a9    	bclr.b    0x494, #0x5

00003112 <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    3112:	00 c2 eb    	setm.b    w4
    3114:	04 43 78    	mov.b     w4, w6
    3116:	65 c0 20    	mov.w     #0xc06, w5
    3118:	86 4a 78    	mov.b     w6, [w5]

0000311a <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    311a:	00 c2 eb    	setm.b    w4
    311c:	04 43 78    	mov.b     w4, w6
    311e:	75 c0 20    	mov.w     #0xc07, w5
    3120:	86 4a 78    	mov.b     w6, [w5]

00003122 <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    3122:	e4 bf 20    	mov.w     #0xbfe, w4
    3124:	14 42 78    	mov.b     [w4], w4
    3126:	84 82 fb    	ze        w4, w5
    3128:	04 06 20    	mov.w     #0x60, w4
    312a:	04 82 62    	and.w     w5, w4, w4
    312c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    312e:	04 00 32    	bra       Z, 0x3138 <.L25>
    3130:	05 04 20    	mov.w     #0x40, w5
    3132:	85 0f 52    	sub.w     w4, w5, [w15]
    3134:	03 00 32    	bra       Z, 0x313c <.L26>
    3136:	04 00 37    	bra       0x3140 <.L28>

00003138 <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    3138:	0b 00 07    	rcall     0x3150 <_StandardRequests>

0000313a <.LSM103>:
            break;
    313a:	08 00 37    	bra       0x314c <.L21>

0000313c <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    313c:	c3 0b 07    	rcall     0x48c4 <_VendorRequests>

0000313e <.LSM105>:
            break;
    313e:	06 00 37    	bra       0x314c <.L21>

00003140 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    3140:	24 c1 20    	mov.w     #0xc12, w4
    3142:	14 42 78    	mov.b     [w4], w4
    3144:	04 04 a0    	bset.b    w4, #0x0
    3146:	04 43 78    	mov.b     w4, w6
    3148:	25 c1 20    	mov.w     #0xc12, w5
    314a:	86 4a 78    	mov.b     w6, [w5]

0000314c <.L21>:
    }
}
    314c:	00 80 fa    	ulnk      
    314e:	00 00 06    	return    

00003150 <_StandardRequests>:

void StandardRequests(void) {
    3150:	06 00 fa    	lnk       #0x6

00003152 <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    3152:	e4 bf 20    	mov.w     #0xbfe, w4
    3154:	14 42 90    	mov.b     [w4+1], w4
    3156:	04 82 fb    	ze        w4, w4
    3158:	cf a2 de    	asr.w     w4, #0xf, w5
    315a:	b6 00 20    	mov.w     #0xb, w6
    315c:	07 00 20    	mov.w     #0x0, w7
    315e:	86 0f 52    	sub.w     w4, w6, [w15]
    3160:	87 8f 5a    	subb.w    w5, w7, [w15]
    3162:	d2 02 3e    	bra       GTU, 0x3708 <.L30>
    3164:	04 60 01    	bra       w4
    3166:	0b 00 37    	bra       0x317e <.L31>
    3168:	d1 00 37    	bra       0x330c <.L32>
    316a:	ce 02 37    	bra       0x3708 <.L30>
    316c:	cf 00 37    	bra       0x330c <.L32>
    316e:	cc 02 37    	bra       0x3708 <.L30>
    3170:	85 01 37    	bra       0x347c <.L33>
    3172:	ab 01 37    	bra       0x34ca <.L34>
    3174:	c9 02 37    	bra       0x3708 <.L30>
    3176:	33 02 37    	bra       0x35de <.L35>
    3178:	3f 02 37    	bra       0x35f8 <.L36>
    317a:	75 02 37    	bra       0x3666 <.L37>
    317c:	98 02 37    	bra       0x36ae <.L38>

0000317e <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    317e:	e4 bf 20    	mov.w     #0xbfe, w4
    3180:	14 42 78    	mov.b     [w4], w4
    3182:	04 82 fb    	ze        w4, w4
    3184:	7f 02 62    	and.w     w4, #0x1f, w4
    3186:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    3188:	15 00 32    	bra       Z, 0x31b4 <.L42>
    318a:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    318c:	3d 00 32    	bra       Z, 0x3208 <.L43>
    318e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3190:	b5 00 3a    	bra       NZ, 0x32fc <.L126>

00003192 <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    3192:	34 70 80    	mov.w     0xe06, w4
    3194:	45 c1 20    	mov.w     #0xc14, w5
    3196:	95 42 78    	mov.b     [w5], w5
    3198:	05 4a 78    	mov.b     w5, [w4]

0000319a <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    319a:	34 70 80    	mov.w     0xe06, w4
    319c:	04 02 e8    	inc.w     w4, w4
    319e:	80 42 eb    	clr.b     w5
    31a0:	05 4a 78    	mov.b     w5, [w4]

000031a2 <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    31a2:	24 c0 b3    	mov.b     #0x2, w4
    31a4:	04 43 78    	mov.b     w4, w6
    31a6:	45 e0 20    	mov.w     #0xe04, w5
    31a8:	86 4a 78    	mov.b     w6, [w5]

000031aa <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    31aa:	84 cc b3    	mov.b     #0xc8, w4
    31ac:	04 43 78    	mov.b     w4, w6
    31ae:	55 e0 20    	mov.w     #0xe05, w5
    31b0:	86 4a 78    	mov.b     w6, [w5]

000031b2 <.LSM115>:
                    break;
    31b2:	ab 00 37    	bra       0x330a <.L44>

000031b4 <.L42>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    31b4:	64 c1 20    	mov.w     #0xc16, w4
    31b6:	14 42 78    	mov.b     [w4], w4
    31b8:	04 82 fb    	ze        w4, w4
    31ba:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    31bc:	03 00 32    	bra       Z, 0x31c4 <.L46>
    31be:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    31c0:	08 00 32    	bra       Z, 0x31d2 <.L47>
    31c2:	21 00 37    	bra       0x3206 <.L45>

000031c4 <.L46>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    31c4:	24 c1 20    	mov.w     #0xc12, w4
    31c6:	14 42 78    	mov.b     [w4], w4
    31c8:	04 04 a0    	bset.b    w4, #0x0
    31ca:	04 43 78    	mov.b     w4, w6
    31cc:	25 c1 20    	mov.w     #0xc12, w5
    31ce:	86 4a 78    	mov.b     w6, [w5]

000031d0 <.LSM118>:
                            break;
    31d0:	1a 00 37    	bra       0x3206 <.L45>

000031d2 <.L47>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    31d2:	e4 bf 20    	mov.w     #0xbfe, w4
    31d4:	44 42 90    	mov.b     [w4+4], w4
    31d6:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    31d8:	10 00 3a    	bra       NZ, 0x31fa <.L48>

000031da <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    31da:	34 70 80    	mov.w     0xe06, w4
    31dc:	80 42 eb    	clr.b     w5
    31de:	05 4a 78    	mov.b     w5, [w4]

000031e0 <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    31e0:	34 70 80    	mov.w     0xe06, w4
    31e2:	04 02 e8    	inc.w     w4, w4
    31e4:	80 42 eb    	clr.b     w5
    31e6:	05 4a 78    	mov.b     w5, [w4]

000031e8 <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    31e8:	24 c0 b3    	mov.b     #0x2, w4
    31ea:	04 43 78    	mov.b     w4, w6
    31ec:	45 e0 20    	mov.w     #0xe04, w5
    31ee:	86 4a 78    	mov.b     w6, [w5]

000031f0 <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    31f0:	84 cc b3    	mov.b     #0xc8, w4
    31f2:	04 43 78    	mov.b     w4, w6
    31f4:	55 e0 20    	mov.w     #0xe05, w5
    31f6:	86 4a 78    	mov.b     w6, [w5]
    31f8:	06 00 37    	bra       0x3206 <.L45>

000031fa <.L48>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    31fa:	24 c1 20    	mov.w     #0xc12, w4
    31fc:	14 42 78    	mov.b     [w4], w4
    31fe:	04 04 a0    	bset.b    w4, #0x0
    3200:	04 43 78    	mov.b     w4, w6
    3202:	25 c1 20    	mov.w     #0xc12, w5
    3204:	86 4a 78    	mov.b     w6, [w5]

00003206 <.L45>:
                            }
                    }
                    break;
    3206:	81 00 37    	bra       0x330a <.L44>

00003208 <.L43>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3208:	64 c1 20    	mov.w     #0xc16, w4
    320a:	14 42 78    	mov.b     [w4], w4
    320c:	04 82 fb    	ze        w4, w4
    320e:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    3210:	03 00 32    	bra       Z, 0x3218 <.L50>
    3212:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    3214:	2e 00 32    	bra       Z, 0x3272 <.L51>
    3216:	6b 00 37    	bra       0x32ee <.L127>

00003218 <.L50>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    3218:	e4 bf 20    	mov.w     #0xbfe, w4
    321a:	44 42 90    	mov.b     [w4+4], w4
    321c:	04 82 fb    	ze        w4, w4
    321e:	6f 02 62    	and.w     w4, #0xf, w4
    3220:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3222:	20 00 3a    	bra       NZ, 0x3264 <.L52>

00003224 <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    3224:	35 70 80    	mov.w     0xe06, w5
    3226:	e4 bf 20    	mov.w     #0xbfe, w4
    3228:	44 42 90    	mov.b     [w4+4], w4
    322a:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    322c:	07 00 3d    	bra       GE, 0x323c <.L53>
    322e:	54 e0 20    	mov.w     #0xe05, w4
    3230:	14 42 78    	mov.b     [w4], w4
    3232:	04 82 fb    	ze        w4, w4
    3234:	64 02 62    	and.w     w4, #0x4, w4
    3236:	42 a2 de    	asr.w     w4, #0x2, w4
    3238:	04 42 78    	mov.b     w4, w4
    323a:	06 00 37    	bra       0x3248 <.L54>

0000323c <.L53>:
    323c:	14 e0 20    	mov.w     #0xe01, w4
    323e:	14 42 78    	mov.b     [w4], w4
    3240:	04 82 fb    	ze        w4, w4
    3242:	64 02 62    	and.w     w4, #0x4, w4
    3244:	42 a2 de    	asr.w     w4, #0x2, w4
    3246:	04 42 78    	mov.b     w4, w4

00003248 <.L54>:
    3248:	84 4a 78    	mov.b     w4, [w5]

0000324a <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    324a:	34 70 80    	mov.w     0xe06, w4
    324c:	04 02 e8    	inc.w     w4, w4
    324e:	80 42 eb    	clr.b     w5
    3250:	05 4a 78    	mov.b     w5, [w4]

00003252 <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    3252:	24 c0 b3    	mov.b     #0x2, w4
    3254:	04 43 78    	mov.b     w4, w6
    3256:	45 e0 20    	mov.w     #0xe04, w5
    3258:	86 4a 78    	mov.b     w6, [w5]

0000325a <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    325a:	84 cc b3    	mov.b     #0xc8, w4
    325c:	04 43 78    	mov.b     w4, w6
    325e:	55 e0 20    	mov.w     #0xe05, w5
    3260:	86 4a 78    	mov.b     w6, [w5]
    3262:	06 00 37    	bra       0x3270 <.L55>

00003264 <.L52>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3264:	24 c1 20    	mov.w     #0xc12, w4
    3266:	14 42 78    	mov.b     [w4], w4
    3268:	04 04 a0    	bset.b    w4, #0x0
    326a:	04 43 78    	mov.b     w4, w6
    326c:	25 c1 20    	mov.w     #0xc12, w5
    326e:	86 4a 78    	mov.b     w6, [w5]

00003270 <.L55>:
                            }
                            break;
    3270:	44 00 37    	bra       0x32fa <.L56>

00003272 <.L51>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    3272:	a4 4a 20    	mov.w     #0x4aa, w4
    3274:	14 07 98    	mov.w     w4, [w14+2]

00003276 <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    3276:	e4 bf 20    	mov.w     #0xbfe, w4
    3278:	44 42 90    	mov.b     [w4+4], w4
    327a:	6f 4f 62    	and.b     w4, #0xf, [w14]

0000327c <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    327c:	9e 42 78    	mov.b     [w14], w5
    327e:	05 82 fb    	ze        w5, w4
    3280:	04 02 42    	add.w     w4, w4, w4
    3282:	84 02 78    	mov.w     w4, w5
    3284:	e4 bf 20    	mov.w     #0xbfe, w4
    3286:	44 42 90    	mov.b     [w4+4], w4
    3288:	04 02 fb    	se        w4, w4
    328a:	4f 22 de    	lsr.w     w4, #0xf, w4
    328c:	05 02 72    	ior.w     w4, w5, w4
    328e:	c2 22 dd    	sl.w      w4, #0x2, w5
    3290:	04 e0 20    	mov.w     #0xe00, w4
    3292:	04 82 42    	add.w     w5, w4, w4
    3294:	24 07 98    	mov.w     w4, [w14+4]

00003296 <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    3296:	1e 43 78    	mov.b     [w14], w6
    3298:	06 82 fb    	ze        w6, w4
    329a:	04 02 42    	add.w     w4, w4, w4
    329c:	9e 02 90    	mov.w     [w14+2], w5
    329e:	04 82 42    	add.w     w5, w4, w4
    32a0:	94 02 78    	mov.w     [w4], w5
    32a2:	e4 bf 20    	mov.w     #0xbfe, w4
    32a4:	44 42 90    	mov.b     [w4+4], w4
    32a6:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    32a8:	02 00 3d    	bra       GE, 0x32ae <.L57>
    32aa:	44 00 20    	mov.w     #0x4, w4
    32ac:	01 00 37    	bra       0x32b0 <.L58>

000032ae <.L57>:
    32ae:	84 00 20    	mov.w     #0x8, w4

000032b0 <.L58>:
    32b0:	04 82 62    	and.w     w5, w4, w4
    32b2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    32b4:	15 00 32    	bra       Z, 0x32e0 <.L59>

000032b6 <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    32b6:	34 70 80    	mov.w     0xe06, w4
    32b8:	ae 02 90    	mov.w     [w14+4], w5
    32ba:	95 42 90    	mov.b     [w5+1], w5
    32bc:	85 82 fb    	ze        w5, w5
    32be:	e4 82 62    	and.w     w5, #0x4, w5
    32c0:	c2 aa de    	asr.w     w5, #0x2, w5
    32c2:	85 42 78    	mov.b     w5, w5
    32c4:	05 4a 78    	mov.b     w5, [w4]

000032c6 <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    32c6:	34 70 80    	mov.w     0xe06, w4
    32c8:	04 02 e8    	inc.w     w4, w4
    32ca:	80 42 eb    	clr.b     w5
    32cc:	05 4a 78    	mov.b     w5, [w4]

000032ce <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    32ce:	24 c0 b3    	mov.b     #0x2, w4
    32d0:	04 43 78    	mov.b     w4, w6
    32d2:	45 e0 20    	mov.w     #0xe04, w5
    32d4:	86 4a 78    	mov.b     w6, [w5]

000032d6 <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    32d6:	84 cc b3    	mov.b     #0xc8, w4
    32d8:	04 43 78    	mov.b     w4, w6
    32da:	55 e0 20    	mov.w     #0xe05, w5
    32dc:	86 4a 78    	mov.b     w6, [w5]
    32de:	06 00 37    	bra       0x32ec <.L60>

000032e0 <.L59>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    32e0:	24 c1 20    	mov.w     #0xc12, w4
    32e2:	14 42 78    	mov.b     [w4], w4
    32e4:	04 04 a0    	bset.b    w4, #0x0
    32e6:	04 43 78    	mov.b     w4, w6
    32e8:	25 c1 20    	mov.w     #0xc12, w5
    32ea:	86 4a 78    	mov.b     w6, [w5]

000032ec <.L60>:
                            }
                            break;
    32ec:	06 00 37    	bra       0x32fa <.L56>

000032ee <.L127>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    32ee:	24 c1 20    	mov.w     #0xc12, w4
    32f0:	14 42 78    	mov.b     [w4], w4
    32f2:	04 04 a0    	bset.b    w4, #0x0
    32f4:	04 43 78    	mov.b     w4, w6
    32f6:	25 c1 20    	mov.w     #0xc12, w5
    32f8:	86 4a 78    	mov.b     w6, [w5]

000032fa <.L56>:
                    }
                    break;
    32fa:	07 00 37    	bra       0x330a <.L44>

000032fc <.L126>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    32fc:	24 c1 20    	mov.w     #0xc12, w4
    32fe:	14 42 78    	mov.b     [w4], w4
    3300:	04 04 a0    	bset.b    w4, #0x0
    3302:	04 43 78    	mov.b     w4, w6
    3304:	25 c1 20    	mov.w     #0xc12, w5
    3306:	86 4a 78    	mov.b     w6, [w5]

00003308 <.LSM147>:
            }
            break;
    3308:	05 02 37    	bra       0x3714 <.L29>

0000330a <.L44>:
    330a:	04 02 37    	bra       0x3714 <.L29>

0000330c <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    330c:	e4 bf 20    	mov.w     #0xbfe, w4
    330e:	14 42 78    	mov.b     [w4], w4
    3310:	04 82 fb    	ze        w4, w4
    3312:	7f 02 62    	and.w     w4, #0x1f, w4
    3314:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3316:	03 00 32    	bra       Z, 0x331e <.L63>
    3318:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    331a:	28 00 32    	bra       Z, 0x336c <.L64>
    331c:	a7 00 37    	bra       0x346c <.L128>

0000331e <.L63>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    331e:	e4 bf 20    	mov.w     #0xbfe, w4
    3320:	24 42 90    	mov.b     [w4+2], w4
    3322:	04 82 fb    	ze        w4, w4
    3324:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    3326:	1b 00 3a    	bra       NZ, 0x335e <.L129>

00003328 <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    3328:	e4 bf 20    	mov.w     #0xbfe, w4
    332a:	14 42 90    	mov.b     [w4+1], w4
    332c:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    332e:	08 00 3a    	bra       NZ, 0x3340 <.L67>

00003330 <.LSM151>:
                                USB_device_status &= 0xFE;
    3330:	45 c1 20    	mov.w     #0xc14, w5
    3332:	95 42 78    	mov.b     [w5], w5
    3334:	e4 cf b3    	mov.b     #0xfe, w4
    3336:	04 c2 62    	and.b     w5, w4, w4
    3338:	04 43 78    	mov.b     w4, w6
    333a:	45 c1 20    	mov.w     #0xc14, w5
    333c:	86 4a 78    	mov.b     w6, [w5]
    333e:	06 00 37    	bra       0x334c <.L68>

00003340 <.L67>:
                            else
                                USB_device_status |= 0x01;
    3340:	44 c1 20    	mov.w     #0xc14, w4
    3342:	14 42 78    	mov.b     [w4], w4
    3344:	04 04 a0    	bset.b    w4, #0x0
    3346:	04 43 78    	mov.b     w4, w6
    3348:	45 c1 20    	mov.w     #0xc14, w5
    334a:	86 4a 78    	mov.b     w6, [w5]

0000334c <.L68>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    334c:	00 42 eb    	clr.b     w4
    334e:	04 43 78    	mov.b     w4, w6
    3350:	45 e0 20    	mov.w     #0xe04, w5
    3352:	86 4a 78    	mov.b     w6, [w5]

00003354 <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3354:	84 cc b3    	mov.b     #0xc8, w4
    3356:	04 43 78    	mov.b     w4, w6
    3358:	55 e0 20    	mov.w     #0xe05, w5
    335a:	86 4a 78    	mov.b     w6, [w5]

0000335c <.LSM155>:
                            break;
    335c:	06 00 37    	bra       0x336a <.L69>

0000335e <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    335e:	24 c1 20    	mov.w     #0xc12, w4
    3360:	14 42 78    	mov.b     [w4], w4
    3362:	04 04 a0    	bset.b    w4, #0x0
    3364:	04 43 78    	mov.b     w4, w6
    3366:	25 c1 20    	mov.w     #0xc12, w5
    3368:	86 4a 78    	mov.b     w6, [w5]

0000336a <.L69>:
                    }
                    break;
    336a:	87 00 37    	bra       0x347a <.L70>

0000336c <.L64>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    336c:	64 c1 20    	mov.w     #0xc16, w4
    336e:	14 42 78    	mov.b     [w4], w4
    3370:	04 82 fb    	ze        w4, w4
    3372:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    3374:	03 00 32    	bra       Z, 0x337c <.L72>
    3376:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    3378:	17 00 32    	bra       Z, 0x33a8 <.L73>
    337a:	71 00 37    	bra       0x345e <.L130>

0000337c <.L72>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    337c:	e4 bf 20    	mov.w     #0xbfe, w4
    337e:	44 42 90    	mov.b     [w4+4], w4
    3380:	04 82 fb    	ze        w4, w4
    3382:	6f 02 62    	and.w     w4, #0xf, w4
    3384:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3386:	09 00 3a    	bra       NZ, 0x339a <.L74>

00003388 <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    3388:	00 42 eb    	clr.b     w4
    338a:	04 43 78    	mov.b     w4, w6
    338c:	45 e0 20    	mov.w     #0xe04, w5
    338e:	86 4a 78    	mov.b     w6, [w5]

00003390 <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3390:	84 cc b3    	mov.b     #0xc8, w4
    3392:	04 43 78    	mov.b     w4, w6
    3394:	55 e0 20    	mov.w     #0xe05, w5
    3396:	86 4a 78    	mov.b     w6, [w5]
    3398:	06 00 37    	bra       0x33a6 <.L75>

0000339a <.L74>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    339a:	24 c1 20    	mov.w     #0xc12, w4
    339c:	14 42 78    	mov.b     [w4], w4
    339e:	04 04 a0    	bset.b    w4, #0x0
    33a0:	04 43 78    	mov.b     w4, w6
    33a2:	25 c1 20    	mov.w     #0xc12, w5
    33a4:	86 4a 78    	mov.b     w6, [w5]

000033a6 <.L75>:
                            }
                            break;
    33a6:	61 00 37    	bra       0x346a <.L76>

000033a8 <.L73>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    33a8:	a4 4a 20    	mov.w     #0x4aa, w4
    33aa:	14 07 98    	mov.w     w4, [w14+2]

000033ac <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    33ac:	e4 bf 20    	mov.w     #0xbfe, w4
    33ae:	44 42 90    	mov.b     [w4+4], w4
    33b0:	6f 4f 62    	and.b     w4, #0xf, [w14]
    33b2:	1e 42 78    	mov.b     [w14], w4
    33b4:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    33b6:	44 00 32    	bra       Z, 0x3440 <.L77>

000033b8 <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    33b8:	9e 42 78    	mov.b     [w14], w5
    33ba:	05 82 fb    	ze        w5, w4
    33bc:	04 02 42    	add.w     w4, w4, w4
    33be:	84 02 78    	mov.w     w4, w5
    33c0:	e4 bf 20    	mov.w     #0xbfe, w4
    33c2:	44 42 90    	mov.b     [w4+4], w4
    33c4:	04 02 fb    	se        w4, w4
    33c6:	4f 22 de    	lsr.w     w4, #0xf, w4
    33c8:	05 02 72    	ior.w     w4, w5, w4
    33ca:	c2 22 dd    	sl.w      w4, #0x2, w5
    33cc:	04 e0 20    	mov.w     #0xe00, w4
    33ce:	04 82 42    	add.w     w5, w4, w4
    33d0:	24 07 98    	mov.w     w4, [w14+4]

000033d2 <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    33d2:	e4 bf 20    	mov.w     #0xbfe, w4
    33d4:	44 42 90    	mov.b     [w4+4], w4
    33d6:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    33d8:	1a 00 3d    	bra       GE, 0x340e <.L78>

000033da <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    33da:	1e 43 78    	mov.b     [w14], w6
    33dc:	06 82 fb    	ze        w6, w4
    33de:	04 02 42    	add.w     w4, w4, w4
    33e0:	9e 02 90    	mov.w     [w14+2], w5
    33e2:	04 82 42    	add.w     w5, w4, w4
    33e4:	14 02 78    	mov.w     [w4], w4
    33e6:	64 02 62    	and.w     w4, #0x4, w4
    33e8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    33ea:	0a 00 32    	bra       Z, 0x3400 <.L79>

000033ec <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    33ec:	e4 bf 20    	mov.w     #0xbfe, w4
    33ee:	14 42 90    	mov.b     [w4+1], w4
    33f0:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    33f2:	02 00 3a    	bra       NZ, 0x33f8 <.L80>
    33f4:	00 42 eb    	clr.b     w4
    33f6:	01 00 37    	bra       0x33fa <.L81>

000033f8 <.L80>:
    33f8:	44 c8 b3    	mov.b     #0x84, w4

000033fa <.L81>:
    33fa:	ae 02 90    	mov.w     [w14+4], w5
    33fc:	94 42 98    	mov.b     w4, [w5+1]
    33fe:	20 00 37    	bra       0x3440 <.L77>

00003400 <.L79>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3400:	24 c1 20    	mov.w     #0xc12, w4
    3402:	14 42 78    	mov.b     [w4], w4
    3404:	04 04 a0    	bset.b    w4, #0x0
    3406:	04 43 78    	mov.b     w4, w6
    3408:	25 c1 20    	mov.w     #0xc12, w5
    340a:	86 4a 78    	mov.b     w6, [w5]
    340c:	19 00 37    	bra       0x3440 <.L77>

0000340e <.L78>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    340e:	9e 42 78    	mov.b     [w14], w5
    3410:	05 82 fb    	ze        w5, w4
    3412:	04 02 42    	add.w     w4, w4, w4
    3414:	9e 02 90    	mov.w     [w14+2], w5
    3416:	04 82 42    	add.w     w5, w4, w4
    3418:	14 02 78    	mov.w     [w4], w4
    341a:	68 02 62    	and.w     w4, #0x8, w4
    341c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    341e:	0a 00 32    	bra       Z, 0x3434 <.L82>

00003420 <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    3420:	e4 bf 20    	mov.w     #0xbfe, w4
    3422:	14 42 90    	mov.b     [w4+1], w4
    3424:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    3426:	02 00 3a    	bra       NZ, 0x342c <.L83>
    3428:	84 c8 b3    	mov.b     #0x88, w4
    342a:	01 00 37    	bra       0x342e <.L84>

0000342c <.L83>:
    342c:	44 c8 b3    	mov.b     #0x84, w4

0000342e <.L84>:
    342e:	ae 02 90    	mov.w     [w14+4], w5
    3430:	94 42 98    	mov.b     w4, [w5+1]
    3432:	06 00 37    	bra       0x3440 <.L77>

00003434 <.L82>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3434:	24 c1 20    	mov.w     #0xc12, w4
    3436:	14 42 78    	mov.b     [w4], w4
    3438:	04 04 a0    	bset.b    w4, #0x0
    343a:	84 42 78    	mov.b     w4, w5
    343c:	26 c1 20    	mov.w     #0xc12, w6
    343e:	05 4b 78    	mov.b     w5, [w6]

00003440 <.L77>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    3440:	24 c1 20    	mov.w     #0xc12, w4
    3442:	14 42 78    	mov.b     [w4], w4
    3444:	04 82 fb    	ze        w4, w4
    3446:	61 02 62    	and.w     w4, #0x1, w4
    3448:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    344a:	08 00 3a    	bra       NZ, 0x345c <.L85>

0000344c <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    344c:	00 42 eb    	clr.b     w4
    344e:	84 42 78    	mov.b     w4, w5
    3450:	46 e0 20    	mov.w     #0xe04, w6
    3452:	05 4b 78    	mov.b     w5, [w6]

00003454 <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    3454:	84 cc b3    	mov.b     #0xc8, w4
    3456:	84 42 78    	mov.b     w4, w5
    3458:	56 e0 20    	mov.w     #0xe05, w6
    345a:	05 4b 78    	mov.b     w5, [w6]

0000345c <.L85>:
                            }
                            break;
    345c:	06 00 37    	bra       0x346a <.L76>

0000345e <.L130>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    345e:	24 c1 20    	mov.w     #0xc12, w4
    3460:	14 42 78    	mov.b     [w4], w4
    3462:	04 04 a0    	bset.b    w4, #0x0
    3464:	84 42 78    	mov.b     w4, w5
    3466:	26 c1 20    	mov.w     #0xc12, w6
    3468:	05 4b 78    	mov.b     w5, [w6]

0000346a <.L76>:
                    }
                    break;
    346a:	07 00 37    	bra       0x347a <.L70>

0000346c <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    346c:	24 c1 20    	mov.w     #0xc12, w4
    346e:	14 42 78    	mov.b     [w4], w4
    3470:	04 04 a0    	bset.b    w4, #0x0
    3472:	84 42 78    	mov.b     w4, w5
    3474:	26 c1 20    	mov.w     #0xc12, w6
    3476:	05 4b 78    	mov.b     w5, [w6]

00003478 <.LSM181>:
            }
            break;
    3478:	4d 01 37    	bra       0x3714 <.L29>

0000347a <.L70>:
    347a:	4c 01 37    	bra       0x3714 <.L29>

0000347c <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    347c:	e4 bf 20    	mov.w     #0xbfe, w4
    347e:	24 42 90    	mov.b     [w4+2], w4
    3480:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    3482:	07 00 3d    	bra       GE, 0x3492 <.L86>

00003484 <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    3484:	24 c1 20    	mov.w     #0xc12, w4
    3486:	14 42 78    	mov.b     [w4], w4
    3488:	04 04 a0    	bset.b    w4, #0x0
    348a:	84 42 78    	mov.b     w4, w5
    348c:	26 c1 20    	mov.w     #0xc12, w6
    348e:	05 4b 78    	mov.b     w5, [w6]

00003490 <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    3490:	41 01 37    	bra       0x3714 <.L29>

00003492 <.L86>:
    3492:	e4 bf 20    	mov.w     #0xbfe, w4
    3494:	14 42 78    	mov.b     [w4], w4
    3496:	84 42 78    	mov.b     w4, w5
    3498:	66 c0 20    	mov.w     #0xc06, w6
    349a:	05 4b 78    	mov.b     w5, [w6]

0000349c <.LSM186>:
    349c:	e4 bf 20    	mov.w     #0xbfe, w4
    349e:	14 42 90    	mov.b     [w4+1], w4
    34a0:	84 42 78    	mov.b     w4, w5
    34a2:	76 c0 20    	mov.w     #0xc07, w6
    34a4:	05 4b 78    	mov.b     w5, [w6]

000034a6 <.LSM187>:
    34a6:	e4 bf 20    	mov.w     #0xbfe, w4
    34a8:	14 02 90    	mov.w     [w4+2], w4
    34aa:	44 60 88    	mov.w     w4, 0xc08

000034ac <.LSM188>:
    34ac:	e4 bf 20    	mov.w     #0xbfe, w4
    34ae:	24 02 90    	mov.w     [w4+4], w4
    34b0:	54 60 88    	mov.w     w4, 0xc0a

000034b2 <.LSM189>:
    34b2:	e4 bf 20    	mov.w     #0xbfe, w4
    34b4:	34 02 90    	mov.w     [w4+6], w4
    34b6:	64 60 88    	mov.w     w4, 0xc0c

000034b8 <.LSM190>:
    34b8:	00 42 eb    	clr.b     w4
    34ba:	84 42 78    	mov.b     w4, w5
    34bc:	46 e0 20    	mov.w     #0xe04, w6
    34be:	05 4b 78    	mov.b     w5, [w6]

000034c0 <.LSM191>:
    34c0:	84 cc b3    	mov.b     #0xc8, w4
    34c2:	84 42 78    	mov.b     w4, w5
    34c4:	56 e0 20    	mov.w     #0xe05, w6
    34c6:	05 4b 78    	mov.b     w5, [w6]

000034c8 <.LSM192>:
    34c8:	25 01 37    	bra       0x3714 <.L29>

000034ca <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    34ca:	e4 bf 20    	mov.w     #0xbfe, w4
    34cc:	14 42 78    	mov.b     [w4], w4
    34ce:	84 42 78    	mov.b     w4, w5
    34d0:	66 c0 20    	mov.w     #0xc06, w6
    34d2:	05 4b 78    	mov.b     w5, [w6]

000034d4 <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    34d4:	e4 bf 20    	mov.w     #0xbfe, w4
    34d6:	14 42 90    	mov.b     [w4+1], w4
    34d8:	84 42 78    	mov.b     w4, w5
    34da:	76 c0 20    	mov.w     #0xc07, w6
    34dc:	05 4b 78    	mov.b     w5, [w6]

000034de <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    34de:	e4 bf 20    	mov.w     #0xbfe, w4
    34e0:	14 02 90    	mov.w     [w4+2], w4
    34e2:	44 60 88    	mov.w     w4, 0xc08

000034e4 <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    34e4:	e4 bf 20    	mov.w     #0xbfe, w4
    34e6:	24 02 90    	mov.w     [w4+4], w4
    34e8:	54 60 88    	mov.w     w4, 0xc0a

000034ea <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    34ea:	e4 bf 20    	mov.w     #0xbfe, w4
    34ec:	34 02 90    	mov.w     [w4+6], w4
    34ee:	64 60 88    	mov.w     w4, 0xc0c

000034f0 <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    34f0:	e4 bf 20    	mov.w     #0xbfe, w4
    34f2:	34 42 90    	mov.b     [w4+3], w4
    34f4:	04 82 fb    	ze        w4, w4
    34f6:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    34f8:	14 00 32    	bra       Z, 0x3522 <.L90>
    34fa:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    34fc:	3c 00 32    	bra       Z, 0x3576 <.L91>
    34fe:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    3500:	66 00 3a    	bra       NZ, 0x35ce <.L131>

00003502 <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    3502:	64 03 2a    	mov.w     #0xa036, w4
    3504:	74 60 88    	mov.w     w4, 0xc0e

00003506 <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3506:	74 60 80    	mov.w     0xc0e, w4
    3508:	14 42 78    	mov.b     [w4], w4
    350a:	04 82 fb    	ze        w4, w4
    350c:	84 60 88    	mov.w     w4, 0xc10

0000350e <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    350e:	e4 bf 20    	mov.w     #0xbfe, w4
    3510:	b4 02 90    	mov.w     [w4+6], w5
    3512:	84 60 80    	mov.w     0xc10, w4
    3514:	84 8f 52    	sub.w     w5, w4, [w15]
    3516:	03 00 31    	bra       C, 0x351e <.L92>

00003518 <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    3518:	e4 bf 20    	mov.w     #0xbfe, w4
    351a:	34 02 90    	mov.w     [w4+6], w4
    351c:	84 60 88    	mov.w     w4, 0xc10

0000351e <.L92>:
                    }
                    SendDataPacket();
    351e:	60 01 07    	rcall     0x37e0 <_SendDataPacket>

00003520 <.LSM204>:
                    break;
    3520:	5d 00 37    	bra       0x35dc <.L93>

00003522 <.L90>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    3522:	e4 bf 20    	mov.w     #0xbfe, w4
    3524:	24 42 90    	mov.b     [w4+2], w4
    3526:	04 82 fb    	ze        w4, w4
    3528:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    352a:	03 00 3a    	bra       NZ, 0x3532 <.L132>

0000352c <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    352c:	84 04 2a    	mov.w     #0xa048, w4
    352e:	74 60 88    	mov.w     w4, 0xc0e

00003530 <.LSM207>:
                            break;
    3530:	06 00 37    	bra       0x353e <.L96>

00003532 <.L132>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    3532:	24 c1 20    	mov.w     #0xc12, w4
    3534:	14 42 78    	mov.b     [w4], w4
    3536:	04 04 a0    	bset.b    w4, #0x0
    3538:	84 42 78    	mov.b     w4, w5
    353a:	26 c1 20    	mov.w     #0xc12, w6
    353c:	05 4b 78    	mov.b     w5, [w6]

0000353e <.L96>:
                    }
                    if (!(USB_error_flags&0x01)) {
    353e:	24 c1 20    	mov.w     #0xc12, w4
    3540:	14 42 78    	mov.b     [w4], w4
    3542:	04 82 fb    	ze        w4, w4
    3544:	61 02 62    	and.w     w4, #0x1, w4
    3546:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3548:	15 00 3a    	bra       NZ, 0x3574 <.L97>

0000354a <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    354a:	74 60 80    	mov.w     0xc0e, w4
    354c:	04 82 e8    	inc2.w    w4, w4
    354e:	14 42 78    	mov.b     [w4], w4
    3550:	84 42 78    	mov.b     w4, w5
    3552:	06 c1 20    	mov.w     #0xc10, w6
    3554:	05 4b 78    	mov.b     w5, [w6]

00003556 <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    3556:	74 60 80    	mov.w     0xc0e, w4
    3558:	63 02 42    	add.w     w4, #0x3, w4
    355a:	14 42 78    	mov.b     [w4], w4
    355c:	84 42 78    	mov.b     w4, w5
    355e:	16 c1 20    	mov.w     #0xc11, w6
    3560:	05 4b 78    	mov.b     w5, [w6]

00003562 <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    3562:	e4 bf 20    	mov.w     #0xbfe, w4
    3564:	b4 02 90    	mov.w     [w4+6], w5
    3566:	84 60 80    	mov.w     0xc10, w4
    3568:	84 8f 52    	sub.w     w5, w4, [w15]
    356a:	03 00 31    	bra       C, 0x3572 <.L98>

0000356c <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    356c:	e4 bf 20    	mov.w     #0xbfe, w4
    356e:	34 02 90    	mov.w     [w4+6], w4
    3570:	84 60 88    	mov.w     w4, 0xc10

00003572 <.L98>:
                        }
                        SendDataPacket();
    3572:	36 01 07    	rcall     0x37e0 <_SendDataPacket>

00003574 <.L97>:
                    }
                    break;
    3574:	33 00 37    	bra       0x35dc <.L93>

00003576 <.L91>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    3576:	e4 bf 20    	mov.w     #0xbfe, w4
    3578:	24 42 90    	mov.b     [w4+2], w4
    357a:	04 82 fb    	ze        w4, w4
    357c:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    357e:	07 00 32    	bra       Z, 0x358e <.L101>
    3580:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    3582:	08 00 32    	bra       Z, 0x3594 <.L102>
    3584:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3586:	09 00 3a    	bra       NZ, 0x359a <.L133>

00003588 <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    3588:	a4 05 2a    	mov.w     #0xa05a, w4
    358a:	74 60 88    	mov.w     w4, 0xc0e

0000358c <.LSM218>:
                            break;
    358c:	0c 00 37    	bra       0x35a6 <.L103>

0000358e <.L101>:
                        case 1:
                            USB_request.data_ptr = String1;
    358e:	e4 05 2a    	mov.w     #0xa05e, w4
    3590:	74 60 88    	mov.w     w4, 0xc0e

00003592 <.LSM220>:
                            break;
    3592:	09 00 37    	bra       0x35a6 <.L103>

00003594 <.L102>:
                        case 2:
                            USB_request.data_ptr = String2;
    3594:	84 07 2a    	mov.w     #0xa078, w4
    3596:	74 60 88    	mov.w     w4, 0xc0e

00003598 <.LSM222>:
                            break;
    3598:	06 00 37    	bra       0x35a6 <.L103>

0000359a <.L133>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    359a:	24 c1 20    	mov.w     #0xc12, w4
    359c:	14 42 78    	mov.b     [w4], w4
    359e:	04 04 a0    	bset.b    w4, #0x0
    35a0:	84 42 78    	mov.b     w4, w5
    35a2:	26 c1 20    	mov.w     #0xc12, w6
    35a4:	05 4b 78    	mov.b     w5, [w6]

000035a6 <.L103>:
                    }
                    if (!(USB_error_flags&0x01)) {
    35a6:	24 c1 20    	mov.w     #0xc12, w4
    35a8:	14 42 78    	mov.b     [w4], w4
    35aa:	04 82 fb    	ze        w4, w4
    35ac:	61 02 62    	and.w     w4, #0x1, w4
    35ae:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    35b0:	0d 00 3a    	bra       NZ, 0x35cc <.L104>

000035b2 <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    35b2:	74 60 80    	mov.w     0xc0e, w4
    35b4:	14 42 78    	mov.b     [w4], w4
    35b6:	04 82 fb    	ze        w4, w4
    35b8:	84 60 88    	mov.w     w4, 0xc10

000035ba <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    35ba:	e4 bf 20    	mov.w     #0xbfe, w4
    35bc:	b4 02 90    	mov.w     [w4+6], w5
    35be:	84 60 80    	mov.w     0xc10, w4
    35c0:	84 8f 52    	sub.w     w5, w4, [w15]
    35c2:	03 00 31    	bra       C, 0x35ca <.L105>

000035c4 <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    35c4:	e4 bf 20    	mov.w     #0xbfe, w4
    35c6:	34 02 90    	mov.w     [w4+6], w4
    35c8:	84 60 88    	mov.w     w4, 0xc10

000035ca <.L105>:
                        }
                        SendDataPacket();
    35ca:	0a 01 07    	rcall     0x37e0 <_SendDataPacket>

000035cc <.L104>:
                    }
                    break;
    35cc:	07 00 37    	bra       0x35dc <.L93>

000035ce <.L131>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    35ce:	24 c1 20    	mov.w     #0xc12, w4
    35d0:	14 42 78    	mov.b     [w4], w4
    35d2:	04 04 a0    	bset.b    w4, #0x0
    35d4:	84 42 78    	mov.b     w4, w5
    35d6:	26 c1 20    	mov.w     #0xc12, w6
    35d8:	05 4b 78    	mov.b     w5, [w6]

000035da <.LSM231>:
            }
            break;
    35da:	9c 00 37    	bra       0x3714 <.L29>

000035dc <.L93>:
    35dc:	9b 00 37    	bra       0x3714 <.L29>

000035de <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    35de:	34 70 80    	mov.w     0xe06, w4
    35e0:	35 c1 20    	mov.w     #0xc13, w5
    35e2:	95 42 78    	mov.b     [w5], w5
    35e4:	05 4a 78    	mov.b     w5, [w4]

000035e6 <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    35e6:	14 c0 b3    	mov.b     #0x1, w4
    35e8:	84 42 78    	mov.b     w4, w5
    35ea:	46 e0 20    	mov.w     #0xe04, w6
    35ec:	05 4b 78    	mov.b     w5, [w6]

000035ee <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    35ee:	84 cc b3    	mov.b     #0xc8, w4
    35f0:	84 42 78    	mov.b     w4, w5
    35f2:	56 e0 20    	mov.w     #0xe05, w6
    35f4:	05 4b 78    	mov.b     w5, [w6]

000035f6 <.LSM235>:
            break;
    35f6:	8e 00 37    	bra       0x3714 <.L29>

000035f8 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    35f8:	e4 bf 20    	mov.w     #0xbfe, w4
    35fa:	24 42 90    	mov.b     [w4+2], w4
    35fc:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    35fe:	2c 00 3e    	bra       GTU, 0x3658 <.L106>

00003600 <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    3600:	a4 4a 20    	mov.w     #0x4aa, w4
    3602:	14 07 98    	mov.w     w4, [w14+2]

00003604 <.LSM238>:
                for (n = 1; n<16; n++)
    3604:	14 c0 b3    	mov.b     #0x1, w4
    3606:	04 4f 78    	mov.b     w4, [w14]
    3608:	08 00 37    	bra       0x361a <.L107>

0000360a <.L108>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    360a:	1e 43 78    	mov.b     [w14], w6
    360c:	06 82 fb    	ze        w6, w4
    360e:	04 02 42    	add.w     w4, w4, w4
    3610:	9e 02 90    	mov.w     [w14+2], w5
    3612:	04 82 42    	add.w     w5, w4, w4
    3614:	80 02 eb    	clr.w     w5
    3616:	05 0a 78    	mov.w     w5, [w4]

00003618 <.LSM240>:
    3618:	1e 4f e8    	inc.b     [w14], [w14]

0000361a <.L107>:
    361a:	1e 42 78    	mov.b     [w14], w4
    361c:	ef 4f 52    	sub.b     w4, #0xf, [w15]
    361e:	f5 ff 36    	bra       LEU, 0x360a <.L108>

00003620 <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    3620:	e4 bf 20    	mov.w     #0xbfe, w4
    3622:	24 42 90    	mov.b     [w4+2], w4
    3624:	04 43 78    	mov.b     w4, w6
    3626:	35 c1 20    	mov.w     #0xc13, w5
    3628:	86 4a 78    	mov.b     w6, [w5]
    362a:	34 c1 20    	mov.w     #0xc13, w4
    362c:	14 42 78    	mov.b     [w4], w4
    362e:	04 82 fb    	ze        w4, w4
    3630:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3632:	05 00 3a    	bra       NZ, 0x363e <.L134>

00003634 <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    3634:	24 c0 b3    	mov.b     #0x2, w4
    3636:	04 43 78    	mov.b     w4, w6
    3638:	65 c1 20    	mov.w     #0xc16, w5
    363a:	86 4a 78    	mov.b     w6, [w5]

0000363c <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    363c:	04 00 37    	bra       0x3646 <.L111>

0000363e <.L134>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    363e:	34 c0 b3    	mov.b     #0x3, w4
    3640:	04 43 78    	mov.b     w4, w6
    3642:	65 c1 20    	mov.w     #0xc16, w5
    3644:	86 4a 78    	mov.b     w6, [w5]

00003646 <.L111>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    3646:	00 42 eb    	clr.b     w4
    3648:	04 43 78    	mov.b     w4, w6
    364a:	45 e0 20    	mov.w     #0xe04, w5
    364c:	86 4a 78    	mov.b     w6, [w5]

0000364e <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    364e:	84 cc b3    	mov.b     #0xc8, w4
    3650:	04 43 78    	mov.b     w4, w6
    3652:	55 e0 20    	mov.w     #0xe05, w5
    3654:	86 4a 78    	mov.b     w6, [w5]

00003656 <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    3656:	5e 00 37    	bra       0x3714 <.L29>

00003658 <.L106>:
    3658:	24 c1 20    	mov.w     #0xc12, w4
    365a:	14 42 78    	mov.b     [w4], w4
    365c:	04 04 a0    	bset.b    w4, #0x0
    365e:	04 43 78    	mov.b     w4, w6
    3660:	25 c1 20    	mov.w     #0xc12, w5
    3662:	86 4a 78    	mov.b     w6, [w5]

00003664 <.LSM249>:
    3664:	57 00 37    	bra       0x3714 <.L29>

00003666 <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    3666:	64 c1 20    	mov.w     #0xc16, w4
    3668:	14 42 78    	mov.b     [w4], w4
    366a:	04 82 fb    	ze        w4, w4
    366c:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    366e:	18 00 3a    	bra       NZ, 0x36a0 <.L135>

00003670 <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    3670:	e4 bf 20    	mov.w     #0xbfe, w4
    3672:	44 42 90    	mov.b     [w4+4], w4
    3674:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    3676:	0c 00 3a    	bra       NZ, 0x3690 <.L115>

00003678 <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    3678:	34 70 80    	mov.w     0xe06, w4
    367a:	80 42 eb    	clr.b     w5
    367c:	05 4a 78    	mov.b     w5, [w4]

0000367e <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    367e:	14 c0 b3    	mov.b     #0x1, w4
    3680:	04 43 78    	mov.b     w4, w6
    3682:	45 e0 20    	mov.w     #0xe04, w5
    3684:	86 4a 78    	mov.b     w6, [w5]

00003686 <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3686:	84 cc b3    	mov.b     #0xc8, w4
    3688:	04 43 78    	mov.b     w4, w6
    368a:	55 e0 20    	mov.w     #0xe05, w5
    368c:	86 4a 78    	mov.b     w6, [w5]
    368e:	06 00 37    	bra       0x369c <.L116>

00003690 <.L115>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    3690:	24 c1 20    	mov.w     #0xc12, w4
    3692:	14 42 78    	mov.b     [w4], w4
    3694:	04 04 a0    	bset.b    w4, #0x0
    3696:	04 43 78    	mov.b     w4, w6
    3698:	25 c1 20    	mov.w     #0xc12, w5
    369a:	86 4a 78    	mov.b     w6, [w5]

0000369c <.L116>:
                    }
                    break;
    369c:	00 00 00    	nop       

0000369e <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    369e:	3a 00 37    	bra       0x3714 <.L29>

000036a0 <.L135>:
    36a0:	24 c1 20    	mov.w     #0xc12, w4
    36a2:	14 42 78    	mov.b     [w4], w4
    36a4:	04 04 a0    	bset.b    w4, #0x0
    36a6:	04 43 78    	mov.b     w4, w6
    36a8:	25 c1 20    	mov.w     #0xc12, w5
    36aa:	86 4a 78    	mov.b     w6, [w5]

000036ac <.LSM259>:
    36ac:	33 00 37    	bra       0x3714 <.L29>

000036ae <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    36ae:	64 c1 20    	mov.w     #0xc16, w4
    36b0:	14 42 78    	mov.b     [w4], w4
    36b2:	04 82 fb    	ze        w4, w4
    36b4:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    36b6:	21 00 3a    	bra       NZ, 0x36fa <.L136>

000036b8 <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    36b8:	e4 bf 20    	mov.w     #0xbfe, w4
    36ba:	44 42 90    	mov.b     [w4+4], w4
    36bc:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    36be:	15 00 3a    	bra       NZ, 0x36ea <.L120>

000036c0 <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    36c0:	e4 bf 20    	mov.w     #0xbfe, w4
    36c2:	24 42 90    	mov.b     [w4+2], w4
    36c4:	04 82 fb    	ze        w4, w4
    36c6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    36c8:	09 00 3a    	bra       NZ, 0x36dc <.L137>

000036ca <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    36ca:	00 42 eb    	clr.b     w4
    36cc:	04 43 78    	mov.b     w4, w6
    36ce:	45 e0 20    	mov.w     #0xe04, w5
    36d0:	86 4a 78    	mov.b     w6, [w5]

000036d2 <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    36d2:	84 cc b3    	mov.b     #0xc8, w4
    36d4:	04 43 78    	mov.b     w4, w6
    36d6:	55 e0 20    	mov.w     #0xe05, w5
    36d8:	86 4a 78    	mov.b     w6, [w5]

000036da <.LSM265>:
                                break;
    36da:	0d 00 37    	bra       0x36f6 <.L124>

000036dc <.L137>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    36dc:	24 c1 20    	mov.w     #0xc12, w4
    36de:	14 42 78    	mov.b     [w4], w4
    36e0:	04 04 a0    	bset.b    w4, #0x0
    36e2:	04 43 78    	mov.b     w4, w6
    36e4:	25 c1 20    	mov.w     #0xc12, w5
    36e6:	86 4a 78    	mov.b     w6, [w5]
    36e8:	06 00 37    	bra       0x36f6 <.L124>

000036ea <.L120>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    36ea:	24 c1 20    	mov.w     #0xc12, w4
    36ec:	14 42 78    	mov.b     [w4], w4
    36ee:	04 04 a0    	bset.b    w4, #0x0
    36f0:	04 43 78    	mov.b     w4, w6
    36f2:	25 c1 20    	mov.w     #0xc12, w5
    36f4:	86 4a 78    	mov.b     w6, [w5]

000036f6 <.L124>:
                    }
                    break;
    36f6:	00 00 00    	nop       

000036f8 <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    36f8:	0d 00 37    	bra       0x3714 <.L29>

000036fa <.L136>:
    36fa:	24 c1 20    	mov.w     #0xc12, w4
    36fc:	14 42 78    	mov.b     [w4], w4
    36fe:	04 04 a0    	bset.b    w4, #0x0
    3700:	04 43 78    	mov.b     w4, w6
    3702:	25 c1 20    	mov.w     #0xc12, w5
    3704:	86 4a 78    	mov.b     w6, [w5]

00003706 <.LSM271>:
    3706:	06 00 37    	bra       0x3714 <.L29>

00003708 <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    3708:	24 c1 20    	mov.w     #0xc12, w4
    370a:	14 42 78    	mov.b     [w4], w4
    370c:	04 04 a0    	bset.b    w4, #0x0
    370e:	04 43 78    	mov.b     w4, w6
    3710:	25 c1 20    	mov.w     #0xc12, w5
    3712:	86 4a 78    	mov.b     w6, [w5]

00003714 <.L29>:
    }
}
    3714:	00 80 fa    	ulnk      
    3716:	00 00 06    	return    

00003718 <_ProcessInToken>:

void ProcessInToken(void) {
    3718:	00 00 fa    	lnk       #0x0

0000371a <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    371a:	54 c1 20    	mov.w     #0xc15, w4
    371c:	14 42 78    	mov.b     [w4], w4
    371e:	84 82 fb    	ze        w4, w5
    3720:	04 0f 20    	mov.w     #0xf0, w4
    3722:	04 82 62    	and.w     w5, w4, w4
    3724:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3726:	2f 00 3a    	bra       NZ, 0x3786 <.L138>

00003728 <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    3728:	64 c0 20    	mov.w     #0xc06, w4
    372a:	14 42 78    	mov.b     [w4], w4
    372c:	84 82 fb    	ze        w4, w5
    372e:	04 06 20    	mov.w     #0x60, w4
    3730:	04 82 62    	and.w     w5, w4, w4
    3732:	05 02 20    	mov.w     #0x20, w5
    3734:	85 0f 52    	sub.w     w4, w5, [w15]
    3736:	23 00 32    	bra       Z, 0x377e <.L152>
    3738:	05 04 20    	mov.w     #0x40, w5
    373a:	85 0f 52    	sub.w     w4, w5, [w15]
    373c:	1e 00 32    	bra       Z, 0x377a <.L144>
    373e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3740:	21 00 3a    	bra       NZ, 0x3784 <.L153>

00003742 <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    3742:	74 c0 20    	mov.w     #0xc07, w4
    3744:	14 42 78    	mov.b     [w4], w4
    3746:	04 82 fb    	ze        w4, w4
    3748:	e5 0f 52    	sub.w     w4, #0x5, [w15]
    374a:	03 00 32    	bra       Z, 0x3752 <.L146>
    374c:	e6 0f 52    	sub.w     w4, #0x6, [w15]
    374e:	12 00 32    	bra       Z, 0x3774 <.L147>

00003750 <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    3750:	17 00 37    	bra       0x3780 <.L141>

00003752 <.L146>:
    3752:	84 c0 20    	mov.w     #0xc08, w4
    3754:	14 42 78    	mov.b     [w4], w4
    3756:	04 82 fb    	ze        w4, w4
    3758:	b4 24 88    	mov.w     w4, 0x496
    375a:	b4 24 80    	mov.w     0x496, w4
    375c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    375e:	05 00 3a    	bra       NZ, 0x376a <.L151>

00003760 <.LSM280>:
    3760:	14 c0 b3    	mov.b     #0x1, w4
    3762:	04 43 78    	mov.b     w4, w6
    3764:	65 c1 20    	mov.w     #0xc16, w5
    3766:	86 4a 78    	mov.b     w6, [w5]

00003768 <.LSM281>:
    3768:	04 00 37    	bra       0x3772 <.L150>

0000376a <.L151>:
    376a:	24 c0 b3    	mov.b     #0x2, w4
    376c:	04 43 78    	mov.b     w4, w6
    376e:	65 c1 20    	mov.w     #0xc16, w5
    3770:	86 4a 78    	mov.b     w6, [w5]

00003772 <.L150>:
    3772:	02 00 37    	bra       0x3778 <.L145>

00003774 <.L147>:
    3774:	35 00 07    	rcall     0x37e0 <_SendDataPacket>

00003776 <.LSM285>:
    3776:	00 00 00    	nop       

00003778 <.L145>:
    3778:	03 00 37    	bra       0x3780 <.L141>

0000377a <.L144>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    377a:	c1 08 07    	rcall     0x48fe <_VendorRequestsIn>

0000377c <.LSM288>:
                    break;
    377c:	01 00 37    	bra       0x3780 <.L141>

0000377e <.L152>:
    377e:	00 00 00    	nop       

00003780 <.L141>:
            }
            break;
    3780:	00 00 00    	nop       
    3782:	01 00 37    	bra       0x3786 <.L138>

00003784 <.L153>:
    3784:	00 00 00    	nop       

00003786 <.L138>:
    }
}
    3786:	00 80 fa    	ulnk      
    3788:	00 00 06    	return    

0000378a <_ProcessOutToken>:

void ProcessOutToken(void) {
    378a:	00 00 fa    	lnk       #0x0

0000378c <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    378c:	54 c1 20    	mov.w     #0xc15, w4
    378e:	14 42 78    	mov.b     [w4], w4
    3790:	84 82 fb    	ze        w4, w5
    3792:	04 0f 20    	mov.w     #0xf0, w4
    3794:	04 82 62    	and.w     w5, w4, w4
    3796:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3798:	21 00 3a    	bra       NZ, 0x37dc <.L154>

0000379a <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    379a:	64 c0 20    	mov.w     #0xc06, w4
    379c:	14 42 78    	mov.b     [w4], w4
    379e:	84 82 fb    	ze        w4, w5
    37a0:	04 06 20    	mov.w     #0x60, w4
    37a2:	04 82 62    	and.w     w5, w4, w4
    37a4:	05 02 20    	mov.w     #0x20, w5
    37a6:	85 0f 52    	sub.w     w4, w5, [w15]
    37a8:	05 00 32    	bra       Z, 0x37b4 <.L161>
    37aa:	05 04 20    	mov.w     #0x40, w5
    37ac:	85 0f 52    	sub.w     w4, w5, [w15]
    37ae:	04 00 3a    	bra       NZ, 0x37b8 <.L162>

000037b0 <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    37b0:	af 08 07    	rcall     0x4910 <_VendorRequestsOut>

000037b2 <.LSM296>:
                    break;
    37b2:	03 00 37    	bra       0x37ba <.L157>

000037b4 <.L161>:
    37b4:	00 00 00    	nop       
    37b6:	01 00 37    	bra       0x37ba <.L157>

000037b8 <.L162>:
    37b8:	00 00 00    	nop       

000037ba <.L157>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    37ba:	04 c4 b3    	mov.b     #0x40, w4
    37bc:	04 43 78    	mov.b     w4, w6
    37be:	05 e0 20    	mov.w     #0xe00, w5
    37c0:	86 4a 78    	mov.b     w6, [w5]

000037c2 <.LSM300>:
            BD[EP0OUT].status = 0x88;
    37c2:	84 c8 b3    	mov.b     #0x88, w4
    37c4:	04 43 78    	mov.b     w4, w6
    37c6:	15 e0 20    	mov.w     #0xe01, w5
    37c8:	86 4a 78    	mov.b     w6, [w5]

000037ca <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    37ca:	00 42 eb    	clr.b     w4
    37cc:	04 43 78    	mov.b     w4, w6
    37ce:	45 e0 20    	mov.w     #0xe04, w5
    37d0:	86 4a 78    	mov.b     w6, [w5]

000037d2 <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    37d2:	84 cc b3    	mov.b     #0xc8, w4
    37d4:	04 43 78    	mov.b     w4, w6
    37d6:	55 e0 20    	mov.w     #0xe05, w5
    37d8:	86 4a 78    	mov.b     w6, [w5]

000037da <.LSM303>:
            break;
    37da:	00 00 00    	nop       

000037dc <.L154>:
    }
}
    37dc:	00 80 fa    	ulnk      
    37de:	00 00 06    	return    

000037e0 <_SendDataPacket>:

void SendDataPacket(void) {
    37e0:	02 00 fa    	lnk       #0x2

000037e2 <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    37e2:	85 60 80    	mov.w     0xc10, w5
    37e4:	f4 03 20    	mov.w     #0x3f, w4
    37e6:	84 8f 52    	sub.w     w5, w4, [w15]
    37e8:	0d 00 3e    	bra       GTU, 0x3804 <.L164>

000037ea <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    37ea:	84 60 80    	mov.w     0xc10, w4
    37ec:	04 4f 78    	mov.b     w4, [w14]

000037ee <.LSM308>:
        USB_request.bytes_left.w = 0;
    37ee:	00 02 eb    	clr.w     w4
    37f0:	84 60 88    	mov.w     w4, 0xc10

000037f2 <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    37f2:	00 c2 eb    	setm.b    w4
    37f4:	04 43 78    	mov.b     w4, w6
    37f6:	65 c0 20    	mov.w     #0xc06, w5
    37f8:	86 4a 78    	mov.b     w6, [w5]

000037fa <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    37fa:	00 c2 eb    	setm.b    w4
    37fc:	04 43 78    	mov.b     w4, w6
    37fe:	75 c0 20    	mov.w     #0xc07, w5
    3800:	86 4a 78    	mov.b     w6, [w5]
    3802:	05 00 37    	bra       0x380e <.L165>

00003804 <.L164>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    3804:	04 c4 b3    	mov.b     #0x40, w4
    3806:	04 4f 78    	mov.b     w4, [w14]

00003808 <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    3808:	84 60 80    	mov.w     0xc10, w4
    380a:	04 04 b1    	sub.w     #0x40, w4
    380c:	84 60 88    	mov.w     w4, 0xc10

0000380e <.L165>:
    }
    for (n = 0; n<packet_length; n++) {
    380e:	00 42 eb    	clr.b     w4
    3810:	14 47 98    	mov.b     w4, [w14+1]
    3812:	0c 00 37    	bra       0x382c <.L166>

00003814 <.L167>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    3814:	35 70 80    	mov.w     0xe06, w5
    3816:	1e 42 90    	mov.b     [w14+1], w4
    3818:	04 82 fb    	ze        w4, w4
    381a:	84 82 42    	add.w     w5, w4, w5
    381c:	74 60 80    	mov.w     0xc0e, w4
    381e:	14 43 78    	mov.b     [w4], w6
    3820:	86 4a 78    	mov.b     w6, [w5]
    3822:	04 02 e8    	inc.w     w4, w4
    3824:	74 60 88    	mov.w     w4, 0xc0e

00003826 <.LSM315>:
    3826:	1e 42 90    	mov.b     [w14+1], w4
    3828:	04 42 e8    	inc.b     w4, w4
    382a:	14 47 98    	mov.b     w4, [w14+1]

0000382c <.L166>:
    382c:	1e 42 90    	mov.b     [w14+1], w4
    382e:	9e 4f 52    	sub.b     w4, [w14], [w15]
    3830:	f1 ff 39    	bra       NC, 0x3814 <.L167>

00003832 <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    3832:	9e 42 78    	mov.b     [w14], w5
    3834:	44 e0 20    	mov.w     #0xe04, w4
    3836:	05 4a 78    	mov.b     w5, [w4]

00003838 <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    3838:	54 e0 20    	mov.w     #0xe05, w4
    383a:	14 42 78    	mov.b     [w4], w4
    383c:	04 c2 ea    	com.b     w4, w4
    383e:	06 c4 b3    	mov.b     #0x40, w6
    3840:	86 42 62    	and.b     w4, w6, w5
    3842:	84 c8 b3    	mov.b     #0x88, w4
    3844:	04 c2 72    	ior.b     w5, w4, w4
    3846:	04 43 78    	mov.b     w4, w6
    3848:	55 e0 20    	mov.w     #0xe05, w5
    384a:	86 4a 78    	mov.b     w6, [w5]

0000384c <.LSM318>:
}
    384c:	00 80 fa    	ulnk      
    384e:	00 00 06    	return    

00003850 <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    3850:	02 00 fa    	lnk       #0x2
    3852:	00 0f 78    	mov.w     w0, [w14]

00003854 <.LSM1>:
    timer_lower(self);
    3854:	1e 00 78    	mov.w     [w14], w0
    3856:	0e 02 07    	rcall     0x3c74 <_timer_lower>

00003858 <.LSM2>:
    if (self->every) {
    3858:	1e 02 78    	mov.w     [w14], w4
    385a:	14 0a 90    	mov.w     [w4+18], w4
    385c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    385e:	05 00 32    	bra       Z, 0x386a <.L2>

00003860 <.LSM3>:
        self->every(self);
    3860:	1e 02 78    	mov.w     [w14], w4
    3862:	14 0a 90    	mov.w     [w4+18], w4
    3864:	1e 00 78    	mov.w     [w14], w0
    3866:	04 00 01    	call      w4
    3868:	1a 00 37    	bra       0x389e <.L1>

0000386a <.L2>:
    } else if (self->after) {
    386a:	1e 02 78    	mov.w     [w14], w4
    386c:	24 0a 90    	mov.w     [w4+20], w4
    386e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3870:	14 00 32    	bra       Z, 0x389a <.L4>

00003872 <.LSM5>:
        if (self->aftercount) {
    3872:	1e 02 78    	mov.w     [w14], w4
    3874:	04 0a 90    	mov.w     [w4+16], w4
    3876:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3878:	0a 00 32    	bra       Z, 0x388e <.L5>

0000387a <.LSM6>:
            self->after(self);
    387a:	1e 02 78    	mov.w     [w14], w4
    387c:	24 0a 90    	mov.w     [w4+20], w4
    387e:	1e 00 78    	mov.w     [w14], w0
    3880:	04 00 01    	call      w4

00003882 <.LSM7>:
            self->aftercount--;
    3882:	1e 02 78    	mov.w     [w14], w4
    3884:	04 0a 90    	mov.w     [w4+16], w4
    3886:	84 02 e9    	dec.w     w4, w5
    3888:	1e 02 78    	mov.w     [w14], w4
    388a:	05 0a 98    	mov.w     w5, [w4+16]
    388c:	08 00 37    	bra       0x389e <.L1>

0000388e <.L5>:
        } else {
            timer_disableInterrupt(self);
    388e:	1e 00 78    	mov.w     [w14], w0
    3890:	1a 02 07    	rcall     0x3cc6 <_timer_disableInterrupt>

00003892 <.LSM9>:
            self->after = NULL;
    3892:	1e 02 78    	mov.w     [w14], w4
    3894:	80 02 eb    	clr.w     w5
    3896:	25 0a 98    	mov.w     w5, [w4+20]
    3898:	02 00 37    	bra       0x389e <.L1>

0000389a <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    389a:	1e 00 78    	mov.w     [w14], w0
    389c:	14 02 07    	rcall     0x3cc6 <_timer_disableInterrupt>

0000389e <.L1>:
    }
}
    389e:	00 80 fa    	ulnk      
    38a0:	00 00 06    	return    

000038a2 <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    38a2:	36 00 f8    	push      0x36
    38a4:	80 9f be    	mov.d     w0, [w15++]
    38a6:	82 9f be    	mov.d     w2, [w15++]
    38a8:	84 9f be    	mov.d     w4, [w15++]
    38aa:	86 9f be    	mov.d     w6, [w15++]
    38ac:	32 00 f8    	push      0x32
    38ae:	00 20 20    	mov.w     #0x200, w0
    38b0:	90 01 88    	mov.w     w0, 0x32
    38b2:	00 00 fa    	lnk       #0x0

000038b4 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    38b4:	80 c1 20    	mov.w     #0xc18, w0
    38b6:	cc ff 07    	rcall     0x3850 <_timer_serviceInterrupt>

000038b8 <.LSM14>:
}
    38b8:	00 80 fa    	ulnk      
    38ba:	32 00 f9    	pop       0x32
    38bc:	4f 03 be    	mov.d     [--w15], w6
    38be:	4f 02 be    	mov.d     [--w15], w4
    38c0:	4f 01 be    	mov.d     [--w15], w2
    38c2:	4f 00 be    	mov.d     [--w15], w0
    38c4:	36 00 f9    	pop       0x36
    38c6:	00 40 06    	retfie    

000038c8 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    38c8:	36 00 f8    	push      0x36
    38ca:	80 9f be    	mov.d     w0, [w15++]
    38cc:	82 9f be    	mov.d     w2, [w15++]
    38ce:	84 9f be    	mov.d     w4, [w15++]
    38d0:	86 9f be    	mov.d     w6, [w15++]
    38d2:	32 00 f8    	push      0x32
    38d4:	00 20 20    	mov.w     #0x200, w0
    38d6:	90 01 88    	mov.w     w0, 0x32
    38d8:	00 00 fa    	lnk       #0x0

000038da <.LSM16>:
    timer_serviceInterrupt(&timer2);
    38da:	e0 c2 20    	mov.w     #0xc2e, w0
    38dc:	b9 ff 07    	rcall     0x3850 <_timer_serviceInterrupt>

000038de <.LSM17>:
}
    38de:	00 80 fa    	ulnk      
    38e0:	32 00 f9    	pop       0x32
    38e2:	4f 03 be    	mov.d     [--w15], w6
    38e4:	4f 02 be    	mov.d     [--w15], w4
    38e6:	4f 01 be    	mov.d     [--w15], w2
    38e8:	4f 00 be    	mov.d     [--w15], w0
    38ea:	36 00 f9    	pop       0x36
    38ec:	00 40 06    	retfie    

000038ee <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    38ee:	36 00 f8    	push      0x36
    38f0:	80 9f be    	mov.d     w0, [w15++]
    38f2:	82 9f be    	mov.d     w2, [w15++]
    38f4:	84 9f be    	mov.d     w4, [w15++]
    38f6:	86 9f be    	mov.d     w6, [w15++]
    38f8:	32 00 f8    	push      0x32
    38fa:	00 20 20    	mov.w     #0x200, w0
    38fc:	90 01 88    	mov.w     w0, 0x32
    38fe:	00 00 fa    	lnk       #0x0

00003900 <.LSM19>:
    timer_serviceInterrupt(&timer3);
    3900:	40 c4 20    	mov.w     #0xc44, w0
    3902:	a6 ff 07    	rcall     0x3850 <_timer_serviceInterrupt>

00003904 <.LSM20>:
}
    3904:	00 80 fa    	ulnk      
    3906:	32 00 f9    	pop       0x32
    3908:	4f 03 be    	mov.d     [--w15], w6
    390a:	4f 02 be    	mov.d     [--w15], w4
    390c:	4f 01 be    	mov.d     [--w15], w2
    390e:	4f 00 be    	mov.d     [--w15], w0
    3910:	36 00 f9    	pop       0x36
    3912:	00 40 06    	retfie    

00003914 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    3914:	36 00 f8    	push      0x36
    3916:	80 9f be    	mov.d     w0, [w15++]
    3918:	82 9f be    	mov.d     w2, [w15++]
    391a:	84 9f be    	mov.d     w4, [w15++]
    391c:	86 9f be    	mov.d     w6, [w15++]
    391e:	32 00 f8    	push      0x32
    3920:	00 20 20    	mov.w     #0x200, w0
    3922:	90 01 88    	mov.w     w0, 0x32
    3924:	00 00 fa    	lnk       #0x0

00003926 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    3926:	a0 c5 20    	mov.w     #0xc5a, w0
    3928:	93 ff 07    	rcall     0x3850 <_timer_serviceInterrupt>

0000392a <.LSM23>:
}
    392a:	00 80 fa    	ulnk      
    392c:	32 00 f9    	pop       0x32
    392e:	4f 03 be    	mov.d     [--w15], w6
    3930:	4f 02 be    	mov.d     [--w15], w4
    3932:	4f 01 be    	mov.d     [--w15], w2
    3934:	4f 00 be    	mov.d     [--w15], w0
    3936:	36 00 f9    	pop       0x36
    3938:	00 40 06    	retfie    

0000393a <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    393a:	36 00 f8    	push      0x36
    393c:	80 9f be    	mov.d     w0, [w15++]
    393e:	82 9f be    	mov.d     w2, [w15++]
    3940:	84 9f be    	mov.d     w4, [w15++]
    3942:	86 9f be    	mov.d     w6, [w15++]
    3944:	32 00 f8    	push      0x32
    3946:	00 20 20    	mov.w     #0x200, w0
    3948:	90 01 88    	mov.w     w0, 0x32
    394a:	00 00 fa    	lnk       #0x0

0000394c <.LSM25>:
    timer_serviceInterrupt(&timer5);
    394c:	00 c7 20    	mov.w     #0xc70, w0
    394e:	80 ff 07    	rcall     0x3850 <_timer_serviceInterrupt>

00003950 <.LSM26>:
}
    3950:	00 80 fa    	ulnk      
    3952:	32 00 f9    	pop       0x32
    3954:	4f 03 be    	mov.d     [--w15], w6
    3956:	4f 02 be    	mov.d     [--w15], w4
    3958:	4f 01 be    	mov.d     [--w15], w2
    395a:	4f 00 be    	mov.d     [--w15], w0
    395c:	36 00 f9    	pop       0x36
    395e:	00 40 06    	retfie    

00003960 <_init_timer>:

void init_timer(void) {
    3960:	00 00 fa    	lnk       #0x0

00003962 <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    3962:	b4 00 20    	mov.w     #0xb, w4
    3964:	84 1f 78    	mov.w     w4, [w15++]
    3966:	47 00 20    	mov.w     #0x4, w7
    3968:	36 c0 b3    	mov.b     #0x3, w6
    396a:	45 09 20    	mov.w     #0x94, w5
    396c:	44 08 20    	mov.w     #0x84, w4
    396e:	03 10 20    	mov.w     #0x100, w3
    3970:	22 10 20    	mov.w     #0x102, w2
    3972:	41 10 20    	mov.w     #0x104, w1
    3974:	80 c1 20    	mov.w     #0xc18, w0
    3976:	33 00 07    	rcall     0x39de <_timer_init>
    3978:	8f 87 e9    	dec2.w    w15, w15

0000397a <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    397a:	c4 00 20    	mov.w     #0xc, w4
    397c:	84 1f 78    	mov.w     w4, [w15++]
    397e:	80 03 eb    	clr.w     w7
    3980:	76 c0 b3    	mov.b     #0x7, w6
    3982:	45 09 20    	mov.w     #0x94, w5
    3984:	44 08 20    	mov.w     #0x84, w4
    3986:	63 10 20    	mov.w     #0x106, w3
    3988:	c2 10 20    	mov.w     #0x10c, w2
    398a:	01 11 20    	mov.w     #0x110, w1
    398c:	e0 c2 20    	mov.w     #0xc2e, w0
    398e:	27 00 07    	rcall     0x39de <_timer_init>
    3990:	8f 87 e9    	dec2.w    w15, w15

00003992 <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    3992:	d4 00 20    	mov.w     #0xd, w4
    3994:	84 1f 78    	mov.w     w4, [w15++]
    3996:	17 00 20    	mov.w     #0x1, w7
    3998:	86 c0 b3    	mov.b     #0x8, w6
    399a:	45 09 20    	mov.w     #0x94, w5
    399c:	44 08 20    	mov.w     #0x84, w4
    399e:	a3 10 20    	mov.w     #0x10a, w3
    39a0:	e2 10 20    	mov.w     #0x10e, w2
    39a2:	21 11 20    	mov.w     #0x112, w1
    39a4:	40 c4 20    	mov.w     #0xc44, w0
    39a6:	1b 00 07    	rcall     0x39de <_timer_init>
    39a8:	8f 87 e9    	dec2.w    w15, w15

000039aa <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    39aa:	e4 00 20    	mov.w     #0xe, w4
    39ac:	84 1f 78    	mov.w     w4, [w15++]
    39ae:	27 00 20    	mov.w     #0x2, w7
    39b0:	b6 c0 b3    	mov.b     #0xb, w6
    39b2:	65 09 20    	mov.w     #0x96, w5
    39b4:	64 08 20    	mov.w     #0x86, w4
    39b6:	43 11 20    	mov.w     #0x114, w3
    39b8:	a2 11 20    	mov.w     #0x11a, w2
    39ba:	e1 11 20    	mov.w     #0x11e, w1
    39bc:	a0 c5 20    	mov.w     #0xc5a, w0
    39be:	0f 00 07    	rcall     0x39de <_timer_init>
    39c0:	8f 87 e9    	dec2.w    w15, w15

000039c2 <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    39c2:	f4 00 20    	mov.w     #0xf, w4
    39c4:	84 1f 78    	mov.w     w4, [w15++]
    39c6:	37 00 20    	mov.w     #0x3, w7
    39c8:	c6 c0 b3    	mov.b     #0xc, w6
    39ca:	65 09 20    	mov.w     #0x96, w5
    39cc:	64 08 20    	mov.w     #0x86, w4
    39ce:	83 11 20    	mov.w     #0x118, w3
    39d0:	c2 11 20    	mov.w     #0x11c, w2
    39d2:	01 12 20    	mov.w     #0x120, w1
    39d4:	00 c7 20    	mov.w     #0xc70, w0
    39d6:	03 00 07    	rcall     0x39de <_timer_init>
    39d8:	8f 87 e9    	dec2.w    w15, w15

000039da <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    39da:	00 80 fa    	ulnk      
    39dc:	00 00 06    	return    

000039de <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    39de:	10 00 fa    	lnk       #0x10
    39e0:	00 0f 78    	mov.w     w0, [w14]
    39e2:	11 07 98    	mov.w     w1, [w14+2]
    39e4:	22 07 98    	mov.w     w2, [w14+4]
    39e6:	33 07 98    	mov.w     w3, [w14+6]
    39e8:	44 07 98    	mov.w     w4, [w14+8]
    39ea:	55 07 98    	mov.w     w5, [w14+10]
    39ec:	46 4f 98    	mov.b     w6, [w14+12]
    39ee:	77 07 98    	mov.w     w7, [w14+14]

000039f0 <.LSM35>:
    self->TxCON = TxCON;
    39f0:	1e 02 78    	mov.w     [w14], w4
    39f2:	9e 02 90    	mov.w     [w14+2], w5
    39f4:	05 0a 78    	mov.w     w5, [w4]

000039f6 <.LSM36>:
    self->PRx = PRx;
    39f6:	1e 02 78    	mov.w     [w14], w4
    39f8:	ae 02 90    	mov.w     [w14+4], w5
    39fa:	15 02 98    	mov.w     w5, [w4+2]

000039fc <.LSM37>:
    self->TMRx = TMRx;
    39fc:	1e 02 78    	mov.w     [w14], w4
    39fe:	be 02 90    	mov.w     [w14+6], w5
    3a00:	25 02 98    	mov.w     w5, [w4+4]

00003a02 <.LSM38>:
    self->IFSy = IFSy;
    3a02:	1e 02 78    	mov.w     [w14], w4
    3a04:	ce 02 90    	mov.w     [w14+8], w5
    3a06:	35 02 98    	mov.w     w5, [w4+6]

00003a08 <.LSM39>:
    self->IECy = IECy;
    3a08:	1e 02 78    	mov.w     [w14], w4
    3a0a:	de 02 90    	mov.w     [w14+10], w5
    3a0c:	45 02 98    	mov.w     w5, [w4+8]

00003a0e <.LSM40>:
    self->flagbit = flagbit;
    3a0e:	1e 02 78    	mov.w     [w14], w4
    3a10:	ce 4a 90    	mov.b     [w14+12], w5
    3a12:	25 4a 98    	mov.b     w5, [w4+10]

00003a14 <.LSM41>:
    self->octselnum = octselnum;
    3a14:	1e 02 78    	mov.w     [w14], w4
    3a16:	fe 02 90    	mov.w     [w14+14], w5
    3a18:	65 02 98    	mov.w     w5, [w4+12]

00003a1a <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    3a1a:	1e 02 78    	mov.w     [w14], w4
    3a1c:	ce ba 97    	mov.w     [w14-8], w5
    3a1e:	75 02 98    	mov.w     w5, [w4+14]

00003a20 <.LSM43>:
    self->aftercount = 0;
    3a20:	1e 02 78    	mov.w     [w14], w4
    3a22:	80 02 eb    	clr.w     w5
    3a24:	05 0a 98    	mov.w     w5, [w4+16]

00003a26 <.LSM44>:
    self->every = NULL;
    3a26:	1e 02 78    	mov.w     [w14], w4
    3a28:	80 02 eb    	clr.w     w5
    3a2a:	15 0a 98    	mov.w     w5, [w4+18]

00003a2c <.LSM45>:
    self->after = NULL;
    3a2c:	1e 02 78    	mov.w     [w14], w4
    3a2e:	80 02 eb    	clr.w     w5
    3a30:	25 0a 98    	mov.w     w5, [w4+20]

00003a32 <.LSM46>:
}
    3a32:	00 80 fa    	ulnk      
    3a34:	00 00 06    	return    

00003a36 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    3a36:	06 00 fa    	lnk       #0x6
    3a38:	88 1f 78    	mov.w     w8, [w15++]
    3a3a:	00 0f 78    	mov.w     w0, [w14]
    3a3c:	12 07 98    	mov.w     w2, [w14+2]
    3a3e:	23 07 98    	mov.w     w3, [w14+4]

00003a40 <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    3a40:	18 c0 b3    	mov.b     #0x1, w8
    3a42:	d2 7b 23    	mov.w     #0x37bd, w2
    3a44:	63 f8 23    	mov.w     #0x3f86, w3
    3a46:	1e 00 90    	mov.w     [w14+2], w0
    3a48:	ae 00 90    	mov.w     [w14+4], w1
    3a4a:	87 ec 07    	rcall     0x135a <___gesf2>
    3a4c:	00 02 78    	mov.w     w0, w4
    3a4e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3a50:	01 00 3c    	bra       GT, 0x3a54 <.L14>
    3a52:	00 44 eb    	clr.b     w8

00003a54 <.L14>:
    3a54:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    3a56:	78 00 3a    	bra       NZ, 0x3b48 <.L23>

00003a58 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    3a58:	18 c0 b3    	mov.b     #0x1, w8
    3a5a:	d2 7b 23    	mov.w     #0x37bd, w2
    3a5c:	63 e8 23    	mov.w     #0x3e86, w3
    3a5e:	1e 00 90    	mov.w     [w14+2], w0
    3a60:	ae 00 90    	mov.w     [w14+4], w1
    3a62:	7b ec 07    	rcall     0x135a <___gesf2>
    3a64:	00 02 78    	mov.w     w0, w4
    3a66:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3a68:	01 00 3c    	bra       GT, 0x3a6c <.L17>
    3a6a:	00 44 eb    	clr.b     w8

00003a6c <.L17>:
    3a6c:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    3a6e:	15 00 32    	bra       Z, 0x3a9a <.L18>

00003a70 <.LSM50>:
        timer_stop(self);
    3a70:	1e 00 78    	mov.w     [w14], w0
    3a72:	e2 00 07    	rcall     0x3c38 <_timer_stop>

00003a74 <.LSM51>:
        poke(self->TxCON, 0x0030);
    3a74:	1e 02 78    	mov.w     [w14], w4
    3a76:	14 02 78    	mov.w     [w4], w4
    3a78:	05 03 20    	mov.w     #0x30, w5
    3a7a:	05 0a 78    	mov.w     w5, [w4]

00003a7c <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    3a7c:	1e 02 78    	mov.w     [w14], w4
    3a7e:	14 04 90    	mov.w     [w4+2], w8
    3a80:	02 40 22    	mov.w     #0x2400, w2
    3a82:	43 77 24    	mov.w     #0x4774, w3
    3a84:	1e 00 90    	mov.w     [w14+2], w0
    3a86:	ae 00 90    	mov.w     [w14+4], w1
    3a88:	da ec 07    	rcall     0x143e <___mulsf3>
    3a8a:	00 02 be    	mov.d     w0, w4
    3a8c:	04 00 be    	mov.d     w4, w0
    3a8e:	67 ec 07    	rcall     0x135e <___fixunssfsi>
    3a90:	00 02 be    	mov.d     w0, w4
    3a92:	04 02 78    	mov.w     w4, w4
    3a94:	04 02 e9    	dec.w     w4, w4
    3a96:	04 0c 78    	mov.w     w4, [w8]
    3a98:	58 00 37    	bra       0x3b4a <.L13>

00003a9a <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    3a9a:	18 c0 b3    	mov.b     #0x1, w8
    3a9c:	d2 7b 23    	mov.w     #0x37bd, w2
    3a9e:	63 d0 23    	mov.w     #0x3d06, w3
    3aa0:	1e 00 90    	mov.w     [w14+2], w0
    3aa2:	ae 00 90    	mov.w     [w14+4], w1
    3aa4:	5a ec 07    	rcall     0x135a <___gesf2>
    3aa6:	00 02 78    	mov.w     w0, w4
    3aa8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3aaa:	01 00 3c    	bra       GT, 0x3aae <.L19>
    3aac:	00 44 eb    	clr.b     w8

00003aae <.L19>:
    3aae:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    3ab0:	15 00 32    	bra       Z, 0x3adc <.L20>

00003ab2 <.LSM54>:
        timer_stop(self);
    3ab2:	1e 00 78    	mov.w     [w14], w0
    3ab4:	c1 00 07    	rcall     0x3c38 <_timer_stop>

00003ab6 <.LSM55>:
        poke(self->TxCON, 0x0020);
    3ab6:	1e 02 78    	mov.w     [w14], w4
    3ab8:	14 02 78    	mov.w     [w4], w4
    3aba:	05 02 20    	mov.w     #0x20, w5
    3abc:	05 0a 78    	mov.w     w5, [w4]

00003abe <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    3abe:	1e 02 78    	mov.w     [w14], w4
    3ac0:	14 04 90    	mov.w     [w4+2], w8
    3ac2:	02 40 22    	mov.w     #0x2400, w2
    3ac4:	43 87 24    	mov.w     #0x4874, w3
    3ac6:	1e 00 90    	mov.w     [w14+2], w0
    3ac8:	ae 00 90    	mov.w     [w14+4], w1
    3aca:	b9 ec 07    	rcall     0x143e <___mulsf3>
    3acc:	00 02 be    	mov.d     w0, w4
    3ace:	04 00 be    	mov.d     w4, w0
    3ad0:	46 ec 07    	rcall     0x135e <___fixunssfsi>
    3ad2:	00 02 be    	mov.d     w0, w4
    3ad4:	04 02 78    	mov.w     w4, w4
    3ad6:	04 02 e9    	dec.w     w4, w4
    3ad8:	04 0c 78    	mov.w     w4, [w8]
    3ada:	37 00 37    	bra       0x3b4a <.L13>

00003adc <.L20>:
    } else if (period>(65536.*TCY)) {
    3adc:	18 c0 b3    	mov.b     #0x1, w8
    3ade:	d2 7b 23    	mov.w     #0x37bd, w2
    3ae0:	63 b8 23    	mov.w     #0x3b86, w3
    3ae2:	1e 00 90    	mov.w     [w14+2], w0
    3ae4:	ae 00 90    	mov.w     [w14+4], w1
    3ae6:	39 ec 07    	rcall     0x135a <___gesf2>
    3ae8:	00 02 78    	mov.w     w0, w4
    3aea:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3aec:	01 00 3c    	bra       GT, 0x3af0 <.L21>
    3aee:	00 44 eb    	clr.b     w8

00003af0 <.L21>:
    3af0:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    3af2:	15 00 32    	bra       Z, 0x3b1e <.L22>

00003af4 <.LSM58>:
        timer_stop(self);
    3af4:	1e 00 78    	mov.w     [w14], w0
    3af6:	a0 00 07    	rcall     0x3c38 <_timer_stop>

00003af8 <.LSM59>:
        poke(self->TxCON, 0x0010);
    3af8:	1e 02 78    	mov.w     [w14], w4
    3afa:	14 02 78    	mov.w     [w4], w4
    3afc:	05 01 20    	mov.w     #0x10, w5
    3afe:	05 0a 78    	mov.w     w5, [w4]

00003b00 <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3b00:	1e 02 78    	mov.w     [w14], w4
    3b02:	14 04 90    	mov.w     [w4+2], w8
    3b04:	02 40 22    	mov.w     #0x2400, w2
    3b06:	43 9f 24    	mov.w     #0x49f4, w3
    3b08:	1e 00 90    	mov.w     [w14+2], w0
    3b0a:	ae 00 90    	mov.w     [w14+4], w1
    3b0c:	98 ec 07    	rcall     0x143e <___mulsf3>
    3b0e:	00 02 be    	mov.d     w0, w4
    3b10:	04 00 be    	mov.d     w4, w0
    3b12:	25 ec 07    	rcall     0x135e <___fixunssfsi>
    3b14:	00 02 be    	mov.d     w0, w4
    3b16:	04 02 78    	mov.w     w4, w4
    3b18:	04 02 e9    	dec.w     w4, w4
    3b1a:	04 0c 78    	mov.w     w4, [w8]
    3b1c:	16 00 37    	bra       0x3b4a <.L13>

00003b1e <.L22>:
    } else {
        timer_stop(self);
    3b1e:	1e 00 78    	mov.w     [w14], w0
    3b20:	8b 00 07    	rcall     0x3c38 <_timer_stop>

00003b22 <.LSM62>:
        poke(self->TxCON, 0x0000);
    3b22:	1e 02 78    	mov.w     [w14], w4
    3b24:	14 02 78    	mov.w     [w4], w4
    3b26:	80 02 eb    	clr.w     w5
    3b28:	05 0a 78    	mov.w     w5, [w4]

00003b2a <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    3b2a:	1e 02 78    	mov.w     [w14], w4
    3b2c:	14 04 90    	mov.w     [w4+2], w8
    3b2e:	02 40 22    	mov.w     #0x2400, w2
    3b30:	43 b7 24    	mov.w     #0x4b74, w3
    3b32:	1e 00 90    	mov.w     [w14+2], w0
    3b34:	ae 00 90    	mov.w     [w14+4], w1
    3b36:	83 ec 07    	rcall     0x143e <___mulsf3>
    3b38:	00 02 be    	mov.d     w0, w4
    3b3a:	04 00 be    	mov.d     w4, w0
    3b3c:	10 ec 07    	rcall     0x135e <___fixunssfsi>
    3b3e:	00 02 be    	mov.d     w0, w4
    3b40:	04 02 78    	mov.w     w4, w4
    3b42:	04 02 e9    	dec.w     w4, w4
    3b44:	04 0c 78    	mov.w     w4, [w8]
    3b46:	01 00 37    	bra       0x3b4a <.L13>

00003b48 <.L23>:
    3b48:	00 00 00    	nop       

00003b4a <.L13>:
    }
}
    3b4a:	4f 04 78    	mov.w     [--w15], w8
    3b4c:	00 80 fa    	ulnk      
    3b4e:	00 00 06    	return    

00003b50 <_timer_period>:

float timer_period(_TIMER *self) {
    3b50:	04 00 fa    	lnk       #0x4
    3b52:	88 9f be    	mov.d     w8, [w15++]
    3b54:	10 07 98    	mov.w     w0, [w14+2]

00003b56 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3b56:	1e 02 90    	mov.w     [w14+2], w4
    3b58:	14 02 78    	mov.w     [w4], w4
    3b5a:	94 02 78    	mov.w     [w4], w5
    3b5c:	04 03 20    	mov.w     #0x30, w4
    3b5e:	04 82 62    	and.w     w5, w4, w4
    3b60:	44 22 de    	lsr.w     w4, #0x4, w4
    3b62:	04 0f 78    	mov.w     w4, [w14]

00003b64 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3b64:	1e 02 78    	mov.w     [w14], w4
    3b66:	c2 22 dd    	sl.w      w4, #0x2, w5
    3b68:	84 cd 20    	mov.w     #0xcd8, w4
    3b6a:	04 82 42    	add.w     w5, w4, w4
    3b6c:	14 04 be    	mov.d     [w4], w8
    3b6e:	1e 02 90    	mov.w     [w14+2], w4
    3b70:	14 02 90    	mov.w     [w4+2], w4
    3b72:	14 02 78    	mov.w     [w4], w4
    3b74:	05 00 20    	mov.w     #0x0, w5
    3b76:	04 00 be    	mov.d     w4, w0
    3b78:	0d ec 07    	rcall     0x1394 <___floatunsisf>
    3b7a:	00 02 be    	mov.d     w0, w4
    3b7c:	02 00 20    	mov.w     #0x0, w2
    3b7e:	03 f8 23    	mov.w     #0x3f80, w3
    3b80:	04 00 be    	mov.d     w4, w0
    3b82:	4a eb 07    	rcall     0x1218 <___addsf3>
    3b84:	00 02 be    	mov.d     w0, w4
    3b86:	04 01 be    	mov.d     w4, w2
    3b88:	08 00 be    	mov.d     w8, w0
    3b8a:	59 ec 07    	rcall     0x143e <___mulsf3>
    3b8c:	00 02 be    	mov.d     w0, w4

00003b8e <.LSM69>:
}
    3b8e:	04 00 be    	mov.d     w4, w0
    3b90:	4f 04 be    	mov.d     [--w15], w8
    3b92:	00 80 fa    	ulnk      
    3b94:	00 00 06    	return    

00003b96 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    3b96:	06 00 fa    	lnk       #0x6
    3b98:	00 0f 78    	mov.w     w0, [w14]
    3b9a:	12 07 98    	mov.w     w2, [w14+2]
    3b9c:	23 07 98    	mov.w     w3, [w14+4]

00003b9e <.LSM71>:
    timer_setPeriod(self, 1./freq);
    3b9e:	1e 01 90    	mov.w     [w14+2], w2
    3ba0:	ae 01 90    	mov.w     [w14+4], w3
    3ba2:	00 00 20    	mov.w     #0x0, w0
    3ba4:	01 f8 23    	mov.w     #0x3f80, w1
    3ba6:	95 eb 07    	rcall     0x12d2 <___divsf3>
    3ba8:	00 02 be    	mov.d     w0, w4
    3baa:	04 01 be    	mov.d     w4, w2
    3bac:	1e 00 78    	mov.w     [w14], w0
    3bae:	43 ff 07    	rcall     0x3a36 <_timer_setPeriod>

00003bb0 <.LSM72>:
}
    3bb0:	00 80 fa    	ulnk      
    3bb2:	00 00 06    	return    

00003bb4 <_timer_freq>:

float timer_freq(_TIMER *self) {
    3bb4:	02 00 fa    	lnk       #0x2
    3bb6:	00 0f 78    	mov.w     w0, [w14]

00003bb8 <.LSM74>:
    return 1./timer_period(self);
    3bb8:	1e 00 78    	mov.w     [w14], w0
    3bba:	ca ff 07    	rcall     0x3b50 <_timer_period>
    3bbc:	00 02 be    	mov.d     w0, w4
    3bbe:	04 01 be    	mov.d     w4, w2
    3bc0:	00 00 20    	mov.w     #0x0, w0
    3bc2:	01 f8 23    	mov.w     #0x3f80, w1
    3bc4:	86 eb 07    	rcall     0x12d2 <___divsf3>
    3bc6:	00 02 be    	mov.d     w0, w4

00003bc8 <.LSM75>:
}
    3bc8:	04 00 be    	mov.d     w4, w0
    3bca:	00 80 fa    	ulnk      
    3bcc:	00 00 06    	return    

00003bce <_timer_time>:

float timer_time(_TIMER *self) {
    3bce:	04 00 fa    	lnk       #0x4
    3bd0:	88 9f be    	mov.d     w8, [w15++]
    3bd2:	10 07 98    	mov.w     w0, [w14+2]

00003bd4 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3bd4:	1e 02 90    	mov.w     [w14+2], w4
    3bd6:	14 02 78    	mov.w     [w4], w4
    3bd8:	94 02 78    	mov.w     [w4], w5
    3bda:	04 03 20    	mov.w     #0x30, w4
    3bdc:	04 82 62    	and.w     w5, w4, w4
    3bde:	44 22 de    	lsr.w     w4, #0x4, w4
    3be0:	04 0f 78    	mov.w     w4, [w14]

00003be2 <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3be2:	1e 02 78    	mov.w     [w14], w4
    3be4:	c2 22 dd    	sl.w      w4, #0x2, w5
    3be6:	84 cd 20    	mov.w     #0xcd8, w4
    3be8:	04 82 42    	add.w     w5, w4, w4
    3bea:	14 04 be    	mov.d     [w4], w8
    3bec:	1e 02 90    	mov.w     [w14+2], w4
    3bee:	14 02 90    	mov.w     [w4+2], w4
    3bf0:	14 02 78    	mov.w     [w4], w4
    3bf2:	05 00 20    	mov.w     #0x0, w5
    3bf4:	04 00 be    	mov.d     w4, w0
    3bf6:	ce eb 07    	rcall     0x1394 <___floatunsisf>
    3bf8:	00 02 be    	mov.d     w0, w4
    3bfa:	02 00 20    	mov.w     #0x0, w2
    3bfc:	03 f8 23    	mov.w     #0x3f80, w3
    3bfe:	04 00 be    	mov.d     w4, w0
    3c00:	0b eb 07    	rcall     0x1218 <___addsf3>
    3c02:	00 02 be    	mov.d     w0, w4
    3c04:	04 01 be    	mov.d     w4, w2
    3c06:	08 00 be    	mov.d     w8, w0
    3c08:	1a ec 07    	rcall     0x143e <___mulsf3>
    3c0a:	00 02 be    	mov.d     w0, w4

00003c0c <.LSM79>:
}
    3c0c:	04 00 be    	mov.d     w4, w0
    3c0e:	4f 04 be    	mov.d     [--w15], w8
    3c10:	00 80 fa    	ulnk      
    3c12:	00 00 06    	return    

00003c14 <_timer_start>:

void timer_start(_TIMER *self) {
    3c14:	02 00 fa    	lnk       #0x2
    3c16:	00 0f 78    	mov.w     w0, [w14]

00003c18 <.LSM81>:
    timer_lower(self);
    3c18:	1e 00 78    	mov.w     [w14], w0
    3c1a:	2c 00 07    	rcall     0x3c74 <_timer_lower>

00003c1c <.LSM82>:
    poke(self->TMRx, 0);
    3c1c:	1e 02 78    	mov.w     [w14], w4
    3c1e:	24 02 90    	mov.w     [w4+4], w4
    3c20:	80 02 eb    	clr.w     w5
    3c22:	05 0a 78    	mov.w     w5, [w4]

00003c24 <.LSM83>:
    bitset(self->TxCON, 15);
    3c24:	1e 02 78    	mov.w     [w14], w4
    3c26:	14 02 78    	mov.w     [w4], w4
    3c28:	9e 02 78    	mov.w     [w14], w5
    3c2a:	95 02 78    	mov.w     [w5], w5
    3c2c:	15 03 78    	mov.w     [w5], w6
    3c2e:	05 00 28    	mov.w     #0x8000, w5
    3c30:	86 82 72    	ior.w     w5, w6, w5
    3c32:	05 0a 78    	mov.w     w5, [w4]

00003c34 <.LSM84>:
}
    3c34:	00 80 fa    	ulnk      
    3c36:	00 00 06    	return    

00003c38 <_timer_stop>:

void timer_stop(_TIMER *self) {
    3c38:	02 00 fa    	lnk       #0x2
    3c3a:	00 0f 78    	mov.w     w0, [w14]

00003c3c <.LSM86>:
    bitclear(self->TxCON, 15);
    3c3c:	1e 02 78    	mov.w     [w14], w4
    3c3e:	14 02 78    	mov.w     [w4], w4
    3c40:	9e 02 78    	mov.w     [w14], w5
    3c42:	95 02 78    	mov.w     [w5], w5
    3c44:	15 03 78    	mov.w     [w5], w6
    3c46:	f5 ff 27    	mov.w     #0x7fff, w5
    3c48:	85 02 63    	and.w     w6, w5, w5
    3c4a:	05 0a 78    	mov.w     w5, [w4]

00003c4c <.LSM87>:
}
    3c4c:	00 80 fa    	ulnk      
    3c4e:	00 00 06    	return    

00003c50 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    3c50:	02 00 fa    	lnk       #0x2
    3c52:	00 0f 78    	mov.w     w0, [w14]

00003c54 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3c54:	1e 02 78    	mov.w     [w14], w4
    3c56:	34 02 90    	mov.w     [w4+6], w4
    3c58:	94 02 78    	mov.w     [w4], w5
    3c5a:	1e 02 78    	mov.w     [w14], w4
    3c5c:	24 4a 90    	mov.b     [w4+10], w4
    3c5e:	04 82 fb    	ze        w4, w4
    3c60:	16 00 20    	mov.w     #0x1, w6
    3c62:	04 32 dd    	sl.w      w6, w4, w4
    3c64:	04 82 62    	and.w     w5, w4, w4
    3c66:	04 f0 a7    	btsc.w    w4, #0xf
    3c68:	04 02 ea    	neg.w     w4, w4
    3c6a:	04 02 ea    	neg.w     w4, w4
    3c6c:	4f 22 de    	lsr.w     w4, #0xf, w4

00003c6e <.LSM90>:
}
    3c6e:	04 00 78    	mov.w     w4, w0
    3c70:	00 80 fa    	ulnk      
    3c72:	00 00 06    	return    

00003c74 <_timer_lower>:

void timer_lower(_TIMER *self) {
    3c74:	02 00 fa    	lnk       #0x2
    3c76:	00 0f 78    	mov.w     w0, [w14]

00003c78 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3c78:	1e 02 78    	mov.w     [w14], w4
    3c7a:	34 02 90    	mov.w     [w4+6], w4
    3c7c:	9e 02 78    	mov.w     [w14], w5
    3c7e:	b5 02 90    	mov.w     [w5+6], w5
    3c80:	15 03 78    	mov.w     [w5], w6
    3c82:	9e 02 78    	mov.w     [w14], w5
    3c84:	a5 4a 90    	mov.b     [w5+10], w5
    3c86:	85 82 fb    	ze        w5, w5
    3c88:	17 00 20    	mov.w     #0x1, w7
    3c8a:	85 3a dd    	sl.w      w7, w5, w5
    3c8c:	85 82 ea    	com.w     w5, w5
    3c8e:	85 02 63    	and.w     w6, w5, w5
    3c90:	05 0a 78    	mov.w     w5, [w4]

00003c92 <.LSM93>:
}
    3c92:	00 80 fa    	ulnk      
    3c94:	00 00 06    	return    

00003c96 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3c96:	02 00 fa    	lnk       #0x2
    3c98:	00 0f 78    	mov.w     w0, [w14]

00003c9a <.LSM95>:
    return peek(self->TMRx);
    3c9a:	1e 02 78    	mov.w     [w14], w4
    3c9c:	24 02 90    	mov.w     [w4+4], w4
    3c9e:	14 02 78    	mov.w     [w4], w4

00003ca0 <.LSM96>:
}
    3ca0:	04 00 78    	mov.w     w4, w0
    3ca2:	00 80 fa    	ulnk      
    3ca4:	00 00 06    	return    

00003ca6 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    3ca6:	02 00 fa    	lnk       #0x2
    3ca8:	00 0f 78    	mov.w     w0, [w14]

00003caa <.LSM98>:
    bitset(self->IECy, self->flagbit);
    3caa:	1e 02 78    	mov.w     [w14], w4
    3cac:	44 02 90    	mov.w     [w4+8], w4
    3cae:	9e 02 78    	mov.w     [w14], w5
    3cb0:	c5 02 90    	mov.w     [w5+8], w5
    3cb2:	15 03 78    	mov.w     [w5], w6
    3cb4:	9e 02 78    	mov.w     [w14], w5
    3cb6:	a5 4a 90    	mov.b     [w5+10], w5
    3cb8:	85 82 fb    	ze        w5, w5
    3cba:	17 00 20    	mov.w     #0x1, w7
    3cbc:	85 3a dd    	sl.w      w7, w5, w5
    3cbe:	86 82 72    	ior.w     w5, w6, w5
    3cc0:	05 0a 78    	mov.w     w5, [w4]

00003cc2 <.LSM99>:
}
    3cc2:	00 80 fa    	ulnk      
    3cc4:	00 00 06    	return    

00003cc6 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3cc6:	02 00 fa    	lnk       #0x2
    3cc8:	00 0f 78    	mov.w     w0, [w14]

00003cca <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    3cca:	1e 02 78    	mov.w     [w14], w4
    3ccc:	44 02 90    	mov.w     [w4+8], w4
    3cce:	9e 02 78    	mov.w     [w14], w5
    3cd0:	c5 02 90    	mov.w     [w5+8], w5
    3cd2:	15 03 78    	mov.w     [w5], w6
    3cd4:	9e 02 78    	mov.w     [w14], w5
    3cd6:	a5 4a 90    	mov.b     [w5+10], w5
    3cd8:	85 82 fb    	ze        w5, w5
    3cda:	17 00 20    	mov.w     #0x1, w7
    3cdc:	85 3a dd    	sl.w      w7, w5, w5
    3cde:	85 82 ea    	com.w     w5, w5
    3ce0:	85 02 63    	and.w     w6, w5, w5
    3ce2:	05 0a 78    	mov.w     w5, [w4]

00003ce4 <.LSM102>:
}
    3ce4:	00 80 fa    	ulnk      
    3ce6:	00 00 06    	return    

00003ce8 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3ce8:	08 00 fa    	lnk       #0x8
    3cea:	00 0f 78    	mov.w     w0, [w14]
    3cec:	12 07 98    	mov.w     w2, [w14+2]
    3cee:	23 07 98    	mov.w     w3, [w14+4]
    3cf0:	31 07 98    	mov.w     w1, [w14+6]

00003cf2 <.LSM104>:
    timer_disableInterrupt(self);
    3cf2:	1e 00 78    	mov.w     [w14], w0
    3cf4:	e8 ff 07    	rcall     0x3cc6 <_timer_disableInterrupt>

00003cf6 <.LSM105>:
    timer_setPeriod(self, interval);
    3cf6:	1e 01 90    	mov.w     [w14+2], w2
    3cf8:	ae 01 90    	mov.w     [w14+4], w3
    3cfa:	1e 00 78    	mov.w     [w14], w0
    3cfc:	9c fe 07    	rcall     0x3a36 <_timer_setPeriod>

00003cfe <.LSM106>:
    self->aftercount = 0;
    3cfe:	1e 02 78    	mov.w     [w14], w4
    3d00:	80 02 eb    	clr.w     w5
    3d02:	05 0a 98    	mov.w     w5, [w4+16]

00003d04 <.LSM107>:
    self->every = callback;
    3d04:	1e 02 78    	mov.w     [w14], w4
    3d06:	be 02 90    	mov.w     [w14+6], w5
    3d08:	15 0a 98    	mov.w     w5, [w4+18]

00003d0a <.LSM108>:
    self->after = NULL;
    3d0a:	1e 02 78    	mov.w     [w14], w4
    3d0c:	80 02 eb    	clr.w     w5
    3d0e:	25 0a 98    	mov.w     w5, [w4+20]

00003d10 <.LSM109>:
    timer_enableInterrupt(self);
    3d10:	1e 00 78    	mov.w     [w14], w0
    3d12:	c9 ff 07    	rcall     0x3ca6 <_timer_enableInterrupt>

00003d14 <.LSM110>:
    timer_start(self);
    3d14:	1e 00 78    	mov.w     [w14], w0
    3d16:	7e ff 07    	rcall     0x3c14 <_timer_start>

00003d18 <.LSM111>:
}
    3d18:	00 80 fa    	ulnk      
    3d1a:	00 00 06    	return    

00003d1c <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3d1c:	0a 00 fa    	lnk       #0xa
    3d1e:	00 0f 78    	mov.w     w0, [w14]
    3d20:	12 07 98    	mov.w     w2, [w14+2]
    3d22:	23 07 98    	mov.w     w3, [w14+4]
    3d24:	31 07 98    	mov.w     w1, [w14+6]
    3d26:	44 07 98    	mov.w     w4, [w14+8]

00003d28 <.LSM113>:
    timer_disableInterrupt(self);
    3d28:	1e 00 78    	mov.w     [w14], w0
    3d2a:	cd ff 07    	rcall     0x3cc6 <_timer_disableInterrupt>

00003d2c <.LSM114>:
    timer_setPeriod(self, delay);
    3d2c:	1e 01 90    	mov.w     [w14+2], w2
    3d2e:	ae 01 90    	mov.w     [w14+4], w3
    3d30:	1e 00 78    	mov.w     [w14], w0
    3d32:	81 fe 07    	rcall     0x3a36 <_timer_setPeriod>

00003d34 <.LSM115>:
    self->aftercount = num_times;
    3d34:	1e 02 78    	mov.w     [w14], w4
    3d36:	be 02 90    	mov.w     [w14+6], w5
    3d38:	05 0a 98    	mov.w     w5, [w4+16]

00003d3a <.LSM116>:
    self->every = NULL;
    3d3a:	1e 02 78    	mov.w     [w14], w4
    3d3c:	80 02 eb    	clr.w     w5
    3d3e:	15 0a 98    	mov.w     w5, [w4+18]

00003d40 <.LSM117>:
    self->after = callback;
    3d40:	1e 02 78    	mov.w     [w14], w4
    3d42:	ce 02 90    	mov.w     [w14+8], w5
    3d44:	25 0a 98    	mov.w     w5, [w4+20]

00003d46 <.LSM118>:
    timer_enableInterrupt(self);
    3d46:	1e 00 78    	mov.w     [w14], w0
    3d48:	ae ff 07    	rcall     0x3ca6 <_timer_enableInterrupt>

00003d4a <.LSM119>:
    timer_start(self);
    3d4a:	1e 00 78    	mov.w     [w14], w0
    3d4c:	63 ff 07    	rcall     0x3c14 <_timer_start>

00003d4e <.LSM120>:
}
    3d4e:	00 80 fa    	ulnk      
    3d50:	00 00 06    	return    

00003d52 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    3d52:	02 00 fa    	lnk       #0x2
    3d54:	00 0f 78    	mov.w     w0, [w14]

00003d56 <.LSM122>:
    timer_disableInterrupt(self);
    3d56:	1e 00 78    	mov.w     [w14], w0
    3d58:	b6 ff 07    	rcall     0x3cc6 <_timer_disableInterrupt>

00003d5a <.LSM123>:
    timer_lower(self);
    3d5a:	1e 00 78    	mov.w     [w14], w0
    3d5c:	8b ff 07    	rcall     0x3c74 <_timer_lower>

00003d5e <.LSM124>:
    timer_stop(self);
    3d5e:	1e 00 78    	mov.w     [w14], w0
    3d60:	6b ff 07    	rcall     0x3c38 <_timer_stop>

00003d62 <.LSM125>:
    self->aftercount = 0;
    3d62:	1e 02 78    	mov.w     [w14], w4
    3d64:	80 02 eb    	clr.w     w5
    3d66:	05 0a 98    	mov.w     w5, [w4+16]

00003d68 <.LSM126>:
    self->every = NULL;
    3d68:	1e 02 78    	mov.w     [w14], w4
    3d6a:	80 02 eb    	clr.w     w5
    3d6c:	15 0a 98    	mov.w     w5, [w4+18]

00003d6e <.LSM127>:
    self->after = NULL;
    3d6e:	1e 02 78    	mov.w     [w14], w4
    3d70:	80 02 eb    	clr.w     w5
    3d72:	25 0a 98    	mov.w     w5, [w4+20]

00003d74 <.LSM128>:
}
    3d74:	00 80 fa    	ulnk      
    3d76:	00 00 06    	return    

00003d78 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    3d78:	08 00 fa    	lnk       #0x8
    3d7a:	30 07 98    	mov.w     w0, [w14+6]

00003d7c <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3d7c:	3e 02 90    	mov.w     [w14+6], w4
    3d7e:	04 0a 90    	mov.w     [w4+16], w4
    3d80:	04 0f 78    	mov.w     w4, [w14]

00003d82 <.LSM2>:
    temp.w[0] = 0;
    3d82:	00 02 eb    	clr.w     w4
    3d84:	14 07 98    	mov.w     w4, [w14+2]

00003d86 <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    3d86:	1e 02 78    	mov.w     [w14], w4
    3d88:	34 02 90    	mov.w     [w4+6], w4
    3d8a:	14 02 78    	mov.w     [w4], w4
    3d8c:	24 07 98    	mov.w     w4, [w14+4]

00003d8e <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    3d8e:	1e 03 90    	mov.w     [w14+2], w6
    3d90:	ae 03 90    	mov.w     [w14+4], w7
    3d92:	1e 02 78    	mov.w     [w14], w4
    3d94:	24 02 90    	mov.w     [w4+4], w4
    3d96:	14 02 78    	mov.w     [w4], w4
    3d98:	05 00 20    	mov.w     #0x0, w5
    3d9a:	04 01 be    	mov.d     w4, w2
    3d9c:	06 00 be    	mov.d     w6, w0
    3d9e:	83 eb 07    	rcall     0x14a6 <___udivsi3>
    3da0:	00 02 be    	mov.d     w0, w4
    3da2:	04 02 78    	mov.w     w4, w4

00003da4 <.LSM5>:
}
    3da4:	04 00 78    	mov.w     w4, w0
    3da6:	00 80 fa    	ulnk      
    3da8:	00 00 06    	return    

00003daa <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    3daa:	0a 00 fa    	lnk       #0xa
    3dac:	30 07 98    	mov.w     w0, [w14+6]
    3dae:	41 07 98    	mov.w     w1, [w14+8]

00003db0 <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3db0:	3e 02 90    	mov.w     [w14+6], w4
    3db2:	04 0a 90    	mov.w     [w4+16], w4
    3db4:	04 0f 78    	mov.w     w4, [w14]

00003db6 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    3db6:	4e 02 90    	mov.w     [w14+8], w4
    3db8:	61 23 b8    	mul.uu    w4, #0x1, w6
    3dba:	1e 02 78    	mov.w     [w14], w4
    3dbc:	24 02 90    	mov.w     [w4+4], w4
    3dbe:	14 02 78    	mov.w     [w4], w4
    3dc0:	05 00 20    	mov.w     #0x0, w5
    3dc2:	04 b8 b9    	mul.ss    w7, w4, w0
    3dc4:	00 00 78    	mov.w     w0, w0
    3dc6:	06 a9 b9    	mul.ss    w5, w6, w2
    3dc8:	82 00 78    	mov.w     w2, w1
    3dca:	01 00 40    	add.w     w0, w1, w0
    3dcc:	06 03 78    	mov.w     w6, w6
    3dce:	04 02 78    	mov.w     w4, w4
    3dd0:	04 32 b8    	mul.uu    w6, w4, w4
    3dd2:	05 00 40    	add.w     w0, w5, w0
    3dd4:	80 02 78    	mov.w     w0, w5
    3dd6:	14 07 98    	mov.w     w4, [w14+2]
    3dd8:	25 07 98    	mov.w     w5, [w14+4]

00003dda <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    3dda:	1e 02 78    	mov.w     [w14], w4
    3ddc:	34 02 90    	mov.w     [w4+6], w4
    3dde:	ae 02 90    	mov.w     [w14+4], w5
    3de0:	05 0a 78    	mov.w     w5, [w4]

00003de2 <.LSM10>:
}
    3de2:	00 80 fa    	ulnk      
    3de4:	00 00 06    	return    

00003de6 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    3de6:	08 00 fa    	lnk       #0x8
    3de8:	30 07 98    	mov.w     w0, [w14+6]

00003dea <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3dea:	3e 02 90    	mov.w     [w14+6], w4
    3dec:	04 0a 90    	mov.w     [w4+16], w4
    3dee:	04 0f 78    	mov.w     w4, [w14]

00003df0 <.LSM13>:
    temp.w[0] = 0;
    3df0:	00 02 eb    	clr.w     w4
    3df2:	14 07 98    	mov.w     w4, [w14+2]

00003df4 <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    3df4:	1e 02 78    	mov.w     [w14], w4
    3df6:	24 02 90    	mov.w     [w4+4], w4
    3df8:	94 02 78    	mov.w     [w4], w5
    3dfa:	1e 02 78    	mov.w     [w14], w4
    3dfc:	64 02 90    	mov.w     [w4+12], w4
    3dfe:	04 82 52    	sub.w     w5, w4, w4
    3e00:	24 07 98    	mov.w     w4, [w14+4]

00003e02 <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    3e02:	1e 03 90    	mov.w     [w14+2], w6
    3e04:	ae 03 90    	mov.w     [w14+4], w7
    3e06:	1e 02 78    	mov.w     [w14], w4
    3e08:	74 02 90    	mov.w     [w4+14], w4
    3e0a:	05 00 20    	mov.w     #0x0, w5
    3e0c:	04 01 be    	mov.d     w4, w2
    3e0e:	06 00 be    	mov.d     w6, w0
    3e10:	4a eb 07    	rcall     0x14a6 <___udivsi3>
    3e12:	00 02 be    	mov.d     w0, w4
    3e14:	04 02 78    	mov.w     w4, w4

00003e16 <.LSM16>:
}
    3e16:	04 00 78    	mov.w     w4, w0
    3e18:	00 80 fa    	ulnk      
    3e1a:	00 00 06    	return    

00003e1c <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    3e1c:	0a 00 fa    	lnk       #0xa
    3e1e:	30 07 98    	mov.w     w0, [w14+6]
    3e20:	41 07 98    	mov.w     w1, [w14+8]

00003e22 <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3e22:	3e 02 90    	mov.w     [w14+6], w4
    3e24:	04 0a 90    	mov.w     [w4+16], w4
    3e26:	04 0f 78    	mov.w     w4, [w14]

00003e28 <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    3e28:	4e 02 90    	mov.w     [w14+8], w4
    3e2a:	61 23 b8    	mul.uu    w4, #0x1, w6
    3e2c:	1e 02 78    	mov.w     [w14], w4
    3e2e:	74 02 90    	mov.w     [w4+14], w4
    3e30:	05 00 20    	mov.w     #0x0, w5
    3e32:	04 b8 b9    	mul.ss    w7, w4, w0
    3e34:	00 00 78    	mov.w     w0, w0
    3e36:	06 a9 b9    	mul.ss    w5, w6, w2
    3e38:	82 00 78    	mov.w     w2, w1
    3e3a:	01 00 40    	add.w     w0, w1, w0
    3e3c:	06 03 78    	mov.w     w6, w6
    3e3e:	04 02 78    	mov.w     w4, w4
    3e40:	04 32 b8    	mul.uu    w6, w4, w4
    3e42:	05 00 40    	add.w     w0, w5, w0
    3e44:	80 02 78    	mov.w     w0, w5
    3e46:	14 07 98    	mov.w     w4, [w14+2]
    3e48:	25 07 98    	mov.w     w5, [w14+4]

00003e4a <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    3e4a:	1e 02 78    	mov.w     [w14], w4
    3e4c:	24 02 90    	mov.w     [w4+4], w4
    3e4e:	9e 02 78    	mov.w     [w14], w5
    3e50:	65 03 90    	mov.w     [w5+12], w6
    3e52:	ae 02 90    	mov.w     [w14+4], w5
    3e54:	85 02 43    	add.w     w6, w5, w5
    3e56:	05 0a 78    	mov.w     w5, [w4]

00003e58 <.LSM21>:
}
    3e58:	00 80 fa    	ulnk      
    3e5a:	00 00 06    	return    

00003e5c <_init_oc>:

void init_oc(void) {
    3e5c:	00 00 fa    	lnk       #0x0

00003e5e <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    3e5e:	26 01 20    	mov.w     #0x12, w6
    3e60:	85 19 20    	mov.w     #0x198, w5
    3e62:	64 19 20    	mov.w     #0x196, w4
    3e64:	43 19 20    	mov.w     #0x194, w3
    3e66:	22 19 20    	mov.w     #0x192, w2
    3e68:	01 19 20    	mov.w     #0x190, w1
    3e6a:	80 ad 20    	mov.w     #0xad8, w0
    3e6c:	42 00 07    	rcall     0x3ef2 <_oc_init>

00003e6e <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    3e6e:	36 01 20    	mov.w     #0x13, w6
    3e70:	25 1a 20    	mov.w     #0x1a2, w5
    3e72:	04 1a 20    	mov.w     #0x1a0, w4
    3e74:	e3 19 20    	mov.w     #0x19e, w3
    3e76:	c2 19 20    	mov.w     #0x19c, w2
    3e78:	a1 19 20    	mov.w     #0x19a, w1
    3e7a:	a0 ae 20    	mov.w     #0xaea, w0
    3e7c:	3a 00 07    	rcall     0x3ef2 <_oc_init>

00003e7e <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    3e7e:	46 01 20    	mov.w     #0x14, w6
    3e80:	c5 1a 20    	mov.w     #0x1ac, w5
    3e82:	a4 1a 20    	mov.w     #0x1aa, w4
    3e84:	83 1a 20    	mov.w     #0x1a8, w3
    3e86:	62 1a 20    	mov.w     #0x1a6, w2
    3e88:	41 1a 20    	mov.w     #0x1a4, w1
    3e8a:	c0 af 20    	mov.w     #0xafc, w0
    3e8c:	32 00 07    	rcall     0x3ef2 <_oc_init>

00003e8e <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    3e8e:	56 01 20    	mov.w     #0x15, w6
    3e90:	65 1b 20    	mov.w     #0x1b6, w5
    3e92:	44 1b 20    	mov.w     #0x1b4, w4
    3e94:	23 1b 20    	mov.w     #0x1b2, w3
    3e96:	02 1b 20    	mov.w     #0x1b0, w2
    3e98:	e1 1a 20    	mov.w     #0x1ae, w1
    3e9a:	e0 b0 20    	mov.w     #0xb0e, w0
    3e9c:	2a 00 07    	rcall     0x3ef2 <_oc_init>

00003e9e <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    3e9e:	66 01 20    	mov.w     #0x16, w6
    3ea0:	05 1c 20    	mov.w     #0x1c0, w5
    3ea2:	e4 1b 20    	mov.w     #0x1be, w4
    3ea4:	c3 1b 20    	mov.w     #0x1bc, w3
    3ea6:	a2 1b 20    	mov.w     #0x1ba, w2
    3ea8:	81 1b 20    	mov.w     #0x1b8, w1
    3eaa:	00 b2 20    	mov.w     #0xb20, w0
    3eac:	22 00 07    	rcall     0x3ef2 <_oc_init>

00003eae <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    3eae:	76 01 20    	mov.w     #0x17, w6
    3eb0:	a5 1c 20    	mov.w     #0x1ca, w5
    3eb2:	84 1c 20    	mov.w     #0x1c8, w4
    3eb4:	63 1c 20    	mov.w     #0x1c6, w3
    3eb6:	42 1c 20    	mov.w     #0x1c4, w2
    3eb8:	21 1c 20    	mov.w     #0x1c2, w1
    3eba:	20 b3 20    	mov.w     #0xb32, w0
    3ebc:	1a 00 07    	rcall     0x3ef2 <_oc_init>

00003ebe <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    3ebe:	86 01 20    	mov.w     #0x18, w6
    3ec0:	45 1d 20    	mov.w     #0x1d4, w5
    3ec2:	24 1d 20    	mov.w     #0x1d2, w4
    3ec4:	03 1d 20    	mov.w     #0x1d0, w3
    3ec6:	e2 1c 20    	mov.w     #0x1ce, w2
    3ec8:	c1 1c 20    	mov.w     #0x1cc, w1
    3eca:	40 b4 20    	mov.w     #0xb44, w0
    3ecc:	12 00 07    	rcall     0x3ef2 <_oc_init>

00003ece <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    3ece:	96 01 20    	mov.w     #0x19, w6
    3ed0:	e5 1d 20    	mov.w     #0x1de, w5
    3ed2:	c4 1d 20    	mov.w     #0x1dc, w4
    3ed4:	a3 1d 20    	mov.w     #0x1da, w3
    3ed6:	82 1d 20    	mov.w     #0x1d8, w2
    3ed8:	61 1d 20    	mov.w     #0x1d6, w1
    3eda:	60 b5 20    	mov.w     #0xb56, w0
    3edc:	0a 00 07    	rcall     0x3ef2 <_oc_init>

00003ede <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    3ede:	36 02 20    	mov.w     #0x23, w6
    3ee0:	85 1e 20    	mov.w     #0x1e8, w5
    3ee2:	64 1e 20    	mov.w     #0x1e6, w4
    3ee4:	43 1e 20    	mov.w     #0x1e4, w3
    3ee6:	22 1e 20    	mov.w     #0x1e2, w2
    3ee8:	01 1e 20    	mov.w     #0x1e0, w1
    3eea:	80 b6 20    	mov.w     #0xb68, w0
    3eec:	02 00 07    	rcall     0x3ef2 <_oc_init>

00003eee <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    3eee:	00 80 fa    	ulnk      
    3ef0:	00 00 06    	return    

00003ef2 <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    3ef2:	0e 00 fa    	lnk       #0xe
    3ef4:	00 0f 78    	mov.w     w0, [w14]
    3ef6:	11 07 98    	mov.w     w1, [w14+2]
    3ef8:	22 07 98    	mov.w     w2, [w14+4]
    3efa:	33 07 98    	mov.w     w3, [w14+6]
    3efc:	44 07 98    	mov.w     w4, [w14+8]
    3efe:	55 07 98    	mov.w     w5, [w14+10]
    3f00:	66 07 98    	mov.w     w6, [w14+12]

00003f02 <.LSM34>:
    self->OCxCON1 = OCxCON1;
    3f02:	1e 02 78    	mov.w     [w14], w4
    3f04:	9e 02 90    	mov.w     [w14+2], w5
    3f06:	05 0a 78    	mov.w     w5, [w4]

00003f08 <.LSM35>:
    self->OCxCON2 = OCxCON2;
    3f08:	1e 02 78    	mov.w     [w14], w4
    3f0a:	ae 02 90    	mov.w     [w14+4], w5
    3f0c:	15 02 98    	mov.w     w5, [w4+2]

00003f0e <.LSM36>:
    self->OCxRS = OCxRS;
    3f0e:	1e 02 78    	mov.w     [w14], w4
    3f10:	be 02 90    	mov.w     [w14+6], w5
    3f12:	25 02 98    	mov.w     w5, [w4+4]

00003f14 <.LSM37>:
    self->OCxR = OCxR;
    3f14:	1e 02 78    	mov.w     [w14], w4
    3f16:	ce 02 90    	mov.w     [w14+8], w5
    3f18:	35 02 98    	mov.w     w5, [w4+6]

00003f1a <.LSM38>:
    self->OCxTMR = OCxTMR;
    3f1a:	1e 02 78    	mov.w     [w14], w4
    3f1c:	de 02 90    	mov.w     [w14+10], w5
    3f1e:	45 02 98    	mov.w     w5, [w4+8]

00003f20 <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    3f20:	1e 02 78    	mov.w     [w14], w4
    3f22:	05 e8 23    	mov.w     #0x3e80, w5
    3f24:	65 02 98    	mov.w     w5, [w4+12]

00003f26 <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    3f26:	1e 02 78    	mov.w     [w14], w4
    3f28:	05 e8 23    	mov.w     #0x3e80, w5
    3f2a:	75 02 98    	mov.w     w5, [w4+14]

00003f2c <.LSM41>:
    self->rpnum = rpnum;
    3f2c:	1e 02 78    	mov.w     [w14], w4
    3f2e:	ee 02 90    	mov.w     [w14+12], w5
    3f30:	55 02 98    	mov.w     w5, [w4+10]

00003f32 <.LSM42>:
    self->pin = NULL;
    3f32:	1e 02 78    	mov.w     [w14], w4
    3f34:	80 02 eb    	clr.w     w5
    3f36:	05 0a 98    	mov.w     w5, [w4+16]

00003f38 <.LSM43>:
}
    3f38:	00 80 fa    	ulnk      
    3f3a:	00 00 06    	return    

00003f3c <_oc_free>:

void oc_free(_OC *self) {
    3f3c:	02 00 fa    	lnk       #0x2
    3f3e:	00 0f 78    	mov.w     w0, [w14]

00003f40 <.LSM45>:
    *(self->OCxCON1) = 0;
    3f40:	1e 02 78    	mov.w     [w14], w4
    3f42:	14 02 78    	mov.w     [w4], w4
    3f44:	80 02 eb    	clr.w     w5
    3f46:	05 0a 78    	mov.w     w5, [w4]

00003f48 <.LSM46>:
    *(self->OCxCON2) = 0;
    3f48:	1e 02 78    	mov.w     [w14], w4
    3f4a:	14 02 90    	mov.w     [w4+2], w4
    3f4c:	80 02 eb    	clr.w     w5
    3f4e:	05 0a 78    	mov.w     w5, [w4]

00003f50 <.LSM47>:
    if (self->pin) {
    3f50:	1e 02 78    	mov.w     [w14], w4
    3f52:	04 0a 90    	mov.w     [w4+16], w4
    3f54:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3f56:	31 00 32    	bra       Z, 0x3fba <.L7>

00003f58 <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3f58:	15 3a 80    	mov.w     0x742, w5
    3f5a:	f4 0b 20    	mov.w     #0xbf, w4
    3f5c:	04 83 62    	and.w     w5, w4, w6
    3f5e:	64 04 20    	mov.w     #0x46, w4
    3f60:	75 05 20    	mov.w     #0x57, w5
    3f62:	27 74 20    	mov.w     #0x742, w7
    3f64:	84 4b 78    	mov.b     w4, [w7]
    3f66:	85 4b 78    	mov.b     w5, [w7]
    3f68:	86 4b 78    	mov.b     w6, [w7]

00003f6a <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    3f6a:	1e 02 78    	mov.w     [w14], w4
    3f6c:	04 0a 90    	mov.w     [w4+16], w4
    3f6e:	74 02 90    	mov.w     [w4+14], w4
    3f70:	9e 02 78    	mov.w     [w14], w5
    3f72:	85 0a 90    	mov.w     [w5+16], w5
    3f74:	f5 02 90    	mov.w     [w5+14], w5
    3f76:	15 03 78    	mov.w     [w5], w6
    3f78:	9e 02 78    	mov.w     [w14], w5
    3f7a:	85 0a 90    	mov.w     [w5+16], w5
    3f7c:	a5 4a 90    	mov.b     [w5+10], w5
    3f7e:	85 82 fb    	ze        w5, w5
    3f80:	f7 03 20    	mov.w     #0x3f, w7
    3f82:	85 3a dd    	sl.w      w7, w5, w5
    3f84:	85 82 ea    	com.w     w5, w5
    3f86:	85 02 63    	and.w     w6, w5, w5
    3f88:	05 0a 78    	mov.w     w5, [w4]

00003f8a <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3f8a:	15 3a 80    	mov.w     0x742, w5
    3f8c:	04 04 20    	mov.w     #0x40, w4
    3f8e:	05 03 72    	ior.w     w4, w5, w6
    3f90:	64 04 20    	mov.w     #0x46, w4
    3f92:	75 05 20    	mov.w     #0x57, w5
    3f94:	27 74 20    	mov.w     #0x742, w7
    3f96:	84 4b 78    	mov.b     w4, [w7]
    3f98:	85 4b 78    	mov.b     w5, [w7]
    3f9a:	86 4b 78    	mov.b     w6, [w7]

00003f9c <.LSM51>:
        self->pin->owner = NULL;
    3f9c:	1e 02 78    	mov.w     [w14], w4
    3f9e:	04 0a 90    	mov.w     [w4+16], w4
    3fa0:	80 02 eb    	clr.w     w5
    3fa2:	05 0a 98    	mov.w     w5, [w4+16]

00003fa4 <.LSM52>:
        pin_digitalOut(self->pin);
    3fa4:	1e 02 78    	mov.w     [w14], w4
    3fa6:	04 0a 90    	mov.w     [w4+16], w4
    3fa8:	04 00 78    	mov.w     w4, w0
    3faa:	10 03 07    	rcall     0x45cc <_pin_digitalOut>

00003fac <.LSM53>:
        pin_clear(self->pin);
    3fac:	1e 02 78    	mov.w     [w14], w4
    3fae:	04 0a 90    	mov.w     [w4+16], w4
    3fb0:	04 00 78    	mov.w     w4, w0
    3fb2:	7e 03 07    	rcall     0x46b0 <_pin_clear>

00003fb4 <.LSM54>:
        self->pin = NULL;
    3fb4:	1e 02 78    	mov.w     [w14], w4
    3fb6:	80 02 eb    	clr.w     w5
    3fb8:	05 0a 98    	mov.w     w5, [w4+16]

00003fba <.L7>:
    }
}
    3fba:	00 80 fa    	ulnk      
    3fbc:	00 00 06    	return    

00003fbe <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    3fbe:	10 00 fa    	lnk       #0x10
    3fc0:	88 1f 78    	mov.w     w8, [w15++]
    3fc2:	20 07 98    	mov.w     w0, [w14+4]
    3fc4:	31 07 98    	mov.w     w1, [w14+6]
    3fc6:	42 07 98    	mov.w     w2, [w14+8]
    3fc8:	54 07 98    	mov.w     w4, [w14+10]
    3fca:	65 07 98    	mov.w     w5, [w14+12]
    3fcc:	73 07 98    	mov.w     w3, [w14+14]

00003fce <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    3fce:	3e 02 90    	mov.w     [w14+6], w4
    3fd0:	64 02 90    	mov.w     [w4+12], w4
    3fd2:	e1 0f 42    	add.w     w4, #0x1, [w15]
    3fd4:	a4 00 32    	bra       Z, 0x411e <.L18>

00003fd6 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    3fd6:	3e 02 90    	mov.w     [w14+6], w4
    3fd8:	04 0a 90    	mov.w     [w4+16], w4
    3fda:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3fdc:	33 00 3a    	bra       NZ, 0x4044 <.L12>

00003fde <.LSM59>:
        self->pin = pin;
    3fde:	2e 02 90    	mov.w     [w14+4], w4
    3fe0:	be 02 90    	mov.w     [w14+6], w5
    3fe2:	05 0a 98    	mov.w     w5, [w4+16]

00003fe4 <.LSM60>:
        pin->owner = (void *)self;
    3fe4:	3e 02 90    	mov.w     [w14+6], w4
    3fe6:	ae 02 90    	mov.w     [w14+4], w5
    3fe8:	05 0a 98    	mov.w     w5, [w4+16]

00003fea <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3fea:	15 3a 80    	mov.w     0x742, w5
    3fec:	f4 0b 20    	mov.w     #0xbf, w4
    3fee:	04 83 62    	and.w     w5, w4, w6
    3ff0:	64 04 20    	mov.w     #0x46, w4
    3ff2:	75 05 20    	mov.w     #0x57, w5
    3ff4:	27 74 20    	mov.w     #0x742, w7
    3ff6:	84 4b 78    	mov.b     w4, [w7]
    3ff8:	85 4b 78    	mov.b     w5, [w7]
    3ffa:	86 4b 78    	mov.b     w6, [w7]

00003ffc <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    3ffc:	3e 02 90    	mov.w     [w14+6], w4
    3ffe:	74 02 90    	mov.w     [w4+14], w4
    4000:	be 02 90    	mov.w     [w14+6], w5
    4002:	f5 02 90    	mov.w     [w5+14], w5
    4004:	15 03 78    	mov.w     [w5], w6
    4006:	be 02 90    	mov.w     [w14+6], w5
    4008:	a5 4a 90    	mov.b     [w5+10], w5
    400a:	85 82 fb    	ze        w5, w5
    400c:	f7 03 20    	mov.w     #0x3f, w7
    400e:	85 3a dd    	sl.w      w7, w5, w5
    4010:	85 82 ea    	com.w     w5, w5
    4012:	85 02 63    	and.w     w6, w5, w5
    4014:	05 0a 78    	mov.w     w5, [w4]

00004016 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    4016:	3e 02 90    	mov.w     [w14+6], w4
    4018:	74 02 90    	mov.w     [w4+14], w4
    401a:	be 02 90    	mov.w     [w14+6], w5
    401c:	f5 02 90    	mov.w     [w5+14], w5
    401e:	15 03 78    	mov.w     [w5], w6
    4020:	ae 02 90    	mov.w     [w14+4], w5
    4022:	d5 03 90    	mov.w     [w5+10], w7
    4024:	be 02 90    	mov.w     [w14+6], w5
    4026:	a5 4a 90    	mov.b     [w5+10], w5
    4028:	85 82 fb    	ze        w5, w5
    402a:	85 3a dd    	sl.w      w7, w5, w5
    402c:	86 82 72    	ior.w     w5, w6, w5
    402e:	05 0a 78    	mov.w     w5, [w4]

00004030 <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    4030:	15 3a 80    	mov.w     0x742, w5
    4032:	04 04 20    	mov.w     #0x40, w4
    4034:	05 03 72    	ior.w     w4, w5, w6
    4036:	64 04 20    	mov.w     #0x46, w4
    4038:	75 05 20    	mov.w     #0x57, w5
    403a:	27 74 20    	mov.w     #0x742, w7
    403c:	84 4b 78    	mov.b     w4, [w7]
    403e:	85 4b 78    	mov.b     w5, [w7]
    4040:	86 4b 78    	mov.b     w6, [w7]
    4042:	05 00 37    	bra       0x404e <.L13>

00004044 <.L12>:
    } else if (pin->owner!=(void *)self) {
    4044:	3e 02 90    	mov.w     [w14+6], w4
    4046:	84 0a 90    	mov.w     [w4+16], w5
    4048:	2e 02 90    	mov.w     [w14+4], w4
    404a:	84 8f 52    	sub.w     w5, w4, [w15]
    404c:	6a 00 3a    	bra       NZ, 0x4122 <.L19>

0000404e <.L13>:
        return;
    }
    if (timer) {
    404e:	4e 02 90    	mov.w     [w14+8], w4
    4050:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4052:	1c 00 32    	bra       Z, 0x408c <.L14>

00004054 <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    4054:	2e 02 90    	mov.w     [w14+4], w4
    4056:	14 02 78    	mov.w     [w4], w4
    4058:	ce 02 90    	mov.w     [w14+8], w5
    405a:	e5 02 90    	mov.w     [w5+12], w5
    405c:	ca 2a dd    	sl.w      w5, #0xa, w5
    405e:	65 00 b3    	ior.w     #0x6, w5
    4060:	05 0a 78    	mov.w     w5, [w4]

00004062 <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    4062:	2e 02 90    	mov.w     [w14+4], w4
    4064:	14 02 90    	mov.w     [w4+2], w4
    4066:	f5 01 20    	mov.w     #0x1f, w5
    4068:	05 0a 78    	mov.w     w5, [w4]

0000406a <.LSM69>:
        timer_setFreq(timer, freq);
    406a:	5e 01 90    	mov.w     [w14+10], w2
    406c:	ee 01 90    	mov.w     [w14+12], w3
    406e:	4e 00 90    	mov.w     [w14+8], w0
    4070:	92 fd 07    	rcall     0x3b96 <_timer_setFreq>

00004072 <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    4072:	2e 02 90    	mov.w     [w14+4], w4
    4074:	24 02 90    	mov.w     [w4+4], w4
    4076:	ce 02 90    	mov.w     [w14+8], w5
    4078:	95 02 90    	mov.w     [w5+2], w5
    407a:	95 02 78    	mov.w     [w5], w5
    407c:	05 0a 78    	mov.w     w5, [w4]

0000407e <.LSM71>:
        *(self->OCxTMR) = 0;
    407e:	2e 02 90    	mov.w     [w14+4], w4
    4080:	44 02 90    	mov.w     [w4+8], w4
    4082:	80 02 eb    	clr.w     w5
    4084:	05 0a 78    	mov.w     w5, [w4]

00004086 <.LSM72>:
        timer_start(timer);
    4086:	4e 00 90    	mov.w     [w14+8], w0
    4088:	c5 fd 07    	rcall     0x3c14 <_timer_start>
    408a:	2b 00 37    	bra       0x40e2 <.L15>

0000408c <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    408c:	2e 02 90    	mov.w     [w14+4], w4
    408e:	14 02 78    	mov.w     [w4], w4
    4090:	65 c0 21    	mov.w     #0x1c06, w5
    4092:	05 0a 78    	mov.w     w5, [w4]

00004094 <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    4094:	2e 02 90    	mov.w     [w14+4], w4
    4096:	14 02 90    	mov.w     [w4+2], w4
    4098:	f5 01 20    	mov.w     #0x1f, w5
    409a:	05 0a 78    	mov.w     w5, [w4]

0000409c <.LSM75>:
        if (freq<(FCY/65536.))
    409c:	18 c0 b3    	mov.b     #0x1, w8
    409e:	02 40 22    	mov.w     #0x2400, w2
    40a0:	43 37 24    	mov.w     #0x4374, w3
    40a2:	5e 00 90    	mov.w     [w14+10], w0
    40a4:	ee 00 90    	mov.w     [w14+12], w1
    40a6:	57 e9 07    	rcall     0x1356 <___eqsf2>
    40a8:	00 02 78    	mov.w     w0, w4
    40aa:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    40ac:	01 00 35    	bra       LT, 0x40b0 <.L16>
    40ae:	00 44 eb    	clr.b     w8

000040b0 <.L16>:
    40b0:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    40b2:	05 00 32    	bra       Z, 0x40be <.L17>

000040b4 <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    40b4:	2e 02 90    	mov.w     [w14+4], w4
    40b6:	24 02 90    	mov.w     [w4+4], w4
    40b8:	80 82 eb    	setm.w    w5
    40ba:	05 0a 78    	mov.w     w5, [w4]
    40bc:	12 00 37    	bra       0x40e2 <.L15>

000040be <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    40be:	2e 02 90    	mov.w     [w14+4], w4
    40c0:	24 04 90    	mov.w     [w4+4], w8
    40c2:	5e 01 90    	mov.w     [w14+10], w2
    40c4:	ee 01 90    	mov.w     [w14+12], w3
    40c6:	00 40 22    	mov.w     #0x2400, w0
    40c8:	41 b7 24    	mov.w     #0x4b74, w1
    40ca:	03 e9 07    	rcall     0x12d2 <___divsf3>
    40cc:	00 02 be    	mov.d     w0, w4
    40ce:	02 00 20    	mov.w     #0x0, w2
    40d0:	03 f8 23    	mov.w     #0x3f80, w3
    40d2:	04 00 be    	mov.d     w4, w0
    40d4:	a0 e8 07    	rcall     0x1216 <___subsf3>
    40d6:	00 02 be    	mov.d     w0, w4
    40d8:	04 00 be    	mov.d     w4, w0
    40da:	41 e9 07    	rcall     0x135e <___fixunssfsi>
    40dc:	00 02 be    	mov.d     w0, w4
    40de:	04 02 78    	mov.w     w4, w4
    40e0:	04 0c 78    	mov.w     w4, [w8]

000040e2 <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    40e2:	7e 02 90    	mov.w     [w14+14], w4
    40e4:	61 23 b8    	mul.uu    w4, #0x1, w6
    40e6:	2e 02 90    	mov.w     [w14+4], w4
    40e8:	24 02 90    	mov.w     [w4+4], w4
    40ea:	14 02 78    	mov.w     [w4], w4
    40ec:	05 00 20    	mov.w     #0x0, w5
    40ee:	04 b8 b9    	mul.ss    w7, w4, w0
    40f0:	00 00 78    	mov.w     w0, w0
    40f2:	06 a9 b9    	mul.ss    w5, w6, w2
    40f4:	82 00 78    	mov.w     w2, w1
    40f6:	01 00 40    	add.w     w0, w1, w0
    40f8:	06 03 78    	mov.w     w6, w6
    40fa:	04 02 78    	mov.w     w4, w4
    40fc:	04 32 b8    	mul.uu    w6, w4, w4
    40fe:	05 00 40    	add.w     w0, w5, w0
    4100:	80 02 78    	mov.w     w0, w5
    4102:	04 8f be    	mov.d     w4, [w14]

00004104 <.LSM79>:
    *(self->OCxR) = temp.w[1];
    4104:	2e 02 90    	mov.w     [w14+4], w4
    4106:	34 02 90    	mov.w     [w4+6], w4
    4108:	9e 02 90    	mov.w     [w14+2], w5
    410a:	05 0a 78    	mov.w     w5, [w4]

0000410c <.LSM80>:
    self->pin->write = __pwmWrite;
    410c:	2e 02 90    	mov.w     [w14+4], w4
    410e:	04 0a 90    	mov.w     [w4+16], w4
    4110:	a5 da 23    	mov.w     #0x3daa, w5
    4112:	15 0a 98    	mov.w     w5, [w4+18]

00004114 <.LSM81>:
    self->pin->read = __pwmRead;
    4114:	2e 02 90    	mov.w     [w14+4], w4
    4116:	04 0a 90    	mov.w     [w4+16], w4
    4118:	85 d7 23    	mov.w     #0x3d78, w5
    411a:	25 0a 98    	mov.w     w5, [w4+20]
    411c:	03 00 37    	bra       0x4124 <.L9>

0000411e <.L18>:
    411e:	00 00 00    	nop       
    4120:	01 00 37    	bra       0x4124 <.L9>

00004122 <.L19>:
    4122:	00 00 00    	nop       

00004124 <.L9>:
}
    4124:	4f 04 78    	mov.w     [--w15], w8
    4126:	00 80 fa    	ulnk      
    4128:	00 00 06    	return    

0000412a <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    412a:	14 00 fa    	lnk       #0x14
    412c:	20 07 98    	mov.w     w0, [w14+4]
    412e:	31 07 98    	mov.w     w1, [w14+6]
    4130:	42 07 98    	mov.w     w2, [w14+8]
    4132:	54 07 98    	mov.w     w4, [w14+10]
    4134:	65 07 98    	mov.w     w5, [w14+12]
    4136:	76 07 98    	mov.w     w6, [w14+14]
    4138:	07 0f 98    	mov.w     w7, [w14+16]
    413a:	13 0f 98    	mov.w     w3, [w14+18]

0000413c <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    413c:	3e 02 90    	mov.w     [w14+6], w4
    413e:	64 02 90    	mov.w     [w4+12], w4
    4140:	e1 0f 42    	add.w     w4, #0x1, [w15]
    4142:	91 00 32    	bra       Z, 0x4266 <.L25>

00004144 <.LSM87>:
        return;
    if (pin->owner==NULL) {
    4144:	3e 02 90    	mov.w     [w14+6], w4
    4146:	04 0a 90    	mov.w     [w4+16], w4
    4148:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    414a:	33 00 3a    	bra       NZ, 0x41b2 <.L23>

0000414c <.LSM88>:
        self->pin = pin;
    414c:	2e 02 90    	mov.w     [w14+4], w4
    414e:	be 02 90    	mov.w     [w14+6], w5
    4150:	05 0a 98    	mov.w     w5, [w4+16]

00004152 <.LSM89>:
        pin->owner = (void *)self;
    4152:	3e 02 90    	mov.w     [w14+6], w4
    4154:	ae 02 90    	mov.w     [w14+4], w5
    4156:	05 0a 98    	mov.w     w5, [w4+16]

00004158 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    4158:	15 3a 80    	mov.w     0x742, w5
    415a:	f4 0b 20    	mov.w     #0xbf, w4
    415c:	04 83 62    	and.w     w5, w4, w6
    415e:	64 04 20    	mov.w     #0x46, w4
    4160:	75 05 20    	mov.w     #0x57, w5
    4162:	27 74 20    	mov.w     #0x742, w7
    4164:	84 4b 78    	mov.b     w4, [w7]
    4166:	85 4b 78    	mov.b     w5, [w7]
    4168:	86 4b 78    	mov.b     w6, [w7]

0000416a <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    416a:	3e 02 90    	mov.w     [w14+6], w4
    416c:	74 02 90    	mov.w     [w4+14], w4
    416e:	be 02 90    	mov.w     [w14+6], w5
    4170:	f5 02 90    	mov.w     [w5+14], w5
    4172:	15 03 78    	mov.w     [w5], w6
    4174:	be 02 90    	mov.w     [w14+6], w5
    4176:	a5 4a 90    	mov.b     [w5+10], w5
    4178:	85 82 fb    	ze        w5, w5
    417a:	f7 03 20    	mov.w     #0x3f, w7
    417c:	85 3a dd    	sl.w      w7, w5, w5
    417e:	85 82 ea    	com.w     w5, w5
    4180:	85 02 63    	and.w     w6, w5, w5
    4182:	05 0a 78    	mov.w     w5, [w4]

00004184 <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    4184:	3e 02 90    	mov.w     [w14+6], w4
    4186:	74 02 90    	mov.w     [w4+14], w4
    4188:	be 02 90    	mov.w     [w14+6], w5
    418a:	f5 02 90    	mov.w     [w5+14], w5
    418c:	15 03 78    	mov.w     [w5], w6
    418e:	ae 02 90    	mov.w     [w14+4], w5
    4190:	d5 03 90    	mov.w     [w5+10], w7
    4192:	be 02 90    	mov.w     [w14+6], w5
    4194:	a5 4a 90    	mov.b     [w5+10], w5
    4196:	85 82 fb    	ze        w5, w5
    4198:	85 3a dd    	sl.w      w7, w5, w5
    419a:	86 82 72    	ior.w     w5, w6, w5
    419c:	05 0a 78    	mov.w     w5, [w4]

0000419e <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    419e:	15 3a 80    	mov.w     0x742, w5
    41a0:	04 04 20    	mov.w     #0x40, w4
    41a2:	05 03 72    	ior.w     w4, w5, w6
    41a4:	64 04 20    	mov.w     #0x46, w4
    41a6:	75 05 20    	mov.w     #0x57, w5
    41a8:	27 74 20    	mov.w     #0x742, w7
    41aa:	84 4b 78    	mov.b     w4, [w7]
    41ac:	85 4b 78    	mov.b     w5, [w7]
    41ae:	86 4b 78    	mov.b     w6, [w7]
    41b0:	05 00 37    	bra       0x41bc <.L24>

000041b2 <.L23>:
    } else if (pin->owner!=(void *)self) {
    41b2:	3e 02 90    	mov.w     [w14+6], w4
    41b4:	84 0a 90    	mov.w     [w4+16], w5
    41b6:	2e 02 90    	mov.w     [w14+4], w4
    41b8:	84 8f 52    	sub.w     w5, w4, [w15]
    41ba:	57 00 3a    	bra       NZ, 0x426a <.L26>

000041bc <.L24>:
        return;
    }
    if (timer) {
    41bc:	4e 02 90    	mov.w     [w14+8], w4
    41be:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    41c0:	55 00 32    	bra       Z, 0x426c <.L20>

000041c2 <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    41c2:	02 40 22    	mov.w     #0x2400, w2
    41c4:	43 b7 24    	mov.w     #0x4b74, w3
    41c6:	7e 00 90    	mov.w     [w14+14], w0
    41c8:	8e 08 90    	mov.w     [w14+16], w1
    41ca:	39 e9 07    	rcall     0x143e <___mulsf3>
    41cc:	00 02 be    	mov.d     w0, w4
    41ce:	04 00 be    	mov.d     w4, w0
    41d0:	c6 e8 07    	rcall     0x135e <___fixunssfsi>
    41d2:	00 02 be    	mov.d     w0, w4
    41d4:	84 02 78    	mov.w     w4, w5
    41d6:	2e 02 90    	mov.w     [w14+4], w4
    41d8:	65 02 98    	mov.w     w5, [w4+12]

000041da <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    41da:	7e 01 90    	mov.w     [w14+14], w2
    41dc:	8e 09 90    	mov.w     [w14+16], w3
    41de:	3e b8 97    	mov.w     [w14-10], w0
    41e0:	ce b8 97    	mov.w     [w14-8], w1
    41e2:	19 e8 07    	rcall     0x1216 <___subsf3>
    41e4:	00 02 be    	mov.d     w0, w4
    41e6:	02 40 22    	mov.w     #0x2400, w2
    41e8:	43 b7 24    	mov.w     #0x4b74, w3
    41ea:	04 00 be    	mov.d     w4, w0
    41ec:	28 e9 07    	rcall     0x143e <___mulsf3>
    41ee:	00 02 be    	mov.d     w0, w4
    41f0:	04 00 be    	mov.d     w4, w0
    41f2:	b5 e8 07    	rcall     0x135e <___fixunssfsi>
    41f4:	00 02 be    	mov.d     w0, w4
    41f6:	84 02 78    	mov.w     w4, w5
    41f8:	2e 02 90    	mov.w     [w14+4], w4
    41fa:	75 02 98    	mov.w     w5, [w4+14]

000041fc <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    41fc:	2e 02 90    	mov.w     [w14+4], w4
    41fe:	14 02 78    	mov.w     [w4], w4
    4200:	f5 c0 21    	mov.w     #0x1c0f, w5
    4202:	05 0a 78    	mov.w     w5, [w4]

00004204 <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    4204:	2e 02 90    	mov.w     [w14+4], w4
    4206:	14 02 90    	mov.w     [w4+2], w4
    4208:	ce 02 90    	mov.w     [w14+8], w5
    420a:	75 03 90    	mov.w     [w5+14], w6
    420c:	05 08 20    	mov.w     #0x80, w5
    420e:	86 82 72    	ior.w     w5, w6, w5
    4210:	05 0a 78    	mov.w     w5, [w4]

00004212 <.LSM100>:
        *(self->OCxR) = 1;
    4212:	2e 02 90    	mov.w     [w14+4], w4
    4214:	34 02 90    	mov.w     [w4+6], w4
    4216:	15 00 20    	mov.w     #0x1, w5
    4218:	05 0a 78    	mov.w     w5, [w4]

0000421a <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    421a:	1e 0a 90    	mov.w     [w14+18], w4
    421c:	61 23 b8    	mul.uu    w4, #0x1, w6
    421e:	2e 02 90    	mov.w     [w14+4], w4
    4220:	74 02 90    	mov.w     [w4+14], w4
    4222:	05 00 20    	mov.w     #0x0, w5
    4224:	04 b8 b9    	mul.ss    w7, w4, w0
    4226:	00 00 78    	mov.w     w0, w0
    4228:	06 a9 b9    	mul.ss    w5, w6, w2
    422a:	82 00 78    	mov.w     w2, w1
    422c:	01 00 40    	add.w     w0, w1, w0
    422e:	06 03 78    	mov.w     w6, w6
    4230:	04 02 78    	mov.w     w4, w4
    4232:	04 32 b8    	mul.uu    w6, w4, w4
    4234:	05 00 40    	add.w     w0, w5, w0
    4236:	80 02 78    	mov.w     w0, w5
    4238:	04 8f be    	mov.d     w4, [w14]

0000423a <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    423a:	2e 02 90    	mov.w     [w14+4], w4
    423c:	24 02 90    	mov.w     [w4+4], w4
    423e:	ae 02 90    	mov.w     [w14+4], w5
    4240:	65 03 90    	mov.w     [w5+12], w6
    4242:	9e 02 90    	mov.w     [w14+2], w5
    4244:	85 02 43    	add.w     w6, w5, w5
    4246:	05 0a 78    	mov.w     w5, [w4]

00004248 <.LSM103>:
        timer_setPeriod(timer, interval);
    4248:	5e 01 90    	mov.w     [w14+10], w2
    424a:	ee 01 90    	mov.w     [w14+12], w3
    424c:	4e 00 90    	mov.w     [w14+8], w0
    424e:	f3 fb 07    	rcall     0x3a36 <_timer_setPeriod>

00004250 <.LSM104>:
        timer_start(timer);
    4250:	4e 00 90    	mov.w     [w14+8], w0
    4252:	e0 fc 07    	rcall     0x3c14 <_timer_start>

00004254 <.LSM105>:
        self->pin->write = __servoWrite;
    4254:	2e 02 90    	mov.w     [w14+4], w4
    4256:	04 0a 90    	mov.w     [w4+16], w4
    4258:	c5 e1 23    	mov.w     #0x3e1c, w5
    425a:	15 0a 98    	mov.w     w5, [w4+18]

0000425c <.LSM106>:
        self->pin->read = __servoRead;
    425c:	2e 02 90    	mov.w     [w14+4], w4
    425e:	04 0a 90    	mov.w     [w4+16], w4
    4260:	65 de 23    	mov.w     #0x3de6, w5
    4262:	25 0a 98    	mov.w     w5, [w4+20]
    4264:	03 00 37    	bra       0x426c <.L20>

00004266 <.L25>:
    4266:	00 00 00    	nop       
    4268:	01 00 37    	bra       0x426c <.L20>

0000426a <.L26>:
    426a:	00 00 00    	nop       

0000426c <.L20>:
    }
}
    426c:	00 80 fa    	ulnk      
    426e:	00 00 06    	return    

00004270 <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    4270:	04 00 fa    	lnk       #0x4
    4272:	00 0f 78    	mov.w     w0, [w14]
    4274:	11 07 98    	mov.w     w1, [w14+2]

00004276 <.LSM1>:
    if (val)
    4276:	1e 02 90    	mov.w     [w14+2], w4
    4278:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    427a:	0d 00 32    	bra       Z, 0x4296 <.L2>

0000427c <.LSM2>:
        bitset(self->port, self->bit);
    427c:	1e 02 78    	mov.w     [w14], w4
    427e:	14 02 78    	mov.w     [w4], w4
    4280:	9e 02 78    	mov.w     [w14], w5
    4282:	95 02 78    	mov.w     [w5], w5
    4284:	15 03 78    	mov.w     [w5], w6
    4286:	9e 02 78    	mov.w     [w14], w5
    4288:	e5 42 90    	mov.b     [w5+6], w5
    428a:	85 82 fb    	ze        w5, w5
    428c:	17 00 20    	mov.w     #0x1, w7
    428e:	85 3a dd    	sl.w      w7, w5, w5
    4290:	86 82 72    	ior.w     w5, w6, w5
    4292:	05 0a 78    	mov.w     w5, [w4]
    4294:	0d 00 37    	bra       0x42b0 <.L1>

00004296 <.L2>:
    else
        bitclear(self->port, self->bit);
    4296:	1e 02 78    	mov.w     [w14], w4
    4298:	14 02 78    	mov.w     [w4], w4
    429a:	9e 02 78    	mov.w     [w14], w5
    429c:	95 02 78    	mov.w     [w5], w5
    429e:	15 03 78    	mov.w     [w5], w6
    42a0:	9e 02 78    	mov.w     [w14], w5
    42a2:	e5 42 90    	mov.b     [w5+6], w5
    42a4:	85 82 fb    	ze        w5, w5
    42a6:	17 00 20    	mov.w     #0x1, w7
    42a8:	85 3a dd    	sl.w      w7, w5, w5
    42aa:	85 82 ea    	com.w     w5, w5
    42ac:	85 02 63    	and.w     w6, w5, w5
    42ae:	05 0a 78    	mov.w     w5, [w4]

000042b0 <.L1>:
}
    42b0:	00 80 fa    	ulnk      
    42b2:	00 00 06    	return    

000042b4 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    42b4:	02 00 fa    	lnk       #0x2
    42b6:	00 0f 78    	mov.w     w0, [w14]

000042b8 <.LSM6>:
    return bitread(self->port, self->bit);
    42b8:	1e 02 78    	mov.w     [w14], w4
    42ba:	14 02 78    	mov.w     [w4], w4
    42bc:	94 02 78    	mov.w     [w4], w5
    42be:	1e 02 78    	mov.w     [w14], w4
    42c0:	64 42 90    	mov.b     [w4+6], w4
    42c2:	04 82 fb    	ze        w4, w4
    42c4:	16 00 20    	mov.w     #0x1, w6
    42c6:	04 32 dd    	sl.w      w6, w4, w4
    42c8:	04 82 62    	and.w     w5, w4, w4
    42ca:	04 f0 a7    	btsc.w    w4, #0xf
    42cc:	04 02 ea    	neg.w     w4, w4
    42ce:	04 02 ea    	neg.w     w4, w4
    42d0:	4f 22 de    	lsr.w     w4, #0xf, w4

000042d2 <.LSM7>:
}
    42d2:	04 00 78    	mov.w     w4, w0
    42d4:	00 80 fa    	ulnk      
    42d6:	00 00 06    	return    

000042d8 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    42d8:	02 00 fa    	lnk       #0x2
    42da:	00 0f 78    	mov.w     w0, [w14]

000042dc <.LSM9>:
    AD1CHS = self->annum;
    42dc:	1e 02 78    	mov.w     [w14], w4
    42de:	44 02 90    	mov.w     [w4+8], w4
    42e0:	44 19 88    	mov.w     w4, 0x328

000042e2 <.LSM10>:
    AD1CON1bits.SAMP = 1;
    42e2:	20 23 a8    	bset.b    0x320, #0x1

000042e4 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    42e4:	00 00 00    	nop       

000042e6 <.L6>:
    42e6:	04 19 80    	mov.w     0x320, w4
    42e8:	61 02 62    	and.w     w4, #0x1, w4
    42ea:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    42ec:	fc ff 32    	bra       Z, 0x42e6 <.L6>

000042ee <.LSM12>:
    return ADC1BUF0;
    42ee:	04 18 80    	mov.w     0x300, w4

000042f0 <.LSM13>:
}
    42f0:	04 00 78    	mov.w     w4, w0
    42f2:	00 80 fa    	ulnk      
    42f4:	00 00 06    	return    

000042f6 <_init_pin>:

void init_pin(void) {
    42f6:	02 00 fa    	lnk       #0x2

000042f8 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    42f8:	44 6d 20    	mov.w     #0x6d4, w4
    42fa:	84 1f 78    	mov.w     w4, [w15++]
    42fc:	47 01 20    	mov.w     #0x14, w7
    42fe:	00 43 eb    	clr.b     w6
    4300:	80 82 eb    	setm.w    w5
    4302:	54 c0 b3    	mov.b     #0x5, w4
    4304:	80 01 eb    	clr.w     w3
    4306:	82 2d 20    	mov.w     #0x2d8, w2
    4308:	a1 2d 20    	mov.w     #0x2da, w1
    430a:	00 80 20    	mov.w     #0x800, w0
    430c:	0c 01 07    	rcall     0x4526 <_pin_init>
    430e:	8f 87 e9    	dec2.w    w15, w15

00004310 <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4310:	84 6d 20    	mov.w     #0x6d8, w4
    4312:	84 1f 78    	mov.w     w4, [w15++]
    4314:	97 01 20    	mov.w     #0x19, w7
    4316:	86 c0 b3    	mov.b     #0x8, w6
    4318:	80 82 eb    	setm.w    w5
    431a:	44 c0 b3    	mov.b     #0x4, w4
    431c:	80 01 eb    	clr.w     w3
    431e:	82 2d 20    	mov.w     #0x2d8, w2
    4320:	a1 2d 20    	mov.w     #0x2da, w1
    4322:	60 81 20    	mov.w     #0x816, w0
    4324:	00 01 07    	rcall     0x4526 <_pin_init>
    4326:	8f 87 e9    	dec2.w    w15, w15

00004328 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4328:	a4 6c 20    	mov.w     #0x6ca, w4
    432a:	84 1f 78    	mov.w     w4, [w15++]
    432c:	a7 00 20    	mov.w     #0xa, w7
    432e:	00 43 eb    	clr.b     w6
    4330:	80 82 eb    	setm.w    w5
    4332:	44 c0 b3    	mov.b     #0x4, w4
    4334:	80 01 eb    	clr.w     w3
    4336:	82 2e 20    	mov.w     #0x2e8, w2
    4338:	a1 2e 20    	mov.w     #0x2ea, w1
    433a:	c0 82 20    	mov.w     #0x82c, w0
    433c:	f4 00 07    	rcall     0x4526 <_pin_init>
    433e:	8f 87 e9    	dec2.w    w15, w15

00004340 <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4340:	04 6d 20    	mov.w     #0x6d0, w4
    4342:	84 1f 78    	mov.w     w4, [w15++]
    4344:	17 01 20    	mov.w     #0x11, w7
    4346:	86 c0 b3    	mov.b     #0x8, w6
    4348:	80 82 eb    	setm.w    w5
    434a:	54 c0 b3    	mov.b     #0x5, w4
    434c:	80 01 eb    	clr.w     w3
    434e:	82 2e 20    	mov.w     #0x2e8, w2
    4350:	a1 2e 20    	mov.w     #0x2ea, w1
    4352:	20 84 20    	mov.w     #0x842, w0
    4354:	e8 00 07    	rcall     0x4526 <_pin_init>
    4356:	8f 87 e9    	dec2.w    w15, w15

00004358 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4358:	c4 6d 20    	mov.w     #0x6dc, w4
    435a:	84 1f 78    	mov.w     w4, [w15++]
    435c:	d7 01 20    	mov.w     #0x1d, w7
    435e:	86 c0 b3    	mov.b     #0x8, w6
    4360:	f5 00 20    	mov.w     #0xf, w5
    4362:	f4 c0 b3    	mov.b     #0xf, w4
    4364:	23 4e 20    	mov.w     #0x4e2, w3
    4366:	82 2c 20    	mov.w     #0x2c8, w2
    4368:	a1 2c 20    	mov.w     #0x2ca, w1
    436a:	80 85 20    	mov.w     #0x858, w0
    436c:	dc 00 07    	rcall     0x4526 <_pin_init>
    436e:	8f 87 e9    	dec2.w    w15, w15

00004370 <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4370:	04 6d 20    	mov.w     #0x6d0, w4
    4372:	84 1f 78    	mov.w     w4, [w15++]
    4374:	07 01 20    	mov.w     #0x10, w7
    4376:	00 43 eb    	clr.b     w6
    4378:	80 82 eb    	setm.w    w5
    437a:	34 c0 b3    	mov.b     #0x3, w4
    437c:	80 01 eb    	clr.w     w3
    437e:	82 2e 20    	mov.w     #0x2e8, w2
    4380:	a1 2e 20    	mov.w     #0x2ea, w1
    4382:	e0 86 20    	mov.w     #0x86e, w0
    4384:	d0 00 07    	rcall     0x4526 <_pin_init>
    4386:	8f 87 e9    	dec2.w    w15, w15

00004388 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4388:	24 6c 20    	mov.w     #0x6c2, w4
    438a:	84 1f 78    	mov.w     w4, [w15++]
    438c:	27 00 20    	mov.w     #0x2, w7
    438e:	00 43 eb    	clr.b     w6
    4390:	80 82 eb    	setm.w    w5
    4392:	84 c0 b3    	mov.b     #0x8, w4
    4394:	80 01 eb    	clr.w     w3
    4396:	82 2d 20    	mov.w     #0x2d8, w2
    4398:	a1 2d 20    	mov.w     #0x2da, w1
    439a:	40 88 20    	mov.w     #0x884, w0
    439c:	c4 00 07    	rcall     0x4526 <_pin_init>
    439e:	8f 87 e9    	dec2.w    w15, w15

000043a0 <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    43a0:	c4 6c 20    	mov.w     #0x6cc, w4
    43a2:	84 1f 78    	mov.w     w4, [w15++]
    43a4:	c7 00 20    	mov.w     #0xc, w7
    43a6:	00 43 eb    	clr.b     w6
    43a8:	80 82 eb    	setm.w    w5
    43aa:	b4 c0 b3    	mov.b     #0xb, w4
    43ac:	80 01 eb    	clr.w     w3
    43ae:	82 2d 20    	mov.w     #0x2d8, w2
    43b0:	a1 2d 20    	mov.w     #0x2da, w1
    43b2:	a0 89 20    	mov.w     #0x89a, w0
    43b4:	b8 00 07    	rcall     0x4526 <_pin_init>
    43b6:	8f 87 e9    	dec2.w    w15, w15

000043b8 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    43b8:	44 6c 20    	mov.w     #0x6c4, w4
    43ba:	84 1f 78    	mov.w     w4, [w15++]
    43bc:	47 00 20    	mov.w     #0x4, w7
    43be:	00 43 eb    	clr.b     w6
    43c0:	80 82 eb    	setm.w    w5
    43c2:	94 c0 b3    	mov.b     #0x9, w4
    43c4:	80 01 eb    	clr.w     w3
    43c6:	82 2d 20    	mov.w     #0x2d8, w2
    43c8:	a1 2d 20    	mov.w     #0x2da, w1
    43ca:	00 8b 20    	mov.w     #0x8b0, w0
    43cc:	ac 00 07    	rcall     0x4526 <_pin_init>
    43ce:	8f 87 e9    	dec2.w    w15, w15

000043d0 <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    43d0:	24 6c 20    	mov.w     #0x6c2, w4
    43d2:	84 1f 78    	mov.w     w4, [w15++]
    43d4:	37 00 20    	mov.w     #0x3, w7
    43d6:	86 c0 b3    	mov.b     #0x8, w6
    43d8:	80 82 eb    	setm.w    w5
    43da:	a4 c0 b3    	mov.b     #0xa, w4
    43dc:	80 01 eb    	clr.w     w3
    43de:	82 2d 20    	mov.w     #0x2d8, w2
    43e0:	a1 2d 20    	mov.w     #0x2da, w1
    43e2:	60 8c 20    	mov.w     #0x8c6, w0
    43e4:	a0 00 07    	rcall     0x4526 <_pin_init>
    43e6:	8f 87 e9    	dec2.w    w15, w15

000043e8 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    43e8:	a4 6c 20    	mov.w     #0x6ca, w4
    43ea:	84 1f 78    	mov.w     w4, [w15++]
    43ec:	b7 00 20    	mov.w     #0xb, w7
    43ee:	86 c0 b3    	mov.b     #0x8, w6
    43f0:	80 82 eb    	setm.w    w5
    43f2:	00 42 eb    	clr.b     w4
    43f4:	80 01 eb    	clr.w     w3
    43f6:	82 2d 20    	mov.w     #0x2d8, w2
    43f8:	a1 2d 20    	mov.w     #0x2da, w1
    43fa:	c0 8d 20    	mov.w     #0x8dc, w0
    43fc:	94 00 07    	rcall     0x4526 <_pin_init>
    43fe:	8f 87 e9    	dec2.w    w15, w15

00004400 <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4400:	84 6d 20    	mov.w     #0x6d8, w4
    4402:	84 1f 78    	mov.w     w4, [w15++]
    4404:	87 01 20    	mov.w     #0x18, w7
    4406:	00 43 eb    	clr.b     w6
    4408:	80 82 eb    	setm.w    w5
    440a:	14 c0 b3    	mov.b     #0x1, w4
    440c:	80 01 eb    	clr.w     w3
    440e:	82 2d 20    	mov.w     #0x2d8, w2
    4410:	a1 2d 20    	mov.w     #0x2da, w1
    4412:	20 8f 20    	mov.w     #0x8f2, w0
    4414:	88 00 07    	rcall     0x4526 <_pin_init>
    4416:	8f 87 e9    	dec2.w    w15, w15

00004418 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4418:	64 6d 20    	mov.w     #0x6d6, w4
    441a:	84 1f 78    	mov.w     w4, [w15++]
    441c:	77 01 20    	mov.w     #0x17, w7
    441e:	86 c0 b3    	mov.b     #0x8, w6
    4420:	80 82 eb    	setm.w    w5
    4422:	24 c0 b3    	mov.b     #0x2, w4
    4424:	80 01 eb    	clr.w     w3
    4426:	82 2d 20    	mov.w     #0x2d8, w2
    4428:	a1 2d 20    	mov.w     #0x2da, w1
    442a:	80 90 20    	mov.w     #0x908, w0
    442c:	7c 00 07    	rcall     0x4526 <_pin_init>
    442e:	8f 87 e9    	dec2.w    w15, w15

00004430 <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4430:	64 6d 20    	mov.w     #0x6d6, w4
    4432:	84 1f 78    	mov.w     w4, [w15++]
    4434:	67 01 20    	mov.w     #0x16, w7
    4436:	00 43 eb    	clr.b     w6
    4438:	80 82 eb    	setm.w    w5
    443a:	34 c0 b3    	mov.b     #0x3, w4
    443c:	80 01 eb    	clr.w     w3
    443e:	82 2d 20    	mov.w     #0x2d8, w2
    4440:	a1 2d 20    	mov.w     #0x2da, w1
    4442:	e0 91 20    	mov.w     #0x91e, w0
    4444:	70 00 07    	rcall     0x4526 <_pin_init>
    4446:	8f 87 e9    	dec2.w    w15, w15

00004448 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4448:	04 6c 20    	mov.w     #0x6c0, w4
    444a:	84 1f 78    	mov.w     w4, [w15++]
    444c:	80 03 eb    	clr.w     w7
    444e:	00 43 eb    	clr.b     w6
    4450:	80 02 eb    	clr.w     w5
    4452:	00 42 eb    	clr.b     w4
    4454:	23 4e 20    	mov.w     #0x4e2, w3
    4456:	82 2c 20    	mov.w     #0x2c8, w2
    4458:	a1 2c 20    	mov.w     #0x2ca, w1
    445a:	20 9a 20    	mov.w     #0x9a2, w0
    445c:	64 00 07    	rcall     0x4526 <_pin_init>
    445e:	8f 87 e9    	dec2.w    w15, w15

00004460 <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4460:	04 6c 20    	mov.w     #0x6c0, w4
    4462:	84 1f 78    	mov.w     w4, [w15++]
    4464:	17 00 20    	mov.w     #0x1, w7
    4466:	86 c0 b3    	mov.b     #0x8, w6
    4468:	15 00 20    	mov.w     #0x1, w5
    446a:	14 c0 b3    	mov.b     #0x1, w4
    446c:	23 4e 20    	mov.w     #0x4e2, w3
    446e:	82 2c 20    	mov.w     #0x2c8, w2
    4470:	a1 2c 20    	mov.w     #0x2ca, w1
    4472:	c0 98 20    	mov.w     #0x98c, w0
    4474:	58 00 07    	rcall     0x4526 <_pin_init>
    4476:	8f 87 e9    	dec2.w    w15, w15

00004478 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4478:	c4 6c 20    	mov.w     #0x6cc, w4
    447a:	84 1f 78    	mov.w     w4, [w15++]
    447c:	d7 00 20    	mov.w     #0xd, w7
    447e:	86 c0 b3    	mov.b     #0x8, w6
    4480:	25 00 20    	mov.w     #0x2, w5
    4482:	24 c0 b3    	mov.b     #0x2, w4
    4484:	23 4e 20    	mov.w     #0x4e2, w3
    4486:	82 2c 20    	mov.w     #0x2c8, w2
    4488:	a1 2c 20    	mov.w     #0x2ca, w1
    448a:	60 97 20    	mov.w     #0x976, w0
    448c:	4c 00 07    	rcall     0x4526 <_pin_init>
    448e:	8f 87 e9    	dec2.w    w15, w15

00004490 <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4490:	00 02 eb    	clr.w     w4
    4492:	84 1f 78    	mov.w     w4, [w15++]
    4494:	80 83 eb    	setm.w    w7
    4496:	00 43 eb    	clr.b     w6
    4498:	35 00 20    	mov.w     #0x3, w5
    449a:	34 c0 b3    	mov.b     #0x3, w4
    449c:	23 4e 20    	mov.w     #0x4e2, w3
    449e:	82 2c 20    	mov.w     #0x2c8, w2
    44a0:	a1 2c 20    	mov.w     #0x2ca, w1
    44a2:	00 96 20    	mov.w     #0x960, w0
    44a4:	40 00 07    	rcall     0x4526 <_pin_init>
    44a6:	8f 87 e9    	dec2.w    w15, w15

000044a8 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    44a8:	c4 6d 20    	mov.w     #0x6dc, w4
    44aa:	84 1f 78    	mov.w     w4, [w15++]
    44ac:	c7 01 20    	mov.w     #0x1c, w7
    44ae:	00 43 eb    	clr.b     w6
    44b0:	45 00 20    	mov.w     #0x4, w5
    44b2:	44 c0 b3    	mov.b     #0x4, w4
    44b4:	23 4e 20    	mov.w     #0x4e2, w3
    44b6:	82 2c 20    	mov.w     #0x2c8, w2
    44b8:	a1 2c 20    	mov.w     #0x2ca, w1
    44ba:	a0 94 20    	mov.w     #0x94a, w0
    44bc:	34 00 07    	rcall     0x4526 <_pin_init>
    44be:	8f 87 e9    	dec2.w    w15, w15

000044c0 <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    44c0:	24 6d 20    	mov.w     #0x6d2, w4
    44c2:	84 1f 78    	mov.w     w4, [w15++]
    44c4:	27 01 20    	mov.w     #0x12, w7
    44c6:	00 43 eb    	clr.b     w6
    44c8:	55 00 20    	mov.w     #0x5, w5
    44ca:	54 c0 b3    	mov.b     #0x5, w4
    44cc:	23 4e 20    	mov.w     #0x4e2, w3
    44ce:	82 2c 20    	mov.w     #0x2c8, w2
    44d0:	a1 2c 20    	mov.w     #0x2ca, w1
    44d2:	40 93 20    	mov.w     #0x934, w0
    44d4:	28 00 07    	rcall     0x4526 <_pin_init>
    44d6:	8f 87 e9    	dec2.w    w15, w15

000044d8 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    44d8:	00 02 eb    	clr.w     w4
    44da:	04 0f 78    	mov.w     w4, [w14]
    44dc:	08 00 37    	bra       0x44ee <.L8>

000044de <.L9>:
        pin_digitalIn(&D[i]);
    44de:	1e 02 78    	mov.w     [w14], w4
    44e0:	76 22 b9    	mul.su    w4, #0x16, w4
    44e2:	84 02 78    	mov.w     w4, w5
    44e4:	04 80 20    	mov.w     #0x800, w4
    44e6:	04 82 42    	add.w     w5, w4, w4
    44e8:	04 00 78    	mov.w     w4, w0
    44ea:	49 00 07    	rcall     0x457e <_pin_digitalIn>

000044ec <.LSM37>:
    44ec:	1e 0f e8    	inc.w     [w14], [w14]

000044ee <.L8>:
    44ee:	1e 02 78    	mov.w     [w14], w4
    44f0:	ed 0f 52    	sub.w     w4, #0xd, [w15]
    44f2:	f5 ff 36    	bra       LEU, 0x44de <.L9>

000044f4 <.LSM38>:
    for (i = 0; i<6; i++)
    44f4:	00 02 eb    	clr.w     w4
    44f6:	04 0f 78    	mov.w     w4, [w14]
    44f8:	08 00 37    	bra       0x450a <.L10>

000044fa <.L11>:
        pin_analogIn(&A[i]);
    44fa:	1e 02 78    	mov.w     [w14], w4
    44fc:	76 22 b9    	mul.su    w4, #0x16, w4
    44fe:	84 02 78    	mov.w     w4, w5
    4500:	44 93 20    	mov.w     #0x934, w4
    4502:	04 82 42    	add.w     w5, w4, w4
    4504:	04 00 78    	mov.w     w4, w0
    4506:	97 00 07    	rcall     0x4636 <_pin_analogIn>

00004508 <.LSM40>:
    4508:	1e 0f e8    	inc.w     [w14], [w14]

0000450a <.L10>:
    450a:	1e 02 78    	mov.w     [w14], w4
    450c:	e5 0f 52    	sub.w     w4, #0x5, [w15]
    450e:	f5 ff 36    	bra       LEU, 0x44fa <.L11>

00004510 <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    4510:	04 2e 20    	mov.w     #0x2e0, w4
    4512:	04 19 88    	mov.w     w4, 0x320

00004514 <.LSM42>:
    AD1CON2 = 0;
    4514:	00 02 eb    	clr.w     w4
    4516:	14 19 88    	mov.w     w4, 0x322

00004518 <.LSM43>:
    AD1CON3 = 0x0C40;
    4518:	04 c4 20    	mov.w     #0xc40, w4
    451a:	24 19 88    	mov.w     w4, 0x324

0000451c <.LSM44>:
    AD1CHS = 0;
    451c:	00 02 eb    	clr.w     w4
    451e:	44 19 88    	mov.w     w4, 0x328

00004520 <.LSM45>:
    AD1CON1bits.ADON = 1;
    4520:	21 e3 a8    	bset.b    0x321, #0x7

00004522 <.LSM46>:
}
    4522:	00 80 fa    	ulnk      
    4524:	00 00 06    	return    

00004526 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    4526:	10 00 fa    	lnk       #0x10
    4528:	00 0f 78    	mov.w     w0, [w14]
    452a:	11 07 98    	mov.w     w1, [w14+2]
    452c:	22 07 98    	mov.w     w2, [w14+4]
    452e:	33 07 98    	mov.w     w3, [w14+6]
    4530:	04 4f 98    	mov.b     w4, [w14+8]
    4532:	55 07 98    	mov.w     w5, [w14+10]
    4534:	46 4f 98    	mov.b     w6, [w14+12]
    4536:	77 07 98    	mov.w     w7, [w14+14]

00004538 <.LSM48>:
    self->port = port;
    4538:	1e 02 78    	mov.w     [w14], w4
    453a:	9e 02 90    	mov.w     [w14+2], w5
    453c:	05 0a 78    	mov.w     w5, [w4]

0000453e <.LSM49>:
    self->tris = tris;
    453e:	1e 02 78    	mov.w     [w14], w4
    4540:	ae 02 90    	mov.w     [w14+4], w5
    4542:	15 02 98    	mov.w     w5, [w4+2]

00004544 <.LSM50>:
    self->ans = ans;
    4544:	1e 02 78    	mov.w     [w14], w4
    4546:	be 02 90    	mov.w     [w14+6], w5
    4548:	25 02 98    	mov.w     w5, [w4+4]

0000454a <.LSM51>:
    self->bit = bit;
    454a:	1e 02 78    	mov.w     [w14], w4
    454c:	8e 4a 90    	mov.b     [w14+8], w5
    454e:	65 42 98    	mov.b     w5, [w4+6]

00004550 <.LSM52>:
    self->annum = annum;
    4550:	1e 02 78    	mov.w     [w14], w4
    4552:	de 02 90    	mov.w     [w14+10], w5
    4554:	45 02 98    	mov.w     w5, [w4+8]

00004556 <.LSM53>:
    self->rpshift = rpshift;
    4556:	1e 02 78    	mov.w     [w14], w4
    4558:	ce 4a 90    	mov.b     [w14+12], w5
    455a:	25 4a 98    	mov.b     w5, [w4+10]

0000455c <.LSM54>:
    self->rpnum = rpnum;
    455c:	fe 02 90    	mov.w     [w14+14], w5
    455e:	1e 02 78    	mov.w     [w14], w4
    4560:	65 02 98    	mov.w     w5, [w4+12]

00004562 <.LSM55>:
    self->rpor = rpor;
    4562:	1e 02 78    	mov.w     [w14], w4
    4564:	ce ba 97    	mov.w     [w14-8], w5
    4566:	75 02 98    	mov.w     w5, [w4+14]

00004568 <.LSM56>:
    self->owner = NULL;
    4568:	1e 02 78    	mov.w     [w14], w4
    456a:	80 02 eb    	clr.w     w5
    456c:	05 0a 98    	mov.w     w5, [w4+16]

0000456e <.LSM57>:
    self->write = NULL;
    456e:	1e 02 78    	mov.w     [w14], w4
    4570:	80 02 eb    	clr.w     w5
    4572:	15 0a 98    	mov.w     w5, [w4+18]

00004574 <.LSM58>:
    self->read = NULL;
    4574:	1e 02 78    	mov.w     [w14], w4
    4576:	80 02 eb    	clr.w     w5
    4578:	25 0a 98    	mov.w     w5, [w4+20]

0000457a <.LSM59>:
}
    457a:	00 80 fa    	ulnk      
    457c:	00 00 06    	return    

0000457e <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    457e:	02 00 fa    	lnk       #0x2
    4580:	00 0f 78    	mov.w     w0, [w14]

00004582 <.LSM61>:
    if (self->ans)
    4582:	1e 02 78    	mov.w     [w14], w4
    4584:	24 02 90    	mov.w     [w4+4], w4
    4586:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4588:	0d 00 32    	bra       Z, 0x45a4 <.L14>

0000458a <.LSM62>:
        bitclear(self->ans, self->bit);
    458a:	1e 02 78    	mov.w     [w14], w4
    458c:	24 02 90    	mov.w     [w4+4], w4
    458e:	9e 02 78    	mov.w     [w14], w5
    4590:	a5 02 90    	mov.w     [w5+4], w5
    4592:	15 03 78    	mov.w     [w5], w6
    4594:	9e 02 78    	mov.w     [w14], w5
    4596:	e5 42 90    	mov.b     [w5+6], w5
    4598:	85 82 fb    	ze        w5, w5
    459a:	17 00 20    	mov.w     #0x1, w7
    459c:	85 3a dd    	sl.w      w7, w5, w5
    459e:	85 82 ea    	com.w     w5, w5
    45a0:	85 02 63    	and.w     w6, w5, w5
    45a2:	05 0a 78    	mov.w     w5, [w4]

000045a4 <.L14>:
    bitset(self->tris, self->bit);
    45a4:	1e 02 78    	mov.w     [w14], w4
    45a6:	14 02 90    	mov.w     [w4+2], w4
    45a8:	9e 02 78    	mov.w     [w14], w5
    45aa:	95 02 90    	mov.w     [w5+2], w5
    45ac:	15 03 78    	mov.w     [w5], w6
    45ae:	9e 02 78    	mov.w     [w14], w5
    45b0:	e5 42 90    	mov.b     [w5+6], w5
    45b2:	85 82 fb    	ze        w5, w5
    45b4:	17 00 20    	mov.w     #0x1, w7
    45b6:	85 3a dd    	sl.w      w7, w5, w5
    45b8:	86 82 72    	ior.w     w5, w6, w5
    45ba:	05 0a 78    	mov.w     w5, [w4]

000045bc <.LSM64>:
    self->write = NULL;
    45bc:	1e 02 78    	mov.w     [w14], w4
    45be:	80 02 eb    	clr.w     w5
    45c0:	15 0a 98    	mov.w     w5, [w4+18]

000045c2 <.LSM65>:
    self->read = __digitalRead;    
    45c2:	1e 02 78    	mov.w     [w14], w4
    45c4:	45 2b 24    	mov.w     #0x42b4, w5
    45c6:	25 0a 98    	mov.w     w5, [w4+20]

000045c8 <.LSM66>:
}
    45c8:	00 80 fa    	ulnk      
    45ca:	00 00 06    	return    

000045cc <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    45cc:	02 00 fa    	lnk       #0x2
    45ce:	00 0f 78    	mov.w     w0, [w14]

000045d0 <.LSM68>:
    if (self->ans)
    45d0:	1e 02 78    	mov.w     [w14], w4
    45d2:	24 02 90    	mov.w     [w4+4], w4
    45d4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    45d6:	0d 00 32    	bra       Z, 0x45f2 <.L16>

000045d8 <.LSM69>:
        bitclear(self->ans, self->bit);
    45d8:	1e 02 78    	mov.w     [w14], w4
    45da:	24 02 90    	mov.w     [w4+4], w4
    45dc:	9e 02 78    	mov.w     [w14], w5
    45de:	a5 02 90    	mov.w     [w5+4], w5
    45e0:	15 03 78    	mov.w     [w5], w6
    45e2:	9e 02 78    	mov.w     [w14], w5
    45e4:	e5 42 90    	mov.b     [w5+6], w5
    45e6:	85 82 fb    	ze        w5, w5
    45e8:	17 00 20    	mov.w     #0x1, w7
    45ea:	85 3a dd    	sl.w      w7, w5, w5
    45ec:	85 82 ea    	com.w     w5, w5
    45ee:	85 02 63    	and.w     w6, w5, w5
    45f0:	05 0a 78    	mov.w     w5, [w4]

000045f2 <.L16>:
    bitclear(self->port, self->bit);
    45f2:	1e 02 78    	mov.w     [w14], w4
    45f4:	14 02 78    	mov.w     [w4], w4
    45f6:	9e 02 78    	mov.w     [w14], w5
    45f8:	95 02 78    	mov.w     [w5], w5
    45fa:	15 03 78    	mov.w     [w5], w6
    45fc:	9e 02 78    	mov.w     [w14], w5
    45fe:	e5 42 90    	mov.b     [w5+6], w5
    4600:	85 82 fb    	ze        w5, w5
    4602:	17 00 20    	mov.w     #0x1, w7
    4604:	85 3a dd    	sl.w      w7, w5, w5
    4606:	85 82 ea    	com.w     w5, w5
    4608:	85 02 63    	and.w     w6, w5, w5
    460a:	05 0a 78    	mov.w     w5, [w4]

0000460c <.LSM71>:
    bitclear(self->tris, self->bit);
    460c:	1e 02 78    	mov.w     [w14], w4
    460e:	14 02 90    	mov.w     [w4+2], w4
    4610:	9e 02 78    	mov.w     [w14], w5
    4612:	95 02 90    	mov.w     [w5+2], w5
    4614:	15 03 78    	mov.w     [w5], w6
    4616:	9e 02 78    	mov.w     [w14], w5
    4618:	e5 42 90    	mov.b     [w5+6], w5
    461a:	85 82 fb    	ze        w5, w5
    461c:	17 00 20    	mov.w     #0x1, w7
    461e:	85 3a dd    	sl.w      w7, w5, w5
    4620:	85 82 ea    	com.w     w5, w5
    4622:	85 02 63    	and.w     w6, w5, w5
    4624:	05 0a 78    	mov.w     w5, [w4]

00004626 <.LSM72>:
    self->write = __digitalWrite;
    4626:	1e 02 78    	mov.w     [w14], w4
    4628:	05 27 24    	mov.w     #0x4270, w5
    462a:	15 0a 98    	mov.w     w5, [w4+18]

0000462c <.LSM73>:
    self->read = __digitalRead;
    462c:	1e 02 78    	mov.w     [w14], w4
    462e:	45 2b 24    	mov.w     #0x42b4, w5
    4630:	25 0a 98    	mov.w     w5, [w4+20]

00004632 <.LSM74>:
}
    4632:	00 80 fa    	ulnk      
    4634:	00 00 06    	return    

00004636 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    4636:	02 00 fa    	lnk       #0x2
    4638:	00 0f 78    	mov.w     w0, [w14]

0000463a <.LSM76>:
    if (!(self->ans))
    463a:	1e 02 78    	mov.w     [w14], w4
    463c:	24 02 90    	mov.w     [w4+4], w4
    463e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4640:	1f 00 32    	bra       Z, 0x4680 <.L20>

00004642 <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    4642:	1e 02 78    	mov.w     [w14], w4
    4644:	14 02 90    	mov.w     [w4+2], w4
    4646:	9e 02 78    	mov.w     [w14], w5
    4648:	95 02 90    	mov.w     [w5+2], w5
    464a:	15 03 78    	mov.w     [w5], w6
    464c:	9e 02 78    	mov.w     [w14], w5
    464e:	e5 42 90    	mov.b     [w5+6], w5
    4650:	85 82 fb    	ze        w5, w5
    4652:	17 00 20    	mov.w     #0x1, w7
    4654:	85 3a dd    	sl.w      w7, w5, w5
    4656:	86 82 72    	ior.w     w5, w6, w5
    4658:	05 0a 78    	mov.w     w5, [w4]

0000465a <.LSM78>:
    bitset(self->ans, self->bit);
    465a:	1e 02 78    	mov.w     [w14], w4
    465c:	24 02 90    	mov.w     [w4+4], w4
    465e:	9e 02 78    	mov.w     [w14], w5
    4660:	a5 02 90    	mov.w     [w5+4], w5
    4662:	15 03 78    	mov.w     [w5], w6
    4664:	9e 02 78    	mov.w     [w14], w5
    4666:	e5 42 90    	mov.b     [w5+6], w5
    4668:	85 82 fb    	ze        w5, w5
    466a:	17 00 20    	mov.w     #0x1, w7
    466c:	85 3a dd    	sl.w      w7, w5, w5
    466e:	86 82 72    	ior.w     w5, w6, w5
    4670:	05 0a 78    	mov.w     w5, [w4]

00004672 <.LSM79>:
    self->write = NULL;
    4672:	1e 02 78    	mov.w     [w14], w4
    4674:	80 02 eb    	clr.w     w5
    4676:	15 0a 98    	mov.w     w5, [w4+18]

00004678 <.LSM80>:
    self->read = __analogRead;
    4678:	1e 02 78    	mov.w     [w14], w4
    467a:	85 2d 24    	mov.w     #0x42d8, w5
    467c:	25 0a 98    	mov.w     w5, [w4+20]
    467e:	01 00 37    	bra       0x4682 <.L17>

00004680 <.L20>:
    4680:	00 00 00    	nop       

00004682 <.L17>:
}
    4682:	00 80 fa    	ulnk      
    4684:	00 00 06    	return    

00004686 <_pin_set>:

void pin_set(_PIN *self) {
    4686:	02 00 fa    	lnk       #0x2
    4688:	00 0f 78    	mov.w     w0, [w14]

0000468a <.LSM84>:
    if (self->write==__digitalWrite)
    468a:	1e 02 78    	mov.w     [w14], w4
    468c:	94 0a 90    	mov.w     [w4+18], w5
    468e:	04 27 24    	mov.w     #0x4270, w4
    4690:	84 8f 52    	sub.w     w5, w4, [w15]
    4692:	0c 00 3a    	bra       NZ, 0x46ac <.L21>

00004694 <.LSM85>:
        bitset(self->port, self->bit);
    4694:	1e 02 78    	mov.w     [w14], w4
    4696:	14 02 78    	mov.w     [w4], w4
    4698:	9e 02 78    	mov.w     [w14], w5
    469a:	95 02 78    	mov.w     [w5], w5
    469c:	15 03 78    	mov.w     [w5], w6
    469e:	9e 02 78    	mov.w     [w14], w5
    46a0:	e5 42 90    	mov.b     [w5+6], w5
    46a2:	85 82 fb    	ze        w5, w5
    46a4:	17 00 20    	mov.w     #0x1, w7
    46a6:	85 3a dd    	sl.w      w7, w5, w5
    46a8:	86 82 72    	ior.w     w5, w6, w5
    46aa:	05 0a 78    	mov.w     w5, [w4]

000046ac <.L21>:
}
    46ac:	00 80 fa    	ulnk      
    46ae:	00 00 06    	return    

000046b0 <_pin_clear>:

void pin_clear(_PIN *self) {
    46b0:	02 00 fa    	lnk       #0x2
    46b2:	00 0f 78    	mov.w     w0, [w14]

000046b4 <.LSM88>:
    if (self->write==__digitalWrite)
    46b4:	1e 02 78    	mov.w     [w14], w4
    46b6:	94 0a 90    	mov.w     [w4+18], w5
    46b8:	04 27 24    	mov.w     #0x4270, w4
    46ba:	84 8f 52    	sub.w     w5, w4, [w15]
    46bc:	0d 00 3a    	bra       NZ, 0x46d8 <.L23>

000046be <.LSM89>:
        bitclear(self->port, self->bit);
    46be:	1e 02 78    	mov.w     [w14], w4
    46c0:	14 02 78    	mov.w     [w4], w4
    46c2:	9e 02 78    	mov.w     [w14], w5
    46c4:	95 02 78    	mov.w     [w5], w5
    46c6:	15 03 78    	mov.w     [w5], w6
    46c8:	9e 02 78    	mov.w     [w14], w5
    46ca:	e5 42 90    	mov.b     [w5+6], w5
    46cc:	85 82 fb    	ze        w5, w5
    46ce:	17 00 20    	mov.w     #0x1, w7
    46d0:	85 3a dd    	sl.w      w7, w5, w5
    46d2:	85 82 ea    	com.w     w5, w5
    46d4:	85 02 63    	and.w     w6, w5, w5
    46d6:	05 0a 78    	mov.w     w5, [w4]

000046d8 <.L23>:
}
    46d8:	00 80 fa    	ulnk      
    46da:	00 00 06    	return    

000046dc <_pin_toggle>:

void pin_toggle(_PIN *self) {
    46dc:	02 00 fa    	lnk       #0x2
    46de:	00 0f 78    	mov.w     w0, [w14]

000046e0 <.LSM92>:
    if (self->write==__digitalWrite)
    46e0:	1e 02 78    	mov.w     [w14], w4
    46e2:	94 0a 90    	mov.w     [w4+18], w5
    46e4:	04 27 24    	mov.w     #0x4270, w4
    46e6:	84 8f 52    	sub.w     w5, w4, [w15]
    46e8:	0c 00 3a    	bra       NZ, 0x4702 <.L25>

000046ea <.LSM93>:
        bitflip(self->port, self->bit);
    46ea:	1e 02 78    	mov.w     [w14], w4
    46ec:	14 02 78    	mov.w     [w4], w4
    46ee:	9e 02 78    	mov.w     [w14], w5
    46f0:	95 02 78    	mov.w     [w5], w5
    46f2:	15 03 78    	mov.w     [w5], w6
    46f4:	9e 02 78    	mov.w     [w14], w5
    46f6:	e5 42 90    	mov.b     [w5+6], w5
    46f8:	85 82 fb    	ze        w5, w5
    46fa:	17 00 20    	mov.w     #0x1, w7
    46fc:	85 3a dd    	sl.w      w7, w5, w5
    46fe:	85 02 6b    	xor.w     w6, w5, w5
    4700:	05 0a 78    	mov.w     w5, [w4]

00004702 <.L25>:
}
    4702:	00 80 fa    	ulnk      
    4704:	00 00 06    	return    

00004706 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    4706:	04 00 fa    	lnk       #0x4
    4708:	00 0f 78    	mov.w     w0, [w14]
    470a:	11 07 98    	mov.w     w1, [w14+2]

0000470c <.LSM96>:
    if (self->write)
    470c:	1e 02 78    	mov.w     [w14], w4
    470e:	14 0a 90    	mov.w     [w4+18], w4
    4710:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4712:	05 00 32    	bra       Z, 0x471e <.L27>

00004714 <.LSM97>:
        self->write(self, val);
    4714:	1e 02 78    	mov.w     [w14], w4
    4716:	14 0a 90    	mov.w     [w4+18], w4
    4718:	9e 00 90    	mov.w     [w14+2], w1
    471a:	1e 00 78    	mov.w     [w14], w0
    471c:	04 00 01    	call      w4

0000471e <.L27>:
}
    471e:	00 80 fa    	ulnk      
    4720:	00 00 06    	return    

00004722 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    4722:	02 00 fa    	lnk       #0x2
    4724:	00 0f 78    	mov.w     w0, [w14]

00004726 <.LSM100>:
    if (self->read)
    4726:	1e 02 78    	mov.w     [w14], w4
    4728:	24 0a 90    	mov.w     [w4+20], w4
    472a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    472c:	06 00 32    	bra       Z, 0x473a <.L30>

0000472e <.LSM101>:
        return self->read(self);
    472e:	1e 02 78    	mov.w     [w14], w4
    4730:	24 0a 90    	mov.w     [w4+20], w4
    4732:	1e 00 78    	mov.w     [w14], w0
    4734:	04 00 01    	call      w4
    4736:	00 02 78    	mov.w     w0, w4
    4738:	01 00 37    	bra       0x473c <.L31>

0000473a <.L30>:
    else
        return 0xFFFF;
    473a:	00 82 eb    	setm.w    w4

0000473c <.L31>:
}
    473c:	04 00 78    	mov.w     w4, w0
    473e:	00 80 fa    	ulnk      
    4740:	00 00 06    	return    

00004742 <_myAbs>:

// because apparently PIC C doesn't have abs already built into its libraries. Or if id does,
// I don't know where to look. #include "math.h" didn't do it.
// note: really cool way to do this with terinery operator: return (x) > 0 ? (x) : -(x)
int myAbs(int x) {
    4742:	02 00 fa    	lnk       #0x2
    4744:	00 0f 78    	mov.w     w0, [w14]

00004746 <.LSM1>:
    if (x > 0) {
    4746:	1e 02 78    	mov.w     [w14], w4
    4748:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    474a:	02 00 34    	bra       LE, 0x4750 <.L2>

0000474c <.LSM2>:
        return x;
    474c:	1e 02 78    	mov.w     [w14], w4
    474e:	01 00 37    	bra       0x4752 <.L3>

00004750 <.L2>:
    }
    else {
        return -(x);
    4750:	1e 02 ea    	neg.w     [w14], w4

00004752 <.L3>:
    }
}
    4752:	04 00 78    	mov.w     w4, w0
    4754:	00 80 fa    	ulnk      
    4756:	00 00 06    	return    

00004758 <_updatePosition>:

void updatePosition() {
    4758:	00 00 fa    	lnk       #0x0

0000475a <.LSM6>:
    rawPos = pin_read(&A[5]) >> 6;
    475a:	20 9a 20    	mov.w     #0x9a2, w0
    475c:	e2 ff 07    	rcall     0x4722 <_pin_read>
    475e:	00 02 78    	mov.w     w0, w4
    4760:	46 22 de    	lsr.w     w4, #0x6, w4
    4762:	b4 65 88    	mov.w     w4, 0xcb6

00004764 <.LSM7>:
     
    lastRawDiff = rawPos - lastLastRawPos; 
    4764:	b5 65 80    	mov.w     0xcb6, w5
    4766:	d4 65 80    	mov.w     0xcba, w4
    4768:	04 82 52    	sub.w     w5, w4, w4
    476a:	f4 65 88    	mov.w     w4, 0xcbe

0000476c <.LSM8>:
    lastRawOffset = myAbs(lastRawDiff);
    476c:	f4 65 80    	mov.w     0xcbe, w4
    476e:	04 00 78    	mov.w     w4, w0
    4770:	e8 ff 07    	rcall     0x4742 <_myAbs>
    4772:	00 02 78    	mov.w     w0, w4
    4774:	04 66 88    	mov.w     w4, 0xcc0

00004776 <.LSM9>:
    
    lastLastRawPos = lastRawPos;
    4776:	c4 65 80    	mov.w     0xcb8, w4
    4778:	d4 65 88    	mov.w     w4, 0xcba

0000477a <.LSM10>:
    lastRawPos = rawPos;
    477a:	b4 65 80    	mov.w     0xcb6, w4
    477c:	c4 65 88    	mov.w     w4, 0xcb8

0000477e <.LSM11>:
    
    //check for flip and increment or decrement accordingly
    if((lastRawOffset > flipThresh) && (!flipped)) { 
    477e:	04 66 80    	mov.w     0xcc0, w4
    4780:	84 02 78    	mov.w     w4, w5
    4782:	44 67 80    	mov.w     0xce8, w4
    4784:	84 8f 52    	sub.w     w5, w4, [w15]
    4786:	14 00 36    	bra       LEU, 0x47b0 <.L5>
    4788:	84 cc 20    	mov.w     #0xcc8, w4
    478a:	14 42 78    	mov.b     [w4], w4
    478c:	04 04 a2    	btg.b     w4, #0x0
    478e:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    4790:	0f 00 32    	bra       Z, 0x47b0 <.L5>

00004792 <.LSM12>:
        if(lastRawDiff > 0) {        
    4792:	f4 65 80    	mov.w     0xcbe, w4
    4794:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4796:	04 00 34    	bra       LE, 0x47a0 <.L6>

00004798 <.LSM13>:
            flipNumber--;             
    4798:	e4 65 80    	mov.w     0xcbc, w4
    479a:	04 02 e9    	dec.w     w4, w4
    479c:	e4 65 88    	mov.w     w4, 0xcbc
    479e:	03 00 37    	bra       0x47a6 <.L7>

000047a0 <.L6>:
        } else {                     
            flipNumber++;             
    47a0:	e4 65 80    	mov.w     0xcbc, w4
    47a2:	04 02 e8    	inc.w     w4, w4
    47a4:	e4 65 88    	mov.w     w4, 0xcbc

000047a6 <.L7>:
        }
        flipped = true;          
    47a6:	14 c0 b3    	mov.b     #0x1, w4
    47a8:	04 43 78    	mov.b     w4, w6
    47aa:	85 cc 20    	mov.w     #0xcc8, w5
    47ac:	86 4a 78    	mov.b     w6, [w5]
    47ae:	04 00 37    	bra       0x47b8 <.L8>

000047b0 <.L5>:
    } else {                       
        flipped = false;
    47b0:	00 42 eb    	clr.b     w4
    47b2:	04 43 78    	mov.b     w4, w6
    47b4:	85 cc 20    	mov.w     #0xcc8, w5
    47b6:	86 4a 78    	mov.b     w6, [w5]

000047b8 <.L8>:
    }

    cumulativeVal = rawPos + flipNumber*700;    //each flip changes cumulative value by 700
    47b8:	e5 65 80    	mov.w     0xcbc, w5
    47ba:	c4 2b 20    	mov.w     #0x2bc, w4
    47bc:	04 aa b9    	mul.ss    w5, w4, w4
    47be:	84 02 78    	mov.w     w4, w5
    47c0:	b4 65 80    	mov.w     0xcb6, w4
    47c2:	04 82 42    	add.w     w5, w4, w4
    47c4:	14 66 88    	mov.w     w4, 0xcc2

000047c6 <.LSM18>:
    current_position = cumulativeVal-initPos;
    47c6:	15 66 80    	mov.w     0xcc2, w5
    47c8:	34 66 80    	mov.w     0xcc6, w4
    47ca:	04 82 52    	sub.w     w5, w4, w4
    47cc:	24 66 88    	mov.w     w4, 0xcc4

000047ce <.LSM19>:
}
    47ce:	00 80 fa    	ulnk      
    47d0:	00 00 06    	return    

000047d2 <_set_torque>:


// this function measures the current torque (analog reading of motor current), then compares
// this value to the desired torque, then slightly increases or decreases the motor voltage
// (PWM) to compensate. If called frequently enough, actual torque will catch up with desired torque.
// It could be more efficiently replaced with an actual PID loop.
void set_torque() { // should hand in desired torque, but currently all our variables are global . . . :(
    47d2:	00 00 fa    	lnk       #0x0

000047d4 <.LSM21>:
    force_current = pin_read(&A[0]) >> 6; // read the current sense resistor
    47d4:	40 93 20    	mov.w     #0x934, w0
    47d6:	a5 ff 07    	rcall     0x4722 <_pin_read>
    47d8:	00 02 78    	mov.w     w0, w4
    47da:	46 22 de    	lsr.w     w4, #0x6, w4
    47dc:	64 66 88    	mov.w     w4, 0xccc

000047de <.LSM22>:

    if (myAbs(myAbs(force_desired)-force_current)>2) { // significant enough to change the motor speed
    47de:	54 66 80    	mov.w     0xcca, w4
    47e0:	04 00 78    	mov.w     w4, w0
    47e2:	af ff 07    	rcall     0x4742 <_myAbs>
    47e4:	00 02 78    	mov.w     w0, w4
    47e6:	65 66 80    	mov.w     0xccc, w5
    47e8:	05 02 52    	sub.w     w4, w5, w4
    47ea:	04 00 78    	mov.w     w4, w0
    47ec:	aa ff 07    	rcall     0x4742 <_myAbs>
    47ee:	00 02 78    	mov.w     w0, w4
    47f0:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    47f2:	4c 00 34    	bra       LE, 0x488c <.L9>

000047f4 <.LSM23>:
        if (myAbs(force_desired)-force_current < 0) { // want less!!
    47f4:	54 66 80    	mov.w     0xcca, w4
    47f6:	04 00 78    	mov.w     w4, w0
    47f8:	a4 ff 07    	rcall     0x4742 <_myAbs>
    47fa:	00 02 78    	mov.w     w0, w4
    47fc:	65 66 80    	mov.w     0xccc, w5
    47fe:	05 02 52    	sub.w     w4, w5, w4
    4800:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4802:	06 00 3d    	bra       GE, 0x4810 <.L11>

00004804 <.LSM24>:
            last_duty -= kI;
    4804:	74 66 80    	mov.w     0xcce, w4
    4806:	84 02 78    	mov.w     w4, w5
    4808:	54 67 80    	mov.w     0xcea, w4
    480a:	04 82 52    	sub.w     w5, w4, w4
    480c:	74 66 88    	mov.w     w4, 0xcce
    480e:	05 00 37    	bra       0x481a <.L12>

00004810 <.L11>:
        }
        else {
            last_duty += kI; // want MORE!!
    4810:	74 66 80    	mov.w     0xcce, w4
    4812:	84 02 78    	mov.w     w4, w5
    4814:	54 67 80    	mov.w     0xcea, w4
    4816:	04 82 42    	add.w     w5, w4, w4
    4818:	74 66 88    	mov.w     w4, 0xcce

0000481a <.L12>:
        }
        // deal with extreme cases
        if (last_duty < 0) {
    481a:	74 66 80    	mov.w     0xcce, w4
    481c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    481e:	02 00 3d    	bra       GE, 0x4824 <.L13>

00004820 <.LSM27>:
            last_duty = 0;
    4820:	00 02 eb    	clr.w     w4
    4822:	74 66 88    	mov.w     w4, 0xcce

00004824 <.L13>:
        }
        if (last_duty > 65000) {
            last_duty = 65000;
        }
        if ((last_duty > 3500) && (last_duty < 5500)) { // avoid dead spot
    4824:	75 66 80    	mov.w     0xcce, w5
    4826:	c4 da 20    	mov.w     #0xdac, w4
    4828:	84 8f 52    	sub.w     w5, w4, [w15]
    482a:	06 00 34    	bra       LE, 0x4838 <.L14>
    482c:	75 66 80    	mov.w     0xcce, w5
    482e:	b4 57 21    	mov.w     #0x157b, w4
    4830:	84 8f 52    	sub.w     w5, w4, [w15]
    4832:	02 00 3c    	bra       GT, 0x4838 <.L14>

00004834 <.LSM29>:
            last_duty = 8000;
    4834:	04 f4 21    	mov.w     #0x1f40, w4
    4836:	74 66 88    	mov.w     w4, 0xcce

00004838 <.L14>:
        }
        if ((last_duty > 5549) && (last_duty < 7900)) {
    4838:	75 66 80    	mov.w     0xcce, w5
    483a:	d4 5a 21    	mov.w     #0x15ad, w4
    483c:	84 8f 52    	sub.w     w5, w4, [w15]
    483e:	06 00 34    	bra       LE, 0x484c <.L15>
    4840:	75 66 80    	mov.w     0xcce, w5
    4842:	b4 ed 21    	mov.w     #0x1edb, w4
    4844:	84 8f 52    	sub.w     w5, w4, [w15]
    4846:	02 00 3c    	bra       GT, 0x484c <.L15>

00004848 <.LSM31>:
            last_duty = 3400;
    4848:	84 d4 20    	mov.w     #0xd48, w4
    484a:	74 66 88    	mov.w     w4, 0xcce

0000484c <.L15>:
        }
        // now, update motor!
        if (force_desired > 0) {
    484c:	54 66 80    	mov.w     0xcca, w4
    484e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4850:	0f 00 34    	bra       LE, 0x4870 <.L16>

00004852 <.LSM33>:
            oc_pwm(&oc2, &D[5], &timer4, 0, 0);
    4852:	80 01 eb    	clr.w     w3
    4854:	60 22 b8    	mul.uu    w4, #0x0, w4
    4856:	a2 c5 20    	mov.w     #0xc5a, w2
    4858:	e1 86 20    	mov.w     #0x86e, w1
    485a:	a0 ae 20    	mov.w     #0xaea, w0
    485c:	b0 fb 07    	rcall     0x3fbe <_oc_pwm>

0000485e <.LSM34>:
            oc_pwm(&oc1, &D[6], &timer2, 20000, last_duty);
    485e:	74 66 80    	mov.w     0xcce, w4
    4860:	84 01 78    	mov.w     w4, w3
    4862:	04 00 24    	mov.w     #0x4000, w4
    4864:	c5 69 24    	mov.w     #0x469c, w5
    4866:	e2 c2 20    	mov.w     #0xc2e, w2
    4868:	41 88 20    	mov.w     #0x884, w1
    486a:	80 ad 20    	mov.w     #0xad8, w0
    486c:	a8 fb 07    	rcall     0x3fbe <_oc_pwm>
    486e:	0e 00 37    	bra       0x488c <.L9>

00004870 <.L16>:
        } else {
            oc_pwm(&oc1, &D[6], &timer2, 0, 0);
    4870:	80 01 eb    	clr.w     w3
    4872:	60 22 b8    	mul.uu    w4, #0x0, w4
    4874:	e2 c2 20    	mov.w     #0xc2e, w2
    4876:	41 88 20    	mov.w     #0x884, w1
    4878:	80 ad 20    	mov.w     #0xad8, w0
    487a:	a1 fb 07    	rcall     0x3fbe <_oc_pwm>

0000487c <.LSM36>:
            oc_pwm(&oc2, &D[5], &timer4, 20000, last_duty);
    487c:	74 66 80    	mov.w     0xcce, w4
    487e:	84 01 78    	mov.w     w4, w3
    4880:	04 00 24    	mov.w     #0x4000, w4
    4882:	c5 69 24    	mov.w     #0x469c, w5
    4884:	a2 c5 20    	mov.w     #0xc5a, w2
    4886:	e1 86 20    	mov.w     #0x86e, w1
    4888:	a0 ae 20    	mov.w     #0xaea, w0
    488a:	99 fb 07    	rcall     0x3fbe <_oc_pwm>

0000488c <.L9>:
        }
    }
}
    488c:	00 80 fa    	ulnk      
    488e:	00 00 06    	return    

00004890 <_Update_status>:

void Update_status(_TIMER *self){
    4890:	02 00 fa    	lnk       #0x2
    4892:	00 0f 78    	mov.w     w0, [w14]

00004894 <.LSM39>:
    
    updatePosition(); // check the magnetoresistive sensor to make sure we always keep track of where
    4894:	61 ff 07    	rcall     0x4758 <_updatePosition>

00004896 <.LSM40>:
    // we are
    test_counter ++;
    4896:	b4 66 80    	mov.w     0xcd6, w4
    4898:	04 02 e8    	inc.w     w4, w4
    489a:	b4 66 88    	mov.w     w4, 0xcd6

0000489c <.LSM41>:

    /*
    switch(command) {
        case SPRING: 
            led_on(&led1); led_off(&led2); led_off(&led3); // for visual feedback (debugging).
            force_desired = -(current_position-800) >> 6; // arbitrary units. will fix later
            force_desired = force_desired * 5;
            set_torque();
            break;
        case DAMPED:
            led_off(&led1); led_on(&led2); led_off(&led3); // for visual feedback (debugging).
            break;
        case TEXTURE:
            led_off(&led1); led_off(&led2); led_on(&led3); // for visual feedback (debugging).
            break;
        case WALL:
            led_on(&led1); led_on(&led2); led_on(&led3); // for visual feedback (debugging).
            break;
        default :
            //stop_motor();
            break;

    }*/

}
    489c:	00 80 fa    	ulnk      
    489e:	00 00 06    	return    

000048a0 <_printData>:

void printData(_TIMER *self) {
    48a0:	02 00 fa    	lnk       #0x2
    48a2:	00 0f 78    	mov.w     w0, [w14]

000048a4 <.LSM43>:
    printf("%d:%d:%d:%d:%d\n",current_position, force_desired,force_current,last_duty, test_counter);
    48a4:	b0 66 80    	mov.w     0xcd6, w0
    48a6:	77 66 80    	mov.w     0xcce, w7
    48a8:	66 66 80    	mov.w     0xccc, w6
    48aa:	55 66 80    	mov.w     0xcca, w5
    48ac:	24 66 80    	mov.w     0xcc4, w4
    48ae:	80 1f 78    	mov.w     w0, [w15++]
    48b0:	87 1f 78    	mov.w     w7, [w15++]
    48b2:	86 1f 78    	mov.w     w6, [w15++]
    48b4:	85 1f 78    	mov.w     w5, [w15++]
    48b6:	84 1f 78    	mov.w     w4, [w15++]
    48b8:	c4 0b 2a    	mov.w     #0xa0bc, w4
    48ba:	84 1f 78    	mov.w     w4, [w15++]
    48bc:	4e e6 07    	rcall     0x155a <__printf_cdnopuxX>
    48be:	ec 87 57    	sub.w     w15, #0xc, w15

000048c0 <.LSM44>:
}
    48c0:	00 80 fa    	ulnk      
    48c2:	00 00 06    	return    

000048c4 <_VendorRequests>:



void VendorRequests(void) { // deal with 
    48c4:	02 00 fa    	lnk       #0x2

000048c6 <.LSM46>:
    WORD temp;

    switch (USB_setup.bRequest) {
    48c6:	e4 bf 20    	mov.w     #0xbfe, w4
    48c8:	14 42 90    	mov.b     [w4+1], w4
    48ca:	04 82 fb    	ze        w4, w4
    48cc:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    48ce:	0f 00 3a    	bra       NZ, 0x48ee <.L23>

000048d0 <.LSM47>:
        case SET_VALS: // they should all be set_vals, worth checking just to be sure.
            command = USB_setup.wValue.w;
    48d0:	e4 bf 20    	mov.w     #0xbfe, w4
    48d2:	14 02 90    	mov.w     [w4+2], w4
    48d4:	94 66 88    	mov.w     w4, 0xcd2

000048d6 <.LSM48>:
            argument = USB_setup.wIndex.w;
    48d6:	e4 bf 20    	mov.w     #0xbfe, w4
    48d8:	24 02 90    	mov.w     [w4+4], w4
    48da:	a4 66 88    	mov.w     w4, 0xcd4

000048dc <.LSM49>:
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    48dc:	00 42 eb    	clr.b     w4
    48de:	04 43 78    	mov.b     w4, w6
    48e0:	45 e0 20    	mov.w     #0xe04, w5
    48e2:	86 4a 78    	mov.b     w6, [w5]

000048e4 <.LSM50>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    48e4:	84 cc b3    	mov.b     #0xc8, w4
    48e6:	04 43 78    	mov.b     w4, w6
    48e8:	55 e0 20    	mov.w     #0xe05, w5
    48ea:	86 4a 78    	mov.b     w6, [w5]

000048ec <.LSM51>:
            break;
    48ec:	06 00 37    	bra       0x48fa <.L19>

000048ee <.L23>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    48ee:	24 c1 20    	mov.w     #0xc12, w4
    48f0:	14 42 78    	mov.b     [w4], w4
    48f2:	04 04 a0    	bset.b    w4, #0x0
    48f4:	04 43 78    	mov.b     w4, w6
    48f6:	25 c1 20    	mov.w     #0xc12, w5
    48f8:	86 4a 78    	mov.b     w6, [w5]

000048fa <.L19>:
    }
}
    48fa:	00 80 fa    	ulnk      
    48fc:	00 00 06    	return    

000048fe <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    48fe:	00 00 fa    	lnk       #0x0

00004900 <.LSM55>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4900:	24 c1 20    	mov.w     #0xc12, w4
    4902:	14 42 78    	mov.b     [w4], w4
    4904:	04 04 a0    	bset.b    w4, #0x0
    4906:	04 43 78    	mov.b     w4, w6
    4908:	25 c1 20    	mov.w     #0xc12, w5
    490a:	86 4a 78    	mov.b     w6, [w5]

0000490c <.LSM56>:
    }
}
    490c:	00 80 fa    	ulnk      
    490e:	00 00 06    	return    

00004910 <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    4910:	00 00 fa    	lnk       #0x0

00004912 <.LSM58>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4912:	24 c1 20    	mov.w     #0xc12, w4
    4914:	14 42 78    	mov.b     [w4], w4
    4916:	04 04 a0    	bset.b    w4, #0x0
    4918:	04 43 78    	mov.b     w4, w6
    491a:	25 c1 20    	mov.w     #0xc12, w5
    491c:	86 4a 78    	mov.b     w6, [w5]

0000491e <.LSM59>:
    }
}
    491e:	00 80 fa    	ulnk      
    4920:	00 00 06    	return    

00004922 <_Config_Motor_Pins>:


// the motorsheild needs a handful of digital pins set to specific values
// to operate in the mode we want it to, plus A5 must be configured as an
// input.
void Config_Motor_Pins() {
    4922:	00 00 fa    	lnk       #0x0

00004924 <.LSM61>:
    pin_analogIn(&A[5]); // magnetoresistive sensor
    4924:	20 9a 20    	mov.w     #0x9a2, w0
    4926:	87 fe 07    	rcall     0x4636 <_pin_analogIn>

00004928 <.LSM62>:
    pin_analogIn(&A[0]); // current sensing resistor (amplified)
    4928:	40 93 20    	mov.w     #0x934, w0
    492a:	85 fe 07    	rcall     0x4636 <_pin_analogIn>

0000492c <.LSM63>:

    pin_digitalOut(&D[2]);
    492c:	c0 82 20    	mov.w     #0x82c, w0
    492e:	4e fe 07    	rcall     0x45cc <_pin_digitalOut>

00004930 <.LSM64>:
    pin_set(&D[2]);
    4930:	c0 82 20    	mov.w     #0x82c, w0
    4932:	a9 fe 07    	rcall     0x4686 <_pin_set>

00004934 <.LSM65>:

    pin_digitalOut(&D[3]);
    4934:	20 84 20    	mov.w     #0x842, w0
    4936:	4a fe 07    	rcall     0x45cc <_pin_digitalOut>

00004938 <.LSM66>:
    pin_clear(&D[3]);
    4938:	20 84 20    	mov.w     #0x842, w0
    493a:	ba fe 07    	rcall     0x46b0 <_pin_clear>

0000493c <.LSM67>:

    pin_digitalOut(&D[4]);
    493c:	80 85 20    	mov.w     #0x858, w0
    493e:	46 fe 07    	rcall     0x45cc <_pin_digitalOut>

00004940 <.LSM68>:
    pin_set(&D[4]);
    4940:	80 85 20    	mov.w     #0x858, w0
    4942:	a1 fe 07    	rcall     0x4686 <_pin_set>

00004944 <.LSM69>:

    pin_digitalOut(&D[5]);
    4944:	e0 86 20    	mov.w     #0x86e, w0
    4946:	42 fe 07    	rcall     0x45cc <_pin_digitalOut>

00004948 <.LSM70>:
    pin_clear(&D[5]);
    4948:	e0 86 20    	mov.w     #0x86e, w0
    494a:	b2 fe 07    	rcall     0x46b0 <_pin_clear>

0000494c <.LSM71>:

    pin_digitalOut(&D[7]);
    494c:	a0 89 20    	mov.w     #0x89a, w0
    494e:	3e fe 07    	rcall     0x45cc <_pin_digitalOut>

00004950 <.LSM72>:
    pin_set(&D[7]);
    4950:	a0 89 20    	mov.w     #0x89a, w0
    4952:	99 fe 07    	rcall     0x4686 <_pin_set>

00004954 <.LSM73>:

    pin_digitalOut(&D[6]);
    4954:	40 88 20    	mov.w     #0x884, w0
    4956:	3a fe 07    	rcall     0x45cc <_pin_digitalOut>

00004958 <.LSM74>:
    pin_clear(&D[6]);
    4958:	40 88 20    	mov.w     #0x884, w0
    495a:	aa fe 07    	rcall     0x46b0 <_pin_clear>

0000495c <.LSM75>:
}
    495c:	00 80 fa    	ulnk      
    495e:	00 00 06    	return    

00004960 <_main>:

int16_t main(void) {
    4960:	00 00 fa    	lnk       #0x0

00004962 <.LSM77>:
    init_clock();
    4962:	04 10 20    	mov.w     #0x100, w4
    4964:	24 3a 88    	mov.w     w4, 0x744

00004966 <.LSM78>:
    init_uart();
    4966:	72 ed 07    	rcall     0x244c <_init_uart>

00004968 <.LSM79>:
    init_ui();
    4968:	28 00 07    	rcall     0x49ba <_init_ui>

0000496a <.LSM80>:
    init_timer();
    496a:	fa f7 07    	rcall     0x3960 <_init_timer>

0000496c <.LSM81>:
    init_pin();
    496c:	c4 fc 07    	rcall     0x42f6 <_init_pin>

0000496e <.LSM82>:
    init_oc();
    496e:	76 fa 07    	rcall     0x3e5c <_init_oc>

00004970 <.LSM83>:

    command = 0; // just supplying defaults
    4970:	00 02 eb    	clr.w     w4
    4972:	94 66 88    	mov.w     w4, 0xcd2

00004974 <.LSM84>:
    argument = 0;
    4974:	00 02 eb    	clr.w     w4
    4976:	a4 66 88    	mov.w     w4, 0xcd4

00004978 <.LSM85>:
    test_counter = 0;
    4978:	00 02 eb    	clr.w     w4
    497a:	b4 66 88    	mov.w     w4, 0xcd6

0000497c <.LSM86>:


    Config_Motor_Pins();
    497c:	d2 ff 07    	rcall     0x4922 <_Config_Motor_Pins>

0000497e <.LSM87>:

    lastLastRawPos = pin_read(&A[5]) >> 6;
    497e:	20 9a 20    	mov.w     #0x9a2, w0
    4980:	d0 fe 07    	rcall     0x4722 <_pin_read>
    4982:	00 02 78    	mov.w     w0, w4
    4984:	46 22 de    	lsr.w     w4, #0x6, w4
    4986:	d4 65 88    	mov.w     w4, 0xcba

00004988 <.LSM88>:
    lastRawPos = pin_read(&A[5]) >> 6;
    4988:	20 9a 20    	mov.w     #0x9a2, w0
    498a:	cb fe 07    	rcall     0x4722 <_pin_read>
    498c:	00 02 78    	mov.w     w0, w4
    498e:	46 22 de    	lsr.w     w4, #0x6, w4
    4990:	c4 65 88    	mov.w     w4, 0xcb8

00004992 <.LSM89>:
    initPos = lastLastRawPos;
    4992:	d4 65 80    	mov.w     0xcba, w4
    4994:	34 66 88    	mov.w     w4, 0xcc6

00004996 <.LSM90>:

    InitUSB();
    4996:	75 f2 07    	rcall     0x2e82 <_InitUSB>

00004998 <.LSM91>:
    while (USB_USWSTAT!=CONFIG_STATE) {     // while the peripheral is not configured...
    4998:	01 00 37    	bra       0x499c <.L28>

0000499a <.L29>:
        ServiceUSB();                       // ...service USB requests
    499a:	c3 f2 07    	rcall     0x2f22 <_ServiceUSB>

0000499c <.L28>:
    499c:	64 c1 20    	mov.w     #0xc16, w4
    499e:	14 42 78    	mov.b     [w4], w4
    49a0:	e3 4f 52    	sub.b     w4, #0x3, [w15]
    49a2:	fb ff 3a    	bra       NZ, 0x499a <.L29>

000049a4 <.LSM94>:
    }

    timer_every(&timer3,.0005, Update_status); // check the state of the FSM, then check
    49a4:	01 89 24    	mov.w     #0x4890, w1
    49a6:	f2 26 21    	mov.w     #0x126f, w2
    49a8:	33 a0 23    	mov.w     #0x3a03, w3
    49aa:	40 c4 20    	mov.w     #0xc44, w0
    49ac:	9d f9 07    	rcall     0x3ce8 <_timer_every>

000049ae <.LSM95>:
    // the position of the motor, then update the voltage to the motor (PWM) based on
    // what state it is in and what it should be doing.

    timer_every(&timer1,.5,printData); //report position
    49ae:	01 8a 24    	mov.w     #0x48a0, w1
    49b0:	02 00 20    	mov.w     #0x0, w2
    49b2:	03 f0 23    	mov.w     #0x3f00, w3
    49b4:	80 c1 20    	mov.w     #0xc18, w0
    49b6:	98 f9 07    	rcall     0x3ce8 <_timer_every>

000049b8 <.L30>:

    while(1) {
        //ServiceUSB(); 
    }
    49b8:	ff ff 37    	bra       .

000049ba <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    49ba:	00 00 fa    	lnk       #0x0

000049bc <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    49bc:	74 c0 b3    	mov.b     #0x7, w4
    49be:	63 4e 20    	mov.w     #0x4e6, w3
    49c0:	82 2d 20    	mov.w     #0x2d8, w2
    49c2:	a1 2d 20    	mov.w     #0x2da, w1
    49c4:	60 c8 20    	mov.w     #0xc86, w0
    49c6:	20 00 07    	rcall     0x4a08 <_led_init>

000049c8 <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    49c8:	00 42 eb    	clr.b     w4
    49ca:	a3 4e 20    	mov.w     #0x4ea, w3
    49cc:	82 2e 20    	mov.w     #0x2e8, w2
    49ce:	a1 2e 20    	mov.w     #0x2ea, w1
    49d0:	e0 c8 20    	mov.w     #0xc8e, w0
    49d2:	1a 00 07    	rcall     0x4a08 <_led_init>

000049d4 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    49d4:	14 c0 b3    	mov.b     #0x1, w4
    49d6:	a3 4e 20    	mov.w     #0x4ea, w3
    49d8:	82 2e 20    	mov.w     #0x2e8, w2
    49da:	a1 2e 20    	mov.w     #0x2ea, w1
    49dc:	60 c9 20    	mov.w     #0xc96, w0
    49de:	14 00 07    	rcall     0x4a08 <_led_init>

000049e0 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    49e0:	f4 c0 b3    	mov.b     #0xf, w4
    49e2:	43 4e 20    	mov.w     #0x4e4, w3
    49e4:	02 2d 20    	mov.w     #0x2d0, w2
    49e6:	21 2d 20    	mov.w     #0x2d2, w1
    49e8:	e0 c9 20    	mov.w     #0xc9e, w0
    49ea:	ae 00 07    	rcall     0x4b48 <_sw_init>

000049ec <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    49ec:	c4 c0 b3    	mov.b     #0xc, w4
    49ee:	43 4e 20    	mov.w     #0x4e4, w3
    49f0:	02 2d 20    	mov.w     #0x2d0, w2
    49f2:	21 2d 20    	mov.w     #0x2d2, w1
    49f4:	60 ca 20    	mov.w     #0xca6, w0
    49f6:	a8 00 07    	rcall     0x4b48 <_sw_init>

000049f8 <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    49f8:	c4 c0 b3    	mov.b     #0xc, w4
    49fa:	23 4e 20    	mov.w     #0x4e2, w3
    49fc:	82 2c 20    	mov.w     #0x2c8, w2
    49fe:	a1 2c 20    	mov.w     #0x2ca, w1
    4a00:	e0 ca 20    	mov.w     #0xcae, w0
    4a02:	a2 00 07    	rcall     0x4b48 <_sw_init>

00004a04 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    4a04:	00 80 fa    	ulnk      
    4a06:	00 00 06    	return    

00004a08 <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    4a08:	0a 00 fa    	lnk       #0xa
    4a0a:	00 0f 78    	mov.w     w0, [w14]
    4a0c:	11 07 98    	mov.w     w1, [w14+2]
    4a0e:	22 07 98    	mov.w     w2, [w14+4]
    4a10:	33 07 98    	mov.w     w3, [w14+6]
    4a12:	04 4f 98    	mov.b     w4, [w14+8]

00004a14 <.LSM9>:
    self->port = port;
    4a14:	1e 02 78    	mov.w     [w14], w4
    4a16:	9e 02 90    	mov.w     [w14+2], w5
    4a18:	05 0a 78    	mov.w     w5, [w4]

00004a1a <.LSM10>:
    self->tris = tris;
    4a1a:	1e 02 78    	mov.w     [w14], w4
    4a1c:	ae 02 90    	mov.w     [w14+4], w5
    4a1e:	15 02 98    	mov.w     w5, [w4+2]

00004a20 <.LSM11>:
    self->ans = ans;
    4a20:	1e 02 78    	mov.w     [w14], w4
    4a22:	be 02 90    	mov.w     [w14+6], w5
    4a24:	25 02 98    	mov.w     w5, [w4+4]

00004a26 <.LSM12>:
    self->bit = bit;
    4a26:	1e 02 78    	mov.w     [w14], w4
    4a28:	8e 4a 90    	mov.b     [w14+8], w5
    4a2a:	65 42 98    	mov.b     w5, [w4+6]

00004a2c <.LSM13>:

    bitclear(self->ans, self->bit);
    4a2c:	1e 02 78    	mov.w     [w14], w4
    4a2e:	24 02 90    	mov.w     [w4+4], w4
    4a30:	9e 02 78    	mov.w     [w14], w5
    4a32:	a5 02 90    	mov.w     [w5+4], w5
    4a34:	15 03 78    	mov.w     [w5], w6
    4a36:	9e 02 78    	mov.w     [w14], w5
    4a38:	e5 42 90    	mov.b     [w5+6], w5
    4a3a:	85 82 fb    	ze        w5, w5
    4a3c:	17 00 20    	mov.w     #0x1, w7
    4a3e:	85 3a dd    	sl.w      w7, w5, w5
    4a40:	85 82 ea    	com.w     w5, w5
    4a42:	85 02 63    	and.w     w6, w5, w5
    4a44:	05 0a 78    	mov.w     w5, [w4]

00004a46 <.LSM14>:
    bitclear(self->port, self->bit);
    4a46:	1e 02 78    	mov.w     [w14], w4
    4a48:	14 02 78    	mov.w     [w4], w4
    4a4a:	9e 02 78    	mov.w     [w14], w5
    4a4c:	95 02 78    	mov.w     [w5], w5
    4a4e:	15 03 78    	mov.w     [w5], w6
    4a50:	9e 02 78    	mov.w     [w14], w5
    4a52:	e5 42 90    	mov.b     [w5+6], w5
    4a54:	85 82 fb    	ze        w5, w5
    4a56:	17 00 20    	mov.w     #0x1, w7
    4a58:	85 3a dd    	sl.w      w7, w5, w5
    4a5a:	85 82 ea    	com.w     w5, w5
    4a5c:	85 02 63    	and.w     w6, w5, w5
    4a5e:	05 0a 78    	mov.w     w5, [w4]

00004a60 <.LSM15>:
    bitclear(self->tris, self->bit);
    4a60:	1e 02 78    	mov.w     [w14], w4
    4a62:	14 02 90    	mov.w     [w4+2], w4
    4a64:	9e 02 78    	mov.w     [w14], w5
    4a66:	95 02 90    	mov.w     [w5+2], w5
    4a68:	15 03 78    	mov.w     [w5], w6
    4a6a:	9e 02 78    	mov.w     [w14], w5
    4a6c:	e5 42 90    	mov.b     [w5+6], w5
    4a6e:	85 82 fb    	ze        w5, w5
    4a70:	17 00 20    	mov.w     #0x1, w7
    4a72:	85 3a dd    	sl.w      w7, w5, w5
    4a74:	85 82 ea    	com.w     w5, w5
    4a76:	85 02 63    	and.w     w6, w5, w5
    4a78:	05 0a 78    	mov.w     w5, [w4]

00004a7a <.LSM16>:
}
    4a7a:	00 80 fa    	ulnk      
    4a7c:	00 00 06    	return    

00004a7e <_led_on>:

void led_on(_LED *self) {
    4a7e:	02 00 fa    	lnk       #0x2
    4a80:	00 0f 78    	mov.w     w0, [w14]

00004a82 <.LSM18>:
    bitset(self->port, self->bit);
    4a82:	1e 02 78    	mov.w     [w14], w4
    4a84:	14 02 78    	mov.w     [w4], w4
    4a86:	9e 02 78    	mov.w     [w14], w5
    4a88:	95 02 78    	mov.w     [w5], w5
    4a8a:	15 03 78    	mov.w     [w5], w6
    4a8c:	9e 02 78    	mov.w     [w14], w5
    4a8e:	e5 42 90    	mov.b     [w5+6], w5
    4a90:	85 82 fb    	ze        w5, w5
    4a92:	17 00 20    	mov.w     #0x1, w7
    4a94:	85 3a dd    	sl.w      w7, w5, w5
    4a96:	86 82 72    	ior.w     w5, w6, w5
    4a98:	05 0a 78    	mov.w     w5, [w4]

00004a9a <.LSM19>:
}
    4a9a:	00 80 fa    	ulnk      
    4a9c:	00 00 06    	return    

00004a9e <_led_off>:

void led_off(_LED *self) {
    4a9e:	02 00 fa    	lnk       #0x2
    4aa0:	00 0f 78    	mov.w     w0, [w14]

00004aa2 <.LSM21>:
    bitclear(self->port, self->bit);
    4aa2:	1e 02 78    	mov.w     [w14], w4
    4aa4:	14 02 78    	mov.w     [w4], w4
    4aa6:	9e 02 78    	mov.w     [w14], w5
    4aa8:	95 02 78    	mov.w     [w5], w5
    4aaa:	15 03 78    	mov.w     [w5], w6
    4aac:	9e 02 78    	mov.w     [w14], w5
    4aae:	e5 42 90    	mov.b     [w5+6], w5
    4ab0:	85 82 fb    	ze        w5, w5
    4ab2:	17 00 20    	mov.w     #0x1, w7
    4ab4:	85 3a dd    	sl.w      w7, w5, w5
    4ab6:	85 82 ea    	com.w     w5, w5
    4ab8:	85 02 63    	and.w     w6, w5, w5
    4aba:	05 0a 78    	mov.w     w5, [w4]

00004abc <.LSM22>:
}
    4abc:	00 80 fa    	ulnk      
    4abe:	00 00 06    	return    

00004ac0 <_led_toggle>:

void led_toggle(_LED *self) {
    4ac0:	02 00 fa    	lnk       #0x2
    4ac2:	00 0f 78    	mov.w     w0, [w14]

00004ac4 <.LSM24>:
    bitflip(self->port, self->bit);
    4ac4:	1e 02 78    	mov.w     [w14], w4
    4ac6:	14 02 78    	mov.w     [w4], w4
    4ac8:	9e 02 78    	mov.w     [w14], w5
    4aca:	95 02 78    	mov.w     [w5], w5
    4acc:	15 03 78    	mov.w     [w5], w6
    4ace:	9e 02 78    	mov.w     [w14], w5
    4ad0:	e5 42 90    	mov.b     [w5+6], w5
    4ad2:	85 82 fb    	ze        w5, w5
    4ad4:	17 00 20    	mov.w     #0x1, w7
    4ad6:	85 3a dd    	sl.w      w7, w5, w5
    4ad8:	85 02 6b    	xor.w     w6, w5, w5
    4ada:	05 0a 78    	mov.w     w5, [w4]

00004adc <.LSM25>:
}
    4adc:	00 80 fa    	ulnk      
    4ade:	00 00 06    	return    

00004ae0 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    4ae0:	04 00 fa    	lnk       #0x4
    4ae2:	00 0f 78    	mov.w     w0, [w14]
    4ae4:	11 07 98    	mov.w     w1, [w14+2]

00004ae6 <.LSM27>:
    if (val)
    4ae6:	1e 02 90    	mov.w     [w14+2], w4
    4ae8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4aea:	0d 00 32    	bra       Z, 0x4b06 <.L7>

00004aec <.LSM28>:
        bitset(self->port, self->bit);
    4aec:	1e 02 78    	mov.w     [w14], w4
    4aee:	14 02 78    	mov.w     [w4], w4
    4af0:	9e 02 78    	mov.w     [w14], w5
    4af2:	95 02 78    	mov.w     [w5], w5
    4af4:	15 03 78    	mov.w     [w5], w6
    4af6:	9e 02 78    	mov.w     [w14], w5
    4af8:	e5 42 90    	mov.b     [w5+6], w5
    4afa:	85 82 fb    	ze        w5, w5
    4afc:	17 00 20    	mov.w     #0x1, w7
    4afe:	85 3a dd    	sl.w      w7, w5, w5
    4b00:	86 82 72    	ior.w     w5, w6, w5
    4b02:	05 0a 78    	mov.w     w5, [w4]
    4b04:	0d 00 37    	bra       0x4b20 <.L6>

00004b06 <.L7>:
    else
        bitclear(self->port, self->bit);
    4b06:	1e 02 78    	mov.w     [w14], w4
    4b08:	14 02 78    	mov.w     [w4], w4
    4b0a:	9e 02 78    	mov.w     [w14], w5
    4b0c:	95 02 78    	mov.w     [w5], w5
    4b0e:	15 03 78    	mov.w     [w5], w6
    4b10:	9e 02 78    	mov.w     [w14], w5
    4b12:	e5 42 90    	mov.b     [w5+6], w5
    4b14:	85 82 fb    	ze        w5, w5
    4b16:	17 00 20    	mov.w     #0x1, w7
    4b18:	85 3a dd    	sl.w      w7, w5, w5
    4b1a:	85 82 ea    	com.w     w5, w5
    4b1c:	85 02 63    	and.w     w6, w5, w5
    4b1e:	05 0a 78    	mov.w     w5, [w4]

00004b20 <.L6>:
}
    4b20:	00 80 fa    	ulnk      
    4b22:	00 00 06    	return    

00004b24 <_led_read>:

uint16_t led_read(_LED *self) {
    4b24:	02 00 fa    	lnk       #0x2
    4b26:	00 0f 78    	mov.w     w0, [w14]

00004b28 <.LSM32>:
    return bitread(self->port, self->bit);
    4b28:	1e 02 78    	mov.w     [w14], w4
    4b2a:	14 02 78    	mov.w     [w4], w4
    4b2c:	94 02 78    	mov.w     [w4], w5
    4b2e:	1e 02 78    	mov.w     [w14], w4
    4b30:	64 42 90    	mov.b     [w4+6], w4
    4b32:	04 82 fb    	ze        w4, w4
    4b34:	16 00 20    	mov.w     #0x1, w6
    4b36:	04 32 dd    	sl.w      w6, w4, w4
    4b38:	04 82 62    	and.w     w5, w4, w4
    4b3a:	04 f0 a7    	btsc.w    w4, #0xf
    4b3c:	04 02 ea    	neg.w     w4, w4
    4b3e:	04 02 ea    	neg.w     w4, w4
    4b40:	4f 22 de    	lsr.w     w4, #0xf, w4

00004b42 <.LSM33>:
}
    4b42:	04 00 78    	mov.w     w4, w0
    4b44:	00 80 fa    	ulnk      
    4b46:	00 00 06    	return    

00004b48 <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    4b48:	0a 00 fa    	lnk       #0xa
    4b4a:	00 0f 78    	mov.w     w0, [w14]
    4b4c:	11 07 98    	mov.w     w1, [w14+2]
    4b4e:	22 07 98    	mov.w     w2, [w14+4]
    4b50:	33 07 98    	mov.w     w3, [w14+6]
    4b52:	04 4f 98    	mov.b     w4, [w14+8]

00004b54 <.LSM35>:
    self->port = port;
    4b54:	1e 02 78    	mov.w     [w14], w4
    4b56:	9e 02 90    	mov.w     [w14+2], w5
    4b58:	05 0a 78    	mov.w     w5, [w4]

00004b5a <.LSM36>:
    self->tris = tris;
    4b5a:	1e 02 78    	mov.w     [w14], w4
    4b5c:	ae 02 90    	mov.w     [w14+4], w5
    4b5e:	15 02 98    	mov.w     w5, [w4+2]

00004b60 <.LSM37>:
    self->ans = ans;
    4b60:	1e 02 78    	mov.w     [w14], w4
    4b62:	be 02 90    	mov.w     [w14+6], w5
    4b64:	25 02 98    	mov.w     w5, [w4+4]

00004b66 <.LSM38>:
    self->bit = bit;
    4b66:	1e 02 78    	mov.w     [w14], w4
    4b68:	8e 4a 90    	mov.b     [w14+8], w5
    4b6a:	65 42 98    	mov.b     w5, [w4+6]

00004b6c <.LSM39>:

    bitclear(self->ans, self->bit);
    4b6c:	1e 02 78    	mov.w     [w14], w4
    4b6e:	24 02 90    	mov.w     [w4+4], w4
    4b70:	9e 02 78    	mov.w     [w14], w5
    4b72:	a5 02 90    	mov.w     [w5+4], w5
    4b74:	15 03 78    	mov.w     [w5], w6
    4b76:	9e 02 78    	mov.w     [w14], w5
    4b78:	e5 42 90    	mov.b     [w5+6], w5
    4b7a:	85 82 fb    	ze        w5, w5
    4b7c:	17 00 20    	mov.w     #0x1, w7
    4b7e:	85 3a dd    	sl.w      w7, w5, w5
    4b80:	85 82 ea    	com.w     w5, w5
    4b82:	85 02 63    	and.w     w6, w5, w5
    4b84:	05 0a 78    	mov.w     w5, [w4]

00004b86 <.LSM40>:
    bitset(self->tris, self->bit);
    4b86:	1e 02 78    	mov.w     [w14], w4
    4b88:	14 02 90    	mov.w     [w4+2], w4
    4b8a:	9e 02 78    	mov.w     [w14], w5
    4b8c:	95 02 90    	mov.w     [w5+2], w5
    4b8e:	15 03 78    	mov.w     [w5], w6
    4b90:	9e 02 78    	mov.w     [w14], w5
    4b92:	e5 42 90    	mov.b     [w5+6], w5
    4b94:	85 82 fb    	ze        w5, w5
    4b96:	17 00 20    	mov.w     #0x1, w7
    4b98:	85 3a dd    	sl.w      w7, w5, w5
    4b9a:	86 82 72    	ior.w     w5, w6, w5
    4b9c:	05 0a 78    	mov.w     w5, [w4]

00004b9e <.LSM41>:
}
    4b9e:	00 80 fa    	ulnk      
    4ba0:	00 00 06    	return    

00004ba2 <_sw_read>:

uint16_t sw_read(_SW *self) {
    4ba2:	02 00 fa    	lnk       #0x2
    4ba4:	00 0f 78    	mov.w     w0, [w14]

00004ba6 <.LSM43>:
    return bitread(self->port, self->bit);
    4ba6:	1e 02 78    	mov.w     [w14], w4
    4ba8:	14 02 78    	mov.w     [w4], w4
    4baa:	94 02 78    	mov.w     [w4], w5
    4bac:	1e 02 78    	mov.w     [w14], w4
    4bae:	64 42 90    	mov.b     [w4+6], w4
    4bb0:	04 82 fb    	ze        w4, w4
    4bb2:	16 00 20    	mov.w     #0x1, w6
    4bb4:	04 32 dd    	sl.w      w6, w4, w4
    4bb6:	04 82 62    	and.w     w5, w4, w4
    4bb8:	04 f0 a7    	btsc.w    w4, #0xf
    4bba:	04 02 ea    	neg.w     w4, w4
    4bbc:	04 02 ea    	neg.w     w4, w4
    4bbe:	4f 22 de    	lsr.w     w4, #0xf, w4

00004bc0 <.LSM44>:
}
    4bc0:	04 00 78    	mov.w     w4, w0
    4bc2:	00 80 fa    	ulnk      
    4bc4:	00 00 06    	return    
Disassembly of section .dinit:

00004bc6 <.dinit>:
    4bc6:	b6 0c 00    	nop       
    4bc8:	22 00 00    	nop       
    4bca:	80 00 00    	nop       
    4bcc:	e8 0c 00    	nop       
    4bce:	04 00 00    	nop       
    4bd0:	82 00 00    	nop       
    4bd2:	58 02 64    	and.w     w8, [++w8], w4
    4bd4:	00 00 00    	nop       
    4bd6:	00 0e 00    	nop       
    4bd8:	80 00 00    	nop       
    4bda:	80 00 00    	nop       
    4bdc:	7a 0b 00    	nop       
    4bde:	9e 00 00    	nop       
    4be0:	80 00 00    	nop       
    4be2:	18 0c 00    	nop       
    4be4:	6e 00 00    	nop       
    4be6:	80 00 00    	nop       
    4be8:	d8 0c 00    	nop       
    4bea:	10 00 00    	nop       
    4bec:	82 00 00    	nop       
    4bee:	bd 37 86    	mov.w     0xc6f6, w13
    4bf0:	33 bd 37    	bra       0xffffc658
    4bf2:	06 35 bd    	subr.w    0x1506
    4bf4:	37 86 36    	bra       LEU, 0xffff5864
    4bf6:	bd 37 86    	mov.w     0xc6f6, w13
    4bf8:	37 00 00    	nop       
    4bfa:	86 0c 00    	nop       
    4bfc:	30 00 00    	nop       
    4bfe:	80 00 00    	nop       
    4c00:	00 08 00    	nop       
    4c02:	b8 01 00    	nop       
    4c04:	80 00 00    	nop       
    4c06:	d8 0a 00    	nop       
    4c08:	a2 00 00    	nop       
    4c0a:	80 00 00    	nop       
    4c0c:	b8 09 00    	nop       
    4c0e:	20 01 00    	nop       
    4c10:	80 00 00    	nop       
    4c12:	b6 0d 00    	nop       
    4c14:	24 00 00    	nop       
    4c16:	82 00 00    	nop       
    4c18:	de 0d 00    	nop       
    4c1a:	00 de 0d    	bra       OB, 0x81c
    4c1c:	09 00 00    	nop       
    4c1e:	00 02 00    	nop       
    4c20:	e0 0d 00    	nop       
    4c22:	00 e0 0d    	bra       OB, 0xc24
    4c24:	0e 02 01    	.pword 0x01020e
	...
    4c2c:	06 02 02    	call      0x206 <__DEFAULT_VECTOR-0xf06>
    4c2e:	00 00 00 
    4c30:	da 0d 00    	nop       
    4c32:	02 00 00    	nop       
    4c34:	82 00 00    	nop       
    4c36:	b6 0d 00    	nop       
    4c38:	dc 0d 00    	nop       
    4c3a:	02 00 00    	nop       
    4c3c:	80 00 00    	nop       
    4c3e:	de 0d 00    	nop       
    4c40:	02 00 00    	nop       
    4c42:	80 00 00    	nop       
    4c44:	e0 0d 00    	nop       
    4c46:	02 00 00    	nop       
    4c48:	80 00 00    	nop       
    4c4a:	8c 0d 00    	nop       
    4c4c:	2a 00 00    	nop       
    4c4e:	82 00 00    	nop       
    4c50:	30 31 32    	bra       Z, 0xaeb2
    4c52:	33 34 35    	bra       LT, 0xb4ba
    4c54:	36 37 38    	bra       NOV, 0xbac2
    4c56:	39 41 42    	add.b     w4, [w9++], w2
    4c58:	43 44 45    	add.b     w10, [--w3], w8
    4c5a:	46 00 30    	bra       OV, 0x4ce8
    4c5c:	31 32 33    	bra       N, 0xb0c0
    4c5e:	34 35 36    	bra       LEU, 0xb6c8
    4c60:	37 38 39    	bra       NC, 0xbcd0
    4c62:	61 62 63    	and.b     w6, #0x1, [--w4]
    4c64:	64 65 66    	and.b     w12, #0x4, [--w10]
    4c66:	00 28 6e    	xor.w     w12, w0, [++w0]
    4c68:	75 6c 6c    	xor.b     w8, #0x15, [++w8]
    4c6a:	29 00 00    	nop       
    4c6c:	ec 0c 00    	nop       
    4c6e:	a0 00 00    	nop       
    4c70:	82 00 00    	nop       
    4c72:	01 00 00    	nop       
    4c74:	00 00 00    	nop       
    4c76:	00 00 0a    	.pword 0x0a0000
	...
    4c7c:	00 64 00    	nop       
	...
    4c82:	e8 03 00    	nop       
    4c84:	00 00 00    	nop       
    4c86:	00 00 10    	subr.w    w0, w0, w0
    4c88:	27 00 00    	nop       
    4c8a:	00 00 00    	nop       
    4c8c:	00 a0 86    	mov.w     0xd400, w0
    4c8e:	01 00 00    	nop       
    4c90:	00 00 00    	nop       
    4c92:	40 42 0f    	bra       SB, 0xd114
    4c94:	00 00 00    	nop       
    4c96:	00 00 80    	mov.w     0x0, w0
    4c98:	96 98 00    	nop       
    4c9a:	00 00 00    	nop       
    4c9c:	00 00 e1    	cp.w      w0, w0
    4c9e:	f5 05 00    	nop       
    4ca0:	00 00 00    	nop       
    4ca2:	00 ca 9a    	mov.b     w0, [w4+328]
    4ca4:	3b 00 00    	nop       
    4ca6:	00 00 00    	nop       
    4ca8:	e4 0b 54    	sub.w     w8, #0x4, [w7]
    4caa:	02 00 00    	nop       
    4cac:	00 00 e8    	inc.w     w0, w0
    4cae:	76 48 17    	subr.b    w14, #0x16, [w0]
    4cb0:	00 00 00    	nop       
    4cb2:	00 10 a5    	btst.c    w0, w2
    4cb4:	d4 e8 00    	nop       
    4cb6:	00 00 00    	nop       
    4cb8:	a0 72 4e    	.pword 0x4e72a0
    4cba:	18 09 00    	nop       
    4cbc:	00 00 40    	add.w     w0, w0, w0
    4cbe:	7a 10 f3    	.pword 0xf3107a
    4cc0:	5a 00 00    	nop       
    4cc2:	00 80 c6    	mac       w6 * w7, B, [w8], w4, [w10], w4, w13
    4cc4:	a4 7e 8d    	mov.w     w4, 0xafd4
    4cc6:	03 00 00    	nop       
    4cc8:	00 c1 6f    	xor.b     w15, w0, w2
    4cca:	f2 86 23    	mov.w     #0x386f, w2
    4ccc:	00 00 00    	nop       
    4cce:	8a 5d 78    	mov.b     w10, [w11++]
    4cd0:	45 63 01    	.pword 0x016345
    4cd2:	00 00 64    	and.w     w8, w0, w0
    4cd4:	a7 b3 b6    	xor.w     0x13a7
    4cd6:	e0 0d 00    	nop       
    4cd8:	00 e8 89    	mov.w     w0, 0x3d00
    4cda:	04 23 c7    	movsac    A, [w9+w12], w6, [w10]+=2, w4, w13
    4cdc:	8a 00 00    	nop       
    4cde:	00 00 00    	nop       
Disassembly of section .isr:

00004ce0 <__DefaultInterrupt>:
    4ce0:	00 40 da    	.pword 0xda4000
    4ce2:	00 00 fe    	reset     
