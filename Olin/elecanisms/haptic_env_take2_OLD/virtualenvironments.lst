
virtualenvironments.elf:     file format elf32-pic30

Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__resetPRI>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__resetPRI>:
    1110:	0f e8 20    	mov.w     #0xe80, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	0c 00 07    	rcall     0x113c <__psv_init>
    1124:	a0 98 24    	mov.w     #0x498a, w0
    1126:	01 00 20    	mov.w     #0x0, w1
    1128:	0f 00 07    	rcall     0x1148 <__data_init>
    112a:	00 00 20    	mov.w     #0x0, w0
    112c:	00 00 e0    	cp0.w     w0
    112e:	02 00 32    	bra       Z, 0x1134 <L11>
    1130:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1132:	00 00 00 

00001134 <L11>:
    1134:	66 4b 02    	call      0x4b66 <_main>
    1136:	00 00 00 
    1138:	00 40 da    	.pword 0xda4000
    113a:	00 00 fe    	reset     

0000113c <__psv_init>:
    113c:	a0 0a 20    	mov.w     #0xaa, w0
    113e:	00 00 e0    	cp0.w     w0
    1140:	02 00 32    	bra       Z, 0x1146 <L12>
    1142:	00 20 20    	mov.w     #0x200, w0
    1144:	90 01 88    	mov.w     w0, 0x32

00001146 <L12>:
    1146:	00 00 06    	return    

00001148 <__data_init>:
    1148:	a1 02 88    	mov.w     w1, 0x54
    114a:	80 00 78    	mov.w     w0, w1
    114c:	00 00 eb    	clr.w     w0
    114e:	1a 00 37    	bra       0x1184 <L41>

00001150 <L11>:
    1150:	e2 80 40    	add.w     w1, #0x2, w1
    1152:	54 a0 b4    	addc.w    0x54
    1154:	91 01 ba    	tblrdl.w  [w1], w3
    1156:	e2 80 40    	add.w     w1, #0x2, w1
    1158:	54 a0 b4    	addc.w    0x54
    115a:	91 02 ba    	tblrdl.w  [w1], w5
    115c:	e2 80 40    	add.w     w1, #0x2, w1
    115e:	54 a0 b4    	addc.w    0x54
    1160:	00 02 eb    	clr.w     w4
    1162:	47 2b de    	lsr.w     w5, #0x7, w6
    1164:	f5 07 b2    	and.w     #0x7f, w5
    1166:	a6 01 88    	mov.w     w6, 0x34
    1168:	60 2c e1    	cp.b      w5, #0x0
    116a:	08 00 3a    	bra       NZ, 0x117c <L21>

0000116c <L91>:
    116c:	00 49 eb    	clr.b     [w2]
    116e:	02 01 e8    	inc.w     w2, w2
    1170:	02 00 39    	bra       NC, 0x1176 <L81>
    1172:	34 20 ec    	inc.w     0x34
    1174:	02 f0 a0    	bset.w    w2, #0xf

00001176 <L81>:
    1176:	83 01 e9    	dec.w     w3, w3
    1178:	f9 ff 3e    	bra       GTU, 0x116c <L91>
    117a:	04 00 37    	bra       0x1184 <L41>

0000117c <L21>:
    117c:	61 28 e1    	cp.w      w5, #0x1
    117e:	01 00 32    	bra       Z, 0x1182 <L31>
    1180:	00 82 eb    	setm.w    w4

00001182 <L31>:
    1182:	04 00 07    	rcall     0x118c <L12>

00001184 <L41>:
    1184:	11 01 ba    	tblrdl.w  [w1], w2
    1186:	02 00 e0    	cp0.w     w2
    1188:	e3 ff 3a    	bra       NZ, 0x1150 <L11>
    118a:	00 00 06    	return    

0000118c <L12>:
    118c:	04 d0 a3    	btst.c    w4, #0xd
    118e:	e2 0f 49    	addc.w    w2, #0x2, [w15]
    1190:	1c 00 39    	bra       NC, 0x11ca <L22>
    1192:	81 02 78    	mov.w     w1, w5
    1194:	35 49 ba    	tblrdl.b  [w5++], [w2]
    1196:	02 01 e8    	inc.w     w2, w2
    1198:	02 00 39    	bra       NC, 0x119e <L32>
    119a:	34 20 ec    	inc.w     0x34
    119c:	02 f0 a0    	bset.w    w2, #0xf

0000119e <L32>:
    119e:	83 01 e9    	dec.w     w3, w3
    11a0:	0f 00 32    	bra       Z, 0x11c0 <L42>
    11a2:	25 49 ba    	tblrdl.b  [w5--], [w2]
    11a4:	02 01 e8    	inc.w     w2, w2
    11a6:	02 00 39    	bra       NC, 0x11ac <L33>
    11a8:	34 20 ec    	inc.w     0x34
    11aa:	02 f0 a0    	bset.w    w2, #0xf

000011ac <L33>:
    11ac:	83 01 e9    	dec.w     w3, w3
    11ae:	08 00 32    	bra       Z, 0x11c0 <L42>
    11b0:	04 00 e0    	cp0.w     w4
    11b2:	06 00 32    	bra       Z, 0x11c0 <L42>
    11b4:	15 c9 ba    	tblrdh.b  [w5], [w2]
    11b6:	02 01 e8    	inc.w     w2, w2
    11b8:	02 00 39    	bra       NC, 0x11be <L34>
    11ba:	34 20 ec    	inc.w     0x34
    11bc:	02 f0 a0    	bset.w    w2, #0xf

000011be <L34>:
    11be:	83 01 e9    	dec.w     w3, w3

000011c0 <L42>:
    11c0:	81 80 e8    	inc2.w    w1, w1
    11c2:	54 a0 b4    	addc.w    0x54
    11c4:	03 00 e0    	cp0.w     w3
    11c6:	e2 ff 3a    	bra       NZ, 0x118c <L12>
    11c8:	00 00 06    	return    

000011ca <L22>:
    11ca:	91 02 ba    	tblrdl.w  [w1], w5
    11cc:	05 59 78    	mov.b     w5, [w2++]
    11ce:	83 01 e9    	dec.w     w3, w3
    11d0:	f7 ff 32    	bra       Z, 0x11c0 <L42>
    11d2:	c8 2a de    	lsr.w     w5, #0x8, w5
    11d4:	05 59 78    	mov.b     w5, [w2++]
    11d6:	83 01 e9    	dec.w     w3, w3
    11d8:	f3 ff 32    	bra       Z, 0x11c0 <L42>
    11da:	04 00 e0    	cp0.w     w4
    11dc:	f1 ff 32    	bra       Z, 0x11c0 <L42>
    11de:	11 d9 ba    	tblrdh.b  [w1], [w2++]
    11e0:	ee ff 37    	bra       0x11be <L34>

000011e2 <.handle>:
    11e2:	f0 42 04    	goto      0x42f0 <___digitalRead>
    11e4:	00 00 00 
    11e6:	ac 42 04    	goto      0x42ac <___digitalWrite>
    11e8:	00 00 00 
    11ea:	14 43 04    	goto      0x4314 <___analogRead>
    11ec:	00 00 00 
    11ee:	e6 3d 04    	goto      0x3de6 <___pwmWrite>
    11f0:	00 00 00 
    11f2:	b4 3d 04    	goto      0x3db4 <___pwmRead>
    11f4:	00 00 00 
    11f6:	58 3e 04    	goto      0x3e58 <___servoWrite>
    11f8:	00 00 00 
    11fa:	22 3e 04    	goto      0x3e22 <___servoRead>
    11fc:	00 00 00 
    11fe:	08 21 04    	goto      0x2108 <___putc_nobuffer>
    1200:	00 00 00 
    1202:	4c 21 04    	goto      0x214c <___putc_buffer>
    1204:	00 00 00 
    1206:	2c 21 04    	goto      0x212c <___getc_nobuffer>
    1208:	00 00 00 
    120a:	3a 22 04    	goto      0x223a <___getc_buffer>
    120c:	00 00 00 

0000120e <___subsf3>:
    120e:	03 f0 a2    	btg.w     w3, #0xf

00001210 <___addsf3>:
    1210:	88 9f be    	mov.d     w8, [w15++]
    1212:	8a 9f be    	mov.d     w10, [w15++]
    1214:	8c 1f 78    	mov.w     w12, [w15++]
    1216:	f7 00 07    	rcall     0x1406 <__funpack2>
    1218:	fe 00 33    	bra       N, 0x1416 <__fPropagateNaN>
    121a:	64 50 e1    	cp.w      w10, #0x4
    121c:	4f 00 32    	bra       Z, 0x12bc <aisinfinite>

0000121e <checkspecialb>:
    121e:	64 20 e1    	cp.w      w4, #0x4
    1220:	52 00 32    	bra       Z, 0x12c6 <return2>
    1222:	03 82 6c    	xor.w     w9, w3, w4
    1224:	07 00 3b    	bra       NN, 0x1234 <getsign>
    1226:	09 05 d0    	sl.w      w9, w10
    1228:	03 06 d0    	sl.w      w3, w12
    122a:	82 0f 54    	sub.w     w8, w2, [w15]
    122c:	0c 06 5d    	subb.w    w10, w12, w12
    122e:	02 00 39    	bra       NC, 0x1234 <getsign>
    1230:	02 00 32    	bra       Z, 0x1236 <gotsign>
    1232:	89 01 78    	mov.w     w9, w3

00001234 <getsign>:
    1234:	03 06 78    	mov.w     w3, w12

00001236 <gotsign>:
    1236:	85 82 55    	sub.w     w11, w5, w5
    1238:	04 00 3d    	bra       GE, 0x1242 <expcanonical>
    123a:	00 03 fd    	exch      w0, w6
    123c:	81 03 fd    	exch      w1, w7
    123e:	85 02 ea    	neg.w     w5, w5
    1240:	8b 85 42    	add.w     w5, w11, w11

00001242 <expcanonical>:
    1242:	84 0f 72    	ior.w     w4, w4, [w15]
    1244:	02 00 3b    	bra       NN, 0x124a <nonegate>
    1246:	60 00 10    	subr.w    w0, #0x0, w0
    1248:	e0 80 18    	subbr.w   w1, #0x0, w1

0000124a <nonegate>:
    124a:	60 11 b8    	mul.uu    w2, #0x0, w2
    124c:	00 05 eb    	clr.w     w10
    124e:	7a 28 e1    	cp.w      w5, #0x1a
    1250:	0a 00 39    	bra       NC, 0x1266 <aligniter>
    1252:	06 00 78    	mov.w     w6, w0
    1254:	c7 5d dd    	sl.w      w11, #0x7, w11
    1256:	f7 07 b2    	and.w     #0x7f, w7
    1258:	87 80 75    	ior.w     w11, w7, w1
    125a:	2d 00 37    	bra       0x12b6 <signoff>

0000125c <align>:
    125c:	82 81 71    	ior.w     w3, w2, w3
    125e:	0a 01 78    	mov.w     w10, w2
    1260:	61 05 60    	and.w     w0, #0x1, w10
    1262:	81 80 d1    	asr.w     w1, w1
    1264:	00 80 d3    	rrc.w     w0, w0

00001266 <aligniter>:
    1266:	85 02 e9    	dec.w     w5, w5
    1268:	f9 ff 3b    	bra       NN, 0x125c <align>

0000126a <aligned>:
    126a:	06 04 40    	add.w     w0, w6, w8
    126c:	87 84 48    	addc.w    w1, w7, w9
    126e:	02 00 3b    	bra       NN, 0x1274 <normalizesum>
    1270:	60 04 14    	subr.w    w8, #0x0, w8
    1272:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001274 <normalizesum>:
    1274:	09 88 a3    	btst.z    w9, #0x8
    1276:	07 00 32    	bra       Z, 0x1286 <checknormal>
    1278:	8a 81 71    	ior.w     w3, w10, w3
    127a:	82 81 71    	ior.w     w3, w2, w3
    127c:	61 01 64    	and.w     w8, #0x1, w2
    127e:	89 04 d1    	lsr.w     w9, w9
    1280:	08 84 d3    	rrc.w     w8, w8
    1282:	8b 05 e8    	inc.w     w11, w11
    1284:	17 00 37    	bra       0x12b4 <round>

00001286 <checknormal>:
    1286:	09 78 a3    	btst.z    w9, #0x7
    1288:	13 00 3a    	bra       NZ, 0x12b0 <discardguard>

0000128a <underflow>:
    128a:	0b 00 e0    	cp0.w     w11
    128c:	13 00 34    	bra       LE, 0x12b4 <round>
    128e:	8b 05 e9    	dec.w     w11, w11
    1290:	08 04 44    	add.w     w8, w8, w8
    1292:	89 84 4c    	addc.w    w9, w9, w9
    1294:	0a 44 74    	ior.b     w8, w10, w8
    1296:	09 78 a3    	btst.z    w9, #0x7
    1298:	0d 00 3a    	bra       NZ, 0x12b4 <round>

0000129a <normalizeloop>:
    129a:	0b 00 e0    	cp0.w     w11
    129c:	07 00 34    	bra       LE, 0x12ac <normalizeexit>
    129e:	8b 05 e9    	dec.w     w11, w11
    12a0:	08 04 44    	add.w     w8, w8, w8
    12a2:	89 84 4c    	addc.w    w9, w9, w9
    12a4:	01 00 3a    	bra       NZ, 0x12a8 <normalizetest>
    12a6:	0b 00 20    	mov.w     #0x0, w11

000012a8 <normalizetest>:
    12a8:	09 78 a3    	btst.z    w9, #0x7
    12aa:	f7 ff 32    	bra       Z, 0x129a <normalizeloop>

000012ac <normalizeexit>:
    12ac:	00 01 eb    	clr.w     w2
    12ae:	02 00 37    	bra       0x12b4 <round>

000012b0 <discardguard>:
    12b0:	82 81 71    	ior.w     w3, w2, w3
    12b2:	0a 01 78    	mov.w     w10, w2

000012b4 <round>:
    12b4:	6d 00 07    	rcall     0x1390 <__fpack>

000012b6 <signoff>:
    12b6:	0c f0 a7    	btsc.w    w12, #0xf
    12b8:	01 f0 a0    	bset.w    w1, #0xf
    12ba:	b6 00 37    	bra       0x1428 <__fbopExit>

000012bc <aisinfinite>:
    12bc:	64 20 e1    	cp.w      w4, #0x4
    12be:	02 00 3a    	bra       NZ, 0x12c4 <return8>
    12c0:	83 8f 6c    	xor.w     w9, w3, [w15]
    12c2:	b6 00 33    	bra       N, 0x1430 <__fbopReturnNaN>

000012c4 <return8>:
    12c4:	08 01 be    	mov.d     w8, w2

000012c6 <return2>:
    12c6:	02 00 be    	mov.d     w2, w0
    12c8:	af 00 37    	bra       0x1428 <__fbopExit>

000012ca <___divsf3>:
    12ca:	88 9f be    	mov.d     w8, [w15++]
    12cc:	8a 9f be    	mov.d     w10, [w15++]
    12ce:	8c 1f 78    	mov.w     w12, [w15++]
    12d0:	9a 00 07    	rcall     0x1406 <__funpack2>
    12d2:	a1 00 33    	bra       N, 0x1416 <__fPropagateNaN>
    12d4:	03 86 6c    	xor.w     w9, w3, w12
    12d6:	64 50 e1    	cp.w      w10, #0x4
    12d8:	2e 00 32    	bra       Z, 0x1336 <aisinfinite>
    12da:	64 20 e1    	cp.w      w4, #0x4
    12dc:	33 00 32    	bra       Z, 0x1344 <returnZero>
    12de:	61 50 e1    	cp.w      w10, #0x1
    12e0:	2f 00 32    	bra       Z, 0x1340 <aiszero>
    12e2:	61 20 e1    	cp.w      w4, #0x1
    12e4:	31 00 32    	bra       Z, 0x1348 <returnInf>

000012e6 <finitenonzero>:
    12e6:	85 85 55    	sub.w     w11, w5, w11
    12e8:	eb 07 b0    	add.w     #0x7e, w11
    12ea:	09 00 20    	mov.w     #0x0, w9
    12ec:	08 04 20    	mov.w     #0x40, w8
    12ee:	05 00 37    	bra       0x12fa <diventry>

000012f0 <divnext>:
    12f0:	08 04 44    	add.w     w8, w8, w8
    12f2:	89 84 4c    	addc.w    w9, w9, w9
    12f4:	0a 00 31    	bra       C, 0x130a <divdone>

000012f6 <divloop>:
    12f6:	06 03 43    	add.w     w6, w6, w6
    12f8:	87 83 4b    	addc.w    w7, w7, w7

000012fa <diventry>:
    12fa:	00 01 53    	sub.w     w6, w0, w2
    12fc:	81 81 5b    	subb.w    w7, w1, w3
    12fe:	f8 ff 33    	bra       N, 0x12f0 <divnext>
    1300:	02 03 be    	mov.d     w2, w6
    1302:	08 00 a0    	bset.w    w8, #0x0
    1304:	08 04 44    	add.w     w8, w8, w8
    1306:	89 84 4c    	addc.w    w9, w9, w9
    1308:	f6 ff 39    	bra       NC, 0x12f6 <divloop>

0000130a <divdone>:
    130a:	c6 39 dd    	sl.w      w7, #0x6, w3
    130c:	83 01 73    	ior.w     w6, w3, w3
    130e:	01 00 32    	bra       Z, 0x1312 <stickyok>
    1310:	13 00 20    	mov.w     #0x1, w3

00001312 <stickyok>:
    1312:	89 04 d1    	lsr.w     w9, w9
    1314:	08 84 d3    	rrc.w     w8, w8
    1316:	09 98 a3    	btst.z    w9, #0x9
    1318:	05 00 32    	bra       Z, 0x1324 <guardused>
    131a:	08 00 a7    	btsc.w    w8, #0x0
    131c:	03 00 a0    	bset.w    w3, #0x0
    131e:	89 04 d1    	lsr.w     w9, w9
    1320:	08 84 d3    	rrc.w     w8, w8
    1322:	8b 05 e8    	inc.w     w11, w11

00001324 <guardused>:
    1324:	89 04 d1    	lsr.w     w9, w9
    1326:	08 84 d3    	rrc.w     w8, w8
    1328:	00 01 eb    	clr.w     w2
    132a:	02 81 d2    	rlc.w     w2, w2
    132c:	31 00 07    	rcall     0x1390 <__fpack>

0000132e <return0>:
    132e:	01 f0 a1    	bclr.w    w1, #0xf
    1330:	0c f0 a7    	btsc.w    w12, #0xf
    1332:	01 f0 a0    	bset.w    w1, #0xf
    1334:	79 00 37    	bra       0x1428 <__fbopExit>

00001336 <aisinfinite>:
    1336:	64 20 e1    	cp.w      w4, #0x4
    1338:	7b 00 32    	bra       Z, 0x1430 <__fbopReturnNaN>

0000133a <return8>:
    133a:	08 01 be    	mov.d     w8, w2

0000133c <return2>:
    133c:	02 00 be    	mov.d     w2, w0
    133e:	f7 ff 37    	bra       0x132e <return0>

00001340 <aiszero>:
    1340:	61 20 e1    	cp.w      w4, #0x1
    1342:	76 00 32    	bra       Z, 0x1430 <__fbopReturnNaN>

00001344 <returnZero>:
    1344:	60 00 b8    	mul.uu    w0, #0x0, w0
    1346:	f3 ff 37    	bra       0x132e <return0>

00001348 <returnInf>:
    1348:	00 00 20    	mov.w     #0x0, w0
    134a:	01 f8 27    	mov.w     #0x7f80, w1
    134c:	f0 ff 37    	bra       0x132e <return0>

0000134e <___eqsf2>:
    134e:	14 00 20    	mov.w     #0x1, w4
    1350:	b6 00 37    	bra       0x14be <__fcompare>

00001352 <___gesf2>:
    1352:	f4 ff 2f    	mov.w     #0xffff, w4
    1354:	b4 00 37    	bra       0x14be <__fcompare>

00001356 <___fixunssfsi>:
    1356:	00 01 be    	mov.d     w0, w2
    1358:	41 00 07    	rcall     0x13dc <__funpack>
    135a:	04 70 a7    	btsc.w    w4, #0x7
    135c:	03 f0 a1    	bclr.w    w3, #0xf
    135e:	03 f8 a3    	btst.z    w3, #0xf
    1360:	13 00 3a    	bra       NZ, 0x1388 <returnzero>
    1362:	65 09 b1    	sub.w     #0x96, w5
    1364:	10 00 32    	bra       Z, 0x1386 <exit>
    1366:	09 00 35    	bra       LT, 0x137a <shiftright>
    1368:	69 28 e1    	cp.w      w5, #0x9
    136a:	02 00 35    	bra       LT, 0x1370 <shiftleft>
    136c:	01 00 28    	mov.w     #0x8000, w1
    136e:	00 00 05    	retlw.w   #0x0, w0

00001370 <shiftleft>:
    1370:	00 00 40    	add.w     w0, w0, w0
    1372:	81 80 48    	addc.w    w1, w1, w1
    1374:	85 02 e9    	dec.w     w5, w5
    1376:	fc ff 3a    	bra       NZ, 0x1370 <shiftleft>
    1378:	00 00 06    	return    

0000137a <shiftright>:
    137a:	f8 8f 42    	add.w     w5, #0x18, [w15]
    137c:	05 00 35    	bra       LT, 0x1388 <returnzero>

0000137e <shiftrightloop>:
    137e:	81 00 d1    	lsr.w     w1, w1
    1380:	00 80 d3    	rrc.w     w0, w0
    1382:	85 02 e8    	inc.w     w5, w5
    1384:	fc ff 3a    	bra       NZ, 0x137e <shiftrightloop>

00001386 <exit>:
    1386:	00 00 06    	return    

00001388 <returnzero>:
    1388:	80 00 eb    	clr.w     w1
    138a:	00 00 05    	retlw.w   #0x0, w0

0000138c <___floatunsisf>:
    138c:	60 11 b8    	mul.uu    w2, #0x0, w2
    138e:	b2 00 37    	bra       0x14f4 <___floatundisf>

00001390 <__fpack>:
    1390:	81 00 20    	mov.w     #0x8, w1
    1392:	61 80 55    	sub.w     w11, #0x1, w0
    1394:	0b 00 3d    	bra       GE, 0x13ac <notsubnormal>
    1396:	0b 00 20    	mov.w     #0x0, w11
    1398:	61 fe 2f    	mov.w     #0xffe6, w1
    139a:	01 00 e1    	cp.w      w0, w1
    139c:	1d 00 34    	bra       LE, 0x13d8 <zerosig>

0000139e <subnormal>:
    139e:	82 81 71    	ior.w     w3, w2, w3
    13a0:	61 01 64    	and.w     w8, #0x1, w2
    13a2:	89 04 d1    	lsr.w     w9, w9
    13a4:	08 84 d3    	rrc.w     w8, w8
    13a6:	00 00 e8    	inc.w     w0, w0
    13a8:	fa ff 3a    	bra       NZ, 0x139e <subnormal>
    13aa:	71 00 20    	mov.w     #0x7, w1

000013ac <notsubnormal>:
    13ac:	61 00 64    	and.w     w8, #0x1, w0
    13ae:	03 00 70    	ior.w     w0, w3, w0
    13b0:	02 00 60    	and.w     w0, w2, w0
    13b2:	09 00 32    	bra       Z, 0x13c6 <packupandgo>
    13b4:	61 04 44    	add.w     w8, #0x1, w8
    13b6:	e0 84 4c    	addc.w    w9, #0x0, w9
    13b8:	09 88 a5    	btst.z    w9, w1
    13ba:	05 00 32    	bra       Z, 0x13c6 <packupandgo>
    13bc:	8b 05 e8    	inc.w     w11, w11
    13be:	68 08 e1    	cp.w      w1, #0x8
    13c0:	02 00 3a    	bra       NZ, 0x13c6 <packupandgo>
    13c2:	89 04 d1    	lsr.w     w9, w9
    13c4:	08 84 d3    	rrc.w     w8, w8

000013c6 <packupandgo>:
    13c6:	f2 0f 20    	mov.w     #0xff, w2
    13c8:	02 58 e1    	cp.w      w11, w2
    13ca:	05 00 3d    	bra       GE, 0x13d6 <overflow>
    13cc:	c7 5d dd    	sl.w      w11, #0x7, w11
    13ce:	f9 07 b2    	and.w     #0x7f, w9
    13d0:	89 80 75    	ior.w     w11, w9, w1
    13d2:	08 00 78    	mov.w     w8, w0
    13d4:	00 00 06    	return    

000013d6 <overflow>:
    13d6:	0b f8 27    	mov.w     #0x7f80, w11

000013d8 <zerosig>:
    13d8:	8b 00 78    	mov.w     w11, w1
    13da:	00 00 05    	retlw.w   #0x0, w0

000013dc <__funpack>:
    13dc:	c7 0a de    	lsr.w     w1, #0x7, w5
    13de:	f1 07 b2    	and.w     #0x7f, w1
    13e0:	f5 0f b2    	and.w     #0xff, w5
    13e2:	08 00 32    	bra       Z, 0x13f4 <zeroorsub>
    13e4:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13e6:	02 00 32    	bra       Z, 0x13ec <nanorinf>

000013e8 <finitereturn>:
    13e8:	01 70 a0    	bset.w    w1, #0x7
    13ea:	24 00 05    	retlw.w   #0x2, w4

000013ec <nanorinf>:
    13ec:	81 0f 70    	ior.w     w0, w1, [w15]
    13ee:	01 00 32    	bra       Z, 0x13f2 <infinite>
    13f0:	04 08 05    	retlw.w   #0x80, w4

000013f2 <infinite>:
    13f2:	44 00 05    	retlw.w   #0x4, w4

000013f4 <zeroorsub>:
    13f4:	81 0f 70    	ior.w     w0, w1, [w15]
    13f6:	02 00 3a    	bra       NZ, 0x13fc <subnormal>
    13f8:	14 00 05    	retlw.w   #0x1, w4

000013fa <normalize>:
    13fa:	85 02 e9    	dec.w     w5, w5

000013fc <subnormal>:
    13fc:	00 00 40    	add.w     w0, w0, w0
    13fe:	81 c0 48    	addc.b    w1, w1, w1
    1400:	fc ff 3b    	bra       NN, 0x13fa <normalize>
    1402:	01 70 a0    	bset.w    w1, #0x7
    1404:	24 00 05    	retlw.w   #0x2, w4

00001406 <__funpack2>:
    1406:	00 04 be    	mov.d     w0, w8
    1408:	e9 ff 07    	rcall     0x13dc <__funpack>
    140a:	00 03 be    	mov.d     w0, w6
    140c:	04 05 be    	mov.d     w4, w10
    140e:	02 00 be    	mov.d     w2, w0
    1410:	e5 ff 07    	rcall     0x13dc <__funpack>
    1412:	84 4f 75    	ior.b     w10, w4, [w15]
    1414:	00 00 06    	return    

00001416 <__fPropagateNaN>:
    1416:	02 00 be    	mov.d     w2, w0
    1418:	64 50 e1    	cp.w      w10, #0x4
    141a:	05 00 36    	bra       LEU, 0x1426 <return0>
    141c:	64 20 e1    	cp.w      w4, #0x4
    141e:	02 00 36    	bra       LEU, 0x1424 <return8>
    1420:	09 68 a3    	btst.z    w9, #0x6
    1422:	01 00 3a    	bra       NZ, 0x1426 <return0>

00001424 <return8>:
    1424:	08 00 be    	mov.d     w8, w0

00001426 <return0>:
    1426:	01 60 a0    	bset.w    w1, #0x6

00001428 <__fbopExit>:
    1428:	4f 06 78    	mov.w     [--w15], w12
    142a:	4f 05 be    	mov.d     [--w15], w10
    142c:	4f 04 be    	mov.d     [--w15], w8
    142e:	00 00 06    	return    

00001430 <__fbopReturnNaN>:
    1430:	f0 ff 2f    	mov.w     #0xffff, w0
    1432:	f1 ff 27    	mov.w     #0x7fff, w1
    1434:	f9 ff 37    	bra       0x1428 <__fbopExit>

00001436 <___mulsf3>:
    1436:	88 9f be    	mov.d     w8, [w15++]
    1438:	8a 9f be    	mov.d     w10, [w15++]
    143a:	8c 1f 78    	mov.w     w12, [w15++]
    143c:	e4 ff 07    	rcall     0x1406 <__funpack2>
    143e:	eb ff 33    	bra       N, 0x1416 <__fPropagateNaN>
    1440:	03 86 6c    	xor.w     w9, w3, w12
    1442:	64 50 e1    	cp.w      w10, #0x4
    1444:	24 00 32    	bra       Z, 0x148e <aisinfinite>
    1446:	64 20 e1    	cp.w      w4, #0x4
    1448:	27 00 32    	bra       Z, 0x1498 <bisinfinite>
    144a:	61 50 e1    	cp.w      w10, #0x1
    144c:	22 00 32    	bra       Z, 0x1492 <return8>
    144e:	61 20 e1    	cp.w      w4, #0x1
    1450:	21 00 32    	bra       Z, 0x1494 <return2>
    1452:	8b 85 42    	add.w     w5, w11, w11
    1454:	eb 07 b1    	sub.w     #0x7e, w11
    1456:	01 34 b8    	mul.uu    w6, w1, w8
    1458:	00 3a b8    	mul.uu    w7, w0, w4
    145a:	08 04 42    	add.w     w4, w8, w8
    145c:	89 84 4a    	addc.w    w5, w9, w9
    145e:	01 3a b8    	mul.uu    w7, w1, w4
    1460:	00 30 b8    	mul.uu    w6, w0, w0
    1462:	88 80 40    	add.w     w1, w8, w1
    1464:	09 01 4a    	addc.w    w4, w9, w2
    1466:	04 00 33    	bra       N, 0x1470 <formsticky>
    1468:	00 00 40    	add.w     w0, w0, w0
    146a:	81 80 48    	addc.w    w1, w1, w1
    146c:	02 01 49    	addc.w    w2, w2, w2
    146e:	8b 05 e9    	dec.w     w11, w11

00001470 <formsticky>:
    1470:	c9 09 dd    	sl.w      w1, #0x9, w3
    1472:	83 01 70    	ior.w     w0, w3, w3
    1474:	01 00 32    	bra       Z, 0x1478 <formRandSig>
    1476:	13 00 20    	mov.w     #0x1, w3

00001478 <formRandSig>:
    1478:	c8 14 de    	lsr.w     w2, #0x8, w9
    147a:	48 14 dd    	sl.w      w2, #0x8, w8
    147c:	47 09 de    	lsr.w     w1, #0x7, w2
    147e:	12 00 b2    	and.w     #0x1, w2
    1480:	c8 08 de    	lsr.w     w1, #0x8, w1
    1482:	08 84 70    	ior.w     w1, w8, w8
    1484:	85 ff 07    	rcall     0x1390 <__fpack>

00001486 <return0>:
    1486:	01 f0 a1    	bclr.w    w1, #0xf
    1488:	0c f0 a7    	btsc.w    w12, #0xf
    148a:	01 f0 a0    	bset.w    w1, #0xf
    148c:	cd ff 37    	bra       0x1428 <__fbopExit>

0000148e <aisinfinite>:
    148e:	61 20 e1    	cp.w      w4, #0x1
    1490:	cf ff 32    	bra       Z, 0x1430 <__fbopReturnNaN>

00001492 <return8>:
    1492:	08 01 be    	mov.d     w8, w2

00001494 <return2>:
    1494:	02 00 be    	mov.d     w2, w0
    1496:	f7 ff 37    	bra       0x1486 <return0>

00001498 <bisinfinite>:
    1498:	61 50 e1    	cp.w      w10, #0x1
    149a:	fc ff 3a    	bra       NZ, 0x1494 <return2>
    149c:	c9 ff 37    	bra       0x1430 <__fbopReturnNaN>

0000149e <___udivsi3>:
    149e:	60 22 b8    	mul.uu    w4, #0x0, w4
    14a0:	06 02 20    	mov.w     #0x20, w6

000014a2 <nextbit>:
    14a2:	00 00 d0    	sl.w      w0, w0
    14a4:	81 80 d2    	rlc.w     w1, w1
    14a6:	04 82 d2    	rlc.w     w4, w4
    14a8:	85 82 d2    	rlc.w     w5, w5
    14aa:	00 00 a0    	bset.w    w0, #0x0
    14ac:	02 02 52    	sub.w     w4, w2, w4
    14ae:	83 82 5a    	subb.w    w5, w3, w5
    14b0:	03 00 31    	bra       C, 0x14b8 <iterate>
    14b2:	02 02 42    	add.w     w4, w2, w4
    14b4:	83 82 4a    	addc.w    w5, w3, w5
    14b6:	00 00 a1    	bclr.w    w0, #0x0

000014b8 <iterate>:
    14b8:	06 03 e9    	dec.w     w6, w6
    14ba:	f3 ff 3a    	bra       NZ, 0x14a2 <nextbit>
    14bc:	00 00 06    	return    

000014be <__fcompare>:
    14be:	88 9f be    	mov.d     w8, [w15++]
    14c0:	8a 9f be    	mov.d     w10, [w15++]
    14c2:	84 1f 78    	mov.w     w4, [w15++]
    14c4:	a0 ff 07    	rcall     0x1406 <__funpack2>
    14c6:	4f 00 78    	mov.w     [--w15], w0
    14c8:	11 00 33    	bra       N, 0x14ec <exit>
    14ca:	f0 ff 2f    	mov.w     #0xffff, w0
    14cc:	83 8f 6c    	xor.w     w9, w3, [w15]
    14ce:	06 00 3b    	bra       NN, 0x14dc <comparemag>
    14d0:	04 05 65    	and.w     w10, w4, w10
    14d2:	0a 00 a7    	btsc.w    w10, #0x0
    14d4:	08 00 37    	bra       0x14e6 <returnEqual>
    14d6:	09 f0 a6    	btss.w    w9, #0xf
    14d8:	10 00 20    	mov.w     #0x1, w0
    14da:	08 00 37    	bra       0x14ec <exit>

000014dc <comparemag>:
    14dc:	82 0f 54    	sub.w     w8, w2, [w15]
    14de:	83 8f 5c    	subb.w    w9, w3, [w15]
    14e0:	03 00 39    	bra       NC, 0x14e8 <adjust>
    14e2:	10 00 20    	mov.w     #0x1, w0
    14e4:	01 00 3e    	bra       GTU, 0x14e8 <adjust>

000014e6 <returnEqual>:
    14e6:	00 00 20    	mov.w     #0x0, w0

000014e8 <adjust>:
    14e8:	09 f0 a7    	btsc.w    w9, #0xf
    14ea:	00 00 ea    	neg.w     w0, w0

000014ec <exit>:
    14ec:	4f 05 be    	mov.d     [--w15], w10
    14ee:	4f 04 be    	mov.d     [--w15], w8
    14f0:	00 00 e0    	cp0.w     w0
    14f2:	00 00 06    	return    

000014f4 <___floatundisf>:
    14f4:	88 9f be    	mov.d     w8, [w15++]
    14f6:	8a 9f be    	mov.d     w10, [w15++]
    14f8:	00 82 70    	ior.w     w1, w0, w4
    14fa:	04 02 71    	ior.w     w2, w4, w4
    14fc:	04 82 71    	ior.w     w3, w4, w4
    14fe:	26 00 32    	bra       Z, 0x154c <return0>
    1500:	00 04 be    	mov.d     w0, w8
    1502:	02 00 be    	mov.d     w2, w0
    1504:	60 11 b8    	mul.uu    w2, #0x0, w2
    1506:	6b 09 20    	mov.w     #0x96, w11
    1508:	95 02 20    	mov.w     #0x29, w5
    150a:	01 82 cf    	ff1l      w1, w4
    150c:	0a 00 39    	bra       NC, 0x1522 <fixshift>
    150e:	05 41 b1    	sub.b     #0x10, w5
    1510:	00 82 cf    	ff1l      w0, w4
    1512:	07 00 39    	bra       NC, 0x1522 <fixshift>
    1514:	05 41 b1    	sub.b     #0x10, w5
    1516:	09 82 cf    	ff1l      w9, w4
    1518:	04 00 39    	bra       NC, 0x1522 <fixshift>
    151a:	05 41 b1    	sub.b     #0x10, w5
    151c:	08 82 cf    	ff1l      w8, w4
    151e:	01 00 39    	bra       NC, 0x1522 <fixshift>
    1520:	05 41 b1    	sub.b     #0x10, w5

00001522 <fixshift>:
    1522:	05 42 52    	sub.b     w4, w5, w4
    1524:	12 00 32    	bra       Z, 0x154a <round>
    1526:	0a 00 3b    	bra       NN, 0x153c <shiftleft>

00001528 <shiftright>:
    1528:	82 81 71    	ior.w     w3, w2, w3
    152a:	61 01 64    	and.w     w8, #0x1, w2
    152c:	81 00 d1    	lsr.w     w1, w1
    152e:	00 80 d3    	rrc.w     w0, w0
    1530:	89 84 d3    	rrc.w     w9, w9
    1532:	08 84 d3    	rrc.w     w8, w8
    1534:	8b 05 e8    	inc.w     w11, w11
    1536:	04 42 e8    	inc.b     w4, w4
    1538:	f7 ff 3a    	bra       NZ, 0x1528 <shiftright>
    153a:	07 00 37    	bra       0x154a <round>

0000153c <shiftleft>:
    153c:	08 04 44    	add.w     w8, w8, w8
    153e:	89 84 4c    	addc.w    w9, w9, w9
    1540:	00 00 48    	addc.w    w0, w0, w0
    1542:	81 80 48    	addc.w    w1, w1, w1
    1544:	8b 05 e9    	dec.w     w11, w11
    1546:	04 42 e9    	dec.b     w4, w4
    1548:	f9 ff 3a    	bra       NZ, 0x153c <shiftleft>

0000154a <round>:
    154a:	22 ff 07    	rcall     0x1390 <__fpack>

0000154c <return0>:
    154c:	4f 05 be    	mov.d     [--w15], w10
    154e:	4f 04 be    	mov.d     [--w15], w8
    1550:	00 00 06    	return    

00001552 <_fputs>:
    1552:	88 9f be    	mov.d     w8, [w15++]
    1554:	00 04 be    	mov.d     w0, w8
    1556:	05 00 37    	bra       0x1562 <.L2>

00001558 <.L4>:
    1558:	00 00 fb    	se        w0, w0
    155a:	89 00 78    	mov.w     w9, w1
    155c:	19 00 07    	rcall     0x1590 <_fputc>
    155e:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1560:	04 00 32    	bra       Z, 0x156a <.L3>

00001562 <.L2>:
    1562:	38 40 78    	mov.b     [w8++], w0
    1564:	e0 4f 50    	sub.b     w0, #0x0, [w15]
    1566:	f8 ff 3a    	bra       NZ, 0x1558 <.L4>
    1568:	00 00 eb    	clr.w     w0

0000156a <.L3>:
    156a:	4f 04 be    	mov.d     [--w15], w8
    156c:	00 00 06    	return    

0000156e <_puts>:
    156e:	01 da 20    	mov.w     #0xda0, w1
    1570:	88 1f 78    	mov.w     w8, [w15++]
    1572:	ef ff 07    	rcall     0x1552 <_fputs>
    1574:	01 da 20    	mov.w     #0xda0, w1
    1576:	00 04 78    	mov.w     w0, w8
    1578:	a0 00 20    	mov.w     #0xa, w0
    157a:	0a 00 07    	rcall     0x1590 <_fputc>
    157c:	08 00 78    	mov.w     w8, w0
    157e:	4f 04 78    	mov.w     [--w15], w8
    1580:	00 00 06    	return    

00001582 <__printf_cdnopuxX>:
    1582:	00 da 20    	mov.w     #0xda0, w0
    1584:	00 00 fa    	lnk       #0x0
    1586:	68 81 57    	sub.w     w15, #0x8, w2
    1588:	cf b8 97    	mov.w     [w15-8], w1
    158a:	46 00 07    	rcall     0x1618 <__vfprintf_cdnopuxX>
    158c:	00 80 fa    	ulnk      
    158e:	00 00 06    	return    

00001590 <_fputc>:
    1590:	88 9f be    	mov.d     w8, [w15++]
    1592:	01 04 78    	mov.w     w1, w8
    1594:	80 84 eb    	setm.w    w9
    1596:	38 02 90    	mov.w     [w8+6], w4
    1598:	e2 02 62    	and.w     w4, #0x2, w5
    159a:	3b 00 32    	bra       Z, 0x1612 <.L2>
    159c:	04 03 78    	mov.w     w4, w6
    159e:	98 02 90    	mov.w     [w8+2], w5
    15a0:	06 20 b2    	and.w     #0x200, w6
    15a2:	02 00 3a    	bra       NZ, 0x15a8 <.L3>
    15a4:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    15a6:	35 00 3a    	bra       NZ, 0x1612 <.L2>

000015a8 <.L3>:
    15a8:	04 90 a0    	bset.w    w4, #0x9
    15aa:	80 04 78    	mov.w     w0, w9
    15ac:	34 04 98    	mov.w     w4, [w8+6]
    15ae:	f9 0f b2    	and.w     #0xff, w9
    15b0:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    15b2:	02 00 3a    	bra       NZ, 0x15b8 <.L4>
    15b4:	a8 02 90    	mov.w     [w8+4], w5
    15b6:	05 0c 78    	mov.w     w5, [w8]

000015b8 <.L4>:
    15b8:	ea 8f 54    	sub.w     w9, #0xa, [w15]
    15ba:	05 00 3a    	bra       NZ, 0x15c6 <.L5>
    15bc:	04 08 b2    	and.w     #0x80, w4
    15be:	03 00 3a    	bra       NZ, 0x15c6 <.L5>
    15c0:	88 00 78    	mov.w     w8, w1
    15c2:	d0 00 20    	mov.w     #0xd, w0
    15c4:	e5 ff 07    	rcall     0x1590 <_fputc>

000015c6 <.L5>:
    15c6:	18 02 90    	mov.w     [w8+2], w4
    15c8:	d8 02 90    	mov.w     [w8+10], w5
    15ca:	85 0f 52    	sub.w     w4, w5, [w15]
    15cc:	0b 00 32    	bra       Z, 0x15e4 <.L6>
    15ce:	04 02 e8    	inc.w     w4, w4
    15d0:	15 c0 b3    	mov.b     #0x1, w5
    15d2:	14 04 98    	mov.w     w4, [w8+2]
    15d4:	18 02 78    	mov.w     [w8], w4
    15d6:	09 4a 78    	mov.b     w9, [w4]
    15d8:	04 0c e8    	inc.w     w4, [w8]
    15da:	a4 db 20    	mov.w     #0xdba, w4
    15dc:	05 4a 78    	mov.b     w5, [w4]
    15de:	ea 8f 54    	sub.w     w9, #0xa, [w15]
    15e0:	18 00 3a    	bra       NZ, 0x1612 <.L2>
    15e2:	05 00 37    	bra       0x15ee <.L11>

000015e4 <.L6>:
    15e4:	09 40 78    	mov.b     w9, w0
    15e6:	88 00 78    	mov.w     w8, w1
    15e8:	93 03 07    	rcall     0x1d10 <__flsbuf>
    15ea:	80 04 78    	mov.w     w0, w9
    15ec:	12 00 37    	bra       0x1612 <.L2>

000015ee <.L11>:
    15ee:	38 02 90    	mov.w     [w8+6], w4
    15f0:	04 10 b2    	and.w     #0x100, w4
    15f2:	0f 00 32    	bra       Z, 0x1612 <.L2>
    15f4:	18 01 90    	mov.w     [w8+2], w2
    15f6:	a8 00 90    	mov.w     [w8+4], w1
    15f8:	48 00 90    	mov.w     [w8+8], w0
    15fa:	11 07 07    	rcall     0x241e <_write>
    15fc:	18 02 90    	mov.w     [w8+2], w4
    15fe:	84 0f 50    	sub.w     w0, w4, [w15]
    1600:	04 00 32    	bra       Z, 0x160a <.L8>
    1602:	38 02 90    	mov.w     [w8+6], w4
    1604:	04 03 b3    	ior.w     #0x30, w4
    1606:	34 04 98    	mov.w     w4, [w8+6]
    1608:	80 84 eb    	setm.w    w9

0000160a <.L8>:
    160a:	00 02 eb    	clr.w     w4
    160c:	14 04 98    	mov.w     w4, [w8+2]
    160e:	28 02 90    	mov.w     [w8+4], w4
    1610:	04 0c 78    	mov.w     w4, [w8]

00001612 <.L2>:
    1612:	09 00 78    	mov.w     w9, w0
    1614:	4f 04 be    	mov.d     [--w15], w8
    1616:	00 00 06    	return    

00001618 <__vfprintf_cdnopuxX>:
    1618:	ef 03 b0    	add.w     #0x3e, w15
    161a:	88 9f be    	mov.d     w8, [w15++]
    161c:	8a 9f be    	mov.d     w10, [w15++]
    161e:	8c 9f be    	mov.d     w12, [w15++]
    1620:	80 06 78    	mov.w     w0, w13
    1622:	8e 1f 78    	mov.w     w14, [w15++]
    1624:	00 07 eb    	clr.w     w14
    1626:	d1 af 9f    	mov.w     w1, [w15-38]
    1628:	a2 b7 9f    	mov.w     w2, [w15-28]
    162a:	66 03 37    	bra       0x1cf8 <.L162>

0000162c <.L134>:
    162c:	df a8 97    	mov.w     [w15-38], w1
    162e:	54 c2 b3    	mov.b     #0x25, w4
    1630:	81 00 e8    	inc.w     w1, w1
    1632:	d1 af 9f    	mov.w     w1, [w15-38]
    1634:	84 4f 50    	sub.b     w0, w4, [w15]
    1636:	06 00 3a    	bra       NZ, 0x1644 <.L3>
    1638:	01 02 78    	mov.w     w1, w4
    163a:	00 06 eb    	clr.w     w12
    163c:	01 c3 b3    	mov.b     #0x30, w1
    163e:	00 c2 b3    	mov.b     #0x20, w0
    1640:	b7 c2 b3    	mov.b     #0x2b, w7
    1642:	0e 00 37    	bra       0x1660 <.L163>

00001644 <.L3>:
    1644:	3d 02 90    	mov.w     [w13+6], w4
    1646:	04 04 b2    	and.w     #0x40, w4
    1648:	04 00 32    	bra       Z, 0x1652 <.L5>
    164a:	1d 02 78    	mov.w     [w13], w4
    164c:	00 4a 78    	mov.b     w0, [w4]
    164e:	84 0e e8    	inc.w     w4, [w13]
    1650:	05 00 37    	bra       0x165c <.L6>

00001652 <.L5>:
    1652:	00 00 fb    	se        w0, w0
    1654:	8d 00 78    	mov.w     w13, w1
    1656:	9c ff 07    	rcall     0x1590 <_fputc>
    1658:	e1 0f 40    	add.w     w0, #0x1, [w15]
    165a:	4e 03 32    	bra       Z, 0x1cf8 <.L162>

0000165c <.L6>:
    165c:	0e 07 e8    	inc.w     w14, w14
    165e:	4c 03 37    	bra       0x1cf8 <.L162>

00001660 <.L163>:
    1660:	84 02 78    	mov.w     w4, w5
    1662:	d2 c2 b3    	mov.b     #0x2d, w2
    1664:	34 43 78    	mov.b     [w4++], w6
    1666:	82 4f 53    	sub.b     w6, w2, [w15]
    1668:	09 00 32    	bra       Z, 0x167c <.L11>
    166a:	05 00 3c    	bra       GT, 0x1676 <.L13>
    166c:	80 4f 53    	sub.b     w6, w0, [w15]
    166e:	08 00 32    	bra       Z, 0x1680 <.L9>
    1670:	87 4f 53    	sub.b     w6, w7, [w15]
    1672:	0c 00 3a    	bra       NZ, 0x168c <.L8>
    1674:	07 00 37    	bra       0x1684 <.L175>

00001676 <.L13>:
    1676:	81 4f 53    	sub.b     w6, w1, [w15]
    1678:	09 00 3a    	bra       NZ, 0x168c <.L8>
    167a:	06 00 37    	bra       0x1688 <.L176>

0000167c <.L11>:
    167c:	0c 30 a0    	bset.w    w12, #0x3
    167e:	f0 ff 37    	bra       0x1660 <.L163>

00001680 <.L9>:
    1680:	0c 00 a0    	bset.w    w12, #0x0
    1682:	ee ff 37    	bra       0x1660 <.L163>

00001684 <.L175>:
    1684:	0c 10 a0    	bset.w    w12, #0x1
    1686:	ec ff 37    	bra       0x1660 <.L163>

00001688 <.L176>:
    1688:	0c 20 a0    	bset.w    w12, #0x2
    168a:	ea ff 37    	bra       0x1660 <.L163>

0000168c <.L8>:
    168c:	62 02 66    	and.w     w12, #0x2, w4
    168e:	01 00 32    	bra       Z, 0x1692 <.L15>
    1690:	0c 00 a1    	bclr.w    w12, #0x0

00001692 <.L15>:
    1692:	68 02 66    	and.w     w12, #0x8, w4
    1694:	01 00 32    	bra       Z, 0x1698 <.L16>
    1696:	0c 20 a1    	bclr.w    w12, #0x2

00001698 <.L16>:
    1698:	06 02 fb    	se        w6, w4
    169a:	04 03 b1    	sub.w     #0x30, w4
    169c:	e9 0f 52    	sub.w     w4, #0x9, [w15]
    169e:	0c 00 3e    	bra       GTU, 0x16b8 <.L17>
    16a0:	05 03 78    	mov.w     w5, w6
    16a2:	00 02 eb    	clr.w     w4

000016a4 <.L18>:
    16a4:	b6 03 fb    	se        [w6++], w7
    16a6:	6a 22 b9    	mul.su    w4, #0xa, w4
    16a8:	07 03 b1    	sub.w     #0x30, w7
    16aa:	86 02 78    	mov.w     w6, w5
    16ac:	04 82 43    	add.w     w7, w4, w4
    16ae:	96 03 fb    	se        [w6], w7
    16b0:	07 03 b1    	sub.w     #0x30, w7
    16b2:	e9 8f 53    	sub.w     w7, #0x9, [w15]
    16b4:	f7 ff 36    	bra       LEU, 0x16a4 <.L18>
    16b6:	08 00 37    	bra       0x16c8 <.L19>

000016b8 <.L17>:
    16b8:	00 02 eb    	clr.w     w4
    16ba:	a7 c2 b3    	mov.b     #0x2a, w7
    16bc:	87 4f 53    	sub.b     w6, w7, [w15]
    16be:	04 00 3a    	bra       NZ, 0x16c8 <.L19>
    16c0:	af b1 97    	mov.w     [w15-28], w3
    16c2:	85 02 e8    	inc.w     w5, w5
    16c4:	43 02 78    	mov.w     [--w3], w4
    16c6:	a3 b7 9f    	mov.w     w3, [w15-28]

000016c8 <.L19>:
    16c8:	00 03 eb    	clr.w     w6
    16ca:	96 b7 9f    	mov.w     w6, [w15-30]
    16cc:	e6 c2 b3    	mov.b     #0x2e, w6
    16ce:	95 4f 13    	subr.b    w6, [w5], [w15]
    16d0:	0c 00 3a    	bra       NZ, 0x16ea <.L20>
    16d2:	0c e0 a0    	bset.w    w12, #0xe
    16d4:	64 43 53    	sub.b     w6, #0x4, w6
    16d6:	d5 4f 13    	subr.b    w6, [++w5], [w15]
    16d8:	03 00 32    	bra       Z, 0x16e0 <.L21>
    16da:	05 03 78    	mov.w     w5, w6
    16dc:	00 00 eb    	clr.w     w0
    16de:	09 00 37    	bra       0x16f2 <.L22>

000016e0 <.L21>:
    16e0:	af b3 97    	mov.w     [w15-28], w7
    16e2:	85 02 e8    	inc.w     w5, w5
    16e4:	47 04 78    	mov.w     [--w7], w8
    16e6:	a7 b7 9f    	mov.w     w7, [w15-28]
    16e8:	98 b7 9f    	mov.w     w8, [w15-30]

000016ea <.L20>:
    16ea:	05 03 78    	mov.w     w5, w6
    16ec:	09 00 37    	bra       0x1700 <.L23>

000016ee <.L24>:
    16ee:	6a 00 b9    	mul.su    w0, #0xa, w0
    16f0:	00 80 43    	add.w     w7, w0, w0

000016f2 <.L22>:
    16f2:	86 02 78    	mov.w     w6, w5
    16f4:	b6 03 fb    	se        [w6++], w7
    16f6:	07 03 b1    	sub.w     #0x30, w7
    16f8:	e9 8f 53    	sub.w     w7, #0x9, [w15]
    16fa:	f9 ff 36    	bra       LEU, 0x16ee <.L24>
    16fc:	90 b7 9f    	mov.w     w0, [w15-30]
    16fe:	f5 ff 37    	bra       0x16ea <.L20>

00001700 <.L23>:
    1700:	b6 42 78    	mov.b     [w6++], w5
    1702:	ca c6 b3    	mov.b     #0x6c, w10
    1704:	d6 af 9f    	mov.w     w6, [w15-38]
    1706:	8a cf 52    	sub.b     w5, w10, [w15]
    1708:	25 00 32    	bra       Z, 0x1754 <.L30>
    170a:	0f 00 3c    	bra       GT, 0x172a <.L35>
    170c:	36 c6 b3    	mov.b     #0x63, w6
    170e:	86 cf 52    	sub.b     w5, w6, [w15]
    1710:	9e 00 32    	bra       Z, 0x184e <.L28>
    1712:	04 00 3c    	bra       GT, 0x171c <.L36>
    1714:	e0 cf 52    	sub.b     w5, #0x0, [w15]
    1716:	f5 02 32    	bra       Z, 0x1d02 <.L26>
    1718:	6b 43 53    	sub.b     w6, #0xb, w6
    171a:	0f 00 37    	bra       0x173a <.L166>

0000171c <.L36>:
    171c:	46 c6 b3    	mov.b     #0x64, w6
    171e:	86 cf 52    	sub.b     w5, w6, [w15]
    1720:	17 00 32    	bra       Z, 0x1750 <.L29>
    1722:	65 43 43    	add.b     w6, #0x5, w6
    1724:	86 cf 52    	sub.b     w5, w6, [w15]
    1726:	b2 00 3a    	bra       NZ, 0x188c <.L25>
    1728:	13 00 37    	bra       0x1750 <.L29>

0000172a <.L35>:
    172a:	36 c7 b3    	mov.b     #0x73, w6
    172c:	86 cf 52    	sub.b     w5, w6, [w15]
    172e:	1f 00 32    	bra       Z, 0x176e <.L32>
    1730:	07 00 3c    	bra       GT, 0x1740 <.L37>
    1732:	64 43 53    	sub.b     w6, #0x4, w6
    1734:	86 cf 52    	sub.b     w5, w6, [w15]
    1736:	14 00 32    	bra       Z, 0x1760 <.L31>
    1738:	06 43 e8    	inc.b     w6, w6

0000173a <.L166>:
    173a:	86 cf 52    	sub.b     w5, w6, [w15]
    173c:	a7 00 3a    	bra       NZ, 0x188c <.L25>
    173e:	13 00 37    	bra       0x1766 <.L177>

00001740 <.L37>:
    1740:	56 c7 b3    	mov.b     #0x75, w6
    1742:	86 cf 52    	sub.b     w5, w6, [w15]
    1744:	aa 00 32    	bra       Z, 0x189a <.L33>
    1746:	63 43 43    	add.b     w6, #0x3, w6
    1748:	86 cf 52    	sub.b     w5, w6, [w15]
    174a:	a0 00 3a    	bra       NZ, 0x188c <.L25>
    174c:	e5 77 9f    	mov.b     w5, [w15-74]
    174e:	0d 00 37    	bra       0x176a <.L38>

00001750 <.L29>:
    1750:	e5 77 9f    	mov.b     w5, [w15-74]
    1752:	a5 00 37    	bra       0x189e <.L39>

00001754 <.L30>:
    1754:	f0 03 66    	and.w     w12, #0x10, w7
    1756:	05 01 20    	mov.w     #0x10, w5
    1758:	01 00 32    	bra       Z, 0x175c <.L40>
    175a:	05 00 28    	mov.w     #0x8000, w5

0000175c <.L40>:
    175c:	0c 86 72    	ior.w     w5, w12, w12
    175e:	d0 ff 37    	bra       0x1700 <.L23>

00001760 <.L31>:
    1760:	e5 77 9f    	mov.b     w5, [w15-74]
    1762:	0c 60 a0    	bset.w    w12, #0x6
    1764:	9c 00 37    	bra       0x189e <.L39>

00001766 <.L177>:
    1766:	e5 77 9f    	mov.b     w5, [w15-74]
    1768:	0c 50 a0    	bset.w    w12, #0x5

0000176a <.L38>:
    176a:	0c 70 a0    	bset.w    w12, #0x7
    176c:	98 00 37    	bra       0x189e <.L39>

0000176e <.L32>:
    176e:	af b5 97    	mov.w     [w15-28], w11
    1770:	e5 77 9f    	mov.b     w5, [w15-74]
    1772:	cb 02 78    	mov.w     [--w11], w5
    1774:	ab b7 9f    	mov.w     w11, [w15-28]
    1776:	b5 b7 9f    	mov.w     w5, [w15-26]
    1778:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    177a:	02 00 3a    	bra       NZ, 0x1780 <.L41>
    177c:	c1 d8 20    	mov.w     #0xd8c, w1
    177e:	b1 b7 9f    	mov.w     w1, [w15-26]

00001780 <.L41>:
    1780:	3f b3 97    	mov.w     [w15-26], w6
    1782:	80 02 eb    	clr.w     w5
    1784:	01 00 37    	bra       0x1788 <.L42>

00001786 <.L43>:
    1786:	85 02 e8    	inc.w     w5, w5

00001788 <.L42>:
    1788:	e6 c3 7a    	mov.b     [w6+w5], w7
    178a:	e0 cf 53    	sub.b     w7, #0x0, [w15]
    178c:	fc ff 3a    	bra       NZ, 0x1786 <.L43>
    178e:	c5 b7 9f    	mov.w     w5, [w15-24]

00001790 <.L44>:
    1790:	1f b1 97    	mov.w     [w15-30], w2
    1792:	e0 0f 51    	sub.w     w2, #0x0, [w15]
    1794:	05 00 32    	bra       Z, 0x17a0 <.L45>
    1796:	cf b1 97    	mov.w     [w15-24], w3
    1798:	83 0f 51    	sub.w     w2, w3, [w15]
    179a:	02 00 31    	bra       C, 0x17a0 <.L45>
    179c:	82 02 78    	mov.w     w2, w5
    179e:	c5 b7 9f    	mov.w     w5, [w15-24]

000017a0 <.L45>:
    17a0:	cf b2 97    	mov.w     [w15-24], w5
    17a2:	00 04 eb    	clr.w     w8
    17a4:	85 0f 52    	sub.w     w4, w5, [w15]
    17a6:	01 00 36    	bra       LEU, 0x17aa <.L46>
    17a8:	05 04 52    	sub.w     w4, w5, w8

000017aa <.L46>:
    17aa:	68 06 66    	and.w     w12, #0x8, w12
    17ac:	09 c2 b3    	mov.b     #0x20, w9
    17ae:	0f 00 32    	bra       Z, 0x17ce <.L48>
    17b0:	29 00 37    	bra       0x1804 <.L164>

000017b2 <.L53>:
    17b2:	3d 02 90    	mov.w     [w13+6], w4
    17b4:	04 04 b2    	and.w     #0x40, w4
    17b6:	04 00 32    	bra       Z, 0x17c0 <.L50>
    17b8:	1d 02 78    	mov.w     [w13], w4
    17ba:	09 4a 78    	mov.b     w9, [w4]
    17bc:	84 0e e8    	inc.w     w4, [w13]
    17be:	05 00 37    	bra       0x17ca <.L51>

000017c0 <.L50>:
    17c0:	8d 00 78    	mov.w     w13, w1
    17c2:	00 02 20    	mov.w     #0x20, w0
    17c4:	e5 fe 07    	rcall     0x1590 <_fputc>
    17c6:	e1 0f 40    	add.w     w0, #0x1, [w15]
    17c8:	01 00 32    	bra       Z, 0x17cc <.L52>

000017ca <.L51>:
    17ca:	0e 07 e8    	inc.w     w14, w14

000017cc <.L52>:
    17cc:	08 04 e9    	dec.w     w8, w8

000017ce <.L48>:
    17ce:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    17d0:	f0 ff 3a    	bra       NZ, 0x17b2 <.L53>
    17d2:	00 84 eb    	setm.w    w8
    17d4:	17 00 37    	bra       0x1804 <.L164>

000017d6 <.L57>:
    17d6:	bd 02 90    	mov.w     [w13+6], w5
    17d8:	05 04 b2    	and.w     #0x40, w5
    17da:	09 00 32    	bra       Z, 0x17ee <.L54>
    17dc:	88 02 78    	mov.w     w8, w5
    17de:	9d 03 78    	mov.w     [w13], w7
    17e0:	35 43 78    	mov.b     [w5++], w6
    17e2:	86 4b 78    	mov.b     w6, [w7]
    17e4:	05 04 78    	mov.w     w5, w8
    17e6:	87 0e e8    	inc.w     w7, [w13]
    17e8:	e0 4f 53    	sub.b     w6, #0x0, [w15]
    17ea:	0a 00 3a    	bra       NZ, 0x1800 <.L55>
    17ec:	11 00 37    	bra       0x1810 <.L161>

000017ee <.L54>:
    17ee:	88 02 78    	mov.w     w8, w5
    17f0:	8d 00 78    	mov.w     w13, w1
    17f2:	35 00 fb    	se        [w5++], w0
    17f4:	84 bf 9f    	mov.w     w4, [w15-16]
    17f6:	05 04 78    	mov.w     w5, w8
    17f8:	cb fe 07    	rcall     0x1590 <_fputc>
    17fa:	0f ba 97    	mov.w     [w15-16], w4
    17fc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    17fe:	08 00 32    	bra       Z, 0x1810 <.L161>

00001800 <.L55>:
    1800:	0e 07 e8    	inc.w     w14, w14
    1802:	06 00 37    	bra       0x1810 <.L161>

00001804 <.L164>:
    1804:	0c 02 78    	mov.w     w12, w4
    1806:	08 06 78    	mov.w     w8, w12
    1808:	3f b4 97    	mov.w     [w15-26], w8
    180a:	cf b4 97    	mov.w     [w15-24], w9
    180c:	5f b5 97    	mov.w     [w15-22], w10
    180e:	ef b5 97    	mov.w     [w15-20], w11

00001810 <.L161>:
    1810:	89 02 78    	mov.w     w9, w5
    1812:	85 04 e9    	dec.w     w5, w9
    1814:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1816:	df ff 3a    	bra       NZ, 0x17d6 <.L57>
    1818:	b8 b7 9f    	mov.w     w8, [w15-26]
    181a:	c9 b7 9f    	mov.w     w9, [w15-24]
    181c:	da b7 9f    	mov.w     w10, [w15-22]
    181e:	eb b7 9f    	mov.w     w11, [w15-20]
    1820:	0c 04 78    	mov.w     w12, w8
    1822:	09 c2 b3    	mov.b     #0x20, w9
    1824:	04 06 78    	mov.w     w4, w12
    1826:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1828:	0f 00 3a    	bra       NZ, 0x1848 <.L58>
    182a:	66 02 37    	bra       0x1cf8 <.L162>

0000182c <.L62>:
    182c:	3d 02 90    	mov.w     [w13+6], w4
    182e:	04 04 b2    	and.w     #0x40, w4
    1830:	04 00 32    	bra       Z, 0x183a <.L59>
    1832:	1d 02 78    	mov.w     [w13], w4
    1834:	09 4a 78    	mov.b     w9, [w4]
    1836:	84 0e e8    	inc.w     w4, [w13]
    1838:	05 00 37    	bra       0x1844 <.L60>

0000183a <.L59>:
    183a:	8d 00 78    	mov.w     w13, w1
    183c:	00 02 20    	mov.w     #0x20, w0
    183e:	a8 fe 07    	rcall     0x1590 <_fputc>
    1840:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1842:	01 00 32    	bra       Z, 0x1846 <.L61>

00001844 <.L60>:
    1844:	0e 07 e8    	inc.w     w14, w14

00001846 <.L61>:
    1846:	08 04 e9    	dec.w     w8, w8

00001848 <.L58>:
    1848:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    184a:	f0 ff 3a    	bra       NZ, 0x182c <.L62>
    184c:	55 02 37    	bra       0x1cf8 <.L162>

0000184e <.L28>:
    184e:	af b0 97    	mov.w     [w15-28], w1
    1850:	70 03 66    	and.w     w12, #0x10, w6
    1852:	41 04 78    	mov.w     [--w1], w8
    1854:	a1 b7 9f    	mov.w     w1, [w15-28]
    1856:	cf c4 de    	asr.w     w8, #0xf, w9
    1858:	09 05 78    	mov.w     w9, w10
    185a:	8a 05 78    	mov.w     w10, w11
    185c:	08 00 be    	mov.d     w8, w0
    185e:	0a 01 be    	mov.d     w10, w2
    1860:	48 00 de    	lsr.w     w0, #0x8, w0
    1862:	c8 0a dd    	sl.w      w1, #0x8, w5
    1864:	00 80 72    	ior.w     w5, w0, w0
    1866:	e0 77 9f    	mov.b     w0, [w15-74]
    1868:	e0 0f 53    	sub.w     w6, #0x0, [w15]
    186a:	09 00 32    	bra       Z, 0x187e <.L63>
    186c:	e0 4f 50    	sub.b     w0, #0x0, [w15]
    186e:	07 00 32    	bra       Z, 0x187e <.L63>
    1870:	e1 4f 40    	add.b     w0, #0x1, [w15]
    1872:	05 00 32    	bra       Z, 0x187e <.L63>
    1874:	26 00 20    	mov.w     #0x2, w6
    1876:	f0 77 9f    	mov.b     w0, [w15-73]
    1878:	88 7f 9f    	mov.b     w8, [w15-72]
    187a:	c6 b7 9f    	mov.w     w6, [w15-24]
    187c:	03 00 37    	bra       0x1884 <.L64>

0000187e <.L63>:
    187e:	17 00 20    	mov.w     #0x1, w7
    1880:	c7 b7 9f    	mov.w     w7, [w15-24]
    1882:	f8 77 9f    	mov.b     w8, [w15-73]

00001884 <.L64>:
    1884:	78 fb 2f    	mov.w     #0xffb7, w8
    1886:	08 84 47    	add.w     w15, w8, w8
    1888:	b8 b7 9f    	mov.w     w8, [w15-26]
    188a:	82 ff 37    	bra       0x1790 <.L44>

0000188c <.L25>:
    188c:	69 fb 2f    	mov.w     #0xffb6, w9
    188e:	1a 00 20    	mov.w     #0x1, w10
    1890:	89 84 47    	add.w     w15, w9, w9
    1892:	e5 77 9f    	mov.b     w5, [w15-74]
    1894:	b9 b7 9f    	mov.w     w9, [w15-26]
    1896:	ca b7 9f    	mov.w     w10, [w15-24]
    1898:	7b ff 37    	bra       0x1790 <.L44>

0000189a <.L33>:
    189a:	e5 77 9f    	mov.b     w5, [w15-74]
    189c:	0c 0c b3    	ior.w     #0xc0, w12

0000189e <.L39>:
    189e:	8c 02 78    	mov.w     w12, w5
    18a0:	05 0c b2    	and.w     #0xc0, w5
    18a2:	3b 00 3a    	bra       NZ, 0x191a <.L65>
    18a4:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    18a6:	05 00 3d    	bra       GE, 0x18b2 <.L66>
    18a8:	af b2 97    	mov.w     [w15-28], w5
    18aa:	45 01 be    	mov.d     [--w5], w2
    18ac:	45 00 be    	mov.d     [--w5], w0
    18ae:	a5 b7 9f    	mov.w     w5, [w15-28]
    18b0:	0f 00 37    	bra       0x18d0 <.L167>

000018b2 <.L66>:
    18b2:	f0 02 66    	and.w     w12, #0x10, w5
    18b4:	12 00 32    	bra       Z, 0x18da <.L68>
    18b6:	2f b4 97    	mov.w     [w15-28], w8
    18b8:	48 03 be    	mov.d     [--w8], w6
    18ba:	f6 9f 9f    	mov.w     w6, [w15-66]
    18bc:	87 a7 9f    	mov.w     w7, [w15-64]
    18be:	a8 b7 9f    	mov.w     w8, [w15-28]
    18c0:	98 02 90    	mov.w     [w8+2], w5
    18c2:	cf aa de    	asr.w     w5, #0xf, w5
    18c4:	95 a7 9f    	mov.w     w5, [w15-62]
    18c6:	a5 a7 9f    	mov.w     w5, [w15-60]
    18c8:	7f 98 97    	mov.w     [w15-66], w0
    18ca:	8f a0 97    	mov.w     [w15-64], w1
    18cc:	1f a1 97    	mov.w     [w15-62], w2
    18ce:	af a1 97    	mov.w     [w15-60], w3

000018d0 <.L167>:
    18d0:	b0 b7 9f    	mov.w     w0, [w15-26]
    18d2:	c1 b7 9f    	mov.w     w1, [w15-24]
    18d4:	d2 b7 9f    	mov.w     w2, [w15-22]
    18d6:	e3 b7 9f    	mov.w     w3, [w15-20]
    18d8:	0b 00 37    	bra       0x18f0 <.L67>

000018da <.L68>:
    18da:	af b0 97    	mov.w     [w15-28], w1
    18dc:	c1 02 78    	mov.w     [--w1], w5
    18de:	05 04 78    	mov.w     w5, w8
    18e0:	cf c4 de    	asr.w     w8, #0xf, w9
    18e2:	09 05 78    	mov.w     w9, w10
    18e4:	8a 05 78    	mov.w     w10, w11
    18e6:	a1 b7 9f    	mov.w     w1, [w15-28]
    18e8:	b8 b7 9f    	mov.w     w8, [w15-26]
    18ea:	c9 b7 9f    	mov.w     w9, [w15-24]
    18ec:	da b7 9f    	mov.w     w10, [w15-22]
    18ee:	eb b7 9f    	mov.w     w11, [w15-20]

000018f0 <.L67>:
    18f0:	3f b0 97    	mov.w     [w15-26], w0
    18f2:	cf b0 97    	mov.w     [w15-24], w1
    18f4:	5f b1 97    	mov.w     [w15-22], w2
    18f6:	ef b1 97    	mov.w     [w15-20], w3
    18f8:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    18fa:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    18fc:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    18fe:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1900:	32 00 3d    	bra       GE, 0x1966 <.L69>
    1902:	60 00 b8    	mul.uu    w0, #0x0, w0
    1904:	60 11 b8    	mul.uu    w2, #0x0, w2
    1906:	3f b4 97    	mov.w     [w15-26], w8
    1908:	cf b4 97    	mov.w     [w15-24], w9
    190a:	5f b5 97    	mov.w     [w15-22], w10
    190c:	ef b5 97    	mov.w     [w15-20], w11
    190e:	3c 00 b3    	ior.w     #0x3, w12
    1910:	08 04 50    	sub.w     w0, w8, w8
    1912:	89 84 58    	subb.w    w1, w9, w9
    1914:	0a 05 59    	subb.w    w2, w10, w10
    1916:	8b 85 59    	subb.w    w3, w11, w11
    1918:	22 00 37    	bra       0x195e <.L168>

0000191a <.L65>:
    191a:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    191c:	05 00 3d    	bra       GE, 0x1928 <.L70>
    191e:	af b2 97    	mov.w     [w15-28], w5
    1920:	45 01 be    	mov.d     [--w5], w2
    1922:	45 00 be    	mov.d     [--w5], w0
    1924:	a5 b7 9f    	mov.w     w5, [w15-28]
    1926:	0f 00 37    	bra       0x1946 <.L169>

00001928 <.L70>:
    1928:	f0 02 66    	and.w     w12, #0x10, w5
    192a:	12 00 32    	bra       Z, 0x1950 <.L71>
    192c:	2f b4 97    	mov.w     [w15-28], w8
    192e:	80 04 eb    	clr.w     w9
    1930:	48 03 be    	mov.d     [--w8], w6
    1932:	00 05 eb    	clr.w     w10
    1934:	96 af 9f    	mov.w     w6, [w15-46]
    1936:	a7 af 9f    	mov.w     w7, [w15-44]
    1938:	b9 af 9f    	mov.w     w9, [w15-42]
    193a:	ca af 9f    	mov.w     w10, [w15-40]
    193c:	1f a8 97    	mov.w     [w15-46], w0
    193e:	af a8 97    	mov.w     [w15-44], w1
    1940:	3f a9 97    	mov.w     [w15-42], w2
    1942:	cf a9 97    	mov.w     [w15-40], w3
    1944:	a8 b7 9f    	mov.w     w8, [w15-28]

00001946 <.L169>:
    1946:	b0 b7 9f    	mov.w     w0, [w15-26]
    1948:	c1 b7 9f    	mov.w     w1, [w15-24]
    194a:	d2 b7 9f    	mov.w     w2, [w15-22]
    194c:	e3 b7 9f    	mov.w     w3, [w15-20]
    194e:	0b 00 37    	bra       0x1966 <.L69>

00001950 <.L71>:
    1950:	af b0 97    	mov.w     [w15-28], w1
    1952:	c1 02 78    	mov.w     [--w1], w5
    1954:	a1 b7 9f    	mov.w     w1, [w15-28]
    1956:	05 04 78    	mov.w     w5, w8
    1958:	09 00 20    	mov.w     #0x0, w9
    195a:	0a 00 20    	mov.w     #0x0, w10
    195c:	0b 00 20    	mov.w     #0x0, w11

0000195e <.L168>:
    195e:	b8 b7 9f    	mov.w     w8, [w15-26]
    1960:	c9 b7 9f    	mov.w     w9, [w15-24]
    1962:	da b7 9f    	mov.w     w10, [w15-22]
    1964:	eb b7 9f    	mov.w     w11, [w15-20]

00001966 <.L69>:
    1966:	9f b4 97    	mov.w     [w15-30], w9
    1968:	e0 8f 54    	sub.w     w9, #0x0, [w15]
    196a:	0d 00 3a    	bra       NZ, 0x1986 <.L72>
    196c:	1a 00 20    	mov.w     #0x1, w10
    196e:	3f b0 97    	mov.w     [w15-26], w0
    1970:	cf b0 97    	mov.w     [w15-24], w1
    1972:	5f b1 97    	mov.w     [w15-22], w2
    1974:	ef b1 97    	mov.w     [w15-20], w3
    1976:	9a b7 9f    	mov.w     w10, [w15-30]
    1978:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    197a:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    197c:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    197e:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1980:	02 00 32    	bra       Z, 0x1986 <.L72>
    1982:	80 00 eb    	clr.w     w1
    1984:	91 b7 9f    	mov.w     w1, [w15-30]

00001986 <.L72>:
    1986:	0c 01 78    	mov.w     w12, w2
    1988:	05 04 20    	mov.w     #0x40, w5
    198a:	02 0c b2    	and.w     #0xc0, w2
    198c:	82 b7 9f    	mov.w     w2, [w15-32]
    198e:	85 0f 51    	sub.w     w2, w5, [w15]
    1990:	34 00 32    	bra       Z, 0x19fa <.L76>
    1992:	03 00 3c    	bra       GT, 0x199a <.L78>
    1994:	e0 0f 51    	sub.w     w2, #0x0, [w15]
    1996:	08 00 32    	bra       Z, 0x19a8 <.L75>
    1998:	48 00 37    	bra       0x1a2a <.L74>

0000199a <.L78>:
    199a:	05 08 20    	mov.w     #0x80, w5
    199c:	8f b1 97    	mov.w     [w15-32], w3
    199e:	85 8f 51    	sub.w     w3, w5, [w15]
    19a0:	14 00 32    	bra       Z, 0x19ca <.L77>
    19a2:	05 0c 20    	mov.w     #0xc0, w5
    19a4:	85 8f 51    	sub.w     w3, w5, [w15]
    19a6:	41 00 3a    	bra       NZ, 0x1a2a <.L74>

000019a8 <.L75>:
    19a8:	26 cd 20    	mov.w     #0xcd2, w6
    19aa:	15 c0 b3    	mov.b     #0x1, w5

000019ac <.L80>:
    19ac:	36 00 be    	mov.d     [w6++], w0
    19ae:	36 01 be    	mov.d     [w6++], w2
    19b0:	3f b4 97    	mov.w     [w15-26], w8
    19b2:	cf b4 97    	mov.w     [w15-24], w9
    19b4:	5f b5 97    	mov.w     [w15-22], w10
    19b6:	ef b5 97    	mov.w     [w15-20], w11
    19b8:	00 40 e1    	cp.w      w8, w0
    19ba:	01 c8 e1    	cpb.w     w9, w1
    19bc:	02 d0 e1    	cpb.w     w10, w2
    19be:	03 d8 e1    	cpb.w     w11, w3
    19c0:	33 00 39    	bra       NC, 0x1a28 <.L170>
    19c2:	85 42 e8    	inc.b     w5, w5
    19c4:	f4 cf 52    	sub.b     w5, #0x14, [w15]
    19c6:	f2 ff 3a    	bra       NZ, 0x19ac <.L80>
    19c8:	2f 00 37    	bra       0x1a28 <.L170>

000019ca <.L77>:
    19ca:	15 c0 b3    	mov.b     #0x1, w5
    19cc:	00 01 20    	mov.w     #0x10, w0
    19ce:	01 00 20    	mov.w     #0x0, w1
    19d0:	60 11 b8    	mul.uu    w2, #0x0, w2

000019d2 <.L82>:
    19d2:	3f b4 97    	mov.w     [w15-26], w8
    19d4:	cf b4 97    	mov.w     [w15-24], w9
    19d6:	5f b5 97    	mov.w     [w15-22], w10
    19d8:	ef b5 97    	mov.w     [w15-20], w11
    19da:	00 40 e1    	cp.w      w8, w0
    19dc:	01 c8 e1    	cpb.w     w9, w1
    19de:	02 d0 e1    	cpb.w     w10, w2
    19e0:	03 d8 e1    	cpb.w     w11, w3
    19e2:	22 00 39    	bra       NC, 0x1a28 <.L170>
    19e4:	49 00 20    	mov.w     #0x4, w9

000019e6 <.LB705>:
    19e6:	00 00 d0    	sl.w      w0, w0
    19e8:	81 80 d2    	rlc.w     w1, w1
    19ea:	02 81 d2    	rlc.w     w2, w2
    19ec:	83 81 d2    	rlc.w     w3, w3
    19ee:	89 04 e9    	dec.w     w9, w9
    19f0:	fa ff 3a    	bra       NZ, 0x19e6 <.LB705>
    19f2:	85 42 e8    	inc.b     w5, w5
    19f4:	f0 cf 52    	sub.b     w5, #0x10, [w15]
    19f6:	ed ff 3a    	bra       NZ, 0x19d2 <.L82>
    19f8:	17 00 37    	bra       0x1a28 <.L170>

000019fa <.L76>:
    19fa:	15 c0 b3    	mov.b     #0x1, w5
    19fc:	80 00 20    	mov.w     #0x8, w0
    19fe:	01 00 20    	mov.w     #0x0, w1
    1a00:	60 11 b8    	mul.uu    w2, #0x0, w2

00001a02 <.L84>:
    1a02:	3f b4 97    	mov.w     [w15-26], w8
    1a04:	cf b4 97    	mov.w     [w15-24], w9
    1a06:	5f b5 97    	mov.w     [w15-22], w10
    1a08:	ef b5 97    	mov.w     [w15-20], w11
    1a0a:	00 40 e1    	cp.w      w8, w0
    1a0c:	01 c8 e1    	cpb.w     w9, w1
    1a0e:	02 d0 e1    	cpb.w     w10, w2
    1a10:	03 d8 e1    	cpb.w     w11, w3
    1a12:	0a 00 39    	bra       NC, 0x1a28 <.L170>
    1a14:	39 00 20    	mov.w     #0x3, w9

00001a16 <.LB724>:
    1a16:	00 00 d0    	sl.w      w0, w0
    1a18:	81 80 d2    	rlc.w     w1, w1
    1a1a:	02 81 d2    	rlc.w     w2, w2
    1a1c:	83 81 d2    	rlc.w     w3, w3
    1a1e:	89 04 e9    	dec.w     w9, w9
    1a20:	fa ff 3a    	bra       NZ, 0x1a16 <.LB724>
    1a22:	85 42 e8    	inc.b     w5, w5
    1a24:	f5 cf 52    	sub.b     w5, #0x15, [w15]
    1a26:	ed ff 3a    	bra       NZ, 0x1a02 <.L84>

00001a28 <.L170>:
    1a28:	e5 77 9f    	mov.b     w5, [w15-74]

00001a2a <.L74>:
    1a2a:	6f 75 97    	mov.b     [w15-74], w10
    1a2c:	9f b5 97    	mov.w     [w15-30], w11
    1a2e:	8a 02 fb    	se        w10, w5
    1a30:	8b 8f 52    	sub.w     w5, w11, [w15]
    1a32:	02 00 3d    	bra       GE, 0x1a38 <.L85>
    1a34:	eb 77 9f    	mov.b     w11, [w15-74]
    1a36:	04 00 37    	bra       0x1a40 <.L86>

00001a38 <.L85>:
    1a38:	1f b0 97    	mov.w     [w15-30], w0
    1a3a:	85 0f 50    	sub.w     w0, w5, [w15]
    1a3c:	01 00 3d    	bra       GE, 0x1a40 <.L86>
    1a3e:	95 b7 9f    	mov.w     w5, [w15-30]

00001a40 <.L86>:
    1a40:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a42:	03 00 32    	bra       Z, 0x1a4a <.L87>
    1a44:	e3 02 66    	and.w     w12, #0x3, w5
    1a46:	01 00 32    	bra       Z, 0x1a4a <.L87>
    1a48:	04 02 e9    	dec.w     w4, w4

00001a4a <.L87>:
    1a4a:	05 00 24    	mov.w     #0x4000, w5
    1a4c:	85 02 66    	and.w     w12, w5, w5
    1a4e:	06 00 32    	bra       Z, 0x1a5c <.L88>
    1a50:	9f b0 97    	mov.w     [w15-30], w1
    1a52:	81 0f 52    	sub.w     w4, w1, [w15]
    1a54:	02 00 34    	bra       LE, 0x1a5a <.L139>
    1a56:	01 02 52    	sub.w     w4, w1, w4
    1a58:	01 00 37    	bra       0x1a5c <.L88>

00001a5a <.L139>:
    1a5a:	00 02 eb    	clr.w     w4

00001a5c <.L88>:
    1a5c:	6f 71 97    	mov.b     [w15-74], w2
    1a5e:	80 01 eb    	clr.w     w3
    1a60:	82 02 fb    	se        w2, w5
    1a62:	f3 af 9f    	mov.w     w3, [w15-34]
    1a64:	85 0f 52    	sub.w     w4, w5, [w15]
    1a66:	02 00 34    	bra       LE, 0x1a6c <.L89>
    1a68:	85 02 52    	sub.w     w4, w5, w5
    1a6a:	f5 af 9f    	mov.w     w5, [w15-34]

00001a6c <.L89>:
    1a6c:	64 02 66    	and.w     w12, #0x4, w4
    1a6e:	3b 00 32    	bra       Z, 0x1ae6 <.L90>
    1a70:	e2 02 66    	and.w     w12, #0x2, w5
    1a72:	61 02 66    	and.w     w12, #0x1, w4
    1a74:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1a76:	11 00 32    	bra       Z, 0x1a9a <.L91>
    1a78:	bd 02 90    	mov.w     [w13+6], w5
    1a7a:	05 04 b2    	and.w     #0x40, w5
    1a7c:	08 00 32    	bra       Z, 0x1a8e <.L92>
    1a7e:	9d 02 78    	mov.w     [w13], w5
    1a80:	b6 c2 b3    	mov.b     #0x2b, w6
    1a82:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a84:	01 00 32    	bra       Z, 0x1a88 <.L93>
    1a86:	06 c3 e8    	inc2.b    w6, w6

00001a88 <.L93>:
    1a88:	86 4a 78    	mov.b     w6, [w5]
    1a8a:	85 0e e8    	inc.w     w5, [w13]
    1a8c:	15 00 37    	bra       0x1ab8 <.L98>

00001a8e <.L92>:
    1a8e:	b0 02 20    	mov.w     #0x2b, w0
    1a90:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a92:	01 00 32    	bra       Z, 0x1a96 <.L95>
    1a94:	00 80 e8    	inc2.w    w0, w0

00001a96 <.L95>:
    1a96:	8d 00 78    	mov.w     w13, w1
    1a98:	0c 00 37    	bra       0x1ab2 <.L172>

00001a9a <.L91>:
    1a9a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1a9c:	0e 00 32    	bra       Z, 0x1aba <.L96>
    1a9e:	3d 02 90    	mov.w     [w13+6], w4
    1aa0:	04 04 b2    	and.w     #0x40, w4
    1aa2:	05 00 32    	bra       Z, 0x1aae <.L97>
    1aa4:	1d 02 78    	mov.w     [w13], w4
    1aa6:	05 c2 b3    	mov.b     #0x20, w5
    1aa8:	05 4a 78    	mov.b     w5, [w4]
    1aaa:	84 0e e8    	inc.w     w4, [w13]
    1aac:	05 00 37    	bra       0x1ab8 <.L98>

00001aae <.L97>:
    1aae:	8d 00 78    	mov.w     w13, w1
    1ab0:	00 02 20    	mov.w     #0x20, w0

00001ab2 <.L172>:
    1ab2:	6e fd 07    	rcall     0x1590 <_fputc>
    1ab4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1ab6:	01 00 32    	bra       Z, 0x1aba <.L96>

00001ab8 <.L98>:
    1ab8:	0e 07 e8    	inc.w     w14, w14

00001aba <.L96>:
    1aba:	7f aa 97    	mov.w     [w15-34], w4
    1abc:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1abe:	4f 00 32    	bra       Z, 0x1b5e <.L99>
    1ac0:	08 c3 b3    	mov.b     #0x30, w8
    1ac2:	84 04 78    	mov.w     w4, w9

00001ac4 <.L150>:
    1ac4:	3d 02 90    	mov.w     [w13+6], w4
    1ac6:	04 04 b2    	and.w     #0x40, w4
    1ac8:	04 00 32    	bra       Z, 0x1ad2 <.L100>
    1aca:	1d 02 78    	mov.w     [w13], w4
    1acc:	08 4a 78    	mov.b     w8, [w4]
    1ace:	84 0e e8    	inc.w     w4, [w13]
    1ad0:	05 00 37    	bra       0x1adc <.L101>

00001ad2 <.L100>:
    1ad2:	8d 00 78    	mov.w     w13, w1
    1ad4:	00 03 20    	mov.w     #0x30, w0
    1ad6:	5c fd 07    	rcall     0x1590 <_fputc>
    1ad8:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1ada:	01 00 32    	bra       Z, 0x1ade <.L102>

00001adc <.L101>:
    1adc:	0e 07 e8    	inc.w     w14, w14

00001ade <.L102>:
    1ade:	89 04 e9    	dec.w     w9, w9
    1ae0:	f1 ff 3a    	bra       NZ, 0x1ac4 <.L150>
    1ae2:	f9 af 9f    	mov.w     w9, [w15-34]
    1ae4:	3c 00 37    	bra       0x1b5e <.L99>

00001ae6 <.L90>:
    1ae6:	ff aa 97    	mov.w     [w15-34], w5
    1ae8:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1aea:	14 00 32    	bra       Z, 0x1b14 <.L104>
    1aec:	68 02 66    	and.w     w12, #0x8, w4
    1aee:	12 00 3a    	bra       NZ, 0x1b14 <.L104>
    1af0:	08 c2 b3    	mov.b     #0x20, w8
    1af2:	85 04 78    	mov.w     w5, w9

00001af4 <.L151>:
    1af4:	3d 02 90    	mov.w     [w13+6], w4
    1af6:	04 04 b2    	and.w     #0x40, w4
    1af8:	04 00 32    	bra       Z, 0x1b02 <.L105>
    1afa:	1d 02 78    	mov.w     [w13], w4
    1afc:	08 4a 78    	mov.b     w8, [w4]
    1afe:	84 0e e8    	inc.w     w4, [w13]
    1b00:	05 00 37    	bra       0x1b0c <.L106>

00001b02 <.L105>:
    1b02:	8d 00 78    	mov.w     w13, w1
    1b04:	00 02 20    	mov.w     #0x20, w0
    1b06:	44 fd 07    	rcall     0x1590 <_fputc>
    1b08:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b0a:	01 00 32    	bra       Z, 0x1b0e <.L107>

00001b0c <.L106>:
    1b0c:	0e 07 e8    	inc.w     w14, w14

00001b0e <.L107>:
    1b0e:	89 04 e9    	dec.w     w9, w9
    1b10:	f1 ff 3a    	bra       NZ, 0x1af4 <.L151>
    1b12:	f9 af 9f    	mov.w     w9, [w15-34]

00001b14 <.L104>:
    1b14:	e2 02 66    	and.w     w12, #0x2, w5
    1b16:	61 02 66    	and.w     w12, #0x1, w4
    1b18:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1b1a:	11 00 32    	bra       Z, 0x1b3e <.L109>
    1b1c:	bd 02 90    	mov.w     [w13+6], w5
    1b1e:	05 04 b2    	and.w     #0x40, w5
    1b20:	08 00 32    	bra       Z, 0x1b32 <.L110>
    1b22:	9d 02 78    	mov.w     [w13], w5
    1b24:	b6 c2 b3    	mov.b     #0x2b, w6
    1b26:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b28:	01 00 32    	bra       Z, 0x1b2c <.L111>
    1b2a:	06 c3 e8    	inc2.b    w6, w6

00001b2c <.L111>:
    1b2c:	86 4a 78    	mov.b     w6, [w5]
    1b2e:	85 0e e8    	inc.w     w5, [w13]
    1b30:	15 00 37    	bra       0x1b5c <.L115>

00001b32 <.L110>:
    1b32:	b0 02 20    	mov.w     #0x2b, w0
    1b34:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b36:	01 00 32    	bra       Z, 0x1b3a <.L113>
    1b38:	00 80 e8    	inc2.w    w0, w0

00001b3a <.L113>:
    1b3a:	8d 00 78    	mov.w     w13, w1
    1b3c:	0c 00 37    	bra       0x1b56 <.L174>

00001b3e <.L109>:
    1b3e:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1b40:	0e 00 32    	bra       Z, 0x1b5e <.L99>
    1b42:	3d 02 90    	mov.w     [w13+6], w4
    1b44:	04 04 b2    	and.w     #0x40, w4
    1b46:	05 00 32    	bra       Z, 0x1b52 <.L114>
    1b48:	1d 02 78    	mov.w     [w13], w4
    1b4a:	05 c2 b3    	mov.b     #0x20, w5
    1b4c:	05 4a 78    	mov.b     w5, [w4]
    1b4e:	84 0e e8    	inc.w     w4, [w13]
    1b50:	05 00 37    	bra       0x1b5c <.L115>

00001b52 <.L114>:
    1b52:	8d 00 78    	mov.w     w13, w1
    1b54:	00 02 20    	mov.w     #0x20, w0

00001b56 <.L174>:
    1b56:	1c fd 07    	rcall     0x1590 <_fputc>
    1b58:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1b5a:	01 00 32    	bra       Z, 0x1b5e <.L99>

00001b5c <.L115>:
    1b5c:	0e 07 e8    	inc.w     w14, w14

00001b5e <.L99>:
    1b5e:	1f b3 97    	mov.w     [w15-30], w6
    1b60:	a5 cc 20    	mov.w     #0xcca, w5
    1b62:	06 02 e9    	dec.w     w6, w4
    1b64:	f0 04 66    	and.w     w12, #0x10, w9
    1b66:	c2 23 dd    	sl.w      w4, #0x2, w7
    1b68:	0c 05 78    	mov.w     w12, w10
    1b6a:	c7 a7 9f    	mov.w     w7, [w15-56]
    1b6c:	0a 02 b2    	and.w     #0x20, w10
    1b6e:	63 23 b9    	mul.su    w4, #0x3, w6
    1b70:	e9 9f 9f    	mov.w     w9, [w15-68]
    1b72:	06 04 78    	mov.w     w6, w8
    1b74:	43 22 dd    	sl.w      w4, #0x3, w4
    1b76:	b8 a7 9f    	mov.w     w8, [w15-58]
    1b78:	85 02 42    	add.w     w4, w5, w5
    1b7a:	da 9f 9f    	mov.w     w10, [w15-70]
    1b7c:	e5 af 9f    	mov.w     w5, [w15-36]
    1b7e:	a3 00 37    	bra       0x1cc6 <.L116>

00001b80 <.L129>:
    1b80:	9f b5 97    	mov.w     [w15-30], w11
    1b82:	0f b0 97    	mov.w     [w15-32], w0
    1b84:	8b 05 e9    	dec.w     w11, w11
    1b86:	01 04 20    	mov.w     #0x40, w1
    1b88:	9b b7 9f    	mov.w     w11, [w15-30]
    1b8a:	81 0f 50    	sub.w     w0, w1, [w15]
    1b8c:	73 00 32    	bra       Z, 0x1c74 <.L119>
    1b8e:	03 00 3c    	bra       GT, 0x1b96 <.L121>
    1b90:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1b92:	08 00 32    	bra       Z, 0x1ba4 <.L118>
    1b94:	7e 00 37    	bra       0x1c92 <.L117>

00001b96 <.L121>:
    1b96:	04 08 20    	mov.w     #0x80, w4
    1b98:	0f b1 97    	mov.w     [w15-32], w2
    1b9a:	84 0f 51    	sub.w     w2, w4, [w15]
    1b9c:	56 00 32    	bra       Z, 0x1c4a <.L120>
    1b9e:	04 0c 20    	mov.w     #0xc0, w4
    1ba0:	84 0f 51    	sub.w     w2, w4, [w15]
    1ba2:	77 00 3a    	bra       NZ, 0x1c92 <.L117>

00001ba4 <.L118>:
    1ba4:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1ba6:	1f 00 3d    	bra       GE, 0x1be6 <.L122>
    1ba8:	ef a9 97    	mov.w     [w15-36], w3
    1baa:	33 04 be    	mov.d     [w3++], w8
    1bac:	23 05 be    	mov.d     [w3--], w10
    1bae:	3f b0 97    	mov.w     [w15-26], w0
    1bb0:	cf b0 97    	mov.w     [w15-24], w1
    1bb2:	5f b1 97    	mov.w     [w15-22], w2
    1bb4:	ef b1 97    	mov.w     [w15-20], w3
    1bb6:	08 02 be    	mov.d     w8, w4
    1bb8:	0a 03 be    	mov.d     w10, w6
    1bba:	9d 01 07    	rcall     0x1ef6 <___udivdi3>
    1bbc:	08 02 be    	mov.d     w8, w4
    1bbe:	0a 03 be    	mov.d     w10, w6
    1bc0:	e0 77 9f    	mov.b     w0, [w15-74]
    1bc2:	00 00 fb    	se        w0, w0
    1bc4:	cf 80 de    	asr.w     w0, #0xf, w1
    1bc6:	01 01 78    	mov.w     w1, w2
    1bc8:	82 01 78    	mov.w     w2, w3
    1bca:	fe 01 07    	rcall     0x1fc8 <___muldi3>
    1bcc:	3f b2 97    	mov.w     [w15-26], w4
    1bce:	cf b2 97    	mov.w     [w15-24], w5
    1bd0:	5f b3 97    	mov.w     [w15-22], w6
    1bd2:	ef b3 97    	mov.w     [w15-20], w7
    1bd4:	00 02 52    	sub.w     w4, w0, w4
    1bd6:	81 82 5a    	subb.w    w5, w1, w5
    1bd8:	02 03 5b    	subb.w    w6, w2, w6
    1bda:	83 83 5b    	subb.w    w7, w3, w7
    1bdc:	b4 b7 9f    	mov.w     w4, [w15-26]
    1bde:	c5 b7 9f    	mov.w     w5, [w15-24]
    1be0:	d6 b7 9f    	mov.w     w6, [w15-22]
    1be2:	e7 b7 9f    	mov.w     w7, [w15-20]
    1be4:	2e 00 37    	bra       0x1c42 <.L123>

00001be6 <.L122>:
    1be6:	ef 9a 97    	mov.w     [w15-68], w5
    1be8:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1bea:	22 00 32    	bra       Z, 0x1c30 <.L124>
    1bec:	6f ab 97    	mov.w     [w15-36], w6
    1bee:	3f b2 97    	mov.w     [w15-26], w4
    1bf0:	cf b2 97    	mov.w     [w15-24], w5
    1bf2:	36 04 be    	mov.d     [w6++], w8
    1bf4:	26 05 be    	mov.d     [w6--], w10
    1bf6:	04 00 be    	mov.d     w4, w0
    1bf8:	08 01 be    	mov.d     w8, w2
    1bfa:	84 bf 9f    	mov.w     w4, [w15-16]
    1bfc:	f5 b7 9f    	mov.w     w5, [w15-18]
    1bfe:	00 05 eb    	clr.w     w10
    1c00:	4e fc 07    	rcall     0x149e <___udivsi3>
    1c02:	08 01 be    	mov.d     w8, w2
    1c04:	e0 77 9f    	mov.b     w0, [w15-74]
    1c06:	00 00 fb    	se        w0, w0
    1c08:	cf 80 de    	asr.w     w0, #0xf, w1
    1c0a:	c4 00 07    	rcall     0x1d94 <___mulp32eds3>
    1c0c:	0f ba 97    	mov.w     [w15-16], w4
    1c0e:	ff b2 97    	mov.w     [w15-18], w5
    1c10:	8a af 9f    	mov.w     w10, [w15-48]
    1c12:	00 04 52    	sub.w     w4, w0, w8
    1c14:	81 84 5a    	subb.w    w5, w1, w9
    1c16:	d8 a7 9f    	mov.w     w8, [w15-54]
    1c18:	e9 a7 9f    	mov.w     w9, [w15-52]
    1c1a:	80 04 eb    	clr.w     w9
    1c1c:	f9 a7 9f    	mov.w     w9, [w15-50]
    1c1e:	5f a0 97    	mov.w     [w15-54], w0
    1c20:	ef a0 97    	mov.w     [w15-52], w1
    1c22:	7f a1 97    	mov.w     [w15-50], w2
    1c24:	8f a9 97    	mov.w     [w15-48], w3
    1c26:	b0 b7 9f    	mov.w     w0, [w15-26]
    1c28:	c1 b7 9f    	mov.w     w1, [w15-24]
    1c2a:	d2 b7 9f    	mov.w     w2, [w15-22]
    1c2c:	e3 b7 9f    	mov.w     w3, [w15-20]
    1c2e:	09 00 37    	bra       0x1c42 <.L123>

00001c30 <.L124>:
    1c30:	ef a8 97    	mov.w     [w15-36], w1
    1c32:	3f b1 97    	mov.w     [w15-26], w2
    1c34:	11 02 78    	mov.w     [w1], w4
    1c36:	11 00 09    	repeat    #0x11
    1c38:	04 81 d8    	div.uw    w2, w4
    1c3a:	a4 00 20    	mov.w     #0xa, w4
    1c3c:	11 00 09    	repeat    #0x11
    1c3e:	04 80 d8    	div.uw    w0, w4
    1c40:	e1 77 9f    	mov.b     w1, [w15-74]

00001c42 <.L123>:
    1c42:	ef 71 97    	mov.b     [w15-74], w3
    1c44:	03 43 b0    	add.b     #0x30, w3
    1c46:	e3 77 9f    	mov.b     w3, [w15-74]
    1c48:	24 00 37    	bra       0x1c92 <.L117>

00001c4a <.L120>:
    1c4a:	b4 d7 20    	mov.w     #0xd7b, w4
    1c4c:	df 9a 97    	mov.w     [w15-70], w5
    1c4e:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1c50:	01 00 32    	bra       Z, 0x1c54 <.L125>
    1c52:	a4 d6 20    	mov.w     #0xd6a, w4

00001c54 <.L125>:
    1c54:	3f b0 97    	mov.w     [w15-26], w0
    1c56:	cf b0 97    	mov.w     [w15-24], w1
    1c58:	5f b1 97    	mov.w     [w15-22], w2
    1c5a:	ef b1 97    	mov.w     [w15-20], w3
    1c5c:	4f a3 97    	mov.w     [w15-56], w6

00001c5e <.LB1128>:
    1c5e:	06 03 e9    	dec.w     w6, w6
    1c60:	05 00 33    	bra       N, 0x1c6c <.LE1128>
    1c62:	83 01 d1    	lsr.w     w3, w3
    1c64:	02 81 d3    	rrc.w     w2, w2
    1c66:	81 80 d3    	rrc.w     w1, w1
    1c68:	00 80 d3    	rrc.w     w0, w0
    1c6a:	f9 ff 37    	bra       0x1c5e <.LB1128>

00001c6c <.LE1128>:
    1c6c:	6f 00 60    	and.w     w0, #0xf, w0
    1c6e:	64 40 78    	mov.b     [w4+w0], w0
    1c70:	e0 77 9f    	mov.b     w0, [w15-74]
    1c72:	0f 00 37    	bra       0x1c92 <.L117>

00001c74 <.L119>:
    1c74:	3f b2 97    	mov.w     [w15-26], w4
    1c76:	cf b2 97    	mov.w     [w15-24], w5
    1c78:	5f b3 97    	mov.w     [w15-22], w6
    1c7a:	ef b3 97    	mov.w     [w15-20], w7
    1c7c:	3f a4 97    	mov.w     [w15-58], w8

00001c7e <.LB1138>:
    1c7e:	08 04 e9    	dec.w     w8, w8
    1c80:	05 00 33    	bra       N, 0x1c8c <.LE1138>
    1c82:	87 03 d1    	lsr.w     w7, w7
    1c84:	06 83 d3    	rrc.w     w6, w6
    1c86:	85 82 d3    	rrc.w     w5, w5
    1c88:	04 82 d3    	rrc.w     w4, w4
    1c8a:	f9 ff 37    	bra       0x1c7e <.LB1138>

00001c8c <.LE1138>:
    1c8c:	67 42 62    	and.b     w4, #0x7, w4
    1c8e:	04 43 b0    	add.b     #0x30, w4
    1c90:	e4 77 9f    	mov.b     w4, [w15-74]

00001c92 <.L117>:
    1c92:	3d 02 90    	mov.w     [w13+6], w4
    1c94:	04 04 b2    	and.w     #0x40, w4
    1c96:	07 00 32    	bra       Z, 0x1ca6 <.L126>
    1c98:	9d 02 78    	mov.w     [w13], w5
    1c9a:	6f 72 97    	mov.b     [w15-74], w4
    1c9c:	84 4a 78    	mov.b     w4, [w5]
    1c9e:	85 0e e8    	inc.w     w5, [w13]
    1ca0:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    1ca2:	07 00 3a    	bra       NZ, 0x1cb2 <.L127>
    1ca4:	07 00 37    	bra       0x1cb4 <.L128>

00001ca6 <.L126>:
    1ca6:	ef 74 97    	mov.b     [w15-74], w9
    1ca8:	8d 00 78    	mov.w     w13, w1
    1caa:	09 00 fb    	se        w9, w0
    1cac:	71 fc 07    	rcall     0x1590 <_fputc>
    1cae:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1cb0:	01 00 32    	bra       Z, 0x1cb4 <.L128>

00001cb2 <.L127>:
    1cb2:	0e 07 e8    	inc.w     w14, w14

00001cb4 <.L128>:
    1cb4:	4f a5 97    	mov.w     [w15-56], w10
    1cb6:	bf a5 97    	mov.w     [w15-58], w11
    1cb8:	6f a8 97    	mov.w     [w15-36], w0
    1cba:	64 05 55    	sub.w     w10, #0x4, w10
    1cbc:	e3 85 55    	sub.w     w11, #0x3, w11
    1cbe:	68 00 50    	sub.w     w0, #0x8, w0
    1cc0:	ca a7 9f    	mov.w     w10, [w15-56]
    1cc2:	bb a7 9f    	mov.w     w11, [w15-58]
    1cc4:	e0 af 9f    	mov.w     w0, [w15-36]

00001cc6 <.L116>:
    1cc6:	9f b0 97    	mov.w     [w15-30], w1
    1cc8:	e0 8f 50    	sub.w     w1, #0x0, [w15]
    1cca:	5a ff 3a    	bra       NZ, 0x1b80 <.L129>
    1ccc:	68 06 66    	and.w     w12, #0x8, w12
    1cce:	14 00 32    	bra       Z, 0x1cf8 <.L162>
    1cd0:	7f a9 97    	mov.w     [w15-34], w2
    1cd2:	e0 0f 51    	sub.w     w2, #0x0, [w15]
    1cd4:	11 00 34    	bra       LE, 0x1cf8 <.L162>
    1cd6:	08 c2 b3    	mov.b     #0x20, w8
    1cd8:	82 04 78    	mov.w     w2, w9

00001cda <.L149>:
    1cda:	3d 02 90    	mov.w     [w13+6], w4
    1cdc:	04 04 b2    	and.w     #0x40, w4
    1cde:	04 00 32    	bra       Z, 0x1ce8 <.L130>
    1ce0:	1d 02 78    	mov.w     [w13], w4
    1ce2:	08 4a 78    	mov.b     w8, [w4]
    1ce4:	84 0e e8    	inc.w     w4, [w13]
    1ce6:	05 00 37    	bra       0x1cf2 <.L131>

00001ce8 <.L130>:
    1ce8:	8d 00 78    	mov.w     w13, w1
    1cea:	00 02 20    	mov.w     #0x20, w0
    1cec:	51 fc 07    	rcall     0x1590 <_fputc>
    1cee:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1cf0:	01 00 32    	bra       Z, 0x1cf4 <.L132>

00001cf2 <.L131>:
    1cf2:	0e 07 e8    	inc.w     w14, w14

00001cf4 <.L132>:
    1cf4:	89 04 e9    	dec.w     w9, w9
    1cf6:	f1 ff 3a    	bra       NZ, 0x1cda <.L149>

00001cf8 <.L162>:
    1cf8:	df a9 97    	mov.w     [w15-38], w3
    1cfa:	13 40 78    	mov.b     [w3], w0
    1cfc:	e0 77 9f    	mov.b     w0, [w15-74]
    1cfe:	e0 4f 50    	sub.b     w0, #0x0, [w15]
    1d00:	95 fc 3a    	bra       NZ, 0x162c <.L134>

00001d02 <.L26>:
    1d02:	0e 00 78    	mov.w     w14, w0
    1d04:	4f 07 78    	mov.w     [--w15], w14
    1d06:	4f 06 be    	mov.d     [--w15], w12
    1d08:	4f 05 be    	mov.d     [--w15], w10
    1d0a:	4f 04 be    	mov.d     [--w15], w8
    1d0c:	ef 03 b1    	sub.w     #0x3e, w15
    1d0e:	00 00 06    	return    

00001d10 <__flsbuf>:
    1d10:	02 00 fa    	lnk       #0x2
    1d12:	88 9f be    	mov.d     w8, [w15++]
    1d14:	01 04 78    	mov.w     w1, w8
    1d16:	a0 ff 9f    	mov.b     w0, [w15-6]
    1d18:	38 02 90    	mov.w     [w8+6], w4
    1d1a:	84 02 78    	mov.w     w4, w5
    1d1c:	05 04 b2    	and.w     #0x40, w5
    1d1e:	02 00 32    	bra       Z, 0x1d24 <.L2>
    1d20:	00 00 fb    	se        w0, w0
    1d22:	35 00 37    	bra       0x1d8e <.L3>

00001d24 <.L2>:
    1d24:	e2 02 62    	and.w     w4, #0x2, w5
    1d26:	05 00 3a    	bra       NZ, 0x1d32 <.L4>
    1d28:	04 03 b3    	ior.w     #0x30, w4
    1d2a:	15 04 98    	mov.w     w5, [w8+2]
    1d2c:	34 04 98    	mov.w     w4, [w8+6]
    1d2e:	00 80 eb    	setm.w    w0
    1d30:	2e 00 37    	bra       0x1d8e <.L3>

00001d32 <.L4>:
    1d32:	d8 04 90    	mov.w     [w8+10], w9
    1d34:	e0 8f 54    	sub.w     w9, #0x0, [w15]
    1d36:	06 00 3a    	bra       NZ, 0x1d44 <.L5>
    1d38:	12 00 20    	mov.w     #0x1, w2
    1d3a:	e6 80 57    	sub.w     w15, #0x6, w1
    1d3c:	48 00 90    	mov.w     [w8+8], w0
    1d3e:	6f 03 07    	rcall     0x241e <_write>
    1d40:	19 04 98    	mov.w     w9, [w8+2]
    1d42:	23 00 37    	bra       0x1d8a <.L7>

00001d44 <.L5>:
    1d44:	a8 02 90    	mov.w     [w8+4], w5
    1d46:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1d48:	08 00 3a    	bra       NZ, 0x1d5a <.L6>
    1d4a:	e5 db 20    	mov.w     #0xdbe, w5
    1d4c:	04 30 a0    	bset.w    w4, #0x3
    1d4e:	25 04 98    	mov.w     w5, [w8+4]
    1d50:	05 0c 78    	mov.w     w5, [w8]
    1d52:	34 04 98    	mov.w     w4, [w8+6]
    1d54:	25 00 20    	mov.w     #0x2, w5
    1d56:	55 04 98    	mov.w     w5, [w8+10]
    1d58:	15 04 98    	mov.w     w5, [w8+2]

00001d5a <.L6>:
    1d5a:	18 01 90    	mov.w     [w8+2], w2
    1d5c:	a8 00 90    	mov.w     [w8+4], w1
    1d5e:	48 00 90    	mov.w     [w8+8], w0
    1d60:	5e 03 07    	rcall     0x241e <_write>
    1d62:	28 02 90    	mov.w     [w8+4], w4
    1d64:	80 82 eb    	setm.w    w5
    1d66:	15 04 98    	mov.w     w5, [w8+2]
    1d68:	af fa 97    	mov.b     [w15-6], w5
    1d6a:	05 4a 78    	mov.b     w5, [w4]
    1d6c:	04 0c e8    	inc.w     w4, [w8]
    1d6e:	2f fa 97    	mov.b     [w15-6], w4
    1d70:	ea 4f 52    	sub.b     w4, #0xa, [w15]
    1d72:	0b 00 3a    	bra       NZ, 0x1d8a <.L7>
    1d74:	38 02 90    	mov.w     [w8+6], w4
    1d76:	04 10 b2    	and.w     #0x100, w4
    1d78:	08 00 32    	bra       Z, 0x1d8a <.L7>
    1d7a:	18 01 90    	mov.w     [w8+2], w2
    1d7c:	a8 00 90    	mov.w     [w8+4], w1
    1d7e:	48 00 90    	mov.w     [w8+8], w0
    1d80:	4e 03 07    	rcall     0x241e <_write>
    1d82:	00 02 eb    	clr.w     w4
    1d84:	a8 02 90    	mov.w     [w8+4], w5
    1d86:	14 04 98    	mov.w     w4, [w8+2]
    1d88:	05 0c 78    	mov.w     w5, [w8]

00001d8a <.L7>:
    1d8a:	2f fa 97    	mov.b     [w15-6], w4
    1d8c:	04 00 fb    	se        w4, w0

00001d8e <.L3>:
    1d8e:	4f 04 be    	mov.d     [--w15], w8
    1d90:	00 80 fa    	ulnk      
    1d92:	00 00 06    	return    

00001d94 <___mulp32eds3>:
    1d94:	02 0a b9    	mul.su    w1, w2, w4
    1d96:	00 1b b9    	mul.su    w3, w0, w6
    1d98:	02 00 b8    	mul.uu    w0, w2, w0
    1d9a:	81 00 42    	add.w     w4, w1, w1
    1d9c:	81 00 43    	add.w     w6, w1, w1
    1d9e:	00 00 06    	return    

00001da0 <___PplusBdi>:
    1da0:	88 9f be    	mov.d     w8, [w15++]
    1da2:	8a 9f be    	mov.d     w10, [w15++]
    1da4:	30 04 be    	mov.d     [w0++], w8
    1da6:	20 05 be    	mov.d     [w0--], w10
    1da8:	04 04 44    	add.w     w8, w4, w8
    1daa:	85 84 4c    	addc.w    w9, w5, w9
    1dac:	06 05 4d    	addc.w    w10, w6, w10
    1dae:	87 85 4d    	addc.w    w11, w7, w11
    1db0:	08 98 be    	mov.d     w8, [w0++]
    1db2:	0a 90 be    	mov.d     w10, [w0--]
    1db4:	04 40 e1    	cp.w      w8, w4
    1db6:	05 c8 e1    	cpb.w     w9, w5
    1db8:	06 d0 e1    	cpb.w     w10, w6
    1dba:	07 d8 e1    	cpb.w     w11, w7
    1dbc:	02 00 31    	bra       C, 0x1dc2 <.L1>
    1dbe:	68 00 40    	add.w     w0, #0x8, w0
    1dc0:	10 08 e8    	inc.w     [w0], [w0]

00001dc2 <.L1>:
    1dc2:	4f 05 be    	mov.d     [--w15], w10
    1dc4:	4f 04 be    	mov.d     [--w15], w8
    1dc6:	00 00 06    	return    

00001dc8 <___PminusBdi>:
    1dc8:	10 00 fa    	lnk       #0x10
    1dca:	88 9f be    	mov.d     w8, [w15++]
    1dcc:	8a 9f be    	mov.d     w10, [w15++]
    1dce:	11 00 20    	mov.w     #0x1, w1
    1dd0:	06 05 be    	mov.d     w6, w10
    1dd2:	04 04 be    	mov.d     w4, w8
    1dd4:	30 02 be    	mov.d     [w0++], w4
    1dd6:	20 03 be    	mov.d     [w0--], w6
    1dd8:	c4 b7 9f    	mov.w     w4, [w15-24]
    1dda:	d5 b7 9f    	mov.w     w5, [w15-22]
    1ddc:	e6 b7 9f    	mov.w     w6, [w15-20]
    1dde:	f7 b7 9f    	mov.w     w7, [w15-18]
    1de0:	08 02 52    	sub.w     w4, w8, w4
    1de2:	89 82 5a    	subb.w    w5, w9, w5
    1de4:	0a 03 5b    	subb.w    w6, w10, w6
    1de6:	8b 83 5b    	subb.w    w7, w11, w7
    1de8:	84 bf 9f    	mov.w     w4, [w15-16]
    1dea:	95 bf 9f    	mov.w     w5, [w15-14]
    1dec:	a6 bf 9f    	mov.w     w6, [w15-12]
    1dee:	b7 bf 9f    	mov.w     w7, [w15-10]
    1df0:	04 98 be    	mov.d     w4, [w0++]
    1df2:	06 98 be    	mov.d     w6, [w0++]
    1df4:	4f b2 97    	mov.w     [w15-24], w4
    1df6:	df b2 97    	mov.w     [w15-22], w5
    1df8:	6f b3 97    	mov.w     [w15-20], w6
    1dfa:	ff b3 97    	mov.w     [w15-18], w7
    1dfc:	08 20 e1    	cp.w      w4, w8
    1dfe:	09 a8 e1    	cpb.w     w5, w9
    1e00:	0a b0 e1    	cpb.w     w6, w10
    1e02:	0b b8 e1    	cpb.w     w7, w11
    1e04:	01 00 39    	bra       NC, 0x1e08 <.L4>
    1e06:	80 00 eb    	clr.w     w1

00001e08 <.L4>:
    1e08:	4f 05 be    	mov.d     [--w15], w10
    1e0a:	10 88 10    	subr.w    w1, [w0], [w0]
    1e0c:	4f 04 be    	mov.d     [--w15], w8
    1e0e:	00 80 fa    	ulnk      
    1e10:	00 00 06    	return    

00001e12 <___udivmoddi3>:
    1e12:	14 00 fa    	lnk       #0x14
    1e14:	88 9f be    	mov.d     w8, [w15++]
    1e16:	8a 9f be    	mov.d     w10, [w15++]
    1e18:	8c 9f be    	mov.d     w12, [w15++]
    1e1a:	00 06 eb    	clr.w     w12
    1e1c:	3e 00 07    	rcall     0x1e9a <L0>
    1e1e:	cc b7 9f    	mov.w     w12, [w15-24]
    1e20:	bc b7 9f    	mov.w     w12, [w15-26]
    1e22:	ac b7 9f    	mov.w     w12, [w15-28]
    1e24:	9c b7 9f    	mov.w     w12, [w15-30]
    1e26:	8c b7 9f    	mov.w     w12, [w15-32]
    1e28:	06 05 be    	mov.d     w6, w10
    1e2a:	04 04 be    	mov.d     w4, w8
    1e2c:	0d 04 20    	mov.w     #0x40, w13

00001e2e <.L9>:
    1e2e:	4f b3 97    	mov.w     [w15-24], w6
    1e30:	bf b2 97    	mov.w     [w15-26], w5
    1e32:	86 03 43    	add.w     w6, w6, w7
    1e34:	2f b2 97    	mov.w     [w15-28], w4
    1e36:	e0 0f 53    	sub.w     w6, #0x0, [w15]
    1e38:	04 00 3d    	bra       GE, 0x1e42 <.L6>
    1e3a:	3d 00 07    	rcall     0x1eb6 <.LPA0>
    1e3c:	0f 00 40    	add.w     w0, w15, w0
    1e3e:	b0 ff 07    	rcall     0x1da0 <___PplusBdi>
    1e40:	03 00 37    	bra       0x1e48 <.L7>

00001e42 <.L6>:
    1e42:	39 00 07    	rcall     0x1eb6 <.LPA0>
    1e44:	0f 00 40    	add.w     w0, w15, w0
    1e46:	c0 ff 07    	rcall     0x1dc8 <___PminusBdi>

00001e48 <.L7>:
    1e48:	cf b2 97    	mov.w     [w15-24], w5
    1e4a:	95 bf 9f    	mov.w     w5, [w15-14]
    1e4c:	e0 8f 52    	sub.w     w5, #0x0, [w15]
    1e4e:	09 00 35    	bra       LT, 0x1e62 <.L8>
    1e50:	2b 00 07    	rcall     0x1ea8 <.LPA3>
    1e52:	14 00 20    	mov.w     #0x1, w4
    1e54:	05 00 20    	mov.w     #0x0, w5
    1e56:	60 33 b8    	mul.uu    w6, #0x0, w6
    1e58:	00 00 72    	ior.w     w4, w0, w0
    1e5a:	81 80 72    	ior.w     w5, w1, w1
    1e5c:	02 01 73    	ior.w     w6, w2, w2
    1e5e:	83 81 73    	ior.w     w7, w3, w3
    1e60:	1c 00 07    	rcall     0x1e9a <L0>

00001e62 <.L8>:
    1e62:	0c 06 e8    	inc.w     w12, w12
    1e64:	8d 0f 56    	sub.w     w12, w13, [w15]
    1e66:	e3 ff 3a    	bra       NZ, 0x1e2e <.L9>
    1e68:	1f ba 97    	mov.w     [w15-14], w4
    1e6a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1e6c:	05 00 3d    	bra       GE, 0x1e78 <.L10>
    1e6e:	08 02 be    	mov.d     w8, w4
    1e70:	0a 03 be    	mov.d     w10, w6
    1e72:	00 fe 2f    	mov.w     #0xffe0, w0
    1e74:	0f 00 40    	add.w     w0, w15, w0
    1e76:	94 ff 07    	rcall     0x1da0 <___PplusBdi>

00001e78 <.L10>:
    1e78:	4f aa 97    	mov.w     [w15-40], w4
    1e7a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1e7c:	08 00 3a    	bra       NZ, 0x1e8e <.L11>
    1e7e:	0f b4 97    	mov.w     [w15-32], w8
    1e80:	9f b4 97    	mov.w     [w15-30], w9
    1e82:	2f b5 97    	mov.w     [w15-28], w10
    1e84:	bf b5 97    	mov.w     [w15-26], w11
    1e86:	d8 b7 9f    	mov.w     w8, [w15-22]
    1e88:	e9 b7 9f    	mov.w     w9, [w15-20]
    1e8a:	fa b7 9f    	mov.w     w10, [w15-18]
    1e8c:	8b bf 9f    	mov.w     w11, [w15-16]

00001e8e <.L11>:
    1e8e:	0c 00 07    	rcall     0x1ea8 <.LPA3>
    1e90:	4f 06 be    	mov.d     [--w15], w12
    1e92:	4f 05 be    	mov.d     [--w15], w10
    1e94:	4f 04 be    	mov.d     [--w15], w8
    1e96:	00 80 fa    	ulnk      
    1e98:	00 00 06    	return    

00001e9a <L0>:
    1e9a:	01 00 07    	rcall     0x1e9e <.LPA6>
    1e9c:	00 00 06    	return    

00001e9e <.LPA6>:
    1e9e:	90 b7 9f    	mov.w     w0, [w15-30]
    1ea0:	a1 b7 9f    	mov.w     w1, [w15-28]
    1ea2:	b2 b7 9f    	mov.w     w2, [w15-26]
    1ea4:	c3 b7 9f    	mov.w     w3, [w15-24]
    1ea6:	00 00 06    	return    

00001ea8 <.LPA3>:
    1ea8:	01 00 07    	rcall     0x1eac <.LPA5>
    1eaa:	00 00 06    	return    

00001eac <.LPA5>:
    1eac:	1f b0 97    	mov.w     [w15-30], w0
    1eae:	af b0 97    	mov.w     [w15-28], w1
    1eb0:	3f b1 97    	mov.w     [w15-26], w2
    1eb2:	cf b1 97    	mov.w     [w15-24], w3
    1eb4:	00 00 06    	return    

00001eb6 <.LPA0>:
    1eb6:	4f 2b de    	lsr.w     w5, #0xf, w6
    1eb8:	f9 ff 07    	rcall     0x1eac <.LPA5>
    1eba:	86 83 73    	ior.w     w7, w6, w7
    1ebc:	85 82 42    	add.w     w5, w5, w5
    1ebe:	4f 23 de    	lsr.w     w4, #0xf, w6
    1ec0:	a7 b7 9f    	mov.w     w7, [w15-28]
    1ec2:	86 82 72    	ior.w     w5, w6, w5
    1ec4:	04 02 42    	add.w     w4, w4, w4
    1ec6:	95 b7 9f    	mov.w     w5, [w15-30]
    1ec8:	ff aa 97    	mov.w     [w15-34], w5
    1eca:	4f 2b de    	lsr.w     w5, #0xf, w6
    1ecc:	85 82 42    	add.w     w5, w5, w5
    1ece:	06 02 72    	ior.w     w4, w6, w4
    1ed0:	84 b7 9f    	mov.w     w4, [w15-32]
    1ed2:	6f aa 97    	mov.w     [w15-36], w4
    1ed4:	4f 23 de    	lsr.w     w4, #0xf, w6
    1ed6:	04 02 42    	add.w     w4, w4, w4
    1ed8:	86 82 72    	ior.w     w5, w6, w5
    1eda:	f5 af 9f    	mov.w     w5, [w15-34]
    1edc:	4f 18 de    	lsr.w     w3, #0xf, w0
    1ede:	00 02 72    	ior.w     w4, w0, w4
    1ee0:	e5 ff 07    	rcall     0x1eac <.LPA5>
    1ee2:	e4 af 9f    	mov.w     w4, [w15-36]
    1ee4:	00 00 40    	add.w     w0, w0, w0
    1ee6:	81 80 48    	addc.w    w1, w1, w1
    1ee8:	02 01 49    	addc.w    w2, w2, w2
    1eea:	83 81 49    	addc.w    w3, w3, w3
    1eec:	08 02 be    	mov.d     w8, w4
    1eee:	0a 03 be    	mov.d     w10, w6
    1ef0:	d6 ff 07    	rcall     0x1e9e <.LPA6>
    1ef2:	00 fe 2f    	mov.w     #0xffe0, w0
    1ef4:	00 00 06    	return    

00001ef6 <___udivdi3>:
    1ef6:	88 1f 78    	mov.w     w8, [w15++]
    1ef8:	18 00 20    	mov.w     #0x1, w8
    1efa:	88 1f 78    	mov.w     w8, [w15++]
    1efc:	8a ff 07    	rcall     0x1e12 <___udivmoddi3>
    1efe:	8f 87 e9    	dec2.w    w15, w15
    1f00:	4f 04 78    	mov.w     [--w15], w8
    1f02:	00 00 06    	return    

00001f04 <___umoddi3>:
    1f04:	80 1f eb    	clr.w     [w15++]
    1f06:	85 ff 07    	rcall     0x1e12 <___udivmoddi3>
    1f08:	8f 87 e9    	dec2.w    w15, w15
    1f0a:	00 00 06    	return    

00001f0c <___divdi3>:
    1f0c:	88 9f be    	mov.d     w8, [w15++]
    1f0e:	8a 9f be    	mov.d     w10, [w15++]
    1f10:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1f12:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1f14:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1f16:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1f18:	0c 00 3d    	bra       GE, 0x1f32 <.L16>
    1f1a:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f1c:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f1e:	00 00 54    	sub.w     w8, w0, w0
    1f20:	81 80 5c    	subb.w    w9, w1, w1
    1f22:	02 01 5d    	subb.w    w10, w2, w2
    1f24:	83 81 5d    	subb.w    w11, w3, w3
    1f26:	18 00 20    	mov.w     #0x1, w8
    1f28:	15 00 07    	rcall     0x1f54 <L0>
    1f2a:	08 00 3d    	bra       GE, 0x1f3c <.L17>
    1f2c:	18 00 07    	rcall     0x1f5e <.LPA1>
    1f2e:	00 04 eb    	clr.w     w8
    1f30:	05 00 37    	bra       0x1f3c <.L17>

00001f32 <.L16>:
    1f32:	00 04 eb    	clr.w     w8
    1f34:	0f 00 07    	rcall     0x1f54 <L0>
    1f36:	02 00 3d    	bra       GE, 0x1f3c <.L17>
    1f38:	12 00 07    	rcall     0x1f5e <.LPA1>
    1f3a:	18 00 20    	mov.w     #0x1, w8

00001f3c <.L17>:
    1f3c:	dc ff 07    	rcall     0x1ef6 <___udivdi3>
    1f3e:	e0 0f 54    	sub.w     w8, #0x0, [w15]
    1f40:	06 00 32    	bra       Z, 0x1f4e <.L18>
    1f42:	60 22 b8    	mul.uu    w4, #0x0, w4
    1f44:	60 33 b8    	mul.uu    w6, #0x0, w6
    1f46:	00 00 52    	sub.w     w4, w0, w0
    1f48:	81 80 5a    	subb.w    w5, w1, w1
    1f4a:	02 01 5b    	subb.w    w6, w2, w2
    1f4c:	83 81 5b    	subb.w    w7, w3, w3

00001f4e <.L18>:
    1f4e:	4f 05 be    	mov.d     [--w15], w10
    1f50:	4f 04 be    	mov.d     [--w15], w8
    1f52:	00 00 06    	return    

00001f54 <L0>:
    1f54:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f56:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f58:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1f5a:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1f5c:	00 00 06    	return    

00001f5e <.LPA1>:
    1f5e:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f60:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f62:	04 02 54    	sub.w     w8, w4, w4
    1f64:	85 82 5c    	subb.w    w9, w5, w5
    1f66:	06 03 5d    	subb.w    w10, w6, w6
    1f68:	87 83 5d    	subb.w    w11, w7, w7
    1f6a:	00 00 06    	return    

00001f6c <___moddi3>:
    1f6c:	88 9f be    	mov.d     w8, [w15++]
    1f6e:	8a 9f be    	mov.d     w10, [w15++]
    1f70:	8c 1f 78    	mov.w     w12, [w15++]
    1f72:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1f74:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1f76:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1f78:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1f7a:	0d 00 3d    	bra       GE, 0x1f96 <.L22>
    1f7c:	60 44 b8    	mul.uu    w8, #0x0, w8
    1f7e:	60 55 b8    	mul.uu    w10, #0x0, w10
    1f80:	1c 00 20    	mov.w     #0x1, w12
    1f82:	00 00 54    	sub.w     w8, w0, w0
    1f84:	81 80 5c    	subb.w    w9, w1, w1
    1f86:	02 01 5d    	subb.w    w10, w2, w2
    1f88:	83 81 5d    	subb.w    w11, w3, w3
    1f8a:	08 20 e1    	cp.w      w4, w8
    1f8c:	09 a8 e1    	cpb.w     w5, w9
    1f8e:	0a b0 e1    	cpb.w     w6, w10
    1f90:	0b b8 e1    	cpb.w     w7, w11
    1f92:	0d 00 3d    	bra       GE, 0x1fae <.L23>
    1f94:	08 00 37    	bra       0x1fa6 <.L27>

00001f96 <.L22>:
    1f96:	00 06 eb    	clr.w     w12
    1f98:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1f9a:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1f9c:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1f9e:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1fa0:	06 00 3d    	bra       GE, 0x1fae <.L23>
    1fa2:	60 44 b8    	mul.uu    w8, #0x0, w8
    1fa4:	60 55 b8    	mul.uu    w10, #0x0, w10

00001fa6 <.L27>:
    1fa6:	04 02 54    	sub.w     w8, w4, w4
    1fa8:	85 82 5c    	subb.w    w9, w5, w5
    1faa:	06 03 5d    	subb.w    w10, w6, w6
    1fac:	87 83 5d    	subb.w    w11, w7, w7

00001fae <.L23>:
    1fae:	aa ff 07    	rcall     0x1f04 <___umoddi3>
    1fb0:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    1fb2:	06 00 32    	bra       Z, 0x1fc0 <.L24>
    1fb4:	60 22 b8    	mul.uu    w4, #0x0, w4
    1fb6:	60 33 b8    	mul.uu    w6, #0x0, w6
    1fb8:	00 00 52    	sub.w     w4, w0, w0
    1fba:	81 80 5a    	subb.w    w5, w1, w1
    1fbc:	02 01 5b    	subb.w    w6, w2, w2
    1fbe:	83 81 5b    	subb.w    w7, w3, w3

00001fc0 <.L24>:
    1fc0:	4f 06 78    	mov.w     [--w15], w12
    1fc2:	4f 05 be    	mov.d     [--w15], w10
    1fc4:	4f 04 be    	mov.d     [--w15], w8
    1fc6:	00 00 06    	return    

00001fc8 <___muldi3>:
    1fc8:	88 9f be    	mov.d     w8, [w15++]
    1fca:	8a 9f be    	mov.d     w10, [w15++]
    1fcc:	8c 1f 78    	mov.w     w12, [w15++]
    1fce:	00 06 eb    	clr.w     w12
    1fd0:	e0 0f 50    	sub.w     w0, #0x0, [w15]
    1fd2:	e0 8f 58    	subb.w    w1, #0x0, [w15]
    1fd4:	e0 0f 59    	subb.w    w2, #0x0, [w15]
    1fd6:	e0 8f 59    	subb.w    w3, #0x0, [w15]
    1fd8:	07 00 3d    	bra       GE, 0x1fe8 <.L2>
    1fda:	60 44 b8    	mul.uu    w8, #0x0, w8
    1fdc:	60 55 b8    	mul.uu    w10, #0x0, w10
    1fde:	1c 00 20    	mov.w     #0x1, w12
    1fe0:	00 00 54    	sub.w     w8, w0, w0
    1fe2:	81 80 5c    	subb.w    w9, w1, w1
    1fe4:	02 01 5d    	subb.w    w10, w2, w2
    1fe6:	83 81 5d    	subb.w    w11, w3, w3

00001fe8 <.L2>:
    1fe8:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    1fea:	e0 8f 5a    	subb.w    w5, #0x0, [w15]
    1fec:	e0 0f 5b    	subb.w    w6, #0x0, [w15]
    1fee:	e0 8f 5b    	subb.w    w7, #0x0, [w15]
    1ff0:	07 00 3d    	bra       GE, 0x2000
    1ff2:	60 44 b8    	mul.uu    w8, #0x0, w8
    1ff4:	60 55 b8    	mul.uu    w10, #0x0, w10
    1ff6:	0c 00 a2    	btg.w     w12, #0x0
    1ff8:	04 02 54    	sub.w     w8, w4, w4
    1ffa:	85 82 5c    	subb.w    w9, w5, w5
    1ffc:	06 03 5d    	subb.w    w10, w6, w6
    1ffe:	87 83 5d    	subb.w    w11, w7, w7

00002000 <.L3>:
    2000:	0c 00 07    	rcall     0x201a <___umuldi3>
    2002:	e0 0f 56    	sub.w     w12, #0x0, [w15]
    2004:	06 00 32    	bra       Z, 0x2012 <.L4>
    2006:	60 22 b8    	mul.uu    w4, #0x0, w4
    2008:	60 33 b8    	mul.uu    w6, #0x0, w6
    200a:	00 00 52    	sub.w     w4, w0, w0
    200c:	81 80 5a    	subb.w    w5, w1, w1
    200e:	02 01 5b    	subb.w    w6, w2, w2
    2010:	83 81 5b    	subb.w    w7, w3, w3

00002012 <.L4>:
    2012:	4f 06 78    	mov.w     [--w15], w12
    2014:	4f 05 be    	mov.d     [--w15], w10
    2016:	4f 04 be    	mov.d     [--w15], w8
    2018:	00 00 06    	return    

0000201a <___umuldi3>:
    201a:	88 9f be    	mov.d     w8, [w15++]
    201c:	8a 9f be    	mov.d     w10, [w15++]
    201e:	8c 9f be    	mov.d     w12, [w15++]
    2020:	04 04 b8    	mul.uu    w0, w4, w8
    2022:	05 06 b8    	mul.uu    w0, w5, w12
    2024:	89 04 46    	add.w     w12, w9, w9
    2026:	60 85 4e    	addc.w    w13, #0x0, w10
    2028:	06 06 b8    	mul.uu    w0, w6, w12
    202a:	0a 05 46    	add.w     w12, w10, w10
    202c:	e0 85 4e    	addc.w    w13, #0x0, w11
    202e:	07 06 b8    	mul.uu    w0, w7, w12
    2030:	8b 05 46    	add.w     w12, w11, w11
    2032:	04 0e b8    	mul.uu    w1, w4, w12
    2034:	89 04 46    	add.w     w12, w9, w9
    2036:	0a 85 4e    	addc.w    w13, w10, w10
    2038:	e0 85 4d    	addc.w    w11, #0x0, w11
    203a:	05 0e b8    	mul.uu    w1, w5, w12
    203c:	0a 05 46    	add.w     w12, w10, w10
    203e:	8b 85 4e    	addc.w    w13, w11, w11
    2040:	06 0e b8    	mul.uu    w1, w6, w12
    2042:	8b 05 46    	add.w     w12, w11, w11
    2044:	04 16 b8    	mul.uu    w2, w4, w12
    2046:	0a 05 46    	add.w     w12, w10, w10
    2048:	8b 85 4e    	addc.w    w13, w11, w11
    204a:	05 16 b8    	mul.uu    w2, w5, w12
    204c:	8b 05 46    	add.w     w12, w11, w11
    204e:	04 1e b8    	mul.uu    w3, w4, w12
    2050:	8b 05 46    	add.w     w12, w11, w11
    2052:	08 00 be    	mov.d     w8, w0
    2054:	0a 01 be    	mov.d     w10, w2
    2056:	4f 06 be    	mov.d     [--w15], w12
    2058:	4f 05 be    	mov.d     [--w15], w10
    205a:	4f 04 be    	mov.d     [--w15], w8
    205c:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__resetPRI>
    1002:	00 00 00 
    1004:	8e 4b 04    	goto      0x4b8e <L0>
    1006:	00 00 00 
    1008:	8e 4b 04    	goto      0x4b8e <L0>
    100a:	00 00 00 
    100c:	8e 4b 04    	goto      0x4b8e <L0>
    100e:	00 00 00 
    1010:	8e 4b 04    	goto      0x4b8e <L0>
    1012:	00 00 00 
    1014:	8e 4b 04    	goto      0x4b8e <L0>
    1016:	00 00 00 
    1018:	8e 4b 04    	goto      0x4b8e <L0>
    101a:	00 00 00 
    101c:	8e 4b 04    	goto      0x4b8e <L0>
    101e:	00 00 00 
    1020:	8e 4b 04    	goto      0x4b8e <L0>
    1022:	00 00 00 
    1024:	de 38 04    	goto      0x38de <__T1Interrupt>
    1026:	00 00 00 
    1028:	8e 4b 04    	goto      0x4b8e <L0>
    102a:	00 00 00 
    102c:	8e 4b 04    	goto      0x4b8e <L0>
    102e:	00 00 00 
    1030:	04 39 04    	goto      0x3904 <__T2Interrupt>
    1032:	00 00 00 
    1034:	2a 39 04    	goto      0x392a <__T3Interrupt>
    1036:	00 00 00 
    1038:	8e 4b 04    	goto      0x4b8e <L0>
    103a:	00 00 00 
    103c:	8e 4b 04    	goto      0x4b8e <L0>
    103e:	00 00 00 
    1040:	14 23 04    	goto      0x2314 <__U1RXInterrupt>
    1042:	00 00 00 
    1044:	ee 22 04    	goto      0x22ee <__U1TXInterrupt>
    1046:	00 00 00 
    1048:	8e 4b 04    	goto      0x4b8e <L0>
    104a:	00 00 00 
    104c:	8e 4b 04    	goto      0x4b8e <L0>
    104e:	00 00 00 
    1050:	8e 4b 04    	goto      0x4b8e <L0>
    1052:	00 00 00 
    1054:	8e 4b 04    	goto      0x4b8e <L0>
    1056:	00 00 00 
    1058:	8e 4b 04    	goto      0x4b8e <L0>
    105a:	00 00 00 
    105c:	8e 4b 04    	goto      0x4b8e <L0>
    105e:	00 00 00 
    1060:	8e 4b 04    	goto      0x4b8e <L0>
    1062:	00 00 00 
    1064:	8e 4b 04    	goto      0x4b8e <L0>
    1066:	00 00 00 
    1068:	8e 4b 04    	goto      0x4b8e <L0>
    106a:	00 00 00 
    106c:	8e 4b 04    	goto      0x4b8e <L0>
    106e:	00 00 00 
    1070:	50 39 04    	goto      0x3950 <__T4Interrupt>
    1072:	00 00 00 
    1074:	76 39 04    	goto      0x3976 <__T5Interrupt>
    1076:	00 00 00 
    1078:	8e 4b 04    	goto      0x4b8e <L0>
    107a:	00 00 00 
    107c:	60 23 04    	goto      0x2360 <__U2RXInterrupt>
    107e:	00 00 00 
    1080:	3a 23 04    	goto      0x233a <__U2TXInterrupt>
    1082:	00 00 00 
    1084:	8e 4b 04    	goto      0x4b8e <L0>
    1086:	00 00 00 
    1088:	8e 4b 04    	goto      0x4b8e <L0>
    108a:	00 00 00 
    108c:	8e 4b 04    	goto      0x4b8e <L0>
    108e:	00 00 00 
    1090:	8e 4b 04    	goto      0x4b8e <L0>
    1092:	00 00 00 
    1094:	8e 4b 04    	goto      0x4b8e <L0>
    1096:	00 00 00 
    1098:	8e 4b 04    	goto      0x4b8e <L0>
    109a:	00 00 00 
    109c:	8e 4b 04    	goto      0x4b8e <L0>
    109e:	00 00 00 
    10a0:	8e 4b 04    	goto      0x4b8e <L0>
    10a2:	00 00 00 
    10a4:	8e 4b 04    	goto      0x4b8e <L0>
    10a6:	00 00 00 
    10a8:	8e 4b 04    	goto      0x4b8e <L0>
    10aa:	00 00 00 
    10ac:	8e 4b 04    	goto      0x4b8e <L0>
    10ae:	00 00 00 
    10b0:	8e 4b 04    	goto      0x4b8e <L0>
    10b2:	00 00 00 
    10b4:	8e 4b 04    	goto      0x4b8e <L0>
    10b6:	00 00 00 
    10b8:	8e 4b 04    	goto      0x4b8e <L0>
    10ba:	00 00 00 
    10bc:	8e 4b 04    	goto      0x4b8e <L0>
    10be:	00 00 00 
    10c0:	8e 4b 04    	goto      0x4b8e <L0>
    10c2:	00 00 00 
    10c4:	8e 4b 04    	goto      0x4b8e <L0>
    10c6:	00 00 00 
    10c8:	8e 4b 04    	goto      0x4b8e <L0>
    10ca:	00 00 00 
    10cc:	8e 4b 04    	goto      0x4b8e <L0>
    10ce:	00 00 00 
    10d0:	8e 4b 04    	goto      0x4b8e <L0>
    10d2:	00 00 00 
    10d4:	8e 4b 04    	goto      0x4b8e <L0>
    10d6:	00 00 00 
    10d8:	8e 4b 04    	goto      0x4b8e <L0>
    10da:	00 00 00 
    10dc:	ac 23 04    	goto      0x23ac <__U3RXInterrupt>
    10de:	00 00 00 
    10e0:	86 23 04    	goto      0x2386 <__U3TXInterrupt>
    10e2:	00 00 00 
    10e4:	8e 4b 04    	goto      0x4b8e <L0>
    10e6:	00 00 00 
    10e8:	8e 4b 04    	goto      0x4b8e <L0>
    10ea:	00 00 00 
    10ec:	8e 4b 04    	goto      0x4b8e <L0>
    10ee:	00 00 00 
    10f0:	8e 4b 04    	goto      0x4b8e <L0>
    10f2:	00 00 00 
    10f4:	f8 23 04    	goto      0x23f8 <__U4RXInterrupt>
    10f6:	00 00 00 
    10f8:	d2 23 04    	goto      0x23d2 <__U4TXInterrupt>
    10fa:	00 00 00 
    10fc:	8e 4b 04    	goto      0x4b8e <L0>
    10fe:	00 00 00 
    1100:	8e 4b 04    	goto      0x4b8e <L0>
    1102:	00 00 00 
    1104:	8e 4b 04    	goto      0x4b8e <L0>
    1106:	00 00 00 
    1108:	8e 4b 04    	goto      0x4b8e <L0>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	8e 4b 04    	goto      0x4b8e <L0>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

0000a05e <_Device>:
    a05e:	12 01       	.word 0x112
    a060:	00 02       	.word 0x200
    a062:	00 00       	.word 0
    a064:	00 40       	.word 0x4000
    a066:	66 66       	.word 0x6666
    a068:	03 00       	.word 0x3
    a06a:	00 00       	.word 0
    a06c:	01 02       	.word 0x201
    a06e:	00 01       	.word 0x100

0000a070 <_Configuration1>:
    a070:	09 02       	.word 0x209
    a072:	12 00       	.word 0x12
    a074:	01 01       	.word 0x101
    a076:	00 a0       	.word 0xa000
    a078:	32 09       	.word 0x932
    a07a:	04 00       	.word 0x4
    a07c:	00 00       	.word 0
    a07e:	ff 00       	.word 0xff
    a080:	ff 00       	.word 0xff

0000a082 <_String0>:
    a082:	04 03       	.word 0x304
    a084:	09 04       	.word 0x409

0000a086 <_String1>:
    a086:	1a 03       	.word 0x31a
    a088:	4f 00       	.word 0x4f
    a08a:	6c 00       	.word 0x6c
    a08c:	69 00       	.word 0x69
    a08e:	6e 00       	.word 0x6e
    a090:	20 00       	.word 0x20
    a092:	43 00       	.word 0x43
    a094:	6f 00       	.word 0x6f
    a096:	6c 00       	.word 0x6c
    a098:	6c 00       	.word 0x6c
    a09a:	65 00       	.word 0x65
    a09c:	67 00       	.word 0x67
    a09e:	65 00       	.word 0x65

0000a0a0 <_String2>:
    a0a0:	44 03       	.word 0x344
    a0a2:	45 00       	.word 0x45
    a0a4:	6c 00       	.word 0x6c
    a0a6:	65 00       	.word 0x65
    a0a8:	63 00       	.word 0x63
    a0aa:	61 00       	.word 0x61
    a0ac:	6e 00       	.word 0x6e
    a0ae:	69 00       	.word 0x69
    a0b0:	73 00       	.word 0x73
    a0b2:	6d 00       	.word 0x6d
    a0b4:	73 00       	.word 0x73
    a0b6:	20 00       	.word 0x20
    a0b8:	4d 00       	.word 0x4d
    a0ba:	69 00       	.word 0x69
    a0bc:	6e 00       	.word 0x6e
    a0be:	69 00       	.word 0x69
    a0c0:	70 00       	.word 0x70
    a0c2:	72 00       	.word 0x72
    a0c4:	6f 00       	.word 0x6f
    a0c6:	6a 00       	.word 0x6a
    a0c8:	65 00       	.word 0x65
    a0ca:	63 00       	.word 0x63
    a0cc:	74 00       	.word 0x74
    a0ce:	20 00       	.word 0x20
    a0d0:	32 00       	.word 0x32
    a0d2:	20 00       	.word 0x20
    a0d4:	46 00       	.word 0x46
    a0d6:	69 00       	.word 0x69
    a0d8:	72 00       	.word 0x72
    a0da:	6d 00       	.word 0x6d
    a0dc:	77 00       	.word 0x77
    a0de:	61 00       	.word 0x61
    a0e0:	72 00       	.word 0x72
    a0e2:	65 00       	.word 0x65

0000a0e4 <.LC0>:
    a0e4:	48 65       	.word 0x6548
    a0e6:	6c 6c       	.word 0x6c6c
    a0e8:	6f 20       	.word 0x206f
    a0ea:	57 6f       	.word 0x6f57
    a0ec:	72 6c       	.word 0x6c72
    a0ee:	64 21       	.word 0x2164
    a0f0:	00 76       	.word 0x7600

0000a0f1 <.LC1>:
    a0f1:	00 00       	.word 0
    a0f3:	00 00       	.word 0
    a0f5:	00 00       	.word 0
    a0f7:	00 00       	.word 0
    a0f9:	00 00       	.word 0
    a0fb:	00 00       	.word 0
    a0fd:	00 00       	.word 0
    a0ff:	00 00       	.word 0
    a101:	00 00       	.word 0
    a103:	00 00       	.word 0
    a105:	00 00       	.word 0
	...
Disassembly of section .text:

00002108 <___putc_nobuffer>:
_UART uart1, uart2, uart3, uart4;
_UART *_stdout, *_stderr;
_PIN AJTX, AJRX;

void __putc_nobuffer(_UART *self, uint8_t ch) {
    2108:	04 00 fa    	lnk       #0x4
    210a:	00 0f 78    	mov.w     w0, [w14]
    210c:	21 47 98    	mov.b     w1, [w14+2]

0000210e <.LSM1>:
    while (bitread(self->UxSTA, 9)==1) {}   // Wait until TX buffer is not full
    210e:	00 00 00    	nop       

00002110 <.L2>:
    2110:	1e 02 78    	mov.w     [w14], w4
    2112:	14 02 90    	mov.w     [w4+2], w4
    2114:	94 02 78    	mov.w     [w4], w5
    2116:	04 20 20    	mov.w     #0x200, w4
    2118:	04 82 62    	and.w     w5, w4, w4
    211a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    211c:	f9 ff 3a    	bra       NZ, 0x2110 <.L2>

0000211e <.LSM2>:
    *(self->UxTXREG) = (uint16_t)ch;
    211e:	1e 02 78    	mov.w     [w14], w4
    2120:	24 02 90    	mov.w     [w4+4], w4
    2122:	ae 42 90    	mov.b     [w14+2], w5
    2124:	85 82 fb    	ze        w5, w5
    2126:	05 0a 78    	mov.w     w5, [w4]

00002128 <.LSM3>:
}
    2128:	00 80 fa    	ulnk      
    212a:	00 00 06    	return    

0000212c <___getc_nobuffer>:

uint8_t __getc_nobuffer(_UART *self) {
    212c:	02 00 fa    	lnk       #0x2
    212e:	00 0f 78    	mov.w     w0, [w14]

00002130 <.LSM5>:
    while (bitread(self->UxSTA, 0)==0) {} // Wait until RX buffer is not empty
    2130:	00 00 00    	nop       

00002132 <.L4>:
    2132:	1e 02 78    	mov.w     [w14], w4
    2134:	14 02 90    	mov.w     [w4+2], w4
    2136:	14 02 78    	mov.w     [w4], w4
    2138:	61 02 62    	and.w     w4, #0x1, w4
    213a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    213c:	fa ff 32    	bra       Z, 0x2132 <.L4>

0000213e <.LSM6>:
    return (uint8_t)(*(self->UxRXREG));
    213e:	1e 02 78    	mov.w     [w14], w4
    2140:	34 02 90    	mov.w     [w4+6], w4
    2142:	14 02 78    	mov.w     [w4], w4
    2144:	04 42 78    	mov.b     w4, w4

00002146 <.LSM7>:
}
    2146:	04 40 78    	mov.b     w4, w0
    2148:	00 80 fa    	ulnk      
    214a:	00 00 06    	return    

0000214c <___putc_buffer>:

void __putc_buffer(_UART *self, uint8_t ch) {
    214c:	04 00 fa    	lnk       #0x4
    214e:	00 0f 78    	mov.w     w0, [w14]
    2150:	21 47 98    	mov.b     w1, [w14+2]

00002152 <.LSM9>:
    while (self->TXbuffer.count==self->TXbuffer.length) {}  // Wait until TX 
    2152:	00 00 00    	nop       

00002154 <.L6>:
    2154:	1e 02 78    	mov.w     [w14], w4
    2156:	d4 12 90    	mov.w     [w4+42], w5
    2158:	1e 02 78    	mov.w     [w14], w4
    215a:	24 12 90    	mov.w     [w4+36], w4
    215c:	84 8f 52    	sub.w     w5, w4, [w15]
    215e:	fa ff 32    	bra       Z, 0x2154 <.L6>

00002160 <.LSM10>:
                                                            // buffer is not 
                                                            // full
    self->TXbuffer.data[self->TXbuffer.tail] = ch;
    2160:	1e 02 78    	mov.w     [w14], w4
    2162:	94 12 90    	mov.w     [w4+34], w5
    2164:	1e 02 78    	mov.w     [w14], w4
    2166:	44 12 90    	mov.w     [w4+40], w4
    2168:	04 82 42    	add.w     w5, w4, w4
    216a:	2e 40 90    	mov.b     [w14+2], w0
    216c:	00 4a 78    	mov.b     w0, [w4]

0000216e <.LSM11>:
    self->TXbuffer.tail = (self->TXbuffer.tail+1)%(self->TXbuffer.length);
    216e:	1e 02 78    	mov.w     [w14], w4
    2170:	44 12 90    	mov.w     [w4+40], w4
    2172:	84 02 e8    	inc.w     w4, w5
    2174:	1e 02 78    	mov.w     [w14], w4
    2176:	24 12 90    	mov.w     [w4+36], w4
    2178:	11 00 09    	repeat    #0x11
    217a:	84 82 d8    	div.uw    w5, w4
    217c:	01 02 78    	mov.w     w1, w4
    217e:	84 02 78    	mov.w     w4, w5
    2180:	1e 02 78    	mov.w     [w14], w4
    2182:	45 12 98    	mov.w     w5, [w4+40]

00002184 <.LSM12>:
    self->TXbuffer.count++;
    2184:	1e 02 78    	mov.w     [w14], w4
    2186:	54 12 90    	mov.w     [w4+42], w4
    2188:	84 02 e8    	inc.w     w4, w5
    218a:	1e 02 78    	mov.w     [w14], w4
    218c:	55 12 98    	mov.w     w5, [w4+42]

0000218e <.LSM13>:
    if (self->TXbuffer.count>=self->TXthreshold)    // If TX buffer is full 
    218e:	1e 02 78    	mov.w     [w14], w4
    2190:	d4 12 90    	mov.w     [w4+42], w5
    2192:	1e 02 78    	mov.w     [w14], w4
    2194:	34 1a 90    	mov.w     [w4+54], w4
    2196:	84 8f 52    	sub.w     w5, w4, [w15]
    2198:	08 00 39    	bra       NC, 0x21aa <.L5>

0000219a <.LSM14>:
        bitset(self->UxSTA, 10);                    // enough, enable data
    219a:	1e 02 78    	mov.w     [w14], w4
    219c:	14 02 90    	mov.w     [w4+2], w4
    219e:	9e 02 78    	mov.w     [w14], w5
    21a0:	95 02 90    	mov.w     [w5+2], w5
    21a2:	15 03 78    	mov.w     [w5], w6
    21a4:	05 40 20    	mov.w     #0x400, w5
    21a6:	86 82 72    	ior.w     w5, w6, w5
    21a8:	05 0a 78    	mov.w     w5, [w4]

000021aa <.L5>:
                                                    // transmission
}
    21aa:	00 80 fa    	ulnk      
    21ac:	00 00 06    	return    

000021ae <___serviceTxInterrupt>:

void __serviceTxInterrupt(_UART *self) {
    21ae:	04 00 fa    	lnk       #0x4
    21b0:	10 07 98    	mov.w     w0, [w14+2]

000021b2 <.LSM17>:
    uint8_t ch;

    bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    21b2:	1e 02 90    	mov.w     [w14+2], w4
    21b4:	54 02 90    	mov.w     [w4+10], w4
    21b6:	9e 02 90    	mov.w     [w14+2], w5
    21b8:	d5 02 90    	mov.w     [w5+10], w5
    21ba:	15 03 78    	mov.w     [w5], w6
    21bc:	9e 02 90    	mov.w     [w14+2], w5
    21be:	e5 4a 90    	mov.b     [w5+14], w5
    21c0:	85 82 fb    	ze        w5, w5
    21c2:	17 00 20    	mov.w     #0x1, w7
    21c4:	85 3a dd    	sl.w      w7, w5, w5
    21c6:	85 82 ea    	com.w     w5, w5
    21c8:	85 02 63    	and.w     w6, w5, w5
    21ca:	05 0a 78    	mov.w     w5, [w4]

000021cc <.LSM18>:
    if (self->TXbuffer.count==0)        // If nothing left in TX buffer, 
    21cc:	1e 02 90    	mov.w     [w14+2], w4
    21ce:	54 12 90    	mov.w     [w4+42], w4
    21d0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    21d2:	25 00 3a    	bra       NZ, 0x221e <.L13>

000021d4 <.LSM19>:
        bitclear(self->UxSTA, 10);      // disable data transmission
    21d4:	1e 02 90    	mov.w     [w14+2], w4
    21d6:	14 02 90    	mov.w     [w4+2], w4
    21d8:	9e 02 90    	mov.w     [w14+2], w5
    21da:	95 02 90    	mov.w     [w5+2], w5
    21dc:	15 03 78    	mov.w     [w5], w6
    21de:	f5 bf 2f    	mov.w     #0xfbff, w5
    21e0:	85 02 63    	and.w     w6, w5, w5
    21e2:	05 0a 78    	mov.w     w5, [w4]

000021e4 <.LSM20>:
    while ((bitread(self->UxSTA, 9)==0) && (self->TXbuffer.count!=0)) {
    21e4:	1d 00 37    	bra       0x2220 <.L10>

000021e6 <.L12>:
        ch = self->TXbuffer.data[self->TXbuffer.head];
    21e6:	1e 02 90    	mov.w     [w14+2], w4
    21e8:	94 12 90    	mov.w     [w4+34], w5
    21ea:	1e 02 90    	mov.w     [w14+2], w4
    21ec:	34 12 90    	mov.w     [w4+38], w4
    21ee:	04 82 42    	add.w     w5, w4, w4
    21f0:	14 4f 78    	mov.b     [w4], [w14]

000021f2 <.LSM22>:
        self->TXbuffer.head = (self->TXbuffer.head+1)%(self->TXbuffer.length);
    21f2:	1e 02 90    	mov.w     [w14+2], w4
    21f4:	34 12 90    	mov.w     [w4+38], w4
    21f6:	84 02 e8    	inc.w     w4, w5
    21f8:	1e 02 90    	mov.w     [w14+2], w4
    21fa:	24 12 90    	mov.w     [w4+36], w4
    21fc:	11 00 09    	repeat    #0x11
    21fe:	84 82 d8    	div.uw    w5, w4
    2200:	01 02 78    	mov.w     w1, w4
    2202:	84 02 78    	mov.w     w4, w5
    2204:	1e 02 90    	mov.w     [w14+2], w4
    2206:	35 12 98    	mov.w     w5, [w4+38]

00002208 <.LSM23>:
        self->TXbuffer.count--;
    2208:	1e 02 90    	mov.w     [w14+2], w4
    220a:	54 12 90    	mov.w     [w4+42], w4
    220c:	84 02 e9    	dec.w     w4, w5
    220e:	1e 02 90    	mov.w     [w14+2], w4
    2210:	55 12 98    	mov.w     w5, [w4+42]

00002212 <.LSM24>:
        *(self->UxTXREG) = (uint16_t)ch;
    2212:	1e 02 90    	mov.w     [w14+2], w4
    2214:	24 02 90    	mov.w     [w4+4], w4
    2216:	1e 43 78    	mov.b     [w14], w6
    2218:	86 82 fb    	ze        w6, w5
    221a:	05 0a 78    	mov.w     w5, [w4]
    221c:	01 00 37    	bra       0x2220 <.L10>

0000221e <.L13>:
    221e:	00 00 00    	nop       

00002220 <.L10>:
    2220:	1e 02 90    	mov.w     [w14+2], w4
    2222:	14 02 90    	mov.w     [w4+2], w4
    2224:	94 02 78    	mov.w     [w4], w5
    2226:	04 20 20    	mov.w     #0x200, w4
    2228:	04 82 62    	and.w     w5, w4, w4
    222a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    222c:	04 00 3a    	bra       NZ, 0x2236 <.L8>
    222e:	1e 02 90    	mov.w     [w14+2], w4
    2230:	54 12 90    	mov.w     [w4+42], w4
    2232:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2234:	d8 ff 3a    	bra       NZ, 0x21e6 <.L12>

00002236 <.L8>:
    }
}
    2236:	00 80 fa    	ulnk      
    2238:	00 00 06    	return    

0000223a <___getc_buffer>:

uint8_t __getc_buffer(_UART *self) {
    223a:	04 00 fa    	lnk       #0x4
    223c:	10 07 98    	mov.w     w0, [w14+2]

0000223e <.LSM28>:
    uint8_t ch;

    while (self->RXbuffer.count==0) {}  // Wait until RX buffer is not empty
    223e:	00 00 00    	nop       

00002240 <.L15>:
    2240:	1e 02 90    	mov.w     [w14+2], w4
    2242:	24 1a 90    	mov.w     [w4+52], w4
    2244:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2246:	fc ff 32    	bra       Z, 0x2240 <.L15>

00002248 <.LSM29>:
    ch = self->RXbuffer.data[self->RXbuffer.head];
    2248:	1e 02 90    	mov.w     [w14+2], w4
    224a:	e4 12 90    	mov.w     [w4+44], w5
    224c:	1e 02 90    	mov.w     [w14+2], w4
    224e:	04 1a 90    	mov.w     [w4+48], w4
    2250:	04 82 42    	add.w     w5, w4, w4
    2252:	14 4f 78    	mov.b     [w4], [w14]

00002254 <.LSM30>:
    self->RXbuffer.head = (self->RXbuffer.head+1)%(self->RXbuffer.length);
    2254:	1e 02 90    	mov.w     [w14+2], w4
    2256:	04 1a 90    	mov.w     [w4+48], w4
    2258:	84 02 e8    	inc.w     w4, w5
    225a:	1e 02 90    	mov.w     [w14+2], w4
    225c:	74 12 90    	mov.w     [w4+46], w4
    225e:	11 00 09    	repeat    #0x11
    2260:	84 82 d8    	div.uw    w5, w4
    2262:	01 02 78    	mov.w     w1, w4
    2264:	84 02 78    	mov.w     w4, w5
    2266:	1e 02 90    	mov.w     [w14+2], w4
    2268:	05 1a 98    	mov.w     w5, [w4+48]

0000226a <.LSM31>:
    self->RXbuffer.count--;
    226a:	1e 02 90    	mov.w     [w14+2], w4
    226c:	24 1a 90    	mov.w     [w4+52], w4
    226e:	84 02 e9    	dec.w     w4, w5
    2270:	1e 02 90    	mov.w     [w14+2], w4
    2272:	25 1a 98    	mov.w     w5, [w4+52]

00002274 <.LSM32>:
    return ch;
    2274:	1e 42 78    	mov.b     [w14], w4

00002276 <.LSM33>:
}
    2276:	04 40 78    	mov.b     w4, w0
    2278:	00 80 fa    	ulnk      
    227a:	00 00 06    	return    

0000227c <___serviceRxInterrupt>:

void __serviceRxInterrupt(_UART *self) {
    227c:	02 00 fa    	lnk       #0x2
    227e:	00 0f 78    	mov.w     w0, [w14]

00002280 <.LSM35>:
    bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2280:	1e 02 78    	mov.w     [w14], w4
    2282:	54 02 90    	mov.w     [w4+10], w4
    2284:	9e 02 78    	mov.w     [w14], w5
    2286:	d5 02 90    	mov.w     [w5+10], w5
    2288:	15 03 78    	mov.w     [w5], w6
    228a:	9e 02 78    	mov.w     [w14], w5
    228c:	f5 4a 90    	mov.b     [w5+15], w5
    228e:	85 82 fb    	ze        w5, w5
    2290:	17 00 20    	mov.w     #0x1, w7
    2292:	85 3a dd    	sl.w      w7, w5, w5
    2294:	85 82 ea    	com.w     w5, w5
    2296:	85 02 63    	and.w     w6, w5, w5
    2298:	05 0a 78    	mov.w     w5, [w4]

0000229a <.LSM36>:
    while ((bitread(self->UxSTA, 0)==1) && 
    229a:	1a 00 37    	bra       0x22d0 <.L17>

0000229c <.L19>:
           (self->RXbuffer.count!=self->RXbuffer.length)) {
        self->RXbuffer.data[self->RXbuffer.tail] = (uint8_t)(*(self->UxRXREG));
    229c:	1e 02 78    	mov.w     [w14], w4
    229e:	e4 12 90    	mov.w     [w4+44], w5
    22a0:	1e 02 78    	mov.w     [w14], w4
    22a2:	14 1a 90    	mov.w     [w4+50], w4
    22a4:	04 82 42    	add.w     w5, w4, w4
    22a6:	9e 02 78    	mov.w     [w14], w5
    22a8:	b5 02 90    	mov.w     [w5+6], w5
    22aa:	95 02 78    	mov.w     [w5], w5
    22ac:	85 42 78    	mov.b     w5, w5
    22ae:	05 4a 78    	mov.b     w5, [w4]

000022b0 <.LSM38>:
        self->RXbuffer.tail = (self->RXbuffer.tail+1)%(self->RXbuffer.length);
    22b0:	1e 02 78    	mov.w     [w14], w4
    22b2:	14 1a 90    	mov.w     [w4+50], w4
    22b4:	84 02 e8    	inc.w     w4, w5
    22b6:	1e 02 78    	mov.w     [w14], w4
    22b8:	74 12 90    	mov.w     [w4+46], w4
    22ba:	11 00 09    	repeat    #0x11
    22bc:	84 82 d8    	div.uw    w5, w4
    22be:	01 02 78    	mov.w     w1, w4
    22c0:	84 02 78    	mov.w     w4, w5
    22c2:	1e 02 78    	mov.w     [w14], w4
    22c4:	15 1a 98    	mov.w     w5, [w4+50]

000022c6 <.LSM39>:
        self->RXbuffer.count++;
    22c6:	1e 02 78    	mov.w     [w14], w4
    22c8:	24 1a 90    	mov.w     [w4+52], w4
    22ca:	84 02 e8    	inc.w     w4, w5
    22cc:	1e 02 78    	mov.w     [w14], w4
    22ce:	25 1a 98    	mov.w     w5, [w4+52]

000022d0 <.L17>:
    22d0:	1e 02 78    	mov.w     [w14], w4
    22d2:	14 02 90    	mov.w     [w4+2], w4
    22d4:	14 02 78    	mov.w     [w4], w4
    22d6:	61 02 62    	and.w     w4, #0x1, w4
    22d8:	04 42 78    	mov.b     w4, w4
    22da:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    22dc:	06 00 32    	bra       Z, 0x22ea <.L16>

000022de <.LSM41>:
    22de:	1e 02 78    	mov.w     [w14], w4
    22e0:	a4 1a 90    	mov.w     [w4+52], w5
    22e2:	1e 02 78    	mov.w     [w14], w4
    22e4:	74 12 90    	mov.w     [w4+46], w4

000022e6 <.LSM42>:
    22e6:	84 8f 52    	sub.w     w5, w4, [w15]
    22e8:	d9 ff 3a    	bra       NZ, 0x229c <.L19>

000022ea <.L16>:
    }
}
    22ea:	00 80 fa    	ulnk      
    22ec:	00 00 06    	return    

000022ee <__U1TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1TXInterrupt(void) {
    22ee:	36 00 f8    	push      0x36
    22f0:	80 9f be    	mov.d     w0, [w15++]
    22f2:	82 9f be    	mov.d     w2, [w15++]
    22f4:	84 9f be    	mov.d     w4, [w15++]
    22f6:	86 9f be    	mov.d     w6, [w15++]
    22f8:	32 00 f8    	push      0x32
    22fa:	00 20 20    	mov.w     #0x200, w0
    22fc:	90 01 88    	mov.w     w0, 0x32
    22fe:	00 00 fa    	lnk       #0x0

00002300 <.LSM45>:
    __serviceTxInterrupt(&uart1);
    2300:	80 9b 20    	mov.w     #0x9b8, w0
    2302:	55 ff 07    	rcall     0x21ae <___serviceTxInterrupt>

00002304 <.LSM46>:
}
    2304:	00 80 fa    	ulnk      
    2306:	32 00 f9    	pop       0x32
    2308:	4f 03 be    	mov.d     [--w15], w6
    230a:	4f 02 be    	mov.d     [--w15], w4
    230c:	4f 01 be    	mov.d     [--w15], w2
    230e:	4f 00 be    	mov.d     [--w15], w0
    2310:	36 00 f9    	pop       0x36
    2312:	00 40 06    	retfie    

00002314 <__U1RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U1RXInterrupt(void) {
    2314:	36 00 f8    	push      0x36
    2316:	80 9f be    	mov.d     w0, [w15++]
    2318:	82 9f be    	mov.d     w2, [w15++]
    231a:	84 9f be    	mov.d     w4, [w15++]
    231c:	86 9f be    	mov.d     w6, [w15++]
    231e:	32 00 f8    	push      0x32
    2320:	00 20 20    	mov.w     #0x200, w0
    2322:	90 01 88    	mov.w     w0, 0x32
    2324:	00 00 fa    	lnk       #0x0

00002326 <.LSM48>:
    __serviceRxInterrupt(&uart1);
    2326:	80 9b 20    	mov.w     #0x9b8, w0
    2328:	a9 ff 07    	rcall     0x227c <___serviceRxInterrupt>

0000232a <.LSM49>:
}
    232a:	00 80 fa    	ulnk      
    232c:	32 00 f9    	pop       0x32
    232e:	4f 03 be    	mov.d     [--w15], w6
    2330:	4f 02 be    	mov.d     [--w15], w4
    2332:	4f 01 be    	mov.d     [--w15], w2
    2334:	4f 00 be    	mov.d     [--w15], w0
    2336:	36 00 f9    	pop       0x36
    2338:	00 40 06    	retfie    

0000233a <__U2TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2TXInterrupt(void) {
    233a:	36 00 f8    	push      0x36
    233c:	80 9f be    	mov.d     w0, [w15++]
    233e:	82 9f be    	mov.d     w2, [w15++]
    2340:	84 9f be    	mov.d     w4, [w15++]
    2342:	86 9f be    	mov.d     w6, [w15++]
    2344:	32 00 f8    	push      0x32
    2346:	00 20 20    	mov.w     #0x200, w0
    2348:	90 01 88    	mov.w     w0, 0x32
    234a:	00 00 fa    	lnk       #0x0

0000234c <.LSM51>:
    __serviceTxInterrupt(&uart2);
    234c:	40 9f 20    	mov.w     #0x9f4, w0
    234e:	2f ff 07    	rcall     0x21ae <___serviceTxInterrupt>

00002350 <.LSM52>:
}
    2350:	00 80 fa    	ulnk      
    2352:	32 00 f9    	pop       0x32
    2354:	4f 03 be    	mov.d     [--w15], w6
    2356:	4f 02 be    	mov.d     [--w15], w4
    2358:	4f 01 be    	mov.d     [--w15], w2
    235a:	4f 00 be    	mov.d     [--w15], w0
    235c:	36 00 f9    	pop       0x36
    235e:	00 40 06    	retfie    

00002360 <__U2RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U2RXInterrupt(void) {
    2360:	36 00 f8    	push      0x36
    2362:	80 9f be    	mov.d     w0, [w15++]
    2364:	82 9f be    	mov.d     w2, [w15++]
    2366:	84 9f be    	mov.d     w4, [w15++]
    2368:	86 9f be    	mov.d     w6, [w15++]
    236a:	32 00 f8    	push      0x32
    236c:	00 20 20    	mov.w     #0x200, w0
    236e:	90 01 88    	mov.w     w0, 0x32
    2370:	00 00 fa    	lnk       #0x0

00002372 <.LSM54>:
    __serviceRxInterrupt(&uart2);
    2372:	40 9f 20    	mov.w     #0x9f4, w0
    2374:	83 ff 07    	rcall     0x227c <___serviceRxInterrupt>

00002376 <.LSM55>:
}
    2376:	00 80 fa    	ulnk      
    2378:	32 00 f9    	pop       0x32
    237a:	4f 03 be    	mov.d     [--w15], w6
    237c:	4f 02 be    	mov.d     [--w15], w4
    237e:	4f 01 be    	mov.d     [--w15], w2
    2380:	4f 00 be    	mov.d     [--w15], w0
    2382:	36 00 f9    	pop       0x36
    2384:	00 40 06    	retfie    

00002386 <__U3TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3TXInterrupt(void) {
    2386:	36 00 f8    	push      0x36
    2388:	80 9f be    	mov.d     w0, [w15++]
    238a:	82 9f be    	mov.d     w2, [w15++]
    238c:	84 9f be    	mov.d     w4, [w15++]
    238e:	86 9f be    	mov.d     w6, [w15++]
    2390:	32 00 f8    	push      0x32
    2392:	00 20 20    	mov.w     #0x200, w0
    2394:	90 01 88    	mov.w     w0, 0x32
    2396:	00 00 fa    	lnk       #0x0

00002398 <.LSM57>:
    __serviceTxInterrupt(&uart3);
    2398:	00 a3 20    	mov.w     #0xa30, w0
    239a:	09 ff 07    	rcall     0x21ae <___serviceTxInterrupt>

0000239c <.LSM58>:
}
    239c:	00 80 fa    	ulnk      
    239e:	32 00 f9    	pop       0x32
    23a0:	4f 03 be    	mov.d     [--w15], w6
    23a2:	4f 02 be    	mov.d     [--w15], w4
    23a4:	4f 01 be    	mov.d     [--w15], w2
    23a6:	4f 00 be    	mov.d     [--w15], w0
    23a8:	36 00 f9    	pop       0x36
    23aa:	00 40 06    	retfie    

000023ac <__U3RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U3RXInterrupt(void) {
    23ac:	36 00 f8    	push      0x36
    23ae:	80 9f be    	mov.d     w0, [w15++]
    23b0:	82 9f be    	mov.d     w2, [w15++]
    23b2:	84 9f be    	mov.d     w4, [w15++]
    23b4:	86 9f be    	mov.d     w6, [w15++]
    23b6:	32 00 f8    	push      0x32
    23b8:	00 20 20    	mov.w     #0x200, w0
    23ba:	90 01 88    	mov.w     w0, 0x32
    23bc:	00 00 fa    	lnk       #0x0

000023be <.LSM60>:
    __serviceRxInterrupt(&uart3);
    23be:	00 a3 20    	mov.w     #0xa30, w0
    23c0:	5d ff 07    	rcall     0x227c <___serviceRxInterrupt>

000023c2 <.LSM61>:
}
    23c2:	00 80 fa    	ulnk      
    23c4:	32 00 f9    	pop       0x32
    23c6:	4f 03 be    	mov.d     [--w15], w6
    23c8:	4f 02 be    	mov.d     [--w15], w4
    23ca:	4f 01 be    	mov.d     [--w15], w2
    23cc:	4f 00 be    	mov.d     [--w15], w0
    23ce:	36 00 f9    	pop       0x36
    23d0:	00 40 06    	retfie    

000023d2 <__U4TXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4TXInterrupt(void) {
    23d2:	36 00 f8    	push      0x36
    23d4:	80 9f be    	mov.d     w0, [w15++]
    23d6:	82 9f be    	mov.d     w2, [w15++]
    23d8:	84 9f be    	mov.d     w4, [w15++]
    23da:	86 9f be    	mov.d     w6, [w15++]
    23dc:	32 00 f8    	push      0x32
    23de:	00 20 20    	mov.w     #0x200, w0
    23e0:	90 01 88    	mov.w     w0, 0x32
    23e2:	00 00 fa    	lnk       #0x0

000023e4 <.LSM63>:
    __serviceTxInterrupt(&uart4);
    23e4:	c0 a6 20    	mov.w     #0xa6c, w0
    23e6:	e3 fe 07    	rcall     0x21ae <___serviceTxInterrupt>

000023e8 <.LSM64>:
}
    23e8:	00 80 fa    	ulnk      
    23ea:	32 00 f9    	pop       0x32
    23ec:	4f 03 be    	mov.d     [--w15], w6
    23ee:	4f 02 be    	mov.d     [--w15], w4
    23f0:	4f 01 be    	mov.d     [--w15], w2
    23f2:	4f 00 be    	mov.d     [--w15], w0
    23f4:	36 00 f9    	pop       0x36
    23f6:	00 40 06    	retfie    

000023f8 <__U4RXInterrupt>:

void __attribute__((interrupt, auto_psv)) _U4RXInterrupt(void) {
    23f8:	36 00 f8    	push      0x36
    23fa:	80 9f be    	mov.d     w0, [w15++]
    23fc:	82 9f be    	mov.d     w2, [w15++]
    23fe:	84 9f be    	mov.d     w4, [w15++]
    2400:	86 9f be    	mov.d     w6, [w15++]
    2402:	32 00 f8    	push      0x32
    2404:	00 20 20    	mov.w     #0x200, w0
    2406:	90 01 88    	mov.w     w0, 0x32
    2408:	00 00 fa    	lnk       #0x0

0000240a <.LSM66>:
    __serviceRxInterrupt(&uart4);
    240a:	c0 a6 20    	mov.w     #0xa6c, w0
    240c:	37 ff 07    	rcall     0x227c <___serviceRxInterrupt>

0000240e <.LSM67>:
}
    240e:	00 80 fa    	ulnk      
    2410:	32 00 f9    	pop       0x32
    2412:	4f 03 be    	mov.d     [--w15], w6
    2414:	4f 02 be    	mov.d     [--w15], w4
    2416:	4f 01 be    	mov.d     [--w15], w2
    2418:	4f 00 be    	mov.d     [--w15], w0
    241a:	36 00 f9    	pop       0x36
    241c:	00 40 06    	retfie    

0000241e <_write>:

int16_t write(int16_t handle, void *buffer, uint16_t len) {
    241e:	08 00 fa    	lnk       #0x8
    2420:	10 07 98    	mov.w     w0, [w14+2]
    2422:	21 07 98    	mov.w     w1, [w14+4]
    2424:	32 07 98    	mov.w     w2, [w14+6]

00002426 <.LSM69>:
    int16_t i;

    switch (handle) {
    2426:	1e 02 90    	mov.w     [w14+2], w4
    2428:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    242a:	29 00 35    	bra       LT, 0x247e <.L37>
    242c:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    242e:	03 00 34    	bra       LE, 0x2436 <.L30>
    2430:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    2432:	13 00 32    	bra       Z, 0x245a <.L31>

00002434 <.LSM70>:
        case 0:
        case 1:
            for (i = 0; i<len; i++)
                uart_putc(_stdout, *(uint8_t *)buffer++);
            break;
        case 2:
            for (i = 0; i<len; i++)
                uart_putc(_stderr, *(uint8_t *)buffer++);
            break;
        default:
            break;
    2434:	25 00 37    	bra       0x2480 <.L34>

00002436 <.L30>:
    2436:	00 02 eb    	clr.w     w4
    2438:	04 0f 78    	mov.w     w4, [w14]
    243a:	0a 00 37    	bra       0x2450 <.L32>

0000243c <.L33>:
    243c:	2e 02 90    	mov.w     [w14+4], w4
    243e:	94 42 78    	mov.b     [w4], w5
    2440:	2e 02 90    	mov.w     [w14+4], w4
    2442:	04 02 e8    	inc.w     w4, w4
    2444:	24 07 98    	mov.w     w4, [w14+4]
    2446:	44 55 80    	mov.w     0xaa8, w4
    2448:	85 40 78    	mov.b     w5, w1
    244a:	04 00 78    	mov.w     w4, w0
    244c:	61 04 07    	rcall     0x2d10 <_uart_putc>

0000244e <.LSM73>:
    244e:	1e 0f e8    	inc.w     [w14], [w14]

00002450 <.L32>:
    2450:	9e 02 78    	mov.w     [w14], w5
    2452:	3e 02 90    	mov.w     [w14+6], w4
    2454:	84 8f 52    	sub.w     w5, w4, [w15]
    2456:	f2 ff 39    	bra       NC, 0x243c <.L33>

00002458 <.LSM74>:
    2458:	13 00 37    	bra       0x2480 <.L34>

0000245a <.L31>:
    245a:	00 02 eb    	clr.w     w4
    245c:	04 0f 78    	mov.w     w4, [w14]
    245e:	0a 00 37    	bra       0x2474 <.L35>

00002460 <.L36>:
    2460:	2e 02 90    	mov.w     [w14+4], w4
    2462:	94 42 78    	mov.b     [w4], w5
    2464:	2e 02 90    	mov.w     [w14+4], w4
    2466:	04 02 e8    	inc.w     w4, w4
    2468:	24 07 98    	mov.w     w4, [w14+4]
    246a:	54 55 80    	mov.w     0xaaa, w4
    246c:	85 40 78    	mov.b     w5, w1
    246e:	04 00 78    	mov.w     w4, w0
    2470:	4f 04 07    	rcall     0x2d10 <_uart_putc>

00002472 <.LSM77>:
    2472:	1e 0f e8    	inc.w     [w14], [w14]

00002474 <.L35>:
    2474:	9e 02 78    	mov.w     [w14], w5
    2476:	3e 02 90    	mov.w     [w14+6], w4
    2478:	84 8f 52    	sub.w     w5, w4, [w15]
    247a:	f2 ff 39    	bra       NC, 0x2460 <.L36>

0000247c <.LSM78>:
    247c:	01 00 37    	bra       0x2480 <.L34>

0000247e <.L37>:
    247e:	00 00 00    	nop       

00002480 <.L34>:
    }
    return len;
    2480:	3e 02 90    	mov.w     [w14+6], w4

00002482 <.LSM81>:
}
    2482:	04 00 78    	mov.w     w4, w0
    2484:	00 80 fa    	ulnk      
    2486:	00 00 06    	return    

00002488 <_init_uart>:

void init_uart(void) {
    2488:	00 00 fa    	lnk       #0x0

0000248a <.LSM83>:
    init_pin();
    248a:	53 0f 07    	rcall     0x4332 <_init_pin>

0000248c <.LSM84>:

    pin_init(&AJTX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    248c:	44 6d 20    	mov.w     #0x6d4, w4
    248e:	84 1f 78    	mov.w     w4, [w15++]
    2490:	57 01 20    	mov.w     #0x15, w7
    2492:	86 c0 b3    	mov.b     #0x8, w6
    2494:	80 82 eb    	setm.w    w5
    2496:	64 c0 b3    	mov.b     #0x6, w4
    2498:	80 01 eb    	clr.w     w3
    249a:	02 2f 20    	mov.w     #0x2f0, w2
    249c:	21 2f 20    	mov.w     #0x2f2, w1
    249e:	c0 aa 20    	mov.w     #0xaac, w0
    24a0:	60 10 07    	rcall     0x4562 <_pin_init>
    24a2:	8f 87 e9    	dec2.w    w15, w15

000024a4 <.LSM85>:
             (uint16_t *)NULL, 6, -1, 8, 21, (uint16_t *)&RPOR10);
    pin_init(&AJRX, (uint16_t *)&PORTG, (uint16_t *)&TRISG, 
    24a4:	a4 6d 20    	mov.w     #0x6da, w4
    24a6:	84 1f 78    	mov.w     w4, [w15++]
    24a8:	a7 01 20    	mov.w     #0x1a, w7
    24aa:	00 43 eb    	clr.b     w6
    24ac:	80 82 eb    	setm.w    w5
    24ae:	74 c0 b3    	mov.b     #0x7, w4
    24b0:	80 01 eb    	clr.w     w3
    24b2:	02 2f 20    	mov.w     #0x2f0, w2
    24b4:	21 2f 20    	mov.w     #0x2f2, w1
    24b6:	20 ac 20    	mov.w     #0xac2, w0
    24b8:	54 10 07    	rcall     0x4562 <_pin_init>
    24ba:	8f 87 e9    	dec2.w    w15, w15

000024bc <.LSM86>:
             (uint16_t *)NULL, 7, -1, 0, 26, (uint16_t *)&RPOR13);

    uart_init(&uart1, (uint16_t *)&U1MODE, (uint16_t *)&U1STA, 
    24bc:	44 00 20    	mov.w     #0x4, w4
    24be:	84 1f 78    	mov.w     w4, [w15++]
    24c0:	34 00 20    	mov.w     #0x3, w4
    24c2:	84 1f 78    	mov.w     w4, [w15++]
    24c4:	84 c0 b3    	mov.b     #0x8, w4
    24c6:	84 1f 78    	mov.w     w4, [w15++]
    24c8:	00 42 eb    	clr.b     w4
    24ca:	84 1f 78    	mov.w     w4, [w15++]
    24cc:	44 6a 20    	mov.w     #0x6a4, w4
    24ce:	84 1f 78    	mov.w     w4, [w15++]
    24d0:	44 6a 20    	mov.w     #0x6a4, w4
    24d2:	84 1f 78    	mov.w     w4, [w15++]
    24d4:	b4 c0 b3    	mov.b     #0xb, w4
    24d6:	84 1f 78    	mov.w     w4, [w15++]
    24d8:	c4 c0 b3    	mov.b     #0xc, w4
    24da:	84 1f 78    	mov.w     w4, [w15++]
    24dc:	47 09 20    	mov.w     #0x94, w7
    24de:	46 08 20    	mov.w     #0x84, w6
    24e0:	85 22 20    	mov.w     #0x228, w5
    24e2:	64 22 20    	mov.w     #0x226, w4
    24e4:	43 22 20    	mov.w     #0x224, w3
    24e6:	22 22 20    	mov.w     #0x222, w2
    24e8:	01 22 20    	mov.w     #0x220, w1
    24ea:	80 9b 20    	mov.w     #0x9b8, w0
    24ec:	6b 00 07    	rcall     0x25c4 <_uart_init>
    24ee:	f0 87 57    	sub.w     w15, #0x10, w15

000024f0 <.LSM87>:
              (uint16_t *)&U1TXREG, (uint16_t *)&U1RXREG, 
              (uint16_t *)&U1BRG, (uint16_t *)&IFS0, 
              (uint16_t *)&IEC0, 12, 11, (uint16_t *)&RPINR18, 
              (uint16_t *)&RPINR18, 0, 8, 3, 4);
    uart_init(&uart2, (uint16_t *)&U2MODE, (uint16_t *)&U2STA, 
    24f0:	64 00 20    	mov.w     #0x6, w4
    24f2:	84 1f 78    	mov.w     w4, [w15++]
    24f4:	54 00 20    	mov.w     #0x5, w4
    24f6:	84 1f 78    	mov.w     w4, [w15++]
    24f8:	84 c0 b3    	mov.b     #0x8, w4
    24fa:	84 1f 78    	mov.w     w4, [w15++]
    24fc:	00 42 eb    	clr.b     w4
    24fe:	84 1f 78    	mov.w     w4, [w15++]
    2500:	64 6a 20    	mov.w     #0x6a6, w4
    2502:	84 1f 78    	mov.w     w4, [w15++]
    2504:	64 6a 20    	mov.w     #0x6a6, w4
    2506:	84 1f 78    	mov.w     w4, [w15++]
    2508:	e4 c0 b3    	mov.b     #0xe, w4
    250a:	84 1f 78    	mov.w     w4, [w15++]
    250c:	f4 c0 b3    	mov.b     #0xf, w4
    250e:	84 1f 78    	mov.w     w4, [w15++]
    2510:	67 09 20    	mov.w     #0x96, w7
    2512:	66 08 20    	mov.w     #0x86, w6
    2514:	85 23 20    	mov.w     #0x238, w5
    2516:	64 23 20    	mov.w     #0x236, w4
    2518:	43 23 20    	mov.w     #0x234, w3
    251a:	22 23 20    	mov.w     #0x232, w2
    251c:	01 23 20    	mov.w     #0x230, w1
    251e:	40 9f 20    	mov.w     #0x9f4, w0
    2520:	51 00 07    	rcall     0x25c4 <_uart_init>
    2522:	f0 87 57    	sub.w     w15, #0x10, w15

00002524 <.LSM88>:
              (uint16_t *)&U2TXREG, (uint16_t *)&U2RXREG, 
              (uint16_t *)&U2BRG, (uint16_t *)&IFS1, 
              (uint16_t *)&IEC1, 15, 14, (uint16_t *)&RPINR19, 
              (uint16_t *)&RPINR19, 0, 8, 5, 6);
    uart_init(&uart3, (uint16_t *)&U3MODE, (uint16_t *)&U3STA, 
    2524:	d4 01 20    	mov.w     #0x1d, w4
    2526:	84 1f 78    	mov.w     w4, [w15++]
    2528:	c4 01 20    	mov.w     #0x1c, w4
    252a:	84 1f 78    	mov.w     w4, [w15++]
    252c:	84 c0 b3    	mov.b     #0x8, w4
    252e:	84 1f 78    	mov.w     w4, [w15++]
    2530:	84 c0 b3    	mov.b     #0x8, w4
    2532:	84 1f 78    	mov.w     w4, [w15++]
    2534:	a4 6a 20    	mov.w     #0x6aa, w4
    2536:	84 1f 78    	mov.w     w4, [w15++]
    2538:	24 6a 20    	mov.w     #0x6a2, w4
    253a:	84 1f 78    	mov.w     w4, [w15++]
    253c:	24 c0 b3    	mov.b     #0x2, w4
    253e:	84 1f 78    	mov.w     w4, [w15++]
    2540:	34 c0 b3    	mov.b     #0x3, w4
    2542:	84 1f 78    	mov.w     w4, [w15++]
    2544:	e7 09 20    	mov.w     #0x9e, w7
    2546:	e6 08 20    	mov.w     #0x8e, w6
    2548:	85 25 20    	mov.w     #0x258, w5
    254a:	64 25 20    	mov.w     #0x256, w4
    254c:	43 25 20    	mov.w     #0x254, w3
    254e:	22 25 20    	mov.w     #0x252, w2
    2550:	01 25 20    	mov.w     #0x250, w1
    2552:	00 a3 20    	mov.w     #0xa30, w0
    2554:	37 00 07    	rcall     0x25c4 <_uart_init>
    2556:	f0 87 57    	sub.w     w15, #0x10, w15

00002558 <.LSM89>:
              (uint16_t *)&U3TXREG, (uint16_t *)&U3RXREG, 
              (uint16_t *)&U3BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 3, 2, (uint16_t *)&RPINR17, 
              (uint16_t *)&RPINR21, 8, 8, 28, 29);
    uart_init(&uart4, (uint16_t *)&U4MODE, (uint16_t *)&U4STA, 
    2558:	f4 01 20    	mov.w     #0x1f, w4
    255a:	84 1f 78    	mov.w     w4, [w15++]
    255c:	e4 01 20    	mov.w     #0x1e, w4
    255e:	84 1f 78    	mov.w     w4, [w15++]
    2560:	84 c0 b3    	mov.b     #0x8, w4
    2562:	84 1f 78    	mov.w     w4, [w15++]
    2564:	00 42 eb    	clr.b     w4
    2566:	84 1f 78    	mov.w     w4, [w15++]
    2568:	64 6b 20    	mov.w     #0x6b6, w4
    256a:	84 1f 78    	mov.w     w4, [w15++]
    256c:	64 6b 20    	mov.w     #0x6b6, w4
    256e:	84 1f 78    	mov.w     w4, [w15++]
    2570:	84 c0 b3    	mov.b     #0x8, w4
    2572:	84 1f 78    	mov.w     w4, [w15++]
    2574:	94 c0 b3    	mov.b     #0x9, w4
    2576:	84 1f 78    	mov.w     w4, [w15++]
    2578:	e7 09 20    	mov.w     #0x9e, w7
    257a:	e6 08 20    	mov.w     #0x8e, w6
    257c:	85 2b 20    	mov.w     #0x2b8, w5
    257e:	64 2b 20    	mov.w     #0x2b6, w4
    2580:	43 2b 20    	mov.w     #0x2b4, w3
    2582:	22 2b 20    	mov.w     #0x2b2, w2
    2584:	01 2b 20    	mov.w     #0x2b0, w1
    2586:	c0 a6 20    	mov.w     #0xa6c, w0
    2588:	1d 00 07    	rcall     0x25c4 <_uart_init>
    258a:	f0 87 57    	sub.w     w15, #0x10, w15

0000258c <.LSM90>:
              (uint16_t *)&U4TXREG, (uint16_t *)&U4RXREG, 
              (uint16_t *)&U4BRG, (uint16_t *)&IFS5, 
              (uint16_t *)&IEC5, 9, 8, (uint16_t *)&RPINR27, 
              (uint16_t *)&RPINR27, 0, 8, 30, 31);

    uart_open(&uart1, &AJTX, &AJRX, NULL, NULL, 19200., 'N', 1, 
    258c:	00 02 eb    	clr.w     w4
    258e:	84 1f 78    	mov.w     w4, [w15++]
    2590:	00 02 eb    	clr.w     w4
    2592:	84 1f 78    	mov.w     w4, [w15++]
    2594:	00 02 eb    	clr.w     w4
    2596:	84 1f 78    	mov.w     w4, [w15++]
    2598:	00 02 eb    	clr.w     w4
    259a:	84 1f 78    	mov.w     w4, [w15++]
    259c:	00 02 eb    	clr.w     w4
    259e:	84 1f 78    	mov.w     w4, [w15++]
    25a0:	14 00 20    	mov.w     #0x1, w4
    25a2:	84 1f 78    	mov.w     w4, [w15++]
    25a4:	e5 c4 b3    	mov.b     #0x4e, w5
    25a6:	06 00 20    	mov.w     #0x0, w6
    25a8:	67 69 24    	mov.w     #0x4696, w7
    25aa:	00 02 eb    	clr.w     w4
    25ac:	80 01 eb    	clr.w     w3
    25ae:	22 ac 20    	mov.w     #0xac2, w2
    25b0:	c1 aa 20    	mov.w     #0xaac, w1
    25b2:	80 9b 20    	mov.w     #0x9b8, w0
    25b4:	72 00 07    	rcall     0x269a <_uart_open>
    25b6:	ec 87 57    	sub.w     w15, #0xc, w15

000025b8 <.LSM91>:
              0, NULL, 0, NULL, 0);

    _stdout = &uart1;
    25b8:	84 9b 20    	mov.w     #0x9b8, w4
    25ba:	44 55 88    	mov.w     w4, 0xaa8

000025bc <.LSM92>:
    _stderr = &uart1;
    25bc:	84 9b 20    	mov.w     #0x9b8, w4
    25be:	54 55 88    	mov.w     w4, 0xaaa

000025c0 <.LSM93>:
}
    25c0:	00 80 fa    	ulnk      
    25c2:	00 00 06    	return    

000025c4 <_uart_init>:

void uart_init(_UART *self, uint16_t *UxMODE, uint16_t *UxSTA, 
               uint16_t *UxTXREG, uint16_t *UxRXREG, 
               uint16_t *UxBRG, uint16_t *IFSy, uint16_t *IECy, 
               uint8_t UxTXIF, uint8_t UxRXIF, 
               uint16_t *RXrpinr, uint16_t *CTSrpinr, 
               uint8_t RXrpshift, uint8_t CTSrpshift, 
               int16_t TXrpnum, int16_t RTSrpnum) {
    25c4:	10 00 fa    	lnk       #0x10
    25c6:	00 0f 78    	mov.w     w0, [w14]
    25c8:	11 07 98    	mov.w     w1, [w14+2]
    25ca:	22 07 98    	mov.w     w2, [w14+4]
    25cc:	33 07 98    	mov.w     w3, [w14+6]
    25ce:	44 07 98    	mov.w     w4, [w14+8]
    25d0:	55 07 98    	mov.w     w5, [w14+10]
    25d2:	66 07 98    	mov.w     w6, [w14+12]
    25d4:	77 07 98    	mov.w     w7, [w14+14]

000025d6 <.LSM95>:
    self->UxMODE = UxMODE;
    25d6:	1e 02 78    	mov.w     [w14], w4
    25d8:	9e 02 90    	mov.w     [w14+2], w5
    25da:	05 0a 78    	mov.w     w5, [w4]

000025dc <.LSM96>:
    self->UxSTA = UxSTA;
    25dc:	1e 02 78    	mov.w     [w14], w4
    25de:	ae 02 90    	mov.w     [w14+4], w5
    25e0:	15 02 98    	mov.w     w5, [w4+2]

000025e2 <.LSM97>:
    self->UxTXREG = UxTXREG;
    25e2:	1e 02 78    	mov.w     [w14], w4
    25e4:	be 02 90    	mov.w     [w14+6], w5
    25e6:	25 02 98    	mov.w     w5, [w4+4]

000025e8 <.LSM98>:
    self->UxRXREG = UxRXREG;
    25e8:	1e 02 78    	mov.w     [w14], w4
    25ea:	ce 02 90    	mov.w     [w14+8], w5
    25ec:	35 02 98    	mov.w     w5, [w4+6]

000025ee <.LSM99>:
    self->UxBRG = UxBRG;
    25ee:	1e 02 78    	mov.w     [w14], w4
    25f0:	de 02 90    	mov.w     [w14+10], w5
    25f2:	45 02 98    	mov.w     w5, [w4+8]

000025f4 <.LSM100>:
    self->IFSy = IFSy;
    25f4:	1e 02 78    	mov.w     [w14], w4
    25f6:	ee 02 90    	mov.w     [w14+12], w5
    25f8:	55 02 98    	mov.w     w5, [w4+10]

000025fa <.LSM101>:
    self->IECy = IECy;
    25fa:	1e 02 78    	mov.w     [w14], w4
    25fc:	fe 02 90    	mov.w     [w14+14], w5
    25fe:	65 02 98    	mov.w     w5, [w4+12]

00002600 <.LSM102>:
    self->UxTXIF = UxTXIF;
    2600:	1e 02 78    	mov.w     [w14], w4
    2602:	8e fa 97    	mov.b     [w14-8], w5
    2604:	65 4a 98    	mov.b     w5, [w4+14]

00002606 <.LSM103>:
    self->UxRXIF = UxRXIF;
    2606:	1e 02 78    	mov.w     [w14], w4
    2608:	ee f2 97    	mov.b     [w14-10], w5
    260a:	75 4a 98    	mov.b     w5, [w4+15]

0000260c <.LSM104>:
    self->RXrpinr = RXrpinr;
    260c:	1e 02 78    	mov.w     [w14], w4
    260e:	ae ba 97    	mov.w     [w14-12], w5
    2610:	05 0a 98    	mov.w     w5, [w4+16]

00002612 <.LSM105>:
    self->CTSrpinr = CTSrpinr;
    2612:	1e 02 78    	mov.w     [w14], w4
    2614:	9e ba 97    	mov.w     [w14-14], w5
    2616:	15 0a 98    	mov.w     w5, [w4+18]

00002618 <.LSM106>:
    self->RXrpshift = RXrpshift;
    2618:	1e 02 78    	mov.w     [w14], w4
    261a:	8e f2 97    	mov.b     [w14-16], w5
    261c:	45 52 98    	mov.b     w5, [w4+20]

0000261e <.LSM107>:
    self->CTSrpshift = CTSrpshift;
    261e:	1e 02 78    	mov.w     [w14], w4
    2620:	ee ea 97    	mov.b     [w14-18], w5
    2622:	55 52 98    	mov.b     w5, [w4+21]

00002624 <.LSM108>:
    self->TXrpnum = TXrpnum;
    2624:	1e 02 78    	mov.w     [w14], w4
    2626:	ee b2 97    	mov.w     [w14-20], w5
    2628:	35 0a 98    	mov.w     w5, [w4+22]

0000262a <.LSM109>:
    self->RTSrpnum = RTSrpnum;
    262a:	1e 02 78    	mov.w     [w14], w4
    262c:	de b2 97    	mov.w     [w14-22], w5
    262e:	45 0a 98    	mov.w     w5, [w4+24]

00002630 <.LSM110>:
    self->TX = NULL;
    2630:	1e 02 78    	mov.w     [w14], w4
    2632:	80 02 eb    	clr.w     w5
    2634:	55 0a 98    	mov.w     w5, [w4+26]

00002636 <.LSM111>:
    self->RX = NULL;
    2636:	1e 02 78    	mov.w     [w14], w4
    2638:	80 02 eb    	clr.w     w5
    263a:	65 0a 98    	mov.w     w5, [w4+28]

0000263c <.LSM112>:
    self->RTS = NULL;
    263c:	1e 02 78    	mov.w     [w14], w4
    263e:	80 02 eb    	clr.w     w5
    2640:	75 0a 98    	mov.w     w5, [w4+30]

00002642 <.LSM113>:
    self->CTS = NULL;
    2642:	1e 02 78    	mov.w     [w14], w4
    2644:	80 02 eb    	clr.w     w5
    2646:	05 12 98    	mov.w     w5, [w4+32]

00002648 <.LSM114>:
    self->TXbuffer.data = NULL;
    2648:	1e 02 78    	mov.w     [w14], w4
    264a:	80 02 eb    	clr.w     w5
    264c:	15 12 98    	mov.w     w5, [w4+34]

0000264e <.LSM115>:
    self->TXbuffer.length = 0;
    264e:	1e 02 78    	mov.w     [w14], w4
    2650:	80 02 eb    	clr.w     w5
    2652:	25 12 98    	mov.w     w5, [w4+36]

00002654 <.LSM116>:
    self->TXbuffer.head = 0;
    2654:	1e 02 78    	mov.w     [w14], w4
    2656:	80 02 eb    	clr.w     w5
    2658:	35 12 98    	mov.w     w5, [w4+38]

0000265a <.LSM117>:
    self->TXbuffer.tail = 0;
    265a:	1e 02 78    	mov.w     [w14], w4
    265c:	80 02 eb    	clr.w     w5
    265e:	45 12 98    	mov.w     w5, [w4+40]

00002660 <.LSM118>:
    self->TXbuffer.count = 0;
    2660:	1e 02 78    	mov.w     [w14], w4
    2662:	80 02 eb    	clr.w     w5
    2664:	55 12 98    	mov.w     w5, [w4+42]

00002666 <.LSM119>:
    self->RXbuffer.data = NULL;
    2666:	1e 02 78    	mov.w     [w14], w4
    2668:	80 02 eb    	clr.w     w5
    266a:	65 12 98    	mov.w     w5, [w4+44]

0000266c <.LSM120>:
    self->RXbuffer.length = 0;
    266c:	1e 02 78    	mov.w     [w14], w4
    266e:	80 02 eb    	clr.w     w5
    2670:	75 12 98    	mov.w     w5, [w4+46]

00002672 <.LSM121>:
    self->RXbuffer.head = 0;
    2672:	1e 02 78    	mov.w     [w14], w4
    2674:	80 02 eb    	clr.w     w5
    2676:	05 1a 98    	mov.w     w5, [w4+48]

00002678 <.LSM122>:
    self->RXbuffer.tail = 0;
    2678:	1e 02 78    	mov.w     [w14], w4
    267a:	80 02 eb    	clr.w     w5
    267c:	15 1a 98    	mov.w     w5, [w4+50]

0000267e <.LSM123>:
    self->RXbuffer.count = 0;
    267e:	1e 02 78    	mov.w     [w14], w4
    2680:	80 02 eb    	clr.w     w5
    2682:	25 1a 98    	mov.w     w5, [w4+52]

00002684 <.LSM124>:
    self->TXthreshold = 1;
    2684:	1e 02 78    	mov.w     [w14], w4
    2686:	15 00 20    	mov.w     #0x1, w5
    2688:	35 1a 98    	mov.w     w5, [w4+54]

0000268a <.LSM125>:
    self->putc = NULL;
    268a:	1e 02 78    	mov.w     [w14], w4
    268c:	80 02 eb    	clr.w     w5
    268e:	45 1a 98    	mov.w     w5, [w4+56]

00002690 <.LSM126>:
    self->getc = NULL;
    2690:	1e 02 78    	mov.w     [w14], w4
    2692:	80 02 eb    	clr.w     w5
    2694:	55 1a 98    	mov.w     w5, [w4+58]

00002696 <.LSM127>:
}
    2696:	00 80 fa    	ulnk      
    2698:	00 00 06    	return    

0000269a <_uart_open>:

void uart_open(_UART *self, _PIN *TX, _PIN *RX, _PIN *RTS, _PIN *CTS, 
               float baudrate, int8_t parity, int16_t stopbits, 
               uint16_t TXthreshold, uint8_t *TXbuffer, uint16_t TXbufferlen, 
               uint8_t *RXbuffer, uint16_t RXbufferlen) {
    269a:	10 00 fa    	lnk       #0x10
    269c:	88 1f 78    	mov.w     w8, [w15++]
    269e:	00 0f 78    	mov.w     w0, [w14]
    26a0:	11 07 98    	mov.w     w1, [w14+2]
    26a2:	22 07 98    	mov.w     w2, [w14+4]
    26a4:	33 07 98    	mov.w     w3, [w14+6]
    26a6:	44 07 98    	mov.w     w4, [w14+8]
    26a8:	56 07 98    	mov.w     w6, [w14+10]
    26aa:	67 07 98    	mov.w     w7, [w14+12]
    26ac:	65 4f 98    	mov.b     w5, [w14+14]

000026ae <.LSM129>:
    *(self->UxMODE) = 0;    // Disable UART module, set UEN<1:0> = 00 
    26ae:	1e 02 78    	mov.w     [w14], w4
    26b0:	14 02 78    	mov.w     [w4], w4
    26b2:	80 02 eb    	clr.w     w5
    26b4:	05 0a 78    	mov.w     w5, [w4]

000026b6 <.LSM130>:
                            // (i.e., TX and RX pins are enabled and used),
                            // set BRGH = 0 (i.e., standard speed baud mode for 
                            // rate generator), set PDSEL<1:0> = 00 (i.e.,
                            // 8-bit data and no parity), set STSEL = 0 (i.e.,
                            // one data bit)
    if ((TX->rpnum==-1) || (RX->rpnum==-1))
    26b6:	1e 02 90    	mov.w     [w14+2], w4
    26b8:	64 02 90    	mov.w     [w4+12], w4
    26ba:	e1 0f 42    	add.w     w4, #0x1, [w15]
    26bc:	1b 02 32    	bra       Z, 0x2af4 <.L73>
    26be:	2e 02 90    	mov.w     [w14+4], w4
    26c0:	64 02 90    	mov.w     [w4+12], w4
    26c2:	e1 0f 42    	add.w     w4, #0x1, [w15]
    26c4:	19 02 32    	bra       Z, 0x2af8 <.L74>

000026c6 <.LSM131>:
        return; // At least one of the pins specified for TX and RX is not an 
                // RP pin
    if ((TX->owner==NULL) && (RX->owner==NULL)) {
    26c6:	1e 02 90    	mov.w     [w14+2], w4
    26c8:	04 0a 90    	mov.w     [w4+16], w4
    26ca:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    26cc:	69 00 3a    	bra       NZ, 0x27a0 <.L44>
    26ce:	2e 02 90    	mov.w     [w14+4], w4
    26d0:	04 0a 90    	mov.w     [w4+16], w4
    26d2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    26d4:	65 00 3a    	bra       NZ, 0x27a0 <.L44>

000026d6 <.LSM132>:
        // Both pins specified for TX and RX are available, so configure as 
        // specified
        pin_digitalOut(TX);
    26d6:	1e 00 90    	mov.w     [w14+2], w0
    26d8:	97 0f 07    	rcall     0x4608 <_pin_digitalOut>

000026da <.LSM133>:
        pin_set(TX);
    26da:	1e 00 90    	mov.w     [w14+2], w0
    26dc:	f2 0f 07    	rcall     0x46c2 <_pin_set>

000026de <.LSM134>:
        pin_digitalIn(RX);
    26de:	2e 00 90    	mov.w     [w14+4], w0
    26e0:	6c 0f 07    	rcall     0x45ba <_pin_digitalIn>

000026e2 <.LSM135>:
        self->TX = TX;
    26e2:	1e 02 78    	mov.w     [w14], w4
    26e4:	9e 02 90    	mov.w     [w14+2], w5
    26e6:	55 0a 98    	mov.w     w5, [w4+26]

000026e8 <.LSM136>:
        TX->owner = (void *)self;
    26e8:	1e 02 90    	mov.w     [w14+2], w4
    26ea:	9e 02 78    	mov.w     [w14], w5
    26ec:	05 0a 98    	mov.w     w5, [w4+16]

000026ee <.LSM137>:
        TX->write = NULL;
    26ee:	1e 02 90    	mov.w     [w14+2], w4
    26f0:	80 02 eb    	clr.w     w5
    26f2:	15 0a 98    	mov.w     w5, [w4+18]

000026f4 <.LSM138>:
        TX->read = NULL;
    26f4:	1e 02 90    	mov.w     [w14+2], w4
    26f6:	80 02 eb    	clr.w     w5
    26f8:	25 0a 98    	mov.w     w5, [w4+20]

000026fa <.LSM139>:
        self->RX = RX;
    26fa:	1e 02 78    	mov.w     [w14], w4
    26fc:	ae 02 90    	mov.w     [w14+4], w5
    26fe:	65 0a 98    	mov.w     w5, [w4+28]

00002700 <.LSM140>:
        RX->owner = (void *)self;
    2700:	2e 02 90    	mov.w     [w14+4], w4
    2702:	9e 02 78    	mov.w     [w14], w5
    2704:	05 0a 98    	mov.w     w5, [w4+16]

00002706 <.LSM141>:
        RX->write = NULL;
    2706:	2e 02 90    	mov.w     [w14+4], w4
    2708:	80 02 eb    	clr.w     w5
    270a:	15 0a 98    	mov.w     w5, [w4+18]

0000270c <.LSM142>:
        RX->read = NULL;
    270c:	2e 02 90    	mov.w     [w14+4], w4
    270e:	80 02 eb    	clr.w     w5
    2710:	25 0a 98    	mov.w     w5, [w4+20]

00002712 <.LSM143>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2712:	15 3a 80    	mov.w     0x742, w5
    2714:	f4 0b 20    	mov.w     #0xbf, w4
    2716:	04 83 62    	and.w     w5, w4, w6
    2718:	64 04 20    	mov.w     #0x46, w4
    271a:	75 05 20    	mov.w     #0x57, w5
    271c:	27 74 20    	mov.w     #0x742, w7
    271e:	84 4b 78    	mov.b     w4, [w7]
    2720:	85 4b 78    	mov.b     w5, [w7]
    2722:	86 4b 78    	mov.b     w6, [w7]

00002724 <.LSM144>:
        *(TX->rpor) &= ~(0x3F<<(TX->rpshift));
    2724:	1e 02 90    	mov.w     [w14+2], w4
    2726:	74 02 90    	mov.w     [w4+14], w4
    2728:	9e 02 90    	mov.w     [w14+2], w5
    272a:	f5 02 90    	mov.w     [w5+14], w5
    272c:	15 03 78    	mov.w     [w5], w6
    272e:	9e 02 90    	mov.w     [w14+2], w5
    2730:	a5 4a 90    	mov.b     [w5+10], w5
    2732:	85 82 fb    	ze        w5, w5
    2734:	f7 03 20    	mov.w     #0x3f, w7
    2736:	85 3a dd    	sl.w      w7, w5, w5
    2738:	85 82 ea    	com.w     w5, w5
    273a:	85 02 63    	and.w     w6, w5, w5
    273c:	05 0a 78    	mov.w     w5, [w4]

0000273e <.LSM145>:
        *(TX->rpor) |= (self->TXrpnum)<<(TX->rpshift);
    273e:	1e 02 90    	mov.w     [w14+2], w4
    2740:	74 02 90    	mov.w     [w4+14], w4
    2742:	9e 02 90    	mov.w     [w14+2], w5
    2744:	f5 02 90    	mov.w     [w5+14], w5
    2746:	15 03 78    	mov.w     [w5], w6
    2748:	9e 02 78    	mov.w     [w14], w5
    274a:	b5 0b 90    	mov.w     [w5+22], w7
    274c:	9e 02 90    	mov.w     [w14+2], w5
    274e:	a5 4a 90    	mov.b     [w5+10], w5
    2750:	85 82 fb    	ze        w5, w5
    2752:	85 3a dd    	sl.w      w7, w5, w5
    2754:	86 82 72    	ior.w     w5, w6, w5
    2756:	05 0a 78    	mov.w     w5, [w4]

00002758 <.LSM146>:
        *(self->RXrpinr) &= ~(0x3F<<(self->RXrpshift));
    2758:	1e 02 78    	mov.w     [w14], w4
    275a:	04 0a 90    	mov.w     [w4+16], w4
    275c:	9e 02 78    	mov.w     [w14], w5
    275e:	85 0a 90    	mov.w     [w5+16], w5
    2760:	15 03 78    	mov.w     [w5], w6
    2762:	9e 02 78    	mov.w     [w14], w5
    2764:	c5 52 90    	mov.b     [w5+20], w5
    2766:	85 82 fb    	ze        w5, w5
    2768:	f7 03 20    	mov.w     #0x3f, w7
    276a:	85 3a dd    	sl.w      w7, w5, w5
    276c:	85 82 ea    	com.w     w5, w5
    276e:	85 02 63    	and.w     w6, w5, w5
    2770:	05 0a 78    	mov.w     w5, [w4]

00002772 <.LSM147>:
        *(self->RXrpinr) |= (RX->rpnum)<<(self->RXrpshift);
    2772:	1e 02 78    	mov.w     [w14], w4
    2774:	04 0a 90    	mov.w     [w4+16], w4
    2776:	9e 02 78    	mov.w     [w14], w5
    2778:	85 0a 90    	mov.w     [w5+16], w5
    277a:	15 03 78    	mov.w     [w5], w6
    277c:	ae 02 90    	mov.w     [w14+4], w5
    277e:	e5 03 90    	mov.w     [w5+12], w7
    2780:	9e 02 78    	mov.w     [w14], w5
    2782:	c5 52 90    	mov.b     [w5+20], w5
    2784:	85 82 fb    	ze        w5, w5
    2786:	85 3a dd    	sl.w      w7, w5, w5
    2788:	86 82 72    	ior.w     w5, w6, w5
    278a:	05 0a 78    	mov.w     w5, [w4]

0000278c <.LSM148>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    278c:	15 3a 80    	mov.w     0x742, w5
    278e:	04 04 20    	mov.w     #0x40, w4
    2790:	05 03 72    	ior.w     w4, w5, w6
    2792:	64 04 20    	mov.w     #0x46, w4
    2794:	75 05 20    	mov.w     #0x57, w5
    2796:	27 74 20    	mov.w     #0x742, w7
    2798:	84 4b 78    	mov.b     w4, [w7]
    279a:	85 4b 78    	mov.b     w5, [w7]
    279c:	86 4b 78    	mov.b     w6, [w7]
    279e:	0a 00 37    	bra       0x27b4 <.L45>

000027a0 <.L44>:
    } else if ((self->TX!=TX) || (self->RX!=RX)) {
    27a0:	1e 02 78    	mov.w     [w14], w4
    27a2:	d4 0a 90    	mov.w     [w4+26], w5
    27a4:	1e 02 90    	mov.w     [w14+2], w4
    27a6:	84 8f 52    	sub.w     w5, w4, [w15]
    27a8:	a9 01 3a    	bra       NZ, 0x2afc <.L75>
    27aa:	1e 02 78    	mov.w     [w14], w4
    27ac:	e4 0a 90    	mov.w     [w4+28], w5
    27ae:	2e 02 90    	mov.w     [w14+4], w4
    27b0:	84 8f 52    	sub.w     w5, w4, [w15]
    27b2:	a6 01 3a    	bra       NZ, 0x2b00 <.L76>

000027b4 <.L45>:
        return; // At least one of the pins specified for TX and RX do not 
                // match the previous assignment
    }
    if ((RTS!=NULL) && (CTS!=NULL)) {
    27b4:	3e 02 90    	mov.w     [w14+6], w4
    27b6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    27b8:	87 00 32    	bra       Z, 0x28c8 <.L47>
    27ba:	4e 02 90    	mov.w     [w14+8], w4
    27bc:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    27be:	84 00 32    	bra       Z, 0x28c8 <.L47>

000027c0 <.LSM151>:
        if ((RTS->rpnum==-1) || (CTS->rpnum==-1))
    27c0:	3e 02 90    	mov.w     [w14+6], w4
    27c2:	64 02 90    	mov.w     [w4+12], w4
    27c4:	e1 0f 42    	add.w     w4, #0x1, [w15]
    27c6:	9e 01 32    	bra       Z, 0x2b04 <.L77>
    27c8:	4e 02 90    	mov.w     [w14+8], w4
    27ca:	64 02 90    	mov.w     [w4+12], w4
    27cc:	e1 0f 42    	add.w     w4, #0x1, [w15]
    27ce:	9c 01 32    	bra       Z, 0x2b08 <.L78>

000027d0 <.LSM152>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // is not an RP pin
        if ((RTS->owner==NULL) && (CTS->owner==NULL)) {
    27d0:	3e 02 90    	mov.w     [w14+6], w4
    27d2:	04 0a 90    	mov.w     [w4+16], w4
    27d4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    27d6:	69 00 3a    	bra       NZ, 0x28aa <.L50>
    27d8:	4e 02 90    	mov.w     [w14+8], w4
    27da:	04 0a 90    	mov.w     [w4+16], w4
    27dc:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    27de:	65 00 3a    	bra       NZ, 0x28aa <.L50>

000027e0 <.LSM153>:
            // Both pins specified for RTS and CTS are available, so configure 
            // as specified
            pin_digitalOut(RTS);
    27e0:	3e 00 90    	mov.w     [w14+6], w0
    27e2:	12 0f 07    	rcall     0x4608 <_pin_digitalOut>

000027e4 <.LSM154>:
            pin_set(RTS);
    27e4:	3e 00 90    	mov.w     [w14+6], w0
    27e6:	6d 0f 07    	rcall     0x46c2 <_pin_set>

000027e8 <.LSM155>:
            pin_digitalIn(CTS);
    27e8:	4e 00 90    	mov.w     [w14+8], w0
    27ea:	e7 0e 07    	rcall     0x45ba <_pin_digitalIn>

000027ec <.LSM156>:
            self->RTS = RTS;
    27ec:	1e 02 78    	mov.w     [w14], w4
    27ee:	be 02 90    	mov.w     [w14+6], w5
    27f0:	75 0a 98    	mov.w     w5, [w4+30]

000027f2 <.LSM157>:
            RTS->owner = (void *)self;
    27f2:	3e 02 90    	mov.w     [w14+6], w4
    27f4:	9e 02 78    	mov.w     [w14], w5
    27f6:	05 0a 98    	mov.w     w5, [w4+16]

000027f8 <.LSM158>:
            RTS->write = NULL;
    27f8:	3e 02 90    	mov.w     [w14+6], w4
    27fa:	80 02 eb    	clr.w     w5
    27fc:	15 0a 98    	mov.w     w5, [w4+18]

000027fe <.LSM159>:
            RTS->read = NULL;
    27fe:	3e 02 90    	mov.w     [w14+6], w4
    2800:	80 02 eb    	clr.w     w5
    2802:	25 0a 98    	mov.w     w5, [w4+20]

00002804 <.LSM160>:
            self->CTS = CTS;
    2804:	1e 02 78    	mov.w     [w14], w4
    2806:	ce 02 90    	mov.w     [w14+8], w5
    2808:	05 12 98    	mov.w     w5, [w4+32]

0000280a <.LSM161>:
            CTS->owner = (void *)self;
    280a:	4e 02 90    	mov.w     [w14+8], w4
    280c:	9e 02 78    	mov.w     [w14], w5
    280e:	05 0a 98    	mov.w     w5, [w4+16]

00002810 <.LSM162>:
            CTS->write = NULL;
    2810:	4e 02 90    	mov.w     [w14+8], w4
    2812:	80 02 eb    	clr.w     w5
    2814:	15 0a 98    	mov.w     w5, [w4+18]

00002816 <.LSM163>:
            CTS->read = NULL;
    2816:	4e 02 90    	mov.w     [w14+8], w4
    2818:	80 02 eb    	clr.w     w5
    281a:	25 0a 98    	mov.w     w5, [w4+20]

0000281c <.LSM164>:
            __builtin_write_OSCCONL(OSCCON&0xBF);
    281c:	15 3a 80    	mov.w     0x742, w5
    281e:	f4 0b 20    	mov.w     #0xbf, w4
    2820:	04 83 62    	and.w     w5, w4, w6
    2822:	64 04 20    	mov.w     #0x46, w4
    2824:	75 05 20    	mov.w     #0x57, w5
    2826:	27 74 20    	mov.w     #0x742, w7
    2828:	84 4b 78    	mov.b     w4, [w7]
    282a:	85 4b 78    	mov.b     w5, [w7]
    282c:	86 4b 78    	mov.b     w6, [w7]

0000282e <.LSM165>:
            *(RTS->rpor) &= ~(0x3F<<(RTS->rpshift));
    282e:	3e 02 90    	mov.w     [w14+6], w4
    2830:	74 02 90    	mov.w     [w4+14], w4
    2832:	be 02 90    	mov.w     [w14+6], w5
    2834:	f5 02 90    	mov.w     [w5+14], w5
    2836:	15 03 78    	mov.w     [w5], w6
    2838:	be 02 90    	mov.w     [w14+6], w5
    283a:	a5 4a 90    	mov.b     [w5+10], w5
    283c:	85 82 fb    	ze        w5, w5
    283e:	f7 03 20    	mov.w     #0x3f, w7
    2840:	85 3a dd    	sl.w      w7, w5, w5
    2842:	85 82 ea    	com.w     w5, w5
    2844:	85 02 63    	and.w     w6, w5, w5
    2846:	05 0a 78    	mov.w     w5, [w4]

00002848 <.LSM166>:
            *(RTS->rpor) |= (self->RTSrpnum)<<(RTS->rpshift);
    2848:	3e 02 90    	mov.w     [w14+6], w4
    284a:	74 02 90    	mov.w     [w4+14], w4
    284c:	be 02 90    	mov.w     [w14+6], w5
    284e:	f5 02 90    	mov.w     [w5+14], w5
    2850:	15 03 78    	mov.w     [w5], w6
    2852:	9e 02 78    	mov.w     [w14], w5
    2854:	c5 0b 90    	mov.w     [w5+24], w7
    2856:	be 02 90    	mov.w     [w14+6], w5
    2858:	a5 4a 90    	mov.b     [w5+10], w5
    285a:	85 82 fb    	ze        w5, w5
    285c:	85 3a dd    	sl.w      w7, w5, w5
    285e:	86 82 72    	ior.w     w5, w6, w5
    2860:	05 0a 78    	mov.w     w5, [w4]

00002862 <.LSM167>:
            *(self->CTSrpinr) &= ~(0x3F<<(self->CTSrpshift));
    2862:	1e 02 78    	mov.w     [w14], w4
    2864:	14 0a 90    	mov.w     [w4+18], w4
    2866:	9e 02 78    	mov.w     [w14], w5
    2868:	95 0a 90    	mov.w     [w5+18], w5
    286a:	15 03 78    	mov.w     [w5], w6
    286c:	9e 02 78    	mov.w     [w14], w5
    286e:	d5 52 90    	mov.b     [w5+21], w5
    2870:	85 82 fb    	ze        w5, w5
    2872:	f7 03 20    	mov.w     #0x3f, w7
    2874:	85 3a dd    	sl.w      w7, w5, w5
    2876:	85 82 ea    	com.w     w5, w5
    2878:	85 02 63    	and.w     w6, w5, w5
    287a:	05 0a 78    	mov.w     w5, [w4]

0000287c <.LSM168>:
            *(self->CTSrpinr) |= (CTS->rpnum)<<(self->CTSrpshift);
    287c:	1e 02 78    	mov.w     [w14], w4
    287e:	14 0a 90    	mov.w     [w4+18], w4
    2880:	9e 02 78    	mov.w     [w14], w5
    2882:	95 0a 90    	mov.w     [w5+18], w5
    2884:	15 03 78    	mov.w     [w5], w6
    2886:	ce 02 90    	mov.w     [w14+8], w5
    2888:	e5 03 90    	mov.w     [w5+12], w7
    288a:	9e 02 78    	mov.w     [w14], w5
    288c:	d5 52 90    	mov.b     [w5+21], w5
    288e:	85 82 fb    	ze        w5, w5
    2890:	85 3a dd    	sl.w      w7, w5, w5
    2892:	86 82 72    	ior.w     w5, w6, w5
    2894:	05 0a 78    	mov.w     w5, [w4]

00002896 <.LSM169>:
            __builtin_write_OSCCONL(OSCCON|0x40);
    2896:	15 3a 80    	mov.w     0x742, w5
    2898:	04 04 20    	mov.w     #0x40, w4
    289a:	05 03 72    	ior.w     w4, w5, w6
    289c:	64 04 20    	mov.w     #0x46, w4
    289e:	75 05 20    	mov.w     #0x57, w5
    28a0:	27 74 20    	mov.w     #0x742, w7
    28a2:	84 4b 78    	mov.b     w4, [w7]
    28a4:	85 4b 78    	mov.b     w5, [w7]
    28a6:	86 4b 78    	mov.b     w6, [w7]
    28a8:	0a 00 37    	bra       0x28be <.L51>

000028aa <.L50>:
        } else if ((self->RTS!=RTS) || (self->CTS!=CTS)) {
    28aa:	1e 02 78    	mov.w     [w14], w4
    28ac:	f4 0a 90    	mov.w     [w4+30], w5
    28ae:	3e 02 90    	mov.w     [w14+6], w4
    28b0:	84 8f 52    	sub.w     w5, w4, [w15]
    28b2:	2c 01 3a    	bra       NZ, 0x2b0c <.L79>
    28b4:	1e 02 78    	mov.w     [w14], w4
    28b6:	84 12 90    	mov.w     [w4+32], w5
    28b8:	4e 02 90    	mov.w     [w14+8], w4
    28ba:	84 8f 52    	sub.w     w5, w4, [w15]
    28bc:	29 01 3a    	bra       NZ, 0x2b10 <.L80>

000028be <.L51>:
            return;     // At least one of the pins specified for RTS and CTS 
                        // do not match the previous assignment
        }
        *(self->UxMODE) = 0x0200;   // Set UEN<1:0> = 10, indicating TX, RX,
    28be:	1e 02 78    	mov.w     [w14], w4
    28c0:	14 02 78    	mov.w     [w4], w4
    28c2:	05 20 20    	mov.w     #0x200, w5
    28c4:	05 0a 78    	mov.w     w5, [w4]
    28c6:	06 00 37    	bra       0x28d4 <.L53>

000028c8 <.L47>:
                                    // RTS, and CTS are enabled and used
    } else if ((RTS!=NULL) || (CTS!=NULL)) {
    28c8:	3e 02 90    	mov.w     [w14+6], w4
    28ca:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    28cc:	23 01 3a    	bra       NZ, 0x2b14 <.L81>
    28ce:	4e 02 90    	mov.w     [w14+8], w4
    28d0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    28d2:	22 01 3a    	bra       NZ, 0x2b18 <.L82>

000028d4 <.L53>:
        return; // A pin was specified for RTS or CTS, but not both
    }
    // Clip baudrate to be in allowable range of values
    if (baudrate>(FCY/4.))
    28d4:	18 c0 b3    	mov.b     #0x1, w8
    28d6:	02 40 22    	mov.w     #0x2400, w2
    28d8:	43 a7 24    	mov.w     #0x4a74, w3
    28da:	5e 00 90    	mov.w     [w14+10], w0
    28dc:	ee 00 90    	mov.w     [w14+12], w1
    28de:	39 f5 07    	rcall     0x1352 <___gesf2>
    28e0:	00 02 78    	mov.w     w0, w4
    28e2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    28e4:	01 00 3c    	bra       GT, 0x28e8 <.L55>
    28e6:	00 44 eb    	clr.b     w8

000028e8 <.L55>:
    28e8:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    28ea:	04 00 32    	bra       Z, 0x28f4 <.L56>

000028ec <.LSM174>:
        baudrate = FCY/4.;
    28ec:	04 40 22    	mov.w     #0x2400, w4
    28ee:	45 a7 24    	mov.w     #0x4a74, w5
    28f0:	54 07 98    	mov.w     w4, [w14+10]
    28f2:	65 07 98    	mov.w     w5, [w14+12]

000028f4 <.L56>:
    if (baudrate<(FCY/(16.*65536.)))
    28f4:	18 c0 b3    	mov.b     #0x1, w8
    28f6:	02 40 22    	mov.w     #0x2400, w2
    28f8:	43 17 24    	mov.w     #0x4174, w3
    28fa:	5e 00 90    	mov.w     [w14+10], w0
    28fc:	ee 00 90    	mov.w     [w14+12], w1
    28fe:	27 f5 07    	rcall     0x134e <___eqsf2>
    2900:	00 02 78    	mov.w     w0, w4
    2902:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2904:	01 00 35    	bra       LT, 0x2908 <.L57>
    2906:	00 44 eb    	clr.b     w8

00002908 <.L57>:
    2908:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    290a:	04 00 32    	bra       Z, 0x2914 <.L58>

0000290c <.LSM176>:
        baudrate = FCY/(16.*65536.);
    290c:	04 40 22    	mov.w     #0x2400, w4
    290e:	45 17 24    	mov.w     #0x4174, w5
    2910:	54 07 98    	mov.w     w4, [w14+10]
    2912:	65 07 98    	mov.w     w5, [w14+12]

00002914 <.L58>:
    // Select BRGH value and compute BRG value
    if (baudrate<=(FCY/(4.*65536.))) {
    2914:	18 c0 b3    	mov.b     #0x1, w8
    2916:	02 40 22    	mov.w     #0x2400, w2
    2918:	43 27 24    	mov.w     #0x4274, w3
    291a:	5e 00 90    	mov.w     [w14+10], w0
    291c:	ee 00 90    	mov.w     [w14+12], w1
    291e:	17 f5 07    	rcall     0x134e <___eqsf2>
    2920:	00 02 78    	mov.w     w0, w4
    2922:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2924:	01 00 34    	bra       LE, 0x2928 <.L59>
    2926:	00 44 eb    	clr.b     w8

00002928 <.L59>:
    2928:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    292a:	14 00 32    	bra       Z, 0x2954 <.L60>

0000292c <.LSM178>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/16.)/baudrate)-1;
    292c:	1e 02 78    	mov.w     [w14], w4
    292e:	44 04 90    	mov.w     [w4+8], w8
    2930:	5e 01 90    	mov.w     [w14+10], w2
    2932:	ee 01 90    	mov.w     [w14+12], w3
    2934:	00 40 22    	mov.w     #0x2400, w0
    2936:	41 97 24    	mov.w     #0x4974, w1
    2938:	c8 f4 07    	rcall     0x12ca <___divsf3>
    293a:	00 02 be    	mov.d     w0, w4
    293c:	02 00 20    	mov.w     #0x0, w2
    293e:	03 f0 23    	mov.w     #0x3f00, w3
    2940:	04 00 be    	mov.d     w4, w0
    2942:	66 f4 07    	rcall     0x1210 <___addsf3>
    2944:	00 02 be    	mov.d     w0, w4
    2946:	04 00 be    	mov.d     w4, w0
    2948:	06 f5 07    	rcall     0x1356 <___fixunssfsi>
    294a:	00 02 be    	mov.d     w0, w4
    294c:	04 02 78    	mov.w     w4, w4
    294e:	04 02 e9    	dec.w     w4, w4
    2950:	04 0c 78    	mov.w     w4, [w8]
    2952:	1a 00 37    	bra       0x2988 <.L61>

00002954 <.L60>:
    } else {
        bitset(self->UxMODE, 3);    // Set BRGH = 1
    2954:	1e 02 78    	mov.w     [w14], w4
    2956:	14 02 78    	mov.w     [w4], w4
    2958:	9e 02 78    	mov.w     [w14], w5
    295a:	95 02 78    	mov.w     [w5], w5
    295c:	95 02 78    	mov.w     [w5], w5
    295e:	05 30 a0    	bset.w    w5, #0x3
    2960:	05 0a 78    	mov.w     w5, [w4]

00002962 <.LSM180>:
        *(self->UxBRG) = (uint16_t)(0.5+(FCY/4.)/baudrate)-1;
    2962:	1e 02 78    	mov.w     [w14], w4
    2964:	44 04 90    	mov.w     [w4+8], w8
    2966:	5e 01 90    	mov.w     [w14+10], w2
    2968:	ee 01 90    	mov.w     [w14+12], w3
    296a:	00 40 22    	mov.w     #0x2400, w0
    296c:	41 a7 24    	mov.w     #0x4a74, w1
    296e:	ad f4 07    	rcall     0x12ca <___divsf3>
    2970:	00 02 be    	mov.d     w0, w4
    2972:	02 00 20    	mov.w     #0x0, w2
    2974:	03 f0 23    	mov.w     #0x3f00, w3
    2976:	04 00 be    	mov.d     w4, w0
    2978:	4b f4 07    	rcall     0x1210 <___addsf3>
    297a:	00 02 be    	mov.d     w0, w4
    297c:	04 00 be    	mov.d     w4, w0
    297e:	eb f4 07    	rcall     0x1356 <___fixunssfsi>
    2980:	00 02 be    	mov.d     w0, w4
    2982:	04 02 78    	mov.w     w4, w4
    2984:	04 02 e9    	dec.w     w4, w4
    2986:	04 0c 78    	mov.w     w4, [w8]

00002988 <.L61>:
    }
    // Set parity as specified
    if ((parity=='E') || (parity=='e')) {
    2988:	ee 4a 90    	mov.b     [w14+14], w5
    298a:	54 c4 b3    	mov.b     #0x45, w4
    298c:	84 cf 52    	sub.b     w5, w4, [w15]
    298e:	04 00 32    	bra       Z, 0x2998 <.L62>
    2990:	ee 4a 90    	mov.b     [w14+14], w5
    2992:	54 c6 b3    	mov.b     #0x65, w4
    2994:	84 cf 52    	sub.b     w5, w4, [w15]
    2996:	08 00 3a    	bra       NZ, 0x29a8 <.L63>

00002998 <.L62>:
        bitset(self->UxMODE, 1);    // Set PDSEL<1:0> = 01, indicating 8-bit
    2998:	1e 02 78    	mov.w     [w14], w4
    299a:	14 02 78    	mov.w     [w4], w4
    299c:	9e 02 78    	mov.w     [w14], w5
    299e:	95 02 78    	mov.w     [w5], w5
    29a0:	95 02 78    	mov.w     [w5], w5
    29a2:	05 10 a0    	bset.w    w5, #0x1
    29a4:	05 0a 78    	mov.w     w5, [w4]
    29a6:	18 00 37    	bra       0x29d8 <.L64>

000029a8 <.L63>:
                                    // data and even parity
    } else if ((parity=='O') || (parity=='o')) {
    29a8:	ee 4a 90    	mov.b     [w14+14], w5
    29aa:	f4 c4 b3    	mov.b     #0x4f, w4
    29ac:	84 cf 52    	sub.b     w5, w4, [w15]
    29ae:	04 00 32    	bra       Z, 0x29b8 <.L65>
    29b0:	ee 4a 90    	mov.b     [w14+14], w5
    29b2:	f4 c6 b3    	mov.b     #0x6f, w4
    29b4:	84 cf 52    	sub.b     w5, w4, [w15]
    29b6:	08 00 3a    	bra       NZ, 0x29c8 <.L66>

000029b8 <.L65>:
        bitset(self->UxMODE, 2);    // Set PDSEL<1:0> = 10, indicating 8-bit
    29b8:	1e 02 78    	mov.w     [w14], w4
    29ba:	14 02 78    	mov.w     [w4], w4
    29bc:	9e 02 78    	mov.w     [w14], w5
    29be:	95 02 78    	mov.w     [w5], w5
    29c0:	95 02 78    	mov.w     [w5], w5
    29c2:	05 20 a0    	bset.w    w5, #0x2
    29c4:	05 0a 78    	mov.w     w5, [w4]
    29c6:	08 00 37    	bra       0x29d8 <.L64>

000029c8 <.L66>:
                                    // data and odd parity
    } else if ((parity!='N') && (parity!='n')) {
    29c8:	ee 4a 90    	mov.b     [w14+14], w5
    29ca:	e4 c4 b3    	mov.b     #0x4e, w4
    29cc:	84 cf 52    	sub.b     w5, w4, [w15]
    29ce:	04 00 32    	bra       Z, 0x29d8 <.L64>
    29d0:	ee 4a 90    	mov.b     [w14+14], w5
    29d2:	e4 c6 b3    	mov.b     #0x6e, w4
    29d4:	84 cf 52    	sub.b     w5, w4, [w15]
    29d6:	a2 00 3a    	bra       NZ, 0x2b1c <.L83>

000029d8 <.L64>:
        return; // Illegitimate parity setting specified
    }
    // Set stopbits as specified
    if (stopbits==2) {
    29d8:	4e ba 97    	mov.w     [w14-8], w4
    29da:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    29dc:	08 00 3a    	bra       NZ, 0x29ee <.L67>

000029de <.LSM187>:
        bitset(self->UxMODE, 0);    // Set STSEL = 1
    29de:	1e 02 78    	mov.w     [w14], w4
    29e0:	14 02 78    	mov.w     [w4], w4
    29e2:	9e 02 78    	mov.w     [w14], w5
    29e4:	95 02 78    	mov.w     [w5], w5
    29e6:	95 02 78    	mov.w     [w5], w5
    29e8:	05 00 a0    	bset.w    w5, #0x0
    29ea:	05 0a 78    	mov.w     w5, [w4]
    29ec:	03 00 37    	bra       0x29f4 <.L68>

000029ee <.L67>:
    } else if (stopbits!=1) {
    29ee:	4e ba 97    	mov.w     [w14-8], w4
    29f0:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    29f2:	96 00 3a    	bra       NZ, 0x2b20 <.L84>

000029f4 <.L68>:
        return; // Illegitimate stopbit setting specified
    }
    // Set up transmit buffer and interrupt as specified
    if (TXbuffer==NULL) {
    29f4:	2e ba 97    	mov.w     [w14-12], w4
    29f6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    29f8:	04 00 3a    	bra       NZ, 0x2a02 <.L69>

000029fa <.LSM190>:
        self->putc = __putc_nobuffer;
    29fa:	1e 02 78    	mov.w     [w14], w4
    29fc:	85 10 22    	mov.w     #0x2108, w5
    29fe:	45 1a 98    	mov.w     w5, [w4+56]
    2a00:	36 00 37    	bra       0x2a6e <.L70>

00002a02 <.L69>:
    } else {
        bitset(self->UxSTA, 13);    // Set UTXISEL<1:0> = 01, TX interrupt when
    2a02:	1e 02 78    	mov.w     [w14], w4
    2a04:	14 02 90    	mov.w     [w4+2], w4
    2a06:	9e 02 78    	mov.w     [w14], w5
    2a08:	95 02 90    	mov.w     [w5+2], w5
    2a0a:	15 03 78    	mov.w     [w5], w6
    2a0c:	05 00 22    	mov.w     #0x2000, w5
    2a0e:	86 82 72    	ior.w     w5, w6, w5
    2a10:	05 0a 78    	mov.w     w5, [w4]

00002a12 <.LSM192>:
                                    // all transmit operations are done
        self->TXbuffer.data = TXbuffer;
    2a12:	1e 02 78    	mov.w     [w14], w4
    2a14:	ae ba 97    	mov.w     [w14-12], w5
    2a16:	15 12 98    	mov.w     w5, [w4+34]

00002a18 <.LSM193>:
        self->TXbuffer.length = TXbufferlen;
    2a18:	1e 02 78    	mov.w     [w14], w4
    2a1a:	9e ba 97    	mov.w     [w14-14], w5
    2a1c:	25 12 98    	mov.w     w5, [w4+36]

00002a1e <.LSM194>:
        self->TXbuffer.head = 0;
    2a1e:	1e 02 78    	mov.w     [w14], w4
    2a20:	80 02 eb    	clr.w     w5
    2a22:	35 12 98    	mov.w     w5, [w4+38]

00002a24 <.LSM195>:
        self->TXbuffer.tail = 0;
    2a24:	1e 02 78    	mov.w     [w14], w4
    2a26:	80 02 eb    	clr.w     w5
    2a28:	45 12 98    	mov.w     w5, [w4+40]

00002a2a <.LSM196>:
        self->TXbuffer.count = 0;
    2a2a:	1e 02 78    	mov.w     [w14], w4
    2a2c:	80 02 eb    	clr.w     w5
    2a2e:	55 12 98    	mov.w     w5, [w4+42]

00002a30 <.LSM197>:
        self->TXthreshold = TXthreshold;
    2a30:	1e 02 78    	mov.w     [w14], w4
    2a32:	be ba 97    	mov.w     [w14-10], w5
    2a34:	35 1a 98    	mov.w     w5, [w4+54]

00002a36 <.LSM198>:
        self->putc = __putc_buffer;
    2a36:	1e 02 78    	mov.w     [w14], w4
    2a38:	c5 14 22    	mov.w     #0x214c, w5
    2a3a:	45 1a 98    	mov.w     w5, [w4+56]

00002a3c <.LSM199>:
        bitclear(self->IFSy, self->UxTXIF); // Lower TX interrupt flag
    2a3c:	1e 02 78    	mov.w     [w14], w4
    2a3e:	54 02 90    	mov.w     [w4+10], w4
    2a40:	9e 02 78    	mov.w     [w14], w5
    2a42:	d5 02 90    	mov.w     [w5+10], w5
    2a44:	15 03 78    	mov.w     [w5], w6
    2a46:	9e 02 78    	mov.w     [w14], w5
    2a48:	e5 4a 90    	mov.b     [w5+14], w5
    2a4a:	85 82 fb    	ze        w5, w5
    2a4c:	17 00 20    	mov.w     #0x1, w7
    2a4e:	85 3a dd    	sl.w      w7, w5, w5
    2a50:	85 82 ea    	com.w     w5, w5
    2a52:	85 02 63    	and.w     w6, w5, w5
    2a54:	05 0a 78    	mov.w     w5, [w4]

00002a56 <.LSM200>:
        bitset(self->IECy, self->UxTXIF);   // Enable TX interrupt
    2a56:	1e 02 78    	mov.w     [w14], w4
    2a58:	64 02 90    	mov.w     [w4+12], w4
    2a5a:	9e 02 78    	mov.w     [w14], w5
    2a5c:	e5 02 90    	mov.w     [w5+12], w5
    2a5e:	15 03 78    	mov.w     [w5], w6
    2a60:	9e 02 78    	mov.w     [w14], w5
    2a62:	e5 4a 90    	mov.b     [w5+14], w5
    2a64:	85 82 fb    	ze        w5, w5
    2a66:	17 00 20    	mov.w     #0x1, w7
    2a68:	85 3a dd    	sl.w      w7, w5, w5
    2a6a:	86 82 72    	ior.w     w5, w6, w5
    2a6c:	05 0a 78    	mov.w     w5, [w4]

00002a6e <.L70>:
    }
    // Set up receive buffer and interrupt as specified
    if (RXbuffer==NULL) {
    2a6e:	0e ba 97    	mov.w     [w14-16], w4
    2a70:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2a72:	04 00 3a    	bra       NZ, 0x2a7c <.L71>

00002a74 <.LSM202>:
        self->getc = __getc_nobuffer;
    2a74:	1e 02 78    	mov.w     [w14], w4
    2a76:	c5 12 22    	mov.w     #0x212c, w5
    2a78:	55 1a 98    	mov.w     w5, [w4+58]
    2a7a:	2b 00 37    	bra       0x2ad2 <.L72>

00002a7c <.L71>:
    } else {
        self->RXbuffer.data = RXbuffer;
    2a7c:	1e 02 78    	mov.w     [w14], w4
    2a7e:	8e ba 97    	mov.w     [w14-16], w5
    2a80:	65 12 98    	mov.w     w5, [w4+44]

00002a82 <.LSM204>:
        self->RXbuffer.length = RXbufferlen;
    2a82:	1e 02 78    	mov.w     [w14], w4
    2a84:	fe b2 97    	mov.w     [w14-18], w5
    2a86:	75 12 98    	mov.w     w5, [w4+46]

00002a88 <.LSM205>:
        self->RXbuffer.head = 0;
    2a88:	1e 02 78    	mov.w     [w14], w4
    2a8a:	80 02 eb    	clr.w     w5
    2a8c:	05 1a 98    	mov.w     w5, [w4+48]

00002a8e <.LSM206>:
        self->RXbuffer.tail = 0;
    2a8e:	1e 02 78    	mov.w     [w14], w4
    2a90:	80 02 eb    	clr.w     w5
    2a92:	15 1a 98    	mov.w     w5, [w4+50]

00002a94 <.LSM207>:
        self->RXbuffer.count = 0;
    2a94:	1e 02 78    	mov.w     [w14], w4
    2a96:	80 02 eb    	clr.w     w5
    2a98:	25 1a 98    	mov.w     w5, [w4+52]

00002a9a <.LSM208>:
        self->getc = __getc_buffer;
    2a9a:	1e 02 78    	mov.w     [w14], w4
    2a9c:	a5 23 22    	mov.w     #0x223a, w5
    2a9e:	55 1a 98    	mov.w     w5, [w4+58]

00002aa0 <.LSM209>:
        bitclear(self->IFSy, self->UxRXIF); // Lower RX interrupt flag
    2aa0:	1e 02 78    	mov.w     [w14], w4
    2aa2:	54 02 90    	mov.w     [w4+10], w4
    2aa4:	9e 02 78    	mov.w     [w14], w5
    2aa6:	d5 02 90    	mov.w     [w5+10], w5
    2aa8:	15 03 78    	mov.w     [w5], w6
    2aaa:	9e 02 78    	mov.w     [w14], w5
    2aac:	f5 4a 90    	mov.b     [w5+15], w5
    2aae:	85 82 fb    	ze        w5, w5
    2ab0:	17 00 20    	mov.w     #0x1, w7
    2ab2:	85 3a dd    	sl.w      w7, w5, w5
    2ab4:	85 82 ea    	com.w     w5, w5
    2ab6:	85 02 63    	and.w     w6, w5, w5
    2ab8:	05 0a 78    	mov.w     w5, [w4]

00002aba <.LSM210>:
        bitset(self->IECy, self->UxRXIF);   // Enable RX interrupt
    2aba:	1e 02 78    	mov.w     [w14], w4
    2abc:	64 02 90    	mov.w     [w4+12], w4
    2abe:	9e 02 78    	mov.w     [w14], w5
    2ac0:	e5 02 90    	mov.w     [w5+12], w5
    2ac2:	15 03 78    	mov.w     [w5], w6
    2ac4:	9e 02 78    	mov.w     [w14], w5
    2ac6:	f5 4a 90    	mov.b     [w5+15], w5
    2ac8:	85 82 fb    	ze        w5, w5
    2aca:	17 00 20    	mov.w     #0x1, w7
    2acc:	85 3a dd    	sl.w      w7, w5, w5
    2ace:	86 82 72    	ior.w     w5, w6, w5
    2ad0:	05 0a 78    	mov.w     w5, [w4]

00002ad2 <.L72>:
    }
    bitset(self->UxMODE, 15);   // Enable UART module
    2ad2:	1e 02 78    	mov.w     [w14], w4
    2ad4:	14 02 78    	mov.w     [w4], w4
    2ad6:	9e 02 78    	mov.w     [w14], w5
    2ad8:	95 02 78    	mov.w     [w5], w5
    2ada:	15 03 78    	mov.w     [w5], w6
    2adc:	05 00 28    	mov.w     #0x8000, w5
    2ade:	86 82 72    	ior.w     w5, w6, w5
    2ae0:	05 0a 78    	mov.w     w5, [w4]

00002ae2 <.LSM212>:
    bitset(self->UxSTA, 10);    // Enable data transmission
    2ae2:	1e 02 78    	mov.w     [w14], w4
    2ae4:	14 02 90    	mov.w     [w4+2], w4
    2ae6:	9e 02 78    	mov.w     [w14], w5
    2ae8:	95 02 90    	mov.w     [w5+2], w5
    2aea:	15 03 78    	mov.w     [w5], w6
    2aec:	05 40 20    	mov.w     #0x400, w5
    2aee:	86 82 72    	ior.w     w5, w6, w5
    2af0:	05 0a 78    	mov.w     w5, [w4]
    2af2:	17 00 37    	bra       0x2b22 <.L40>

00002af4 <.L73>:
    2af4:	00 00 00    	nop       
    2af6:	15 00 37    	bra       0x2b22 <.L40>

00002af8 <.L74>:
    2af8:	00 00 00    	nop       
    2afa:	13 00 37    	bra       0x2b22 <.L40>

00002afc <.L75>:
    2afc:	00 00 00    	nop       
    2afe:	11 00 37    	bra       0x2b22 <.L40>

00002b00 <.L76>:
    2b00:	00 00 00    	nop       
    2b02:	0f 00 37    	bra       0x2b22 <.L40>

00002b04 <.L77>:
    2b04:	00 00 00    	nop       
    2b06:	0d 00 37    	bra       0x2b22 <.L40>

00002b08 <.L78>:
    2b08:	00 00 00    	nop       
    2b0a:	0b 00 37    	bra       0x2b22 <.L40>

00002b0c <.L79>:
    2b0c:	00 00 00    	nop       
    2b0e:	09 00 37    	bra       0x2b22 <.L40>

00002b10 <.L80>:
    2b10:	00 00 00    	nop       
    2b12:	07 00 37    	bra       0x2b22 <.L40>

00002b14 <.L81>:
    2b14:	00 00 00    	nop       
    2b16:	05 00 37    	bra       0x2b22 <.L40>

00002b18 <.L82>:
    2b18:	00 00 00    	nop       
    2b1a:	03 00 37    	bra       0x2b22 <.L40>

00002b1c <.L83>:
    2b1c:	00 00 00    	nop       
    2b1e:	01 00 37    	bra       0x2b22 <.L40>

00002b20 <.L84>:
    2b20:	00 00 00    	nop       

00002b22 <.L40>:
}
    2b22:	4f 04 78    	mov.w     [--w15], w8
    2b24:	00 80 fa    	ulnk      
    2b26:	00 00 06    	return    

00002b28 <_uart_close>:

void uart_close(_UART *self) {
    2b28:	02 00 fa    	lnk       #0x2
    2b2a:	00 0f 78    	mov.w     w0, [w14]

00002b2c <.LSM222>:
    bitclear(self->UxSTA, 10);  // Disable data transmission
    2b2c:	1e 02 78    	mov.w     [w14], w4
    2b2e:	14 02 90    	mov.w     [w4+2], w4
    2b30:	9e 02 78    	mov.w     [w14], w5
    2b32:	95 02 90    	mov.w     [w5+2], w5
    2b34:	15 03 78    	mov.w     [w5], w6
    2b36:	f5 bf 2f    	mov.w     #0xfbff, w5
    2b38:	85 02 63    	and.w     w6, w5, w5
    2b3a:	05 0a 78    	mov.w     w5, [w4]

00002b3c <.LSM223>:
    *(self->UxMODE) = 0;        // Disable UART module
    2b3c:	1e 02 78    	mov.w     [w14], w4
    2b3e:	14 02 78    	mov.w     [w4], w4
    2b40:	80 02 eb    	clr.w     w5
    2b42:	05 0a 78    	mov.w     w5, [w4]

00002b44 <.LSM224>:
    bitclear(self->IECy, self->UxTXIF); // Disable TX interrupt
    2b44:	1e 02 78    	mov.w     [w14], w4
    2b46:	64 02 90    	mov.w     [w4+12], w4
    2b48:	9e 02 78    	mov.w     [w14], w5
    2b4a:	e5 02 90    	mov.w     [w5+12], w5
    2b4c:	15 03 78    	mov.w     [w5], w6
    2b4e:	9e 02 78    	mov.w     [w14], w5
    2b50:	e5 4a 90    	mov.b     [w5+14], w5
    2b52:	85 82 fb    	ze        w5, w5
    2b54:	17 00 20    	mov.w     #0x1, w7
    2b56:	85 3a dd    	sl.w      w7, w5, w5
    2b58:	85 82 ea    	com.w     w5, w5
    2b5a:	85 02 63    	and.w     w6, w5, w5
    2b5c:	05 0a 78    	mov.w     w5, [w4]

00002b5e <.LSM225>:
    bitclear(self->IECy, self->UxRXIF); // Disable RX interrupt
    2b5e:	1e 02 78    	mov.w     [w14], w4
    2b60:	64 02 90    	mov.w     [w4+12], w4
    2b62:	9e 02 78    	mov.w     [w14], w5
    2b64:	e5 02 90    	mov.w     [w5+12], w5
    2b66:	15 03 78    	mov.w     [w5], w6
    2b68:	9e 02 78    	mov.w     [w14], w5
    2b6a:	f5 4a 90    	mov.b     [w5+15], w5
    2b6c:	85 82 fb    	ze        w5, w5
    2b6e:	17 00 20    	mov.w     #0x1, w7
    2b70:	85 3a dd    	sl.w      w7, w5, w5
    2b72:	85 82 ea    	com.w     w5, w5
    2b74:	85 02 63    	and.w     w6, w5, w5
    2b76:	05 0a 78    	mov.w     w5, [w4]

00002b78 <.LSM226>:
    self->putc = NULL;
    2b78:	1e 02 78    	mov.w     [w14], w4
    2b7a:	80 02 eb    	clr.w     w5
    2b7c:	45 1a 98    	mov.w     w5, [w4+56]

00002b7e <.LSM227>:
    self->getc = NULL;
    2b7e:	1e 02 78    	mov.w     [w14], w4
    2b80:	80 02 eb    	clr.w     w5
    2b82:	55 1a 98    	mov.w     w5, [w4+58]

00002b84 <.LSM228>:
    if (self->TX) {
    2b84:	1e 02 78    	mov.w     [w14], w4
    2b86:	54 0a 90    	mov.w     [w4+26], w4
    2b88:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2b8a:	31 00 32    	bra       Z, 0x2bee <.L86>

00002b8c <.LSM229>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2b8c:	15 3a 80    	mov.w     0x742, w5
    2b8e:	f4 0b 20    	mov.w     #0xbf, w4
    2b90:	04 83 62    	and.w     w5, w4, w6
    2b92:	64 04 20    	mov.w     #0x46, w4
    2b94:	75 05 20    	mov.w     #0x57, w5
    2b96:	27 74 20    	mov.w     #0x742, w7
    2b98:	84 4b 78    	mov.b     w4, [w7]
    2b9a:	85 4b 78    	mov.b     w5, [w7]
    2b9c:	86 4b 78    	mov.b     w6, [w7]

00002b9e <.LSM230>:
        *(self->TX->rpor) &= ~(0x3F<<(self->TX->rpshift));
    2b9e:	1e 02 78    	mov.w     [w14], w4
    2ba0:	54 0a 90    	mov.w     [w4+26], w4
    2ba2:	74 02 90    	mov.w     [w4+14], w4
    2ba4:	9e 02 78    	mov.w     [w14], w5
    2ba6:	d5 0a 90    	mov.w     [w5+26], w5
    2ba8:	f5 02 90    	mov.w     [w5+14], w5
    2baa:	15 03 78    	mov.w     [w5], w6
    2bac:	9e 02 78    	mov.w     [w14], w5
    2bae:	d5 0a 90    	mov.w     [w5+26], w5
    2bb0:	a5 4a 90    	mov.b     [w5+10], w5
    2bb2:	85 82 fb    	ze        w5, w5
    2bb4:	f7 03 20    	mov.w     #0x3f, w7
    2bb6:	85 3a dd    	sl.w      w7, w5, w5
    2bb8:	85 82 ea    	com.w     w5, w5
    2bba:	85 02 63    	and.w     w6, w5, w5
    2bbc:	05 0a 78    	mov.w     w5, [w4]

00002bbe <.LSM231>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2bbe:	15 3a 80    	mov.w     0x742, w5
    2bc0:	04 04 20    	mov.w     #0x40, w4
    2bc2:	05 03 72    	ior.w     w4, w5, w6
    2bc4:	64 04 20    	mov.w     #0x46, w4
    2bc6:	75 05 20    	mov.w     #0x57, w5
    2bc8:	27 74 20    	mov.w     #0x742, w7
    2bca:	84 4b 78    	mov.b     w4, [w7]
    2bcc:	85 4b 78    	mov.b     w5, [w7]
    2bce:	86 4b 78    	mov.b     w6, [w7]

00002bd0 <.LSM232>:
        self->TX->owner = NULL;
    2bd0:	1e 02 78    	mov.w     [w14], w4
    2bd2:	54 0a 90    	mov.w     [w4+26], w4
    2bd4:	80 02 eb    	clr.w     w5
    2bd6:	05 0a 98    	mov.w     w5, [w4+16]

00002bd8 <.LSM233>:
        pin_digitalOut(self->TX);
    2bd8:	1e 02 78    	mov.w     [w14], w4
    2bda:	54 0a 90    	mov.w     [w4+26], w4
    2bdc:	04 00 78    	mov.w     w4, w0
    2bde:	14 0d 07    	rcall     0x4608 <_pin_digitalOut>

00002be0 <.LSM234>:
        pin_set(self->TX);
    2be0:	1e 02 78    	mov.w     [w14], w4
    2be2:	54 0a 90    	mov.w     [w4+26], w4
    2be4:	04 00 78    	mov.w     w4, w0
    2be6:	6d 0d 07    	rcall     0x46c2 <_pin_set>

00002be8 <.LSM235>:
        self->TX = NULL;
    2be8:	1e 02 78    	mov.w     [w14], w4
    2bea:	80 02 eb    	clr.w     w5
    2bec:	55 0a 98    	mov.w     w5, [w4+26]

00002bee <.L86>:
    }
    if (self->RX) {
    2bee:	1e 02 78    	mov.w     [w14], w4
    2bf0:	64 0a 90    	mov.w     [w4+28], w4
    2bf2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2bf4:	29 00 32    	bra       Z, 0x2c48 <.L87>

00002bf6 <.LSM237>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2bf6:	15 3a 80    	mov.w     0x742, w5
    2bf8:	f4 0b 20    	mov.w     #0xbf, w4
    2bfa:	04 83 62    	and.w     w5, w4, w6
    2bfc:	64 04 20    	mov.w     #0x46, w4
    2bfe:	75 05 20    	mov.w     #0x57, w5
    2c00:	27 74 20    	mov.w     #0x742, w7
    2c02:	84 4b 78    	mov.b     w4, [w7]
    2c04:	85 4b 78    	mov.b     w5, [w7]
    2c06:	86 4b 78    	mov.b     w6, [w7]

00002c08 <.LSM238>:
        *(self->RXrpinr) |= 0x3F<<(self->RXrpshift);
    2c08:	1e 02 78    	mov.w     [w14], w4
    2c0a:	04 0a 90    	mov.w     [w4+16], w4
    2c0c:	9e 02 78    	mov.w     [w14], w5
    2c0e:	85 0a 90    	mov.w     [w5+16], w5
    2c10:	15 03 78    	mov.w     [w5], w6
    2c12:	9e 02 78    	mov.w     [w14], w5
    2c14:	c5 52 90    	mov.b     [w5+20], w5
    2c16:	85 82 fb    	ze        w5, w5
    2c18:	f7 03 20    	mov.w     #0x3f, w7
    2c1a:	85 3a dd    	sl.w      w7, w5, w5
    2c1c:	86 82 72    	ior.w     w5, w6, w5
    2c1e:	05 0a 78    	mov.w     w5, [w4]

00002c20 <.LSM239>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c20:	15 3a 80    	mov.w     0x742, w5
    2c22:	04 04 20    	mov.w     #0x40, w4
    2c24:	05 03 72    	ior.w     w4, w5, w6
    2c26:	64 04 20    	mov.w     #0x46, w4
    2c28:	75 05 20    	mov.w     #0x57, w5
    2c2a:	27 74 20    	mov.w     #0x742, w7
    2c2c:	84 4b 78    	mov.b     w4, [w7]
    2c2e:	85 4b 78    	mov.b     w5, [w7]
    2c30:	86 4b 78    	mov.b     w6, [w7]

00002c32 <.LSM240>:
        self->RX->owner = NULL;
    2c32:	1e 02 78    	mov.w     [w14], w4
    2c34:	64 0a 90    	mov.w     [w4+28], w4
    2c36:	80 02 eb    	clr.w     w5
    2c38:	05 0a 98    	mov.w     w5, [w4+16]

00002c3a <.LSM241>:
        pin_digitalIn(self->RX);
    2c3a:	1e 02 78    	mov.w     [w14], w4
    2c3c:	64 0a 90    	mov.w     [w4+28], w4
    2c3e:	04 00 78    	mov.w     w4, w0
    2c40:	bc 0c 07    	rcall     0x45ba <_pin_digitalIn>

00002c42 <.LSM242>:
        self->RX = NULL;
    2c42:	1e 02 78    	mov.w     [w14], w4
    2c44:	80 02 eb    	clr.w     w5
    2c46:	65 0a 98    	mov.w     w5, [w4+28]

00002c48 <.L87>:
    }
    if (self->RTS) {
    2c48:	1e 02 78    	mov.w     [w14], w4
    2c4a:	74 0a 90    	mov.w     [w4+30], w4
    2c4c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2c4e:	31 00 32    	bra       Z, 0x2cb2 <.L88>

00002c50 <.LSM244>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2c50:	15 3a 80    	mov.w     0x742, w5
    2c52:	f4 0b 20    	mov.w     #0xbf, w4
    2c54:	04 83 62    	and.w     w5, w4, w6
    2c56:	64 04 20    	mov.w     #0x46, w4
    2c58:	75 05 20    	mov.w     #0x57, w5
    2c5a:	27 74 20    	mov.w     #0x742, w7
    2c5c:	84 4b 78    	mov.b     w4, [w7]
    2c5e:	85 4b 78    	mov.b     w5, [w7]
    2c60:	86 4b 78    	mov.b     w6, [w7]

00002c62 <.LSM245>:
        *(self->RTS->rpor) &= ~(0x3F<<(self->RTS->rpshift));
    2c62:	1e 02 78    	mov.w     [w14], w4
    2c64:	74 0a 90    	mov.w     [w4+30], w4
    2c66:	74 02 90    	mov.w     [w4+14], w4
    2c68:	9e 02 78    	mov.w     [w14], w5
    2c6a:	f5 0a 90    	mov.w     [w5+30], w5
    2c6c:	f5 02 90    	mov.w     [w5+14], w5
    2c6e:	15 03 78    	mov.w     [w5], w6
    2c70:	9e 02 78    	mov.w     [w14], w5
    2c72:	f5 0a 90    	mov.w     [w5+30], w5
    2c74:	a5 4a 90    	mov.b     [w5+10], w5
    2c76:	85 82 fb    	ze        w5, w5
    2c78:	f7 03 20    	mov.w     #0x3f, w7
    2c7a:	85 3a dd    	sl.w      w7, w5, w5
    2c7c:	85 82 ea    	com.w     w5, w5
    2c7e:	85 02 63    	and.w     w6, w5, w5
    2c80:	05 0a 78    	mov.w     w5, [w4]

00002c82 <.LSM246>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2c82:	15 3a 80    	mov.w     0x742, w5
    2c84:	04 04 20    	mov.w     #0x40, w4
    2c86:	05 03 72    	ior.w     w4, w5, w6
    2c88:	64 04 20    	mov.w     #0x46, w4
    2c8a:	75 05 20    	mov.w     #0x57, w5
    2c8c:	27 74 20    	mov.w     #0x742, w7
    2c8e:	84 4b 78    	mov.b     w4, [w7]
    2c90:	85 4b 78    	mov.b     w5, [w7]
    2c92:	86 4b 78    	mov.b     w6, [w7]

00002c94 <.LSM247>:
        self->RTS->owner = NULL;
    2c94:	1e 02 78    	mov.w     [w14], w4
    2c96:	74 0a 90    	mov.w     [w4+30], w4
    2c98:	80 02 eb    	clr.w     w5
    2c9a:	05 0a 98    	mov.w     w5, [w4+16]

00002c9c <.LSM248>:
        pin_digitalOut(self->RTS);
    2c9c:	1e 02 78    	mov.w     [w14], w4
    2c9e:	74 0a 90    	mov.w     [w4+30], w4
    2ca0:	04 00 78    	mov.w     w4, w0
    2ca2:	b2 0c 07    	rcall     0x4608 <_pin_digitalOut>

00002ca4 <.LSM249>:
        pin_set(self->RTS);
    2ca4:	1e 02 78    	mov.w     [w14], w4
    2ca6:	74 0a 90    	mov.w     [w4+30], w4
    2ca8:	04 00 78    	mov.w     w4, w0
    2caa:	0b 0d 07    	rcall     0x46c2 <_pin_set>

00002cac <.LSM250>:
        self->RTS = NULL;
    2cac:	1e 02 78    	mov.w     [w14], w4
    2cae:	80 02 eb    	clr.w     w5
    2cb0:	75 0a 98    	mov.w     w5, [w4+30]

00002cb2 <.L88>:
    }
    if (self->CTS) {
    2cb2:	1e 02 78    	mov.w     [w14], w4
    2cb4:	04 12 90    	mov.w     [w4+32], w4
    2cb6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2cb8:	29 00 32    	bra       Z, 0x2d0c <.L85>

00002cba <.LSM252>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2cba:	15 3a 80    	mov.w     0x742, w5
    2cbc:	f4 0b 20    	mov.w     #0xbf, w4
    2cbe:	04 83 62    	and.w     w5, w4, w6
    2cc0:	64 04 20    	mov.w     #0x46, w4
    2cc2:	75 05 20    	mov.w     #0x57, w5
    2cc4:	27 74 20    	mov.w     #0x742, w7
    2cc6:	84 4b 78    	mov.b     w4, [w7]
    2cc8:	85 4b 78    	mov.b     w5, [w7]
    2cca:	86 4b 78    	mov.b     w6, [w7]

00002ccc <.LSM253>:
        *(self->CTSrpinr) |= 0x3F<<(self->CTSrpshift);
    2ccc:	1e 02 78    	mov.w     [w14], w4
    2cce:	14 0a 90    	mov.w     [w4+18], w4
    2cd0:	9e 02 78    	mov.w     [w14], w5
    2cd2:	95 0a 90    	mov.w     [w5+18], w5
    2cd4:	15 03 78    	mov.w     [w5], w6
    2cd6:	9e 02 78    	mov.w     [w14], w5
    2cd8:	d5 52 90    	mov.b     [w5+21], w5
    2cda:	85 82 fb    	ze        w5, w5
    2cdc:	f7 03 20    	mov.w     #0x3f, w7
    2cde:	85 3a dd    	sl.w      w7, w5, w5
    2ce0:	86 82 72    	ior.w     w5, w6, w5
    2ce2:	05 0a 78    	mov.w     w5, [w4]

00002ce4 <.LSM254>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    2ce4:	15 3a 80    	mov.w     0x742, w5
    2ce6:	04 04 20    	mov.w     #0x40, w4
    2ce8:	05 03 72    	ior.w     w4, w5, w6
    2cea:	64 04 20    	mov.w     #0x46, w4
    2cec:	75 05 20    	mov.w     #0x57, w5
    2cee:	27 74 20    	mov.w     #0x742, w7
    2cf0:	84 4b 78    	mov.b     w4, [w7]
    2cf2:	85 4b 78    	mov.b     w5, [w7]
    2cf4:	86 4b 78    	mov.b     w6, [w7]

00002cf6 <.LSM255>:
        self->CTS->owner = NULL;
    2cf6:	1e 02 78    	mov.w     [w14], w4
    2cf8:	04 12 90    	mov.w     [w4+32], w4
    2cfa:	80 02 eb    	clr.w     w5
    2cfc:	05 0a 98    	mov.w     w5, [w4+16]

00002cfe <.LSM256>:
        pin_digitalIn(self->CTS);
    2cfe:	1e 02 78    	mov.w     [w14], w4
    2d00:	04 12 90    	mov.w     [w4+32], w4
    2d02:	04 00 78    	mov.w     w4, w0
    2d04:	5a 0c 07    	rcall     0x45ba <_pin_digitalIn>

00002d06 <.LSM257>:
        self->CTS = NULL;
    2d06:	1e 02 78    	mov.w     [w14], w4
    2d08:	80 02 eb    	clr.w     w5
    2d0a:	05 12 98    	mov.w     w5, [w4+32]

00002d0c <.L85>:
    }
}
    2d0c:	00 80 fa    	ulnk      
    2d0e:	00 00 06    	return    

00002d10 <_uart_putc>:

void uart_putc(_UART *self, uint8_t ch) {
    2d10:	04 00 fa    	lnk       #0x4
    2d12:	00 0f 78    	mov.w     w0, [w14]
    2d14:	21 47 98    	mov.b     w1, [w14+2]

00002d16 <.LSM260>:
    if (self->putc)
    2d16:	1e 02 78    	mov.w     [w14], w4
    2d18:	44 1a 90    	mov.w     [w4+56], w4
    2d1a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2d1c:	05 00 32    	bra       Z, 0x2d28 <.L90>

00002d1e <.LSM261>:
        self->putc(self, ch);
    2d1e:	1e 02 78    	mov.w     [w14], w4
    2d20:	44 1a 90    	mov.w     [w4+56], w4
    2d22:	ae 40 90    	mov.b     [w14+2], w1
    2d24:	1e 00 78    	mov.w     [w14], w0
    2d26:	04 00 01    	call      w4

00002d28 <.L90>:
}
    2d28:	00 80 fa    	ulnk      
    2d2a:	00 00 06    	return    

00002d2c <_uart_getc>:

uint8_t uart_getc(_UART *self) {
    2d2c:	02 00 fa    	lnk       #0x2
    2d2e:	00 0f 78    	mov.w     w0, [w14]

00002d30 <.LSM264>:
    if (self->getc)
    2d30:	1e 02 78    	mov.w     [w14], w4
    2d32:	54 1a 90    	mov.w     [w4+58], w4
    2d34:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2d36:	06 00 32    	bra       Z, 0x2d44 <.L93>

00002d38 <.LSM265>:
        return self->getc(self);
    2d38:	1e 02 78    	mov.w     [w14], w4
    2d3a:	54 1a 90    	mov.w     [w4+58], w4
    2d3c:	1e 00 78    	mov.w     [w14], w0
    2d3e:	04 00 01    	call      w4
    2d40:	00 42 78    	mov.b     w0, w4
    2d42:	01 00 37    	bra       0x2d46 <.L94>

00002d44 <.L93>:
    else
        return 0xFF;
    2d44:	00 c2 eb    	setm.b    w4

00002d46 <.L94>:
}
    2d46:	04 40 78    	mov.b     w4, w0
    2d48:	00 80 fa    	ulnk      
    2d4a:	00 00 06    	return    

00002d4c <_uart_flushTxBuffer>:

void uart_flushTxBuffer(_UART *self) {
    2d4c:	02 00 fa    	lnk       #0x2
    2d4e:	00 0f 78    	mov.w     w0, [w14]

00002d50 <.LSM269>:
    if (bitread(self->UxSTA, 10)==0)    // If transmission is disabled,
    2d50:	1e 02 78    	mov.w     [w14], w4
    2d52:	14 02 90    	mov.w     [w4+2], w4
    2d54:	94 02 78    	mov.w     [w4], w5
    2d56:	04 40 20    	mov.w     #0x400, w4
    2d58:	04 82 62    	and.w     w5, w4, w4
    2d5a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2d5c:	08 00 3a    	bra       NZ, 0x2d6e <.L95>

00002d5e <.LSM270>:
        bitset(self->UxSTA, 10);        //   enable data transmission
    2d5e:	1e 02 78    	mov.w     [w14], w4
    2d60:	14 02 90    	mov.w     [w4+2], w4
    2d62:	9e 02 78    	mov.w     [w14], w5
    2d64:	95 02 90    	mov.w     [w5+2], w5
    2d66:	15 03 78    	mov.w     [w5], w6
    2d68:	05 40 20    	mov.w     #0x400, w5
    2d6a:	86 82 72    	ior.w     w5, w6, w5
    2d6c:	05 0a 78    	mov.w     w5, [w4]

00002d6e <.L95>:
}
    2d6e:	00 80 fa    	ulnk      
    2d70:	00 00 06    	return    

00002d72 <_uart_puts>:

void uart_puts(_UART *self, uint8_t *str) {
    2d72:	04 00 fa    	lnk       #0x4
    2d74:	00 0f 78    	mov.w     w0, [w14]
    2d76:	11 07 98    	mov.w     w1, [w14+2]

00002d78 <.LSM273>:
    while (*str)
    2d78:	08 00 37    	bra       0x2d8a <.L98>

00002d7a <.L99>:
        uart_putc(self, *str++);
    2d7a:	1e 02 90    	mov.w     [w14+2], w4
    2d7c:	14 42 78    	mov.b     [w4], w4
    2d7e:	9e 02 90    	mov.w     [w14+2], w5
    2d80:	85 02 e8    	inc.w     w5, w5
    2d82:	15 07 98    	mov.w     w5, [w14+2]
    2d84:	84 40 78    	mov.b     w4, w1
    2d86:	1e 00 78    	mov.w     [w14], w0
    2d88:	c3 ff 07    	rcall     0x2d10 <_uart_putc>

00002d8a <.L98>:
    2d8a:	1e 02 90    	mov.w     [w14+2], w4
    2d8c:	14 42 78    	mov.b     [w4], w4
    2d8e:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    2d90:	f4 ff 3a    	bra       NZ, 0x2d7a <.L99>

00002d92 <.LSM276>:
    uart_flushTxBuffer(self);
    2d92:	1e 00 78    	mov.w     [w14], w0
    2d94:	db ff 07    	rcall     0x2d4c <_uart_flushTxBuffer>

00002d96 <.LSM277>:
}
    2d96:	00 80 fa    	ulnk      
    2d98:	00 00 06    	return    

00002d9a <_uart_gets>:

void uart_gets(_UART *self, uint8_t *str, uint16_t len) {
    2d9a:	0a 00 fa    	lnk       #0xa
    2d9c:	20 07 98    	mov.w     w0, [w14+4]
    2d9e:	31 07 98    	mov.w     w1, [w14+6]
    2da0:	42 07 98    	mov.w     w2, [w14+8]

00002da2 <.LSM279>:
    uint8_t *start;
    uint16_t left;

    if (len==0)
    2da2:	4e 02 90    	mov.w     [w14+8], w4
    2da4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2da6:	88 00 32    	bra       Z, 0x2eb8 <.L113>

00002da8 <.LSM280>:
        return;

    if (len==1) {
    2da8:	4e 02 90    	mov.w     [w14+8], w4
    2daa:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    2dac:	04 00 3a    	bra       NZ, 0x2db6 <.L103>

00002dae <.LSM281>:
        *str = '\0';
    2dae:	3e 02 90    	mov.w     [w14+6], w4
    2db0:	80 42 eb    	clr.b     w5
    2db2:	05 4a 78    	mov.b     w5, [w4]

00002db4 <.LSM282>:
        return;
    2db4:	82 00 37    	bra       0x2eba <.L100>

00002db6 <.L103>:
    }

    uart_putc(self, 0x1B);                  // Save current cursor position
    2db6:	b1 c1 b3    	mov.b     #0x1b, w1
    2db8:	2e 00 90    	mov.w     [w14+4], w0
    2dba:	aa ff 07    	rcall     0x2d10 <_uart_putc>

00002dbc <.LSM284>:
    uart_putc(self, '7');
    2dbc:	71 c3 b3    	mov.b     #0x37, w1
    2dbe:	2e 00 90    	mov.w     [w14+4], w0
    2dc0:	a7 ff 07    	rcall     0x2d10 <_uart_putc>

00002dc2 <.LSM285>:
    uart_flushTxBuffer(self);
    2dc2:	2e 00 90    	mov.w     [w14+4], w0
    2dc4:	c3 ff 07    	rcall     0x2d4c <_uart_flushTxBuffer>

00002dc6 <.LSM286>:
    start = str;
    2dc6:	3e 02 90    	mov.w     [w14+6], w4
    2dc8:	14 07 98    	mov.w     w4, [w14+2]

00002dca <.LSM287>:
    left = len;
    2dca:	4e 02 90    	mov.w     [w14+8], w4
    2dcc:	04 0f 78    	mov.w     w4, [w14]
    2dce:	03 00 37    	bra       0x2dd6 <.L112>

00002dd0 <.L114>:
    while (1) {
        *str = uart_getc(self);             // Get a character
        if (*str=='\r')                     // If character is return,
            break;                          //   end the loop.
        if (*str==0x1B) {                   // If character is escape,
            uart_putc(self, 0x1B);          //   restore cursor position,
            uart_putc(self, '8');
            uart_putc(self, 0x1B);          //   clear to end of line, and
            uart_putc(self, '[');
            uart_putc(self, 'K');
            uart_flushTxBuffer(self);
            str = start;                    //   start over at the beginning.
            left = len;
            continue;
        }
        if ((*str=='\b') ||                 // If character is backspace
            (*str==0x7F)) {                 //   or delete, 
            if (str>start) {                //   and we are not at the start, 
                uart_putc(self, '\b');      //   erase the last character and
                uart_putc(self, ' ');
                uart_putc(self, '\b');
                uart_flushTxBuffer(self);
                str--;                      //   back up the pointer,
                left++;
            } else {                        //   otherwise
                uart_putc(self, '\a');      //   send alert/bell character.
                uart_flushTxBuffer(self);
            }
            continue;
        }
        if (left==1) {                      // If string buffer is full,
            uart_putc(self, '\a');          //   send alert/bell character
            uart_flushTxBuffer(self);
            continue;
        }
        if ((*str>=32) && (*str<127)) {     // If character is printable,
            uart_putc(self, *str);          //   echo the received character
            uart_flushTxBuffer(self);
            str++;                          //   and advance the pointer.
            left--;
        }
    }
    2dd0:	00 00 00    	nop       
    2dd2:	01 00 37    	bra       0x2dd6 <.L112>

00002dd4 <.L115>:
    2dd4:	00 00 00    	nop       

00002dd6 <.L112>:
    2dd6:	2e 00 90    	mov.w     [w14+4], w0
    2dd8:	a9 ff 07    	rcall     0x2d2c <_uart_getc>
    2dda:	00 42 78    	mov.b     w0, w4
    2ddc:	be 02 90    	mov.w     [w14+6], w5
    2dde:	84 4a 78    	mov.b     w4, [w5]

00002de0 <.LSM290>:
    2de0:	3e 02 90    	mov.w     [w14+6], w4
    2de2:	14 42 78    	mov.b     [w4], w4
    2de4:	ed 4f 52    	sub.b     w4, #0xd, [w15]
    2de6:	0c 00 3a    	bra       NZ, 0x2e00 <.L104>

00002de8 <.LSM291>:
    *str = '\0';                            // Terminarte the string with null
    2de8:	3e 02 90    	mov.w     [w14+6], w4
    2dea:	80 42 eb    	clr.b     w5
    2dec:	05 4a 78    	mov.b     w5, [w4]

00002dee <.LSM292>:
    uart_putc(self, '\n');                  // Send newline and
    2dee:	a1 c0 b3    	mov.b     #0xa, w1
    2df0:	2e 00 90    	mov.w     [w14+4], w0
    2df2:	8e ff 07    	rcall     0x2d10 <_uart_putc>

00002df4 <.LSM293>:
    uart_putc(self, '\r');                  //   carriage return
    2df4:	d1 c0 b3    	mov.b     #0xd, w1
    2df6:	2e 00 90    	mov.w     [w14+4], w0
    2df8:	8b ff 07    	rcall     0x2d10 <_uart_putc>

00002dfa <.LSM294>:
    uart_flushTxBuffer(self);
    2dfa:	2e 00 90    	mov.w     [w14+4], w0
    2dfc:	a7 ff 07    	rcall     0x2d4c <_uart_flushTxBuffer>
    2dfe:	5d 00 37    	bra       0x2eba <.L100>

00002e00 <.L104>:
    2e00:	3e 02 90    	mov.w     [w14+6], w4
    2e02:	14 42 78    	mov.b     [w4], w4
    2e04:	fb 4f 52    	sub.b     w4, #0x1b, [w15]
    2e06:	16 00 3a    	bra       NZ, 0x2e34 <.L105>

00002e08 <.LSM296>:
    2e08:	b1 c1 b3    	mov.b     #0x1b, w1
    2e0a:	2e 00 90    	mov.w     [w14+4], w0
    2e0c:	81 ff 07    	rcall     0x2d10 <_uart_putc>

00002e0e <.LSM297>:
    2e0e:	81 c3 b3    	mov.b     #0x38, w1
    2e10:	2e 00 90    	mov.w     [w14+4], w0
    2e12:	7e ff 07    	rcall     0x2d10 <_uart_putc>

00002e14 <.LSM298>:
    2e14:	b1 c1 b3    	mov.b     #0x1b, w1
    2e16:	2e 00 90    	mov.w     [w14+4], w0
    2e18:	7b ff 07    	rcall     0x2d10 <_uart_putc>

00002e1a <.LSM299>:
    2e1a:	b1 c5 b3    	mov.b     #0x5b, w1
    2e1c:	2e 00 90    	mov.w     [w14+4], w0
    2e1e:	78 ff 07    	rcall     0x2d10 <_uart_putc>

00002e20 <.LSM300>:
    2e20:	b1 c4 b3    	mov.b     #0x4b, w1
    2e22:	2e 00 90    	mov.w     [w14+4], w0
    2e24:	75 ff 07    	rcall     0x2d10 <_uart_putc>

00002e26 <.LSM301>:
    2e26:	2e 00 90    	mov.w     [w14+4], w0
    2e28:	91 ff 07    	rcall     0x2d4c <_uart_flushTxBuffer>

00002e2a <.LSM302>:
    2e2a:	1e 02 90    	mov.w     [w14+2], w4
    2e2c:	34 07 98    	mov.w     w4, [w14+6]

00002e2e <.LSM303>:
    2e2e:	4e 02 90    	mov.w     [w14+8], w4
    2e30:	04 0f 78    	mov.w     w4, [w14]

00002e32 <.LSM304>:
    2e32:	41 00 37    	bra       0x2eb6 <.L106>

00002e34 <.L105>:
    2e34:	3e 02 90    	mov.w     [w14+6], w4
    2e36:	14 42 78    	mov.b     [w4], w4
    2e38:	e8 4f 52    	sub.b     w4, #0x8, [w15]
    2e3a:	05 00 32    	bra       Z, 0x2e46 <.L107>

00002e3c <.LSM306>:
    2e3c:	3e 02 90    	mov.w     [w14+6], w4
    2e3e:	94 42 78    	mov.b     [w4], w5

00002e40 <.LSM307>:
    2e40:	f4 c7 b3    	mov.b     #0x7f, w4
    2e42:	84 cf 52    	sub.b     w5, w4, [w15]
    2e44:	1a 00 3a    	bra       NZ, 0x2e7a <.L108>

00002e46 <.L107>:
    2e46:	be 02 90    	mov.w     [w14+6], w5
    2e48:	1e 02 90    	mov.w     [w14+2], w4
    2e4a:	84 8f 52    	sub.w     w5, w4, [w15]
    2e4c:	10 00 36    	bra       LEU, 0x2e6e <.L109>

00002e4e <.LSM309>:
    2e4e:	81 c0 b3    	mov.b     #0x8, w1
    2e50:	2e 00 90    	mov.w     [w14+4], w0
    2e52:	5e ff 07    	rcall     0x2d10 <_uart_putc>

00002e54 <.LSM310>:
    2e54:	01 c2 b3    	mov.b     #0x20, w1
    2e56:	2e 00 90    	mov.w     [w14+4], w0
    2e58:	5b ff 07    	rcall     0x2d10 <_uart_putc>

00002e5a <.LSM311>:
    2e5a:	81 c0 b3    	mov.b     #0x8, w1
    2e5c:	2e 00 90    	mov.w     [w14+4], w0
    2e5e:	58 ff 07    	rcall     0x2d10 <_uart_putc>

00002e60 <.LSM312>:
    2e60:	2e 00 90    	mov.w     [w14+4], w0
    2e62:	74 ff 07    	rcall     0x2d4c <_uart_flushTxBuffer>

00002e64 <.LSM313>:
    2e64:	3e 02 90    	mov.w     [w14+6], w4
    2e66:	04 02 e9    	dec.w     w4, w4
    2e68:	34 07 98    	mov.w     w4, [w14+6]

00002e6a <.LSM314>:
    2e6a:	1e 0f e8    	inc.w     [w14], [w14]
    2e6c:	05 00 37    	bra       0x2e78 <.L110>

00002e6e <.L109>:
    2e6e:	71 c0 b3    	mov.b     #0x7, w1
    2e70:	2e 00 90    	mov.w     [w14+4], w0
    2e72:	4e ff 07    	rcall     0x2d10 <_uart_putc>

00002e74 <.LSM316>:
    2e74:	2e 00 90    	mov.w     [w14+4], w0
    2e76:	6a ff 07    	rcall     0x2d4c <_uart_flushTxBuffer>

00002e78 <.L110>:
    2e78:	1e 00 37    	bra       0x2eb6 <.L106>

00002e7a <.L108>:
    2e7a:	1e 02 78    	mov.w     [w14], w4
    2e7c:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    2e7e:	06 00 3a    	bra       NZ, 0x2e8c <.L111>

00002e80 <.LSM319>:
    2e80:	71 c0 b3    	mov.b     #0x7, w1
    2e82:	2e 00 90    	mov.w     [w14+4], w0
    2e84:	45 ff 07    	rcall     0x2d10 <_uart_putc>

00002e86 <.LSM320>:
    2e86:	2e 00 90    	mov.w     [w14+4], w0
    2e88:	61 ff 07    	rcall     0x2d4c <_uart_flushTxBuffer>

00002e8a <.LSM321>:
    2e8a:	15 00 37    	bra       0x2eb6 <.L106>

00002e8c <.L111>:
    2e8c:	3e 02 90    	mov.w     [w14+6], w4
    2e8e:	14 42 78    	mov.b     [w4], w4
    2e90:	ff 4f 52    	sub.b     w4, #0x1f, [w15]
    2e92:	9e ff 36    	bra       LEU, 0x2dd0 <.L114>
    2e94:	3e 02 90    	mov.w     [w14+6], w4
    2e96:	94 42 78    	mov.b     [w4], w5
    2e98:	e4 c7 b3    	mov.b     #0x7e, w4
    2e9a:	84 cf 52    	sub.b     w5, w4, [w15]
    2e9c:	9b ff 3e    	bra       GTU, 0x2dd4 <.L115>

00002e9e <.LSM323>:
    2e9e:	3e 02 90    	mov.w     [w14+6], w4
    2ea0:	14 42 78    	mov.b     [w4], w4
    2ea2:	84 40 78    	mov.b     w4, w1
    2ea4:	2e 00 90    	mov.w     [w14+4], w0
    2ea6:	34 ff 07    	rcall     0x2d10 <_uart_putc>

00002ea8 <.LSM324>:
    2ea8:	2e 00 90    	mov.w     [w14+4], w0
    2eaa:	50 ff 07    	rcall     0x2d4c <_uart_flushTxBuffer>

00002eac <.LSM325>:
    2eac:	3e 02 90    	mov.w     [w14+6], w4
    2eae:	04 02 e8    	inc.w     w4, w4
    2eb0:	34 07 98    	mov.w     w4, [w14+6]

00002eb2 <.LSM326>:
    2eb2:	1e 0f e9    	dec.w     [w14], [w14]

00002eb4 <.LSM327>:
    2eb4:	90 ff 37    	bra       0x2dd6 <.L112>

00002eb6 <.L106>:
    2eb6:	8f ff 37    	bra       0x2dd6 <.L112>

00002eb8 <.L113>:
    2eb8:	00 00 00    	nop       

00002eba <.L100>:
}
    2eba:	00 80 fa    	ulnk      
    2ebc:	00 00 06    	return    

00002ebe <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    2ebe:	04 00 fa    	lnk       #0x4

00002ec0 <.LSM1>:
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    2ec0:	94 24 a8    	bset.b    0x494, #0x1

00002ec2 <.LSM2>:
    U1ADDR = 0;
    2ec2:	00 02 eb    	clr.w     w4
    2ec4:	b4 24 88    	mov.w     w4, 0x496

00002ec6 <.LSM3>:
    U1EIR = 0xFF;
    2ec6:	f4 0f 20    	mov.w     #0xff, w4
    2ec8:	74 24 88    	mov.w     w4, 0x48e

00002eca <.LSM4>:
    U1CONbits.PPBRST = 0;
    2eca:	94 24 a9    	bclr.b    0x494, #0x1

00002ecc <.LSM5>:
    U1EP = (unsigned int *)&U1EP0;
    2ecc:	a4 4a 20    	mov.w     #0x4aa, w4
    2ece:	14 07 98    	mov.w     w4, [w14+2]

00002ed0 <.LSM6>:
    for (n = 0; n<16; n++)
    2ed0:	00 42 eb    	clr.b     w4
    2ed2:	04 4f 78    	mov.b     w4, [w14]
    2ed4:	08 00 37    	bra       0x2ee6 <.L2>

00002ed6 <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    2ed6:	9e 42 78    	mov.b     [w14], w5
    2ed8:	05 82 fb    	ze        w5, w4
    2eda:	04 02 42    	add.w     w4, w4, w4
    2edc:	9e 02 90    	mov.w     [w14+2], w5
    2ede:	04 82 42    	add.w     w5, w4, w4
    2ee0:	80 02 eb    	clr.w     w5
    2ee2:	05 0a 78    	mov.w     w5, [w4]

00002ee4 <.LSM8>:
    2ee4:	1e 4f e8    	inc.b     [w14], [w14]

00002ee6 <.L2>:
    2ee6:	1e 42 78    	mov.b     [w14], w4
    2ee8:	ef 4f 52    	sub.b     w4, #0xf, [w15]
    2eea:	f5 ff 36    	bra       LEU, 0x2ed6 <.L3>

00002eec <.LSM9>:
    U1EP0 = ENDPT_CONTROL;
    2eec:	d4 00 20    	mov.w     #0xd, w4
    2eee:	54 25 88    	mov.w     w4, 0x4aa

00002ef0 <.LSM10>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2ef0:	04 c4 b3    	mov.b     #0x40, w4
    2ef2:	84 42 78    	mov.b     w4, w5
    2ef4:	06 e0 20    	mov.w     #0xe00, w6
    2ef6:	05 4b 78    	mov.b     w5, [w6]

00002ef8 <.LSM11>:
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    2ef8:	a4 b7 20    	mov.w     #0xb7a, w4
    2efa:	14 70 88    	mov.w     w4, 0xe02

00002efc <.LSM12>:
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    2efc:	84 c8 b3    	mov.b     #0x88, w4
    2efe:	84 42 78    	mov.b     w4, w5
    2f00:	16 e0 20    	mov.w     #0xe01, w6
    2f02:	05 4b 78    	mov.b     w5, [w6]

00002f04 <.LSM13>:
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    2f04:	a4 bb 20    	mov.w     #0xbba, w4
    2f06:	34 70 88    	mov.w     w4, 0xe06

00002f08 <.LSM14>:
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    2f08:	84 c0 b3    	mov.b     #0x8, w4
    2f0a:	84 42 78    	mov.b     w4, w5
    2f0c:	56 e0 20    	mov.w     #0xe05, w6
    2f0e:	05 4b 78    	mov.b     w5, [w6]

00002f10 <.LSM15>:
    U1CNFG1 = 0x00;
    2f10:	00 02 eb    	clr.w     w4
    2f12:	34 25 88    	mov.w     w4, 0x4a6

00002f14 <.LSM16>:
    U1CNFG2 = 0x00;
    2f14:	00 02 eb    	clr.w     w4
    2f16:	44 25 88    	mov.w     w4, 0x4a8

00002f18 <.LSM17>:
    U1BDTP1 = (unsigned int)BD>>8;
    2f18:	04 e0 20    	mov.w     #0xe00, w4
    2f1a:	48 22 de    	lsr.w     w4, #0x8, w4
    2f1c:	c4 24 88    	mov.w     w4, 0x498

00002f1e <.LSM18>:
    U1OTGCONbits.OTGEN = 1;
    2f1e:	86 44 a8    	bset.b    0x486, #0x2

00002f20 <.LSM19>:
    U1OTGCONbits.DPPULUP = 1;
    2f20:	86 e4 a8    	bset.b    0x486, #0x7

00002f22 <.LSM20>:
    U1PWRCbits.USBPWR = 1;
    2f22:	88 04 a8    	bset.b    0x488, #0x0

00002f24 <.LSM21>:
    U1CONbits.PKTDIS = 0;
    2f24:	94 a4 a9    	bclr.b    0x494, #0x5

00002f26 <.LSM22>:
    USB_curr_config = 0x00;
    2f26:	00 42 eb    	clr.b     w4
    2f28:	84 42 78    	mov.b     w4, w5
    2f2a:	36 c1 20    	mov.w     #0xc13, w6
    2f2c:	05 4b 78    	mov.b     w5, [w6]

00002f2e <.LSM23>:
    USB_USWSTAT = 0x00;         // default to powered state
    2f2e:	00 42 eb    	clr.b     w4
    2f30:	84 42 78    	mov.b     w4, w5
    2f32:	66 c1 20    	mov.w     #0xc16, w6
    2f34:	05 4b 78    	mov.b     w5, [w6]

00002f36 <.LSM24>:
    USB_device_status = 0x01;
    2f36:	14 c0 b3    	mov.b     #0x1, w4
    2f38:	84 42 78    	mov.b     w4, w5
    2f3a:	46 c1 20    	mov.w     #0xc14, w6
    2f3c:	05 4b 78    	mov.b     w5, [w6]

00002f3e <.LSM25>:
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    2f3e:	00 c2 eb    	setm.b    w4
    2f40:	84 42 78    	mov.b     w4, w5
    2f42:	66 c0 20    	mov.w     #0xc06, w6
    2f44:	05 4b 78    	mov.b     w5, [w6]

00002f46 <.LSM26>:
    USB_request.setup.bRequest = NO_REQUEST;
    2f46:	00 c2 eb    	setm.b    w4
    2f48:	84 42 78    	mov.b     w4, w5
    2f4a:	76 c0 20    	mov.w     #0xc07, w6
    2f4c:	05 4b 78    	mov.b     w5, [w6]

00002f4e <.LSM27>:
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    2f4e:	00 00 00    	nop       

00002f50 <.L4>:
    2f50:	a5 24 80    	mov.w     0x494, w5
    2f52:	04 04 20    	mov.w     #0x40, w4
    2f54:	04 82 62    	and.w     w5, w4, w4
    2f56:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f58:	fb ff 3a    	bra       NZ, 0x2f50 <.L4>

00002f5a <.LSM28>:
}
    2f5a:	00 80 fa    	ulnk      
    2f5c:	00 00 06    	return    

00002f5e <_ServiceUSB>:

void ServiceUSB(void) {
    2f5e:	06 00 fa    	lnk       #0x6

00002f60 <.LSM30>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    2f60:	54 24 80    	mov.w     0x48a, w4
    2f62:	62 02 62    	and.w     w4, #0x2, w4
    2f64:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f66:	05 00 32    	bra       Z, 0x2f72 <.L6>

00002f68 <.LSM31>:
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    2f68:	f4 0f 20    	mov.w     #0xff, w4
    2f6a:	74 24 88    	mov.w     w4, 0x48e

00002f6c <.LSM32>:
        U1IR = U1IR_UERRIF;     // clear UERRIF
    2f6c:	24 00 20    	mov.w     #0x2, w4
    2f6e:	54 24 88    	mov.w     w4, 0x48a
    2f70:	aa 00 37    	bra       0x30c6 <.L5>

00002f72 <.L6>:
    } else if (U1IRbits.SOFIF) {
    2f72:	54 24 80    	mov.w     0x48a, w4
    2f74:	64 02 62    	and.w     w4, #0x4, w4
    2f76:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f78:	03 00 32    	bra       Z, 0x2f80 <.L8>

00002f7a <.LSM34>:
        U1IR = U1IR_SOFIF;      // clear SOFIF
    2f7a:	44 00 20    	mov.w     #0x4, w4
    2f7c:	54 24 88    	mov.w     w4, 0x48a
    2f7e:	a3 00 37    	bra       0x30c6 <.L5>

00002f80 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    2f80:	54 24 80    	mov.w     0x48a, w4
    2f82:	70 02 62    	and.w     w4, #0x10, w4
    2f84:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f86:	03 00 32    	bra       Z, 0x2f8e <.L9>

00002f88 <.LSM36>:
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    2f88:	04 01 20    	mov.w     #0x10, w4
    2f8a:	54 24 88    	mov.w     w4, 0x48a
    2f8c:	9c 00 37    	bra       0x30c6 <.L5>

00002f8e <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    2f8e:	55 24 80    	mov.w     0x48a, w5
    2f90:	04 02 20    	mov.w     #0x20, w4
    2f92:	04 82 62    	and.w     w5, w4, w4
    2f94:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2f96:	03 00 32    	bra       Z, 0x2f9e <.L10>

00002f98 <.LSM38>:
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    2f98:	04 02 20    	mov.w     #0x20, w4
    2f9a:	54 24 88    	mov.w     w4, 0x48a
    2f9c:	94 00 37    	bra       0x30c6 <.L5>

00002f9e <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    2f9e:	55 24 80    	mov.w     0x48a, w5
    2fa0:	04 08 20    	mov.w     #0x80, w4
    2fa2:	04 82 62    	and.w     w5, w4, w4
    2fa4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2fa6:	03 00 32    	bra       Z, 0x2fae <.L11>

00002fa8 <.LSM40>:
        U1IR = U1IR_STALLIF;    // clear STALLIF
    2fa8:	04 08 20    	mov.w     #0x80, w4
    2faa:	54 24 88    	mov.w     w4, 0x48a
    2fac:	8c 00 37    	bra       0x30c6 <.L5>

00002fae <.L11>:
    } else if (U1IRbits.URSTIF) {
    2fae:	54 24 80    	mov.w     0x48a, w4
    2fb0:	61 02 62    	and.w     w4, #0x1, w4
    2fb2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2fb4:	40 00 32    	bra       Z, 0x3036 <.L12>

00002fb6 <.LSM42>:
        USB_curr_config = 0x00;
    2fb6:	00 42 eb    	clr.b     w4
    2fb8:	04 43 78    	mov.b     w4, w6
    2fba:	35 c1 20    	mov.w     #0xc13, w5
    2fbc:	86 4a 78    	mov.b     w6, [w5]

00002fbe <.LSM43>:
        while (U1IRbits.TRNIF) {
    2fbe:	08 00 37    	bra       0x2fd0 <.L13>

00002fc0 <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    2fc0:	84 00 20    	mov.w     #0x8, w4
    2fc2:	54 24 88    	mov.w     w4, 0x48a

00002fc4 <.LSM45>:
            __builtin_nop();    // wait for six instruction cycles...
    2fc4:	00 00 00    	nop       

00002fc6 <.LSM46>:
            __builtin_nop();
    2fc6:	00 00 00    	nop       

00002fc8 <.LSM47>:
            __builtin_nop();
    2fc8:	00 00 00    	nop       

00002fca <.LSM48>:
            __builtin_nop();
    2fca:	00 00 00    	nop       

00002fcc <.LSM49>:
            __builtin_nop();
    2fcc:	00 00 00    	nop       

00002fce <.LSM50>:
            __builtin_nop();    // ...to allow a pending TRNIF to appear
    2fce:	00 00 00    	nop       

00002fd0 <.L13>:
    2fd0:	54 24 80    	mov.w     0x48a, w4
    2fd2:	68 02 62    	and.w     w4, #0x8, w4
    2fd4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    2fd6:	f4 ff 3a    	bra       NZ, 0x2fc0 <.L14>

00002fd8 <.LSM52>:
        }
        U1EP = (unsigned int *)&U1EP0;
    2fd8:	a4 4a 20    	mov.w     #0x4aa, w4
    2fda:	14 07 98    	mov.w     w4, [w14+2]

00002fdc <.LSM53>:
        for (n = 0; n<16; n++)
    2fdc:	00 42 eb    	clr.b     w4
    2fde:	04 4f 78    	mov.b     w4, [w14]
    2fe0:	08 00 37    	bra       0x2ff2 <.L15>

00002fe2 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    2fe2:	9e 42 78    	mov.b     [w14], w5
    2fe4:	05 82 fb    	ze        w5, w4
    2fe6:	04 02 42    	add.w     w4, w4, w4
    2fe8:	9e 02 90    	mov.w     [w14+2], w5
    2fea:	04 82 42    	add.w     w5, w4, w4
    2fec:	80 02 eb    	clr.w     w5
    2fee:	05 0a 78    	mov.w     w5, [w4]

00002ff0 <.LSM55>:
    2ff0:	1e 4f e8    	inc.b     [w14], [w14]

00002ff2 <.L15>:
    2ff2:	1e 42 78    	mov.b     [w14], w4
    2ff4:	ef 4f 52    	sub.b     w4, #0xf, [w15]
    2ff6:	f5 ff 36    	bra       LEU, 0x2fe2 <.L16>

00002ff8 <.LSM56>:
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    2ff8:	04 c4 b3    	mov.b     #0x40, w4
    2ffa:	84 42 78    	mov.b     w4, w5
    2ffc:	06 e0 20    	mov.w     #0xe00, w6
    2ffe:	05 4b 78    	mov.b     w5, [w6]

00003000 <.LSM57>:
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    3000:	a4 b7 20    	mov.w     #0xb7a, w4
    3002:	14 70 88    	mov.w     w4, 0xe02

00003004 <.LSM58>:
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    3004:	84 c8 b3    	mov.b     #0x88, w4
    3006:	84 42 78    	mov.b     w4, w5
    3008:	16 e0 20    	mov.w     #0xe01, w6
    300a:	05 4b 78    	mov.b     w5, [w6]

0000300c <.LSM59>:
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    300c:	a4 bb 20    	mov.w     #0xbba, w4
    300e:	34 70 88    	mov.w     w4, 0xe06

00003010 <.LSM60>:
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    3010:	84 c0 b3    	mov.b     #0x8, w4
    3012:	84 42 78    	mov.b     w4, w5
    3014:	56 e0 20    	mov.w     #0xe05, w6
    3016:	05 4b 78    	mov.b     w5, [w6]

00003018 <.LSM61>:
        U1ADDR = 0x00;                  // set USB Address to 0
    3018:	00 02 eb    	clr.w     w4
    301a:	b4 24 88    	mov.w     w4, 0x496

0000301c <.LSM62>:
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    301c:	f4 0f 20    	mov.w     #0xff, w4
    301e:	54 24 88    	mov.w     w4, 0x48a

00003020 <.LSM63>:
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    3020:	d4 00 20    	mov.w     #0xd, w4
    3022:	54 25 88    	mov.w     w4, 0x4aa

00003024 <.LSM64>:
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    3024:	14 c0 b3    	mov.b     #0x1, w4
    3026:	84 42 78    	mov.b     w4, w5
    3028:	66 c1 20    	mov.w     #0xc16, w6
    302a:	05 4b 78    	mov.b     w5, [w6]

0000302c <.LSM65>:
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    302c:	14 c0 b3    	mov.b     #0x1, w4
    302e:	84 42 78    	mov.b     w4, w5
    3030:	46 c1 20    	mov.w     #0xc14, w6
    3032:	05 4b 78    	mov.b     w5, [w6]
    3034:	48 00 37    	bra       0x30c6 <.L5>

00003036 <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    3036:	54 24 80    	mov.w     0x48a, w4
    3038:	68 02 62    	and.w     w4, #0x8, w4
    303a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    303c:	44 00 32    	bra       Z, 0x30c6 <.L5>

0000303e <.LSM67>:
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    303e:	94 24 80    	mov.w     0x492, w4
    3040:	43 22 de    	lsr.w     w4, #0x3, w4
    3042:	c2 22 dd    	sl.w      w4, #0x2, w5
    3044:	04 e0 20    	mov.w     #0xe00, w4
    3046:	04 82 42    	add.w     w5, w4, w4
    3048:	24 07 98    	mov.w     w4, [w14+4]

0000304a <.LSM68>:
        USB_buffer_desc.status = buf_desc_ptr->status;
    304a:	2e 02 90    	mov.w     [w14+4], w4
    304c:	14 42 90    	mov.b     [w4+1], w4
    304e:	84 42 78    	mov.b     w4, w5
    3050:	b6 bf 20    	mov.w     #0xbfb, w6
    3052:	05 4b 78    	mov.b     w5, [w6]

00003054 <.LSM69>:
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    3054:	2e 02 90    	mov.w     [w14+4], w4
    3056:	14 42 78    	mov.b     [w4], w4
    3058:	84 42 78    	mov.b     w4, w5
    305a:	a6 bf 20    	mov.w     #0xbfa, w6
    305c:	05 4b 78    	mov.b     w5, [w6]

0000305e <.LSM70>:
        USB_buffer_desc.address = buf_desc_ptr->address;
    305e:	2e 02 90    	mov.w     [w14+4], w4
    3060:	14 02 90    	mov.w     [w4+2], w4
    3062:	e4 5f 88    	mov.w     w4, 0xbfc

00003064 <.LSM71>:
        USB_USTAT = U1STAT;             // save the USB status register
    3064:	94 24 80    	mov.w     0x492, w4
    3066:	04 42 78    	mov.b     w4, w4
    3068:	84 42 78    	mov.b     w4, w5
    306a:	56 c1 20    	mov.w     #0xc15, w6
    306c:	05 4b 78    	mov.b     w5, [w6]

0000306e <.LSM72>:
        U1IR = U1IR_TRNIF;              // clear TRNIF
    306e:	84 00 20    	mov.w     #0x8, w4
    3070:	54 24 88    	mov.w     w4, 0x48a

00003072 <.LSM73>:
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    3072:	00 42 eb    	clr.b     w4
    3074:	84 42 78    	mov.b     w4, w5
    3076:	26 c1 20    	mov.w     #0xc12, w6
    3078:	05 4b 78    	mov.b     w5, [w6]

0000307a <.LSM74>:
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    307a:	b4 bf 20    	mov.w     #0xbfb, w4
    307c:	14 42 78    	mov.b     [w4], w4
    307e:	84 82 fb    	ze        w4, w5
    3080:	c4 03 20    	mov.w     #0x3c, w4
    3082:	04 82 62    	and.w     w5, w4, w4
    3084:	45 02 20    	mov.w     #0x24, w5
    3086:	85 0f 52    	sub.w     w4, w5, [w15]
    3088:	08 00 32    	bra       Z, 0x309a <.L19>
    308a:	45 03 20    	mov.w     #0x34, w5
    308c:	85 0f 52    	sub.w     w4, w5, [w15]
    308e:	03 00 32    	bra       Z, 0x3096 <.L20>
    3090:	e4 0f 52    	sub.w     w4, #0x4, [w15]
    3092:	05 00 32    	bra       Z, 0x309e <.L18>
    3094:	05 00 37    	bra       0x30a0 <.L17>

00003096 <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    3096:	19 00 07    	rcall     0x30ca <_ProcessSetupToken>

00003098 <.LSM76>:
                break;
    3098:	03 00 37    	bra       0x30a0 <.L17>

0000309a <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    309a:	5c 03 07    	rcall     0x3754 <_ProcessInToken>

0000309c <.LSM78>:
                break;
    309c:	01 00 37    	bra       0x30a0 <.L17>

0000309e <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    309e:	93 03 07    	rcall     0x37c6 <_ProcessOutToken>

000030a0 <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    30a0:	24 c1 20    	mov.w     #0xc12, w4
    30a2:	14 42 78    	mov.b     [w4], w4
    30a4:	04 82 fb    	ze        w4, w4
    30a6:	61 02 62    	and.w     w4, #0x1, w4
    30a8:	04 42 78    	mov.b     w4, w4
    30aa:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    30ac:	0c 00 32    	bra       Z, 0x30c6 <.L5>

000030ae <.LSM81>:
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    30ae:	04 c4 b3    	mov.b     #0x40, w4
    30b0:	84 42 78    	mov.b     w4, w5
    30b2:	06 e0 20    	mov.w     #0xe00, w6
    30b4:	05 4b 78    	mov.b     w5, [w6]

000030b6 <.LSM82>:
            BD[EP0IN].status = 0x84;
    30b6:	44 c8 b3    	mov.b     #0x84, w4
    30b8:	84 42 78    	mov.b     w4, w5
    30ba:	56 e0 20    	mov.w     #0xe05, w6
    30bc:	05 4b 78    	mov.b     w5, [w6]

000030be <.LSM83>:
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    30be:	44 c8 b3    	mov.b     #0x84, w4
    30c0:	84 42 78    	mov.b     w4, w5
    30c2:	16 e0 20    	mov.w     #0xe01, w6
    30c4:	05 4b 78    	mov.b     w5, [w6]

000030c6 <.L5>:
        }
    }
}
    30c6:	00 80 fa    	ulnk      
    30c8:	00 00 06    	return    

000030ca <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    30ca:	02 00 fa    	lnk       #0x2

000030cc <.LSM86>:
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    30cc:	e4 5f 80    	mov.w     0xbfc, w4
    30ce:	04 0f 78    	mov.w     w4, [w14]

000030d0 <.LSM87>:
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    30d0:	1e 02 78    	mov.w     [w14], w4
    30d2:	94 42 78    	mov.b     [w4], w5
    30d4:	e4 bf 20    	mov.w     #0xbfe, w4
    30d6:	05 4a 78    	mov.b     w5, [w4]
    30d8:	1e 0f e8    	inc.w     [w14], [w14]

000030da <.LSM88>:
    USB_setup.bRequest = *buf_ptr++;
    30da:	1e 02 78    	mov.w     [w14], w4
    30dc:	94 42 78    	mov.b     [w4], w5
    30de:	e4 bf 20    	mov.w     #0xbfe, w4
    30e0:	15 42 98    	mov.b     w5, [w4+1]
    30e2:	1e 0f e8    	inc.w     [w14], [w14]

000030e4 <.LSM89>:
    USB_setup.wValue.b[0] = *buf_ptr++;
    30e4:	1e 02 78    	mov.w     [w14], w4
    30e6:	94 42 78    	mov.b     [w4], w5
    30e8:	e4 bf 20    	mov.w     #0xbfe, w4
    30ea:	25 42 98    	mov.b     w5, [w4+2]
    30ec:	1e 0f e8    	inc.w     [w14], [w14]

000030ee <.LSM90>:
    USB_setup.wValue.b[1] = *buf_ptr++;
    30ee:	1e 02 78    	mov.w     [w14], w4
    30f0:	94 42 78    	mov.b     [w4], w5
    30f2:	e4 bf 20    	mov.w     #0xbfe, w4
    30f4:	35 42 98    	mov.b     w5, [w4+3]
    30f6:	1e 0f e8    	inc.w     [w14], [w14]

000030f8 <.LSM91>:
    USB_setup.wIndex.b[0] = *buf_ptr++;
    30f8:	1e 02 78    	mov.w     [w14], w4
    30fa:	94 42 78    	mov.b     [w4], w5
    30fc:	e4 bf 20    	mov.w     #0xbfe, w4
    30fe:	45 42 98    	mov.b     w5, [w4+4]
    3100:	1e 0f e8    	inc.w     [w14], [w14]

00003102 <.LSM92>:
    USB_setup.wIndex.b[1] = *buf_ptr++;
    3102:	1e 02 78    	mov.w     [w14], w4
    3104:	94 42 78    	mov.b     [w4], w5
    3106:	e4 bf 20    	mov.w     #0xbfe, w4
    3108:	55 42 98    	mov.b     w5, [w4+5]
    310a:	1e 0f e8    	inc.w     [w14], [w14]

0000310c <.LSM93>:
    USB_setup.wLength.b[0] = *buf_ptr++;
    310c:	1e 02 78    	mov.w     [w14], w4
    310e:	94 42 78    	mov.b     [w4], w5
    3110:	e4 bf 20    	mov.w     #0xbfe, w4
    3112:	65 42 98    	mov.b     w5, [w4+6]
    3114:	1e 0f e8    	inc.w     [w14], [w14]

00003116 <.LSM94>:
    USB_setup.wLength.b[1] = *buf_ptr++;
    3116:	1e 02 78    	mov.w     [w14], w4
    3118:	94 42 78    	mov.b     [w4], w5
    311a:	e4 bf 20    	mov.w     #0xbfe, w4
    311c:	75 42 98    	mov.b     w5, [w4+7]
    311e:	1e 0f e8    	inc.w     [w14], [w14]

00003120 <.LSM95>:
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    3120:	04 c4 b3    	mov.b     #0x40, w4
    3122:	04 43 78    	mov.b     w4, w6
    3124:	05 e0 20    	mov.w     #0xe00, w5
    3126:	86 4a 78    	mov.b     w6, [w5]

00003128 <.LSM96>:
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    3128:	84 c0 b3    	mov.b     #0x8, w4
    312a:	04 43 78    	mov.b     w4, w6
    312c:	55 e0 20    	mov.w     #0xe05, w5
    312e:	86 4a 78    	mov.b     w6, [w5]

00003130 <.LSM97>:
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    3130:	e4 bf 20    	mov.w     #0xbfe, w4
    3132:	14 42 78    	mov.b     [w4], w4
    3134:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    3136:	06 00 35    	bra       LT, 0x3144 <.L22>
    3138:	e4 bf 20    	mov.w     #0xbfe, w4
    313a:	34 02 90    	mov.w     [w4+6], w4
    313c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    313e:	02 00 32    	bra       Z, 0x3144 <.L22>
    3140:	84 cc b3    	mov.b     #0xc8, w4
    3142:	01 00 37    	bra       0x3146 <.L23>

00003144 <.L22>:
    3144:	84 c8 b3    	mov.b     #0x88, w4

00003146 <.L23>:
    3146:	04 43 78    	mov.b     w4, w6
    3148:	15 e0 20    	mov.w     #0xe01, w5
    314a:	86 4a 78    	mov.b     w6, [w5]

0000314c <.LSM98>:
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    314c:	94 a4 a9    	bclr.b    0x494, #0x5

0000314e <.LSM99>:
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    314e:	00 c2 eb    	setm.b    w4
    3150:	04 43 78    	mov.b     w4, w6
    3152:	65 c0 20    	mov.w     #0xc06, w5
    3154:	86 4a 78    	mov.b     w6, [w5]

00003156 <.LSM100>:
    USB_request.setup.bRequest = NO_REQUEST;
    3156:	00 c2 eb    	setm.b    w4
    3158:	04 43 78    	mov.b     w4, w6
    315a:	75 c0 20    	mov.w     #0xc07, w5
    315c:	86 4a 78    	mov.b     w6, [w5]

0000315e <.LSM101>:
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    315e:	e4 bf 20    	mov.w     #0xbfe, w4
    3160:	14 42 78    	mov.b     [w4], w4
    3162:	84 82 fb    	ze        w4, w5
    3164:	04 06 20    	mov.w     #0x60, w4
    3166:	04 82 62    	and.w     w5, w4, w4
    3168:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    316a:	04 00 32    	bra       Z, 0x3174 <.L25>
    316c:	05 04 20    	mov.w     #0x40, w5
    316e:	85 0f 52    	sub.w     w4, w5, [w15]
    3170:	03 00 32    	bra       Z, 0x3178 <.L26>
    3172:	04 00 37    	bra       0x317c <.L28>

00003174 <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    3174:	0b 00 07    	rcall     0x318c <_StandardRequests>

00003176 <.LSM103>:
            break;
    3176:	08 00 37    	bra       0x3188 <.L21>

00003178 <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    3178:	90 0c 07    	rcall     0x4a9a <_VendorRequests>

0000317a <.LSM105>:
            break;
    317a:	06 00 37    	bra       0x3188 <.L21>

0000317c <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    317c:	24 c1 20    	mov.w     #0xc12, w4
    317e:	14 42 78    	mov.b     [w4], w4
    3180:	04 04 a0    	bset.b    w4, #0x0
    3182:	04 43 78    	mov.b     w4, w6
    3184:	25 c1 20    	mov.w     #0xc12, w5
    3186:	86 4a 78    	mov.b     w6, [w5]

00003188 <.L21>:
    }
}
    3188:	00 80 fa    	ulnk      
    318a:	00 00 06    	return    

0000318c <_StandardRequests>:

void StandardRequests(void) {
    318c:	06 00 fa    	lnk       #0x6

0000318e <.LSM109>:
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    318e:	e4 bf 20    	mov.w     #0xbfe, w4
    3190:	14 42 90    	mov.b     [w4+1], w4
    3192:	04 82 fb    	ze        w4, w4
    3194:	cf a2 de    	asr.w     w4, #0xf, w5
    3196:	b6 00 20    	mov.w     #0xb, w6
    3198:	07 00 20    	mov.w     #0x0, w7
    319a:	86 0f 52    	sub.w     w4, w6, [w15]
    319c:	87 8f 5a    	subb.w    w5, w7, [w15]
    319e:	d2 02 3e    	bra       GTU, 0x3744 <.L30>
    31a0:	04 60 01    	bra       w4
    31a2:	0b 00 37    	bra       0x31ba <.L31>
    31a4:	d1 00 37    	bra       0x3348 <.L32>
    31a6:	ce 02 37    	bra       0x3744 <.L30>
    31a8:	cf 00 37    	bra       0x3348 <.L32>
    31aa:	cc 02 37    	bra       0x3744 <.L30>
    31ac:	85 01 37    	bra       0x34b8 <.L33>
    31ae:	ab 01 37    	bra       0x3506 <.L34>
    31b0:	c9 02 37    	bra       0x3744 <.L30>
    31b2:	33 02 37    	bra       0x361a <.L35>
    31b4:	3f 02 37    	bra       0x3634 <.L36>
    31b6:	75 02 37    	bra       0x36a2 <.L37>
    31b8:	98 02 37    	bra       0x36ea <.L38>

000031ba <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    31ba:	e4 bf 20    	mov.w     #0xbfe, w4
    31bc:	14 42 78    	mov.b     [w4], w4
    31be:	04 82 fb    	ze        w4, w4
    31c0:	7f 02 62    	and.w     w4, #0x1f, w4
    31c2:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    31c4:	15 00 32    	bra       Z, 0x31f0 <.L42>
    31c6:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    31c8:	3d 00 32    	bra       Z, 0x3244 <.L43>
    31ca:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    31cc:	b5 00 3a    	bra       NZ, 0x3338 <.L126>

000031ce <.LSM111>:
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    31ce:	34 70 80    	mov.w     0xe06, w4
    31d0:	45 c1 20    	mov.w     #0xc14, w5
    31d2:	95 42 78    	mov.b     [w5], w5
    31d4:	05 4a 78    	mov.b     w5, [w4]

000031d6 <.LSM112>:
                    BD[EP0IN].address[1] = 0x00;
    31d6:	34 70 80    	mov.w     0xe06, w4
    31d8:	04 02 e8    	inc.w     w4, w4
    31da:	80 42 eb    	clr.b     w5
    31dc:	05 4a 78    	mov.b     w5, [w4]

000031de <.LSM113>:
                    BD[EP0IN].bytecount = 0x02;
    31de:	24 c0 b3    	mov.b     #0x2, w4
    31e0:	04 43 78    	mov.b     w4, w6
    31e2:	45 e0 20    	mov.w     #0xe04, w5
    31e4:	86 4a 78    	mov.b     w6, [w5]

000031e6 <.LSM114>:
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    31e6:	84 cc b3    	mov.b     #0xc8, w4
    31e8:	04 43 78    	mov.b     w4, w6
    31ea:	55 e0 20    	mov.w     #0xe05, w5
    31ec:	86 4a 78    	mov.b     w6, [w5]

000031ee <.LSM115>:
                    break;
    31ee:	ab 00 37    	bra       0x3346 <.L44>

000031f0 <.L42>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    31f0:	64 c1 20    	mov.w     #0xc16, w4
    31f2:	14 42 78    	mov.b     [w4], w4
    31f4:	04 82 fb    	ze        w4, w4
    31f6:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    31f8:	03 00 32    	bra       Z, 0x3200 <.L46>
    31fa:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    31fc:	08 00 32    	bra       Z, 0x320e <.L47>
    31fe:	21 00 37    	bra       0x3242 <.L45>

00003200 <.L46>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    3200:	24 c1 20    	mov.w     #0xc12, w4
    3202:	14 42 78    	mov.b     [w4], w4
    3204:	04 04 a0    	bset.b    w4, #0x0
    3206:	04 43 78    	mov.b     w4, w6
    3208:	25 c1 20    	mov.w     #0xc12, w5
    320a:	86 4a 78    	mov.b     w6, [w5]

0000320c <.LSM118>:
                            break;
    320c:	1a 00 37    	bra       0x3242 <.L45>

0000320e <.L47>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    320e:	e4 bf 20    	mov.w     #0xbfe, w4
    3210:	44 42 90    	mov.b     [w4+4], w4
    3212:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    3214:	10 00 3a    	bra       NZ, 0x3236 <.L48>

00003216 <.LSM120>:
                                BD[EP0IN].address[0] = 0x00;
    3216:	34 70 80    	mov.w     0xe06, w4
    3218:	80 42 eb    	clr.b     w5
    321a:	05 4a 78    	mov.b     w5, [w4]

0000321c <.LSM121>:
                                BD[EP0IN].address[1] = 0x00;
    321c:	34 70 80    	mov.w     0xe06, w4
    321e:	04 02 e8    	inc.w     w4, w4
    3220:	80 42 eb    	clr.b     w5
    3222:	05 4a 78    	mov.b     w5, [w4]

00003224 <.LSM122>:
                                BD[EP0IN].bytecount = 0x02;
    3224:	24 c0 b3    	mov.b     #0x2, w4
    3226:	04 43 78    	mov.b     w4, w6
    3228:	45 e0 20    	mov.w     #0xe04, w5
    322a:	86 4a 78    	mov.b     w6, [w5]

0000322c <.LSM123>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    322c:	84 cc b3    	mov.b     #0xc8, w4
    322e:	04 43 78    	mov.b     w4, w6
    3230:	55 e0 20    	mov.w     #0xe05, w5
    3232:	86 4a 78    	mov.b     w6, [w5]
    3234:	06 00 37    	bra       0x3242 <.L45>

00003236 <.L48>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3236:	24 c1 20    	mov.w     #0xc12, w4
    3238:	14 42 78    	mov.b     [w4], w4
    323a:	04 04 a0    	bset.b    w4, #0x0
    323c:	04 43 78    	mov.b     w4, w6
    323e:	25 c1 20    	mov.w     #0xc12, w5
    3240:	86 4a 78    	mov.b     w6, [w5]

00003242 <.L45>:
                            }
                    }
                    break;
    3242:	81 00 37    	bra       0x3346 <.L44>

00003244 <.L43>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    3244:	64 c1 20    	mov.w     #0xc16, w4
    3246:	14 42 78    	mov.b     [w4], w4
    3248:	04 82 fb    	ze        w4, w4
    324a:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    324c:	03 00 32    	bra       Z, 0x3254 <.L50>
    324e:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    3250:	2e 00 32    	bra       Z, 0x32ae <.L51>
    3252:	6b 00 37    	bra       0x332a <.L127>

00003254 <.L50>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    3254:	e4 bf 20    	mov.w     #0xbfe, w4
    3256:	44 42 90    	mov.b     [w4+4], w4
    3258:	04 82 fb    	ze        w4, w4
    325a:	6f 02 62    	and.w     w4, #0xf, w4
    325c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    325e:	20 00 3a    	bra       NZ, 0x32a0 <.L52>

00003260 <.LSM128>:
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    3260:	35 70 80    	mov.w     0xe06, w5
    3262:	e4 bf 20    	mov.w     #0xbfe, w4
    3264:	44 42 90    	mov.b     [w4+4], w4
    3266:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    3268:	07 00 3d    	bra       GE, 0x3278 <.L53>
    326a:	54 e0 20    	mov.w     #0xe05, w4
    326c:	14 42 78    	mov.b     [w4], w4
    326e:	04 82 fb    	ze        w4, w4
    3270:	64 02 62    	and.w     w4, #0x4, w4
    3272:	42 a2 de    	asr.w     w4, #0x2, w4
    3274:	04 42 78    	mov.b     w4, w4
    3276:	06 00 37    	bra       0x3284 <.L54>

00003278 <.L53>:
    3278:	14 e0 20    	mov.w     #0xe01, w4
    327a:	14 42 78    	mov.b     [w4], w4
    327c:	04 82 fb    	ze        w4, w4
    327e:	64 02 62    	and.w     w4, #0x4, w4
    3280:	42 a2 de    	asr.w     w4, #0x2, w4
    3282:	04 42 78    	mov.b     w4, w4

00003284 <.L54>:
    3284:	84 4a 78    	mov.b     w4, [w5]

00003286 <.LSM129>:
                                BD[EP0IN].address[1] = 0x00;
    3286:	34 70 80    	mov.w     0xe06, w4
    3288:	04 02 e8    	inc.w     w4, w4
    328a:	80 42 eb    	clr.b     w5
    328c:	05 4a 78    	mov.b     w5, [w4]

0000328e <.LSM130>:
                                BD[EP0IN].bytecount = 0x02;
    328e:	24 c0 b3    	mov.b     #0x2, w4
    3290:	04 43 78    	mov.b     w4, w6
    3292:	45 e0 20    	mov.w     #0xe04, w5
    3294:	86 4a 78    	mov.b     w6, [w5]

00003296 <.LSM131>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3296:	84 cc b3    	mov.b     #0xc8, w4
    3298:	04 43 78    	mov.b     w4, w6
    329a:	55 e0 20    	mov.w     #0xe05, w5
    329c:	86 4a 78    	mov.b     w6, [w5]
    329e:	06 00 37    	bra       0x32ac <.L55>

000032a0 <.L52>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    32a0:	24 c1 20    	mov.w     #0xc12, w4
    32a2:	14 42 78    	mov.b     [w4], w4
    32a4:	04 04 a0    	bset.b    w4, #0x0
    32a6:	04 43 78    	mov.b     w4, w6
    32a8:	25 c1 20    	mov.w     #0xc12, w5
    32aa:	86 4a 78    	mov.b     w6, [w5]

000032ac <.L55>:
                            }
                            break;
    32ac:	44 00 37    	bra       0x3336 <.L56>

000032ae <.L51>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    32ae:	a4 4a 20    	mov.w     #0x4aa, w4
    32b0:	14 07 98    	mov.w     w4, [w14+2]

000032b2 <.LSM135>:
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    32b2:	e4 bf 20    	mov.w     #0xbfe, w4
    32b4:	44 42 90    	mov.b     [w4+4], w4
    32b6:	6f 4f 62    	and.b     w4, #0xf, [w14]

000032b8 <.LSM136>:
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    32b8:	9e 42 78    	mov.b     [w14], w5
    32ba:	05 82 fb    	ze        w5, w4
    32bc:	04 02 42    	add.w     w4, w4, w4
    32be:	84 02 78    	mov.w     w4, w5
    32c0:	e4 bf 20    	mov.w     #0xbfe, w4
    32c2:	44 42 90    	mov.b     [w4+4], w4
    32c4:	04 02 fb    	se        w4, w4
    32c6:	4f 22 de    	lsr.w     w4, #0xf, w4
    32c8:	05 02 72    	ior.w     w4, w5, w4
    32ca:	c2 22 dd    	sl.w      w4, #0x2, w5
    32cc:	04 e0 20    	mov.w     #0xe00, w4
    32ce:	04 82 42    	add.w     w5, w4, w4
    32d0:	24 07 98    	mov.w     w4, [w14+4]

000032d2 <.LSM137>:
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    32d2:	1e 43 78    	mov.b     [w14], w6
    32d4:	06 82 fb    	ze        w6, w4
    32d6:	04 02 42    	add.w     w4, w4, w4
    32d8:	9e 02 90    	mov.w     [w14+2], w5
    32da:	04 82 42    	add.w     w5, w4, w4
    32dc:	94 02 78    	mov.w     [w4], w5
    32de:	e4 bf 20    	mov.w     #0xbfe, w4
    32e0:	44 42 90    	mov.b     [w4+4], w4
    32e2:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    32e4:	02 00 3d    	bra       GE, 0x32ea <.L57>
    32e6:	44 00 20    	mov.w     #0x4, w4
    32e8:	01 00 37    	bra       0x32ec <.L58>

000032ea <.L57>:
    32ea:	84 00 20    	mov.w     #0x8, w4

000032ec <.L58>:
    32ec:	04 82 62    	and.w     w5, w4, w4
    32ee:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    32f0:	15 00 32    	bra       Z, 0x331c <.L59>

000032f2 <.LSM138>:
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    32f2:	34 70 80    	mov.w     0xe06, w4
    32f4:	ae 02 90    	mov.w     [w14+4], w5
    32f6:	95 42 90    	mov.b     [w5+1], w5
    32f8:	85 82 fb    	ze        w5, w5
    32fa:	e4 82 62    	and.w     w5, #0x4, w5
    32fc:	c2 aa de    	asr.w     w5, #0x2, w5
    32fe:	85 42 78    	mov.b     w5, w5
    3300:	05 4a 78    	mov.b     w5, [w4]

00003302 <.LSM139>:
                                BD[EP0IN].address[1] = 0x00;
    3302:	34 70 80    	mov.w     0xe06, w4
    3304:	04 02 e8    	inc.w     w4, w4
    3306:	80 42 eb    	clr.b     w5
    3308:	05 4a 78    	mov.b     w5, [w4]

0000330a <.LSM140>:
                                BD[EP0IN].bytecount = 0x02;
    330a:	24 c0 b3    	mov.b     #0x2, w4
    330c:	04 43 78    	mov.b     w4, w6
    330e:	45 e0 20    	mov.w     #0xe04, w5
    3310:	86 4a 78    	mov.b     w6, [w5]

00003312 <.LSM141>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    3312:	84 cc b3    	mov.b     #0xc8, w4
    3314:	04 43 78    	mov.b     w4, w6
    3316:	55 e0 20    	mov.w     #0xe05, w5
    3318:	86 4a 78    	mov.b     w6, [w5]
    331a:	06 00 37    	bra       0x3328 <.L60>

0000331c <.L59>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    331c:	24 c1 20    	mov.w     #0xc12, w4
    331e:	14 42 78    	mov.b     [w4], w4
    3320:	04 04 a0    	bset.b    w4, #0x0
    3322:	04 43 78    	mov.b     w4, w6
    3324:	25 c1 20    	mov.w     #0xc12, w5
    3326:	86 4a 78    	mov.b     w6, [w5]

00003328 <.L60>:
                            }
                            break;
    3328:	06 00 37    	bra       0x3336 <.L56>

0000332a <.L127>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    332a:	24 c1 20    	mov.w     #0xc12, w4
    332c:	14 42 78    	mov.b     [w4], w4
    332e:	04 04 a0    	bset.b    w4, #0x0
    3330:	04 43 78    	mov.b     w4, w6
    3332:	25 c1 20    	mov.w     #0xc12, w5
    3334:	86 4a 78    	mov.b     w6, [w5]

00003336 <.L56>:
                    }
                    break;
    3336:	07 00 37    	bra       0x3346 <.L44>

00003338 <.L126>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    3338:	24 c1 20    	mov.w     #0xc12, w4
    333a:	14 42 78    	mov.b     [w4], w4
    333c:	04 04 a0    	bset.b    w4, #0x0
    333e:	04 43 78    	mov.b     w4, w6
    3340:	25 c1 20    	mov.w     #0xc12, w5
    3342:	86 4a 78    	mov.b     w6, [w5]

00003344 <.LSM147>:
            }
            break;
    3344:	05 02 37    	bra       0x3750 <.L29>

00003346 <.L44>:
    3346:	04 02 37    	bra       0x3750 <.L29>

00003348 <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    3348:	e4 bf 20    	mov.w     #0xbfe, w4
    334a:	14 42 78    	mov.b     [w4], w4
    334c:	04 82 fb    	ze        w4, w4
    334e:	7f 02 62    	and.w     w4, #0x1f, w4
    3350:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3352:	03 00 32    	bra       Z, 0x335a <.L63>
    3354:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    3356:	28 00 32    	bra       Z, 0x33a8 <.L64>
    3358:	a7 00 37    	bra       0x34a8 <.L128>

0000335a <.L63>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    335a:	e4 bf 20    	mov.w     #0xbfe, w4
    335c:	24 42 90    	mov.b     [w4+2], w4
    335e:	04 82 fb    	ze        w4, w4
    3360:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    3362:	1b 00 3a    	bra       NZ, 0x339a <.L129>

00003364 <.LSM150>:
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    3364:	e4 bf 20    	mov.w     #0xbfe, w4
    3366:	14 42 90    	mov.b     [w4+1], w4
    3368:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    336a:	08 00 3a    	bra       NZ, 0x337c <.L67>

0000336c <.LSM151>:
                                USB_device_status &= 0xFE;
    336c:	45 c1 20    	mov.w     #0xc14, w5
    336e:	95 42 78    	mov.b     [w5], w5
    3370:	e4 cf b3    	mov.b     #0xfe, w4
    3372:	04 c2 62    	and.b     w5, w4, w4
    3374:	04 43 78    	mov.b     w4, w6
    3376:	45 c1 20    	mov.w     #0xc14, w5
    3378:	86 4a 78    	mov.b     w6, [w5]
    337a:	06 00 37    	bra       0x3388 <.L68>

0000337c <.L67>:
                            else
                                USB_device_status |= 0x01;
    337c:	44 c1 20    	mov.w     #0xc14, w4
    337e:	14 42 78    	mov.b     [w4], w4
    3380:	04 04 a0    	bset.b    w4, #0x0
    3382:	04 43 78    	mov.b     w4, w6
    3384:	45 c1 20    	mov.w     #0xc14, w5
    3386:	86 4a 78    	mov.b     w6, [w5]

00003388 <.L68>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    3388:	00 42 eb    	clr.b     w4
    338a:	04 43 78    	mov.b     w4, w6
    338c:	45 e0 20    	mov.w     #0xe04, w5
    338e:	86 4a 78    	mov.b     w6, [w5]

00003390 <.LSM154>:
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    3390:	84 cc b3    	mov.b     #0xc8, w4
    3392:	04 43 78    	mov.b     w4, w6
    3394:	55 e0 20    	mov.w     #0xe05, w5
    3396:	86 4a 78    	mov.b     w6, [w5]

00003398 <.LSM155>:
                            break;
    3398:	06 00 37    	bra       0x33a6 <.L69>

0000339a <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    339a:	24 c1 20    	mov.w     #0xc12, w4
    339c:	14 42 78    	mov.b     [w4], w4
    339e:	04 04 a0    	bset.b    w4, #0x0
    33a0:	04 43 78    	mov.b     w4, w6
    33a2:	25 c1 20    	mov.w     #0xc12, w5
    33a4:	86 4a 78    	mov.b     w6, [w5]

000033a6 <.L69>:
                    }
                    break;
    33a6:	87 00 37    	bra       0x34b6 <.L70>

000033a8 <.L64>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    33a8:	64 c1 20    	mov.w     #0xc16, w4
    33aa:	14 42 78    	mov.b     [w4], w4
    33ac:	04 82 fb    	ze        w4, w4
    33ae:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    33b0:	03 00 32    	bra       Z, 0x33b8 <.L72>
    33b2:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    33b4:	17 00 32    	bra       Z, 0x33e4 <.L73>
    33b6:	71 00 37    	bra       0x349a <.L130>

000033b8 <.L72>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    33b8:	e4 bf 20    	mov.w     #0xbfe, w4
    33ba:	44 42 90    	mov.b     [w4+4], w4
    33bc:	04 82 fb    	ze        w4, w4
    33be:	6f 02 62    	and.w     w4, #0xf, w4
    33c0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    33c2:	09 00 3a    	bra       NZ, 0x33d6 <.L74>

000033c4 <.LSM160>:
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    33c4:	00 42 eb    	clr.b     w4
    33c6:	04 43 78    	mov.b     w4, w6
    33c8:	45 e0 20    	mov.w     #0xe04, w5
    33ca:	86 4a 78    	mov.b     w6, [w5]

000033cc <.LSM161>:
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    33cc:	84 cc b3    	mov.b     #0xc8, w4
    33ce:	04 43 78    	mov.b     w4, w6
    33d0:	55 e0 20    	mov.w     #0xe05, w5
    33d2:	86 4a 78    	mov.b     w6, [w5]
    33d4:	06 00 37    	bra       0x33e2 <.L75>

000033d6 <.L74>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    33d6:	24 c1 20    	mov.w     #0xc12, w4
    33d8:	14 42 78    	mov.b     [w4], w4
    33da:	04 04 a0    	bset.b    w4, #0x0
    33dc:	04 43 78    	mov.b     w4, w6
    33de:	25 c1 20    	mov.w     #0xc12, w5
    33e0:	86 4a 78    	mov.b     w6, [w5]

000033e2 <.L75>:
                            }
                            break;
    33e2:	61 00 37    	bra       0x34a6 <.L76>

000033e4 <.L73>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    33e4:	a4 4a 20    	mov.w     #0x4aa, w4
    33e6:	14 07 98    	mov.w     w4, [w14+2]

000033e8 <.LSM165>:
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    33e8:	e4 bf 20    	mov.w     #0xbfe, w4
    33ea:	44 42 90    	mov.b     [w4+4], w4
    33ec:	6f 4f 62    	and.b     w4, #0xf, [w14]
    33ee:	1e 42 78    	mov.b     [w14], w4
    33f0:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    33f2:	44 00 32    	bra       Z, 0x347c <.L77>

000033f4 <.LSM166>:
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    33f4:	9e 42 78    	mov.b     [w14], w5
    33f6:	05 82 fb    	ze        w5, w4
    33f8:	04 02 42    	add.w     w4, w4, w4
    33fa:	84 02 78    	mov.w     w4, w5
    33fc:	e4 bf 20    	mov.w     #0xbfe, w4
    33fe:	44 42 90    	mov.b     [w4+4], w4
    3400:	04 02 fb    	se        w4, w4
    3402:	4f 22 de    	lsr.w     w4, #0xf, w4
    3404:	05 02 72    	ior.w     w4, w5, w4
    3406:	c2 22 dd    	sl.w      w4, #0x2, w5
    3408:	04 e0 20    	mov.w     #0xe00, w4
    340a:	04 82 42    	add.w     w5, w4, w4
    340c:	24 07 98    	mov.w     w4, [w14+4]

0000340e <.LSM167>:
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    340e:	e4 bf 20    	mov.w     #0xbfe, w4
    3410:	44 42 90    	mov.b     [w4+4], w4
    3412:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    3414:	1a 00 3d    	bra       GE, 0x344a <.L78>

00003416 <.LSM168>:
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    3416:	1e 43 78    	mov.b     [w14], w6
    3418:	06 82 fb    	ze        w6, w4
    341a:	04 02 42    	add.w     w4, w4, w4
    341c:	9e 02 90    	mov.w     [w14+2], w5
    341e:	04 82 42    	add.w     w5, w4, w4
    3420:	14 02 78    	mov.w     [w4], w4
    3422:	64 02 62    	and.w     w4, #0x4, w4
    3424:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3426:	0a 00 32    	bra       Z, 0x343c <.L79>

00003428 <.LSM169>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    3428:	e4 bf 20    	mov.w     #0xbfe, w4
    342a:	14 42 90    	mov.b     [w4+1], w4
    342c:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    342e:	02 00 3a    	bra       NZ, 0x3434 <.L80>
    3430:	00 42 eb    	clr.b     w4
    3432:	01 00 37    	bra       0x3436 <.L81>

00003434 <.L80>:
    3434:	44 c8 b3    	mov.b     #0x84, w4

00003436 <.L81>:
    3436:	ae 02 90    	mov.w     [w14+4], w5
    3438:	94 42 98    	mov.b     w4, [w5+1]
    343a:	20 00 37    	bra       0x347c <.L77>

0000343c <.L79>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    343c:	24 c1 20    	mov.w     #0xc12, w4
    343e:	14 42 78    	mov.b     [w4], w4
    3440:	04 04 a0    	bset.b    w4, #0x0
    3442:	04 43 78    	mov.b     w4, w6
    3444:	25 c1 20    	mov.w     #0xc12, w5
    3446:	86 4a 78    	mov.b     w6, [w5]
    3448:	19 00 37    	bra       0x347c <.L77>

0000344a <.L78>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    344a:	9e 42 78    	mov.b     [w14], w5
    344c:	05 82 fb    	ze        w5, w4
    344e:	04 02 42    	add.w     w4, w4, w4
    3450:	9e 02 90    	mov.w     [w14+2], w5
    3452:	04 82 42    	add.w     w5, w4, w4
    3454:	14 02 78    	mov.w     [w4], w4
    3456:	68 02 62    	and.w     w4, #0x8, w4
    3458:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    345a:	0a 00 32    	bra       Z, 0x3470 <.L82>

0000345c <.LSM172>:
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    345c:	e4 bf 20    	mov.w     #0xbfe, w4
    345e:	14 42 90    	mov.b     [w4+1], w4
    3460:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    3462:	02 00 3a    	bra       NZ, 0x3468 <.L83>
    3464:	84 c8 b3    	mov.b     #0x88, w4
    3466:	01 00 37    	bra       0x346a <.L84>

00003468 <.L83>:
    3468:	44 c8 b3    	mov.b     #0x84, w4

0000346a <.L84>:
    346a:	ae 02 90    	mov.w     [w14+4], w5
    346c:	94 42 98    	mov.b     w4, [w5+1]
    346e:	06 00 37    	bra       0x347c <.L77>

00003470 <.L82>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    3470:	24 c1 20    	mov.w     #0xc12, w4
    3472:	14 42 78    	mov.b     [w4], w4
    3474:	04 04 a0    	bset.b    w4, #0x0
    3476:	84 42 78    	mov.b     w4, w5
    3478:	26 c1 20    	mov.w     #0xc12, w6
    347a:	05 4b 78    	mov.b     w5, [w6]

0000347c <.L77>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    347c:	24 c1 20    	mov.w     #0xc12, w4
    347e:	14 42 78    	mov.b     [w4], w4
    3480:	04 82 fb    	ze        w4, w4
    3482:	61 02 62    	and.w     w4, #0x1, w4
    3484:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3486:	08 00 3a    	bra       NZ, 0x3498 <.L85>

00003488 <.LSM175>:
                                BD[EP0IN].bytecount = 0x00;
    3488:	00 42 eb    	clr.b     w4
    348a:	84 42 78    	mov.b     w4, w5
    348c:	46 e0 20    	mov.w     #0xe04, w6
    348e:	05 4b 78    	mov.b     w5, [w6]

00003490 <.LSM176>:
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    3490:	84 cc b3    	mov.b     #0xc8, w4
    3492:	84 42 78    	mov.b     w4, w5
    3494:	56 e0 20    	mov.w     #0xe05, w6
    3496:	05 4b 78    	mov.b     w5, [w6]

00003498 <.L85>:
                            }
                            break;
    3498:	06 00 37    	bra       0x34a6 <.L76>

0000349a <.L130>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    349a:	24 c1 20    	mov.w     #0xc12, w4
    349c:	14 42 78    	mov.b     [w4], w4
    349e:	04 04 a0    	bset.b    w4, #0x0
    34a0:	84 42 78    	mov.b     w4, w5
    34a2:	26 c1 20    	mov.w     #0xc12, w6
    34a4:	05 4b 78    	mov.b     w5, [w6]

000034a6 <.L76>:
                    }
                    break;
    34a6:	07 00 37    	bra       0x34b6 <.L70>

000034a8 <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    34a8:	24 c1 20    	mov.w     #0xc12, w4
    34aa:	14 42 78    	mov.b     [w4], w4
    34ac:	04 04 a0    	bset.b    w4, #0x0
    34ae:	84 42 78    	mov.b     w4, w5
    34b0:	26 c1 20    	mov.w     #0xc12, w6
    34b2:	05 4b 78    	mov.b     w5, [w6]

000034b4 <.LSM181>:
            }
            break;
    34b4:	4d 01 37    	bra       0x3750 <.L29>

000034b6 <.L70>:
    34b6:	4c 01 37    	bra       0x3750 <.L29>

000034b8 <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    34b8:	e4 bf 20    	mov.w     #0xbfe, w4
    34ba:	24 42 90    	mov.b     [w4+2], w4
    34bc:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    34be:	07 00 3d    	bra       GE, 0x34ce <.L86>

000034c0 <.LSM183>:
                USB_error_flags |= 0x01;            // set Request Error Flag
    34c0:	24 c1 20    	mov.w     #0xc12, w4
    34c2:	14 42 78    	mov.b     [w4], w4
    34c4:	04 04 a0    	bset.b    w4, #0x0
    34c6:	84 42 78    	mov.b     w4, w5
    34c8:	26 c1 20    	mov.w     #0xc12, w6
    34ca:	05 4b 78    	mov.b     w5, [w6]

000034cc <.LSM184>:
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    34cc:	41 01 37    	bra       0x3750 <.L29>

000034ce <.L86>:
    34ce:	e4 bf 20    	mov.w     #0xbfe, w4
    34d0:	14 42 78    	mov.b     [w4], w4
    34d2:	84 42 78    	mov.b     w4, w5
    34d4:	66 c0 20    	mov.w     #0xc06, w6
    34d6:	05 4b 78    	mov.b     w5, [w6]

000034d8 <.LSM186>:
    34d8:	e4 bf 20    	mov.w     #0xbfe, w4
    34da:	14 42 90    	mov.b     [w4+1], w4
    34dc:	84 42 78    	mov.b     w4, w5
    34de:	76 c0 20    	mov.w     #0xc07, w6
    34e0:	05 4b 78    	mov.b     w5, [w6]

000034e2 <.LSM187>:
    34e2:	e4 bf 20    	mov.w     #0xbfe, w4
    34e4:	14 02 90    	mov.w     [w4+2], w4
    34e6:	44 60 88    	mov.w     w4, 0xc08

000034e8 <.LSM188>:
    34e8:	e4 bf 20    	mov.w     #0xbfe, w4
    34ea:	24 02 90    	mov.w     [w4+4], w4
    34ec:	54 60 88    	mov.w     w4, 0xc0a

000034ee <.LSM189>:
    34ee:	e4 bf 20    	mov.w     #0xbfe, w4
    34f0:	34 02 90    	mov.w     [w4+6], w4
    34f2:	64 60 88    	mov.w     w4, 0xc0c

000034f4 <.LSM190>:
    34f4:	00 42 eb    	clr.b     w4
    34f6:	84 42 78    	mov.b     w4, w5
    34f8:	46 e0 20    	mov.w     #0xe04, w6
    34fa:	05 4b 78    	mov.b     w5, [w6]

000034fc <.LSM191>:
    34fc:	84 cc b3    	mov.b     #0xc8, w4
    34fe:	84 42 78    	mov.b     w4, w5
    3500:	56 e0 20    	mov.w     #0xe05, w6
    3502:	05 4b 78    	mov.b     w5, [w6]

00003504 <.LSM192>:
    3504:	25 01 37    	bra       0x3750 <.L29>

00003506 <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    3506:	e4 bf 20    	mov.w     #0xbfe, w4
    3508:	14 42 78    	mov.b     [w4], w4
    350a:	84 42 78    	mov.b     w4, w5
    350c:	66 c0 20    	mov.w     #0xc06, w6
    350e:	05 4b 78    	mov.b     w5, [w6]

00003510 <.LSM194>:
            USB_request.setup.bRequest = USB_setup.bRequest;
    3510:	e4 bf 20    	mov.w     #0xbfe, w4
    3512:	14 42 90    	mov.b     [w4+1], w4
    3514:	84 42 78    	mov.b     w4, w5
    3516:	76 c0 20    	mov.w     #0xc07, w6
    3518:	05 4b 78    	mov.b     w5, [w6]

0000351a <.LSM195>:
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    351a:	e4 bf 20    	mov.w     #0xbfe, w4
    351c:	14 02 90    	mov.w     [w4+2], w4
    351e:	44 60 88    	mov.w     w4, 0xc08

00003520 <.LSM196>:
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    3520:	e4 bf 20    	mov.w     #0xbfe, w4
    3522:	24 02 90    	mov.w     [w4+4], w4
    3524:	54 60 88    	mov.w     w4, 0xc0a

00003526 <.LSM197>:
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    3526:	e4 bf 20    	mov.w     #0xbfe, w4
    3528:	34 02 90    	mov.w     [w4+6], w4
    352a:	64 60 88    	mov.w     w4, 0xc0c

0000352c <.LSM198>:
            switch (USB_setup.wValue.b[1]) {
    352c:	e4 bf 20    	mov.w     #0xbfe, w4
    352e:	34 42 90    	mov.b     [w4+3], w4
    3530:	04 82 fb    	ze        w4, w4
    3532:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    3534:	14 00 32    	bra       Z, 0x355e <.L90>
    3536:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    3538:	3c 00 32    	bra       Z, 0x35b2 <.L91>
    353a:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    353c:	66 00 3a    	bra       NZ, 0x360a <.L131>

0000353e <.LSM199>:
                case DEVICE:
                    USB_request.data_ptr = Device;
    353e:	e4 05 2a    	mov.w     #0xa05e, w4
    3540:	74 60 88    	mov.w     w4, 0xc0e

00003542 <.LSM200>:
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    3542:	74 60 80    	mov.w     0xc0e, w4
    3544:	14 42 78    	mov.b     [w4], w4
    3546:	04 82 fb    	ze        w4, w4
    3548:	84 60 88    	mov.w     w4, 0xc10

0000354a <.LSM201>:
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    354a:	e4 bf 20    	mov.w     #0xbfe, w4
    354c:	b4 02 90    	mov.w     [w4+6], w5
    354e:	84 60 80    	mov.w     0xc10, w4
    3550:	84 8f 52    	sub.w     w5, w4, [w15]
    3552:	03 00 31    	bra       C, 0x355a <.L92>

00003554 <.LSM202>:
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    3554:	e4 bf 20    	mov.w     #0xbfe, w4
    3556:	34 02 90    	mov.w     [w4+6], w4
    3558:	84 60 88    	mov.w     w4, 0xc10

0000355a <.L92>:
                    }
                    SendDataPacket();
    355a:	60 01 07    	rcall     0x381c <_SendDataPacket>

0000355c <.LSM204>:
                    break;
    355c:	5d 00 37    	bra       0x3618 <.L93>

0000355e <.L90>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    355e:	e4 bf 20    	mov.w     #0xbfe, w4
    3560:	24 42 90    	mov.b     [w4+2], w4
    3562:	04 82 fb    	ze        w4, w4
    3564:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3566:	03 00 3a    	bra       NZ, 0x356e <.L132>

00003568 <.LSM206>:
                        case 0:
                            USB_request.data_ptr = Configuration1;
    3568:	04 07 2a    	mov.w     #0xa070, w4
    356a:	74 60 88    	mov.w     w4, 0xc0e

0000356c <.LSM207>:
                            break;
    356c:	06 00 37    	bra       0x357a <.L96>

0000356e <.L132>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    356e:	24 c1 20    	mov.w     #0xc12, w4
    3570:	14 42 78    	mov.b     [w4], w4
    3572:	04 04 a0    	bset.b    w4, #0x0
    3574:	84 42 78    	mov.b     w4, w5
    3576:	26 c1 20    	mov.w     #0xc12, w6
    3578:	05 4b 78    	mov.b     w5, [w6]

0000357a <.L96>:
                    }
                    if (!(USB_error_flags&0x01)) {
    357a:	24 c1 20    	mov.w     #0xc12, w4
    357c:	14 42 78    	mov.b     [w4], w4
    357e:	04 82 fb    	ze        w4, w4
    3580:	61 02 62    	and.w     w4, #0x1, w4
    3582:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3584:	15 00 3a    	bra       NZ, 0x35b0 <.L97>

00003586 <.LSM210>:
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    3586:	74 60 80    	mov.w     0xc0e, w4
    3588:	04 82 e8    	inc2.w    w4, w4
    358a:	14 42 78    	mov.b     [w4], w4
    358c:	84 42 78    	mov.b     w4, w5
    358e:	06 c1 20    	mov.w     #0xc10, w6
    3590:	05 4b 78    	mov.b     w5, [w6]

00003592 <.LSM211>:
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    3592:	74 60 80    	mov.w     0xc0e, w4
    3594:	63 02 42    	add.w     w4, #0x3, w4
    3596:	14 42 78    	mov.b     [w4], w4
    3598:	84 42 78    	mov.b     w4, w5
    359a:	16 c1 20    	mov.w     #0xc11, w6
    359c:	05 4b 78    	mov.b     w5, [w6]

0000359e <.LSM212>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    359e:	e4 bf 20    	mov.w     #0xbfe, w4
    35a0:	b4 02 90    	mov.w     [w4+6], w5
    35a2:	84 60 80    	mov.w     0xc10, w4
    35a4:	84 8f 52    	sub.w     w5, w4, [w15]
    35a6:	03 00 31    	bra       C, 0x35ae <.L98>

000035a8 <.LSM213>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    35a8:	e4 bf 20    	mov.w     #0xbfe, w4
    35aa:	34 02 90    	mov.w     [w4+6], w4
    35ac:	84 60 88    	mov.w     w4, 0xc10

000035ae <.L98>:
                        }
                        SendDataPacket();
    35ae:	36 01 07    	rcall     0x381c <_SendDataPacket>

000035b0 <.L97>:
                    }
                    break;
    35b0:	33 00 37    	bra       0x3618 <.L93>

000035b2 <.L91>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    35b2:	e4 bf 20    	mov.w     #0xbfe, w4
    35b4:	24 42 90    	mov.b     [w4+2], w4
    35b6:	04 82 fb    	ze        w4, w4
    35b8:	e1 0f 52    	sub.w     w4, #0x1, [w15]
    35ba:	07 00 32    	bra       Z, 0x35ca <.L101>
    35bc:	e2 0f 52    	sub.w     w4, #0x2, [w15]
    35be:	08 00 32    	bra       Z, 0x35d0 <.L102>
    35c0:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    35c2:	09 00 3a    	bra       NZ, 0x35d6 <.L133>

000035c4 <.LSM217>:
                        case 0:
                            USB_request.data_ptr = String0;
    35c4:	24 08 2a    	mov.w     #0xa082, w4
    35c6:	74 60 88    	mov.w     w4, 0xc0e

000035c8 <.LSM218>:
                            break;
    35c8:	0c 00 37    	bra       0x35e2 <.L103>

000035ca <.L101>:
                        case 1:
                            USB_request.data_ptr = String1;
    35ca:	64 08 2a    	mov.w     #0xa086, w4
    35cc:	74 60 88    	mov.w     w4, 0xc0e

000035ce <.LSM220>:
                            break;
    35ce:	09 00 37    	bra       0x35e2 <.L103>

000035d0 <.L102>:
                        case 2:
                            USB_request.data_ptr = String2;
    35d0:	04 0a 2a    	mov.w     #0xa0a0, w4
    35d2:	74 60 88    	mov.w     w4, 0xc0e

000035d4 <.LSM222>:
                            break;
    35d4:	06 00 37    	bra       0x35e2 <.L103>

000035d6 <.L133>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    35d6:	24 c1 20    	mov.w     #0xc12, w4
    35d8:	14 42 78    	mov.b     [w4], w4
    35da:	04 04 a0    	bset.b    w4, #0x0
    35dc:	84 42 78    	mov.b     w4, w5
    35de:	26 c1 20    	mov.w     #0xc12, w6
    35e0:	05 4b 78    	mov.b     w5, [w6]

000035e2 <.L103>:
                    }
                    if (!(USB_error_flags&0x01)) {
    35e2:	24 c1 20    	mov.w     #0xc12, w4
    35e4:	14 42 78    	mov.b     [w4], w4
    35e6:	04 82 fb    	ze        w4, w4
    35e8:	61 02 62    	and.w     w4, #0x1, w4
    35ea:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    35ec:	0d 00 3a    	bra       NZ, 0x3608 <.L104>

000035ee <.LSM225>:
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    35ee:	74 60 80    	mov.w     0xc0e, w4
    35f0:	14 42 78    	mov.b     [w4], w4
    35f2:	04 82 fb    	ze        w4, w4
    35f4:	84 60 88    	mov.w     w4, 0xc10

000035f6 <.LSM226>:
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    35f6:	e4 bf 20    	mov.w     #0xbfe, w4
    35f8:	b4 02 90    	mov.w     [w4+6], w5
    35fa:	84 60 80    	mov.w     0xc10, w4
    35fc:	84 8f 52    	sub.w     w5, w4, [w15]
    35fe:	03 00 31    	bra       C, 0x3606 <.L105>

00003600 <.LSM227>:
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    3600:	e4 bf 20    	mov.w     #0xbfe, w4
    3602:	34 02 90    	mov.w     [w4+6], w4
    3604:	84 60 88    	mov.w     w4, 0xc10

00003606 <.L105>:
                        }
                        SendDataPacket();
    3606:	0a 01 07    	rcall     0x381c <_SendDataPacket>

00003608 <.L104>:
                    }
                    break;
    3608:	07 00 37    	bra       0x3618 <.L93>

0000360a <.L131>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    360a:	24 c1 20    	mov.w     #0xc12, w4
    360c:	14 42 78    	mov.b     [w4], w4
    360e:	04 04 a0    	bset.b    w4, #0x0
    3610:	84 42 78    	mov.b     w4, w5
    3612:	26 c1 20    	mov.w     #0xc12, w6
    3614:	05 4b 78    	mov.b     w5, [w6]

00003616 <.LSM231>:
            }
            break;
    3616:	9c 00 37    	bra       0x3750 <.L29>

00003618 <.L93>:
    3618:	9b 00 37    	bra       0x3750 <.L29>

0000361a <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    361a:	34 70 80    	mov.w     0xe06, w4
    361c:	35 c1 20    	mov.w     #0xc13, w5
    361e:	95 42 78    	mov.b     [w5], w5
    3620:	05 4a 78    	mov.b     w5, [w4]

00003622 <.LSM233>:
            BD[EP0IN].bytecount = 0x01;
    3622:	14 c0 b3    	mov.b     #0x1, w4
    3624:	84 42 78    	mov.b     w4, w5
    3626:	46 e0 20    	mov.w     #0xe04, w6
    3628:	05 4b 78    	mov.b     w5, [w6]

0000362a <.LSM234>:
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    362a:	84 cc b3    	mov.b     #0xc8, w4
    362c:	84 42 78    	mov.b     w4, w5
    362e:	56 e0 20    	mov.w     #0xe05, w6
    3630:	05 4b 78    	mov.b     w5, [w6]

00003632 <.LSM235>:
            break;
    3632:	8e 00 37    	bra       0x3750 <.L29>

00003634 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    3634:	e4 bf 20    	mov.w     #0xbfe, w4
    3636:	24 42 90    	mov.b     [w4+2], w4
    3638:	e1 4f 52    	sub.b     w4, #0x1, [w15]
    363a:	2c 00 3e    	bra       GTU, 0x3694 <.L106>

0000363c <.LSM237>:
                U1EP = (unsigned int *)&U1EP0;
    363c:	a4 4a 20    	mov.w     #0x4aa, w4
    363e:	14 07 98    	mov.w     w4, [w14+2]

00003640 <.LSM238>:
                for (n = 1; n<16; n++)
    3640:	14 c0 b3    	mov.b     #0x1, w4
    3642:	04 4f 78    	mov.b     w4, [w14]
    3644:	08 00 37    	bra       0x3656 <.L107>

00003646 <.L108>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    3646:	1e 43 78    	mov.b     [w14], w6
    3648:	06 82 fb    	ze        w6, w4
    364a:	04 02 42    	add.w     w4, w4, w4
    364c:	9e 02 90    	mov.w     [w14+2], w5
    364e:	04 82 42    	add.w     w5, w4, w4
    3650:	80 02 eb    	clr.w     w5
    3652:	05 0a 78    	mov.w     w5, [w4]

00003654 <.LSM240>:
    3654:	1e 4f e8    	inc.b     [w14], [w14]

00003656 <.L107>:
    3656:	1e 42 78    	mov.b     [w14], w4
    3658:	ef 4f 52    	sub.b     w4, #0xf, [w15]
    365a:	f5 ff 36    	bra       LEU, 0x3646 <.L108>

0000365c <.LSM241>:
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    365c:	e4 bf 20    	mov.w     #0xbfe, w4
    365e:	24 42 90    	mov.b     [w4+2], w4
    3660:	04 43 78    	mov.b     w4, w6
    3662:	35 c1 20    	mov.w     #0xc13, w5
    3664:	86 4a 78    	mov.b     w6, [w5]
    3666:	34 c1 20    	mov.w     #0xc13, w4
    3668:	14 42 78    	mov.b     [w4], w4
    366a:	04 82 fb    	ze        w4, w4
    366c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    366e:	05 00 3a    	bra       NZ, 0x367a <.L134>

00003670 <.LSM242>:
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    3670:	24 c0 b3    	mov.b     #0x2, w4
    3672:	04 43 78    	mov.b     w4, w6
    3674:	65 c1 20    	mov.w     #0xc16, w5
    3676:	86 4a 78    	mov.b     w6, [w5]

00003678 <.LSM243>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    3678:	04 00 37    	bra       0x3682 <.L111>

0000367a <.L134>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    367a:	34 c0 b3    	mov.b     #0x3, w4
    367c:	04 43 78    	mov.b     w4, w6
    367e:	65 c1 20    	mov.w     #0xc16, w5
    3680:	86 4a 78    	mov.b     w6, [w5]

00003682 <.L111>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    3682:	00 42 eb    	clr.b     w4
    3684:	04 43 78    	mov.b     w4, w6
    3686:	45 e0 20    	mov.w     #0xe04, w5
    3688:	86 4a 78    	mov.b     w6, [w5]

0000368a <.LSM246>:
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    368a:	84 cc b3    	mov.b     #0xc8, w4
    368c:	04 43 78    	mov.b     w4, w6
    368e:	55 e0 20    	mov.w     #0xe05, w5
    3690:	86 4a 78    	mov.b     w6, [w5]

00003692 <.LSM247>:
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    3692:	5e 00 37    	bra       0x3750 <.L29>

00003694 <.L106>:
    3694:	24 c1 20    	mov.w     #0xc12, w4
    3696:	14 42 78    	mov.b     [w4], w4
    3698:	04 04 a0    	bset.b    w4, #0x0
    369a:	04 43 78    	mov.b     w4, w6
    369c:	25 c1 20    	mov.w     #0xc12, w5
    369e:	86 4a 78    	mov.b     w6, [w5]

000036a0 <.LSM249>:
    36a0:	57 00 37    	bra       0x3750 <.L29>

000036a2 <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    36a2:	64 c1 20    	mov.w     #0xc16, w4
    36a4:	14 42 78    	mov.b     [w4], w4
    36a6:	04 82 fb    	ze        w4, w4
    36a8:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    36aa:	18 00 3a    	bra       NZ, 0x36dc <.L135>

000036ac <.LSM251>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    36ac:	e4 bf 20    	mov.w     #0xbfe, w4
    36ae:	44 42 90    	mov.b     [w4+4], w4
    36b0:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    36b2:	0c 00 3a    	bra       NZ, 0x36cc <.L115>

000036b4 <.LSM252>:
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    36b4:	34 70 80    	mov.w     0xe06, w4
    36b6:	80 42 eb    	clr.b     w5
    36b8:	05 4a 78    	mov.b     w5, [w4]

000036ba <.LSM253>:
                        BD[EP0IN].bytecount = 0x01;
    36ba:	14 c0 b3    	mov.b     #0x1, w4
    36bc:	04 43 78    	mov.b     w4, w6
    36be:	45 e0 20    	mov.w     #0xe04, w5
    36c0:	86 4a 78    	mov.b     w6, [w5]

000036c2 <.LSM254>:
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    36c2:	84 cc b3    	mov.b     #0xc8, w4
    36c4:	04 43 78    	mov.b     w4, w6
    36c6:	55 e0 20    	mov.w     #0xe05, w5
    36c8:	86 4a 78    	mov.b     w6, [w5]
    36ca:	06 00 37    	bra       0x36d8 <.L116>

000036cc <.L115>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    36cc:	24 c1 20    	mov.w     #0xc12, w4
    36ce:	14 42 78    	mov.b     [w4], w4
    36d0:	04 04 a0    	bset.b    w4, #0x0
    36d2:	04 43 78    	mov.b     w4, w6
    36d4:	25 c1 20    	mov.w     #0xc12, w5
    36d6:	86 4a 78    	mov.b     w6, [w5]

000036d8 <.L116>:
                    }
                    break;
    36d8:	00 00 00    	nop       

000036da <.LSM257>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    36da:	3a 00 37    	bra       0x3750 <.L29>

000036dc <.L135>:
    36dc:	24 c1 20    	mov.w     #0xc12, w4
    36de:	14 42 78    	mov.b     [w4], w4
    36e0:	04 04 a0    	bset.b    w4, #0x0
    36e2:	04 43 78    	mov.b     w4, w6
    36e4:	25 c1 20    	mov.w     #0xc12, w5
    36e6:	86 4a 78    	mov.b     w6, [w5]

000036e8 <.LSM259>:
    36e8:	33 00 37    	bra       0x3750 <.L29>

000036ea <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    36ea:	64 c1 20    	mov.w     #0xc16, w4
    36ec:	14 42 78    	mov.b     [w4], w4
    36ee:	04 82 fb    	ze        w4, w4
    36f0:	e3 0f 52    	sub.w     w4, #0x3, [w15]
    36f2:	21 00 3a    	bra       NZ, 0x3736 <.L136>

000036f4 <.LSM261>:
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    36f4:	e4 bf 20    	mov.w     #0xbfe, w4
    36f6:	44 42 90    	mov.b     [w4+4], w4
    36f8:	e0 4f 52    	sub.b     w4, #0x0, [w15]
    36fa:	15 00 3a    	bra       NZ, 0x3726 <.L120>

000036fc <.LSM262>:
                        switch (USB_setup.wValue.b[0]) {
    36fc:	e4 bf 20    	mov.w     #0xbfe, w4
    36fe:	24 42 90    	mov.b     [w4+2], w4
    3700:	04 82 fb    	ze        w4, w4
    3702:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3704:	09 00 3a    	bra       NZ, 0x3718 <.L137>

00003706 <.LSM263>:
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    3706:	00 42 eb    	clr.b     w4
    3708:	04 43 78    	mov.b     w4, w6
    370a:	45 e0 20    	mov.w     #0xe04, w5
    370c:	86 4a 78    	mov.b     w6, [w5]

0000370e <.LSM264>:
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    370e:	84 cc b3    	mov.b     #0xc8, w4
    3710:	04 43 78    	mov.b     w4, w6
    3712:	55 e0 20    	mov.w     #0xe05, w5
    3714:	86 4a 78    	mov.b     w6, [w5]

00003716 <.LSM265>:
                                break;
    3716:	0d 00 37    	bra       0x3732 <.L124>

00003718 <.L137>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    3718:	24 c1 20    	mov.w     #0xc12, w4
    371a:	14 42 78    	mov.b     [w4], w4
    371c:	04 04 a0    	bset.b    w4, #0x0
    371e:	04 43 78    	mov.b     w4, w6
    3720:	25 c1 20    	mov.w     #0xc12, w5
    3722:	86 4a 78    	mov.b     w6, [w5]
    3724:	06 00 37    	bra       0x3732 <.L124>

00003726 <.L120>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    3726:	24 c1 20    	mov.w     #0xc12, w4
    3728:	14 42 78    	mov.b     [w4], w4
    372a:	04 04 a0    	bset.b    w4, #0x0
    372c:	04 43 78    	mov.b     w4, w6
    372e:	25 c1 20    	mov.w     #0xc12, w5
    3730:	86 4a 78    	mov.b     w6, [w5]

00003732 <.L124>:
                    }
                    break;
    3732:	00 00 00    	nop       

00003734 <.LSM269>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    3734:	0d 00 37    	bra       0x3750 <.L29>

00003736 <.L136>:
    3736:	24 c1 20    	mov.w     #0xc12, w4
    3738:	14 42 78    	mov.b     [w4], w4
    373a:	04 04 a0    	bset.b    w4, #0x0
    373c:	04 43 78    	mov.b     w4, w6
    373e:	25 c1 20    	mov.w     #0xc12, w5
    3740:	86 4a 78    	mov.b     w6, [w5]

00003742 <.LSM271>:
    3742:	06 00 37    	bra       0x3750 <.L29>

00003744 <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    3744:	24 c1 20    	mov.w     #0xc12, w4
    3746:	14 42 78    	mov.b     [w4], w4
    3748:	04 04 a0    	bset.b    w4, #0x0
    374a:	04 43 78    	mov.b     w4, w6
    374c:	25 c1 20    	mov.w     #0xc12, w5
    374e:	86 4a 78    	mov.b     w6, [w5]

00003750 <.L29>:
    }
}
    3750:	00 80 fa    	ulnk      
    3752:	00 00 06    	return    

00003754 <_ProcessInToken>:

void ProcessInToken(void) {
    3754:	00 00 fa    	lnk       #0x0

00003756 <.LSM275>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    3756:	54 c1 20    	mov.w     #0xc15, w4
    3758:	14 42 78    	mov.b     [w4], w4
    375a:	84 82 fb    	ze        w4, w5
    375c:	04 0f 20    	mov.w     #0xf0, w4
    375e:	04 82 62    	and.w     w5, w4, w4
    3760:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3762:	2f 00 3a    	bra       NZ, 0x37c2 <.L138>

00003764 <.LSM276>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    3764:	64 c0 20    	mov.w     #0xc06, w4
    3766:	14 42 78    	mov.b     [w4], w4
    3768:	84 82 fb    	ze        w4, w5
    376a:	04 06 20    	mov.w     #0x60, w4
    376c:	04 82 62    	and.w     w5, w4, w4
    376e:	05 02 20    	mov.w     #0x20, w5
    3770:	85 0f 52    	sub.w     w4, w5, [w15]
    3772:	23 00 32    	bra       Z, 0x37ba <.L152>
    3774:	05 04 20    	mov.w     #0x40, w5
    3776:	85 0f 52    	sub.w     w4, w5, [w15]
    3778:	1e 00 32    	bra       Z, 0x37b6 <.L144>
    377a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    377c:	21 00 3a    	bra       NZ, 0x37c0 <.L153>

0000377e <.LSM277>:
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    377e:	74 c0 20    	mov.w     #0xc07, w4
    3780:	14 42 78    	mov.b     [w4], w4
    3782:	04 82 fb    	ze        w4, w4
    3784:	e5 0f 52    	sub.w     w4, #0x5, [w15]
    3786:	03 00 32    	bra       Z, 0x378e <.L146>
    3788:	e6 0f 52    	sub.w     w4, #0x6, [w15]
    378a:	12 00 32    	bra       Z, 0x37b0 <.L147>

0000378c <.LSM278>:
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    378c:	17 00 37    	bra       0x37bc <.L141>

0000378e <.L146>:
    378e:	84 c0 20    	mov.w     #0xc08, w4
    3790:	14 42 78    	mov.b     [w4], w4
    3792:	04 82 fb    	ze        w4, w4
    3794:	b4 24 88    	mov.w     w4, 0x496
    3796:	b4 24 80    	mov.w     0x496, w4
    3798:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    379a:	05 00 3a    	bra       NZ, 0x37a6 <.L151>

0000379c <.LSM280>:
    379c:	14 c0 b3    	mov.b     #0x1, w4
    379e:	04 43 78    	mov.b     w4, w6
    37a0:	65 c1 20    	mov.w     #0xc16, w5
    37a2:	86 4a 78    	mov.b     w6, [w5]

000037a4 <.LSM281>:
    37a4:	04 00 37    	bra       0x37ae <.L150>

000037a6 <.L151>:
    37a6:	24 c0 b3    	mov.b     #0x2, w4
    37a8:	04 43 78    	mov.b     w4, w6
    37aa:	65 c1 20    	mov.w     #0xc16, w5
    37ac:	86 4a 78    	mov.b     w6, [w5]

000037ae <.L150>:
    37ae:	02 00 37    	bra       0x37b4 <.L145>

000037b0 <.L147>:
    37b0:	35 00 07    	rcall     0x381c <_SendDataPacket>

000037b2 <.LSM285>:
    37b2:	00 00 00    	nop       

000037b4 <.L145>:
    37b4:	03 00 37    	bra       0x37bc <.L141>

000037b6 <.L144>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    37b6:	c5 09 07    	rcall     0x4b42 <_VendorRequestsIn>

000037b8 <.LSM288>:
                    break;
    37b8:	01 00 37    	bra       0x37bc <.L141>

000037ba <.L152>:
    37ba:	00 00 00    	nop       

000037bc <.L141>:
            }
            break;
    37bc:	00 00 00    	nop       
    37be:	01 00 37    	bra       0x37c2 <.L138>

000037c0 <.L153>:
    37c0:	00 00 00    	nop       

000037c2 <.L138>:
    }
}
    37c2:	00 80 fa    	ulnk      
    37c4:	00 00 06    	return    

000037c6 <_ProcessOutToken>:

void ProcessOutToken(void) {
    37c6:	00 00 fa    	lnk       #0x0

000037c8 <.LSM293>:
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    37c8:	54 c1 20    	mov.w     #0xc15, w4
    37ca:	14 42 78    	mov.b     [w4], w4
    37cc:	84 82 fb    	ze        w4, w5
    37ce:	04 0f 20    	mov.w     #0xf0, w4
    37d0:	04 82 62    	and.w     w5, w4, w4
    37d2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    37d4:	21 00 3a    	bra       NZ, 0x3818 <.L154>

000037d6 <.LSM294>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    37d6:	64 c0 20    	mov.w     #0xc06, w4
    37d8:	14 42 78    	mov.b     [w4], w4
    37da:	84 82 fb    	ze        w4, w5
    37dc:	04 06 20    	mov.w     #0x60, w4
    37de:	04 82 62    	and.w     w5, w4, w4
    37e0:	05 02 20    	mov.w     #0x20, w5
    37e2:	85 0f 52    	sub.w     w4, w5, [w15]
    37e4:	05 00 32    	bra       Z, 0x37f0 <.L161>
    37e6:	05 04 20    	mov.w     #0x40, w5
    37e8:	85 0f 52    	sub.w     w4, w5, [w15]
    37ea:	04 00 3a    	bra       NZ, 0x37f4 <.L162>

000037ec <.LSM295>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    37ec:	b3 09 07    	rcall     0x4b54 <_VendorRequestsOut>

000037ee <.LSM296>:
                    break;
    37ee:	03 00 37    	bra       0x37f6 <.L157>

000037f0 <.L161>:
    37f0:	00 00 00    	nop       
    37f2:	01 00 37    	bra       0x37f6 <.L157>

000037f4 <.L162>:
    37f4:	00 00 00    	nop       

000037f6 <.L157>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    37f6:	04 c4 b3    	mov.b     #0x40, w4
    37f8:	04 43 78    	mov.b     w4, w6
    37fa:	05 e0 20    	mov.w     #0xe00, w5
    37fc:	86 4a 78    	mov.b     w6, [w5]

000037fe <.LSM300>:
            BD[EP0OUT].status = 0x88;
    37fe:	84 c8 b3    	mov.b     #0x88, w4
    3800:	04 43 78    	mov.b     w4, w6
    3802:	15 e0 20    	mov.w     #0xe01, w5
    3804:	86 4a 78    	mov.b     w6, [w5]

00003806 <.LSM301>:
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    3806:	00 42 eb    	clr.b     w4
    3808:	04 43 78    	mov.b     w4, w6
    380a:	45 e0 20    	mov.w     #0xe04, w5
    380c:	86 4a 78    	mov.b     w6, [w5]

0000380e <.LSM302>:
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    380e:	84 cc b3    	mov.b     #0xc8, w4
    3810:	04 43 78    	mov.b     w4, w6
    3812:	55 e0 20    	mov.w     #0xe05, w5
    3814:	86 4a 78    	mov.b     w6, [w5]

00003816 <.LSM303>:
            break;
    3816:	00 00 00    	nop       

00003818 <.L154>:
    }
}
    3818:	00 80 fa    	ulnk      
    381a:	00 00 06    	return    

0000381c <_SendDataPacket>:

void SendDataPacket(void) {
    381c:	02 00 fa    	lnk       #0x2

0000381e <.LSM306>:
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    381e:	85 60 80    	mov.w     0xc10, w5
    3820:	f4 03 20    	mov.w     #0x3f, w4
    3822:	84 8f 52    	sub.w     w5, w4, [w15]
    3824:	0d 00 3e    	bra       GTU, 0x3840 <.L164>

00003826 <.LSM307>:
        packet_length = (BYTE)USB_request.bytes_left.w;
    3826:	84 60 80    	mov.w     0xc10, w4
    3828:	04 4f 78    	mov.b     w4, [w14]

0000382a <.LSM308>:
        USB_request.bytes_left.w = 0;
    382a:	00 02 eb    	clr.w     w4
    382c:	84 60 88    	mov.w     w4, 0xc10

0000382e <.LSM309>:
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    382e:	00 c2 eb    	setm.b    w4
    3830:	04 43 78    	mov.b     w4, w6
    3832:	65 c0 20    	mov.w     #0xc06, w5
    3834:	86 4a 78    	mov.b     w6, [w5]

00003836 <.LSM310>:
        USB_request.setup.bRequest = NO_REQUEST;
    3836:	00 c2 eb    	setm.b    w4
    3838:	04 43 78    	mov.b     w4, w6
    383a:	75 c0 20    	mov.w     #0xc07, w5
    383c:	86 4a 78    	mov.b     w6, [w5]
    383e:	05 00 37    	bra       0x384a <.L165>

00003840 <.L164>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    3840:	04 c4 b3    	mov.b     #0x40, w4
    3842:	04 4f 78    	mov.b     w4, [w14]

00003844 <.LSM312>:
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    3844:	84 60 80    	mov.w     0xc10, w4
    3846:	04 04 b1    	sub.w     #0x40, w4
    3848:	84 60 88    	mov.w     w4, 0xc10

0000384a <.L165>:
    }
    for (n = 0; n<packet_length; n++) {
    384a:	00 42 eb    	clr.b     w4
    384c:	14 47 98    	mov.b     w4, [w14+1]
    384e:	0c 00 37    	bra       0x3868 <.L166>

00003850 <.L167>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    3850:	35 70 80    	mov.w     0xe06, w5
    3852:	1e 42 90    	mov.b     [w14+1], w4
    3854:	04 82 fb    	ze        w4, w4
    3856:	84 82 42    	add.w     w5, w4, w5
    3858:	74 60 80    	mov.w     0xc0e, w4
    385a:	14 43 78    	mov.b     [w4], w6
    385c:	86 4a 78    	mov.b     w6, [w5]
    385e:	04 02 e8    	inc.w     w4, w4
    3860:	74 60 88    	mov.w     w4, 0xc0e

00003862 <.LSM315>:
    3862:	1e 42 90    	mov.b     [w14+1], w4
    3864:	04 42 e8    	inc.b     w4, w4
    3866:	14 47 98    	mov.b     w4, [w14+1]

00003868 <.L166>:
    3868:	1e 42 90    	mov.b     [w14+1], w4
    386a:	9e 4f 52    	sub.b     w4, [w14], [w15]
    386c:	f1 ff 39    	bra       NC, 0x3850 <.L167>

0000386e <.LSM316>:
    }
    BD[EP0IN].bytecount = packet_length;
    386e:	9e 42 78    	mov.b     [w14], w5
    3870:	44 e0 20    	mov.w     #0xe04, w4
    3872:	05 4a 78    	mov.b     w5, [w4]

00003874 <.LSM317>:
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    3874:	54 e0 20    	mov.w     #0xe05, w4
    3876:	14 42 78    	mov.b     [w4], w4
    3878:	04 c2 ea    	com.b     w4, w4
    387a:	06 c4 b3    	mov.b     #0x40, w6
    387c:	86 42 62    	and.b     w4, w6, w5
    387e:	84 c8 b3    	mov.b     #0x88, w4
    3880:	04 c2 72    	ior.b     w5, w4, w4
    3882:	04 43 78    	mov.b     w4, w6
    3884:	55 e0 20    	mov.w     #0xe05, w5
    3886:	86 4a 78    	mov.b     w6, [w5]

00003888 <.LSM318>:
}
    3888:	00 80 fa    	ulnk      
    388a:	00 00 06    	return    

0000388c <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    388c:	02 00 fa    	lnk       #0x2
    388e:	00 0f 78    	mov.w     w0, [w14]

00003890 <.LSM1>:
    timer_lower(self);
    3890:	1e 00 78    	mov.w     [w14], w0
    3892:	0e 02 07    	rcall     0x3cb0 <_timer_lower>

00003894 <.LSM2>:
    if (self->every) {
    3894:	1e 02 78    	mov.w     [w14], w4
    3896:	14 0a 90    	mov.w     [w4+18], w4
    3898:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    389a:	05 00 32    	bra       Z, 0x38a6 <.L2>

0000389c <.LSM3>:
        self->every(self);
    389c:	1e 02 78    	mov.w     [w14], w4
    389e:	14 0a 90    	mov.w     [w4+18], w4
    38a0:	1e 00 78    	mov.w     [w14], w0
    38a2:	04 00 01    	call      w4
    38a4:	1a 00 37    	bra       0x38da <.L1>

000038a6 <.L2>:
    } else if (self->after) {
    38a6:	1e 02 78    	mov.w     [w14], w4
    38a8:	24 0a 90    	mov.w     [w4+20], w4
    38aa:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    38ac:	14 00 32    	bra       Z, 0x38d6 <.L4>

000038ae <.LSM5>:
        if (self->aftercount) {
    38ae:	1e 02 78    	mov.w     [w14], w4
    38b0:	04 0a 90    	mov.w     [w4+16], w4
    38b2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    38b4:	0a 00 32    	bra       Z, 0x38ca <.L5>

000038b6 <.LSM6>:
            self->after(self);
    38b6:	1e 02 78    	mov.w     [w14], w4
    38b8:	24 0a 90    	mov.w     [w4+20], w4
    38ba:	1e 00 78    	mov.w     [w14], w0
    38bc:	04 00 01    	call      w4

000038be <.LSM7>:
            self->aftercount--;
    38be:	1e 02 78    	mov.w     [w14], w4
    38c0:	04 0a 90    	mov.w     [w4+16], w4
    38c2:	84 02 e9    	dec.w     w4, w5
    38c4:	1e 02 78    	mov.w     [w14], w4
    38c6:	05 0a 98    	mov.w     w5, [w4+16]
    38c8:	08 00 37    	bra       0x38da <.L1>

000038ca <.L5>:
        } else {
            timer_disableInterrupt(self);
    38ca:	1e 00 78    	mov.w     [w14], w0
    38cc:	1a 02 07    	rcall     0x3d02 <_timer_disableInterrupt>

000038ce <.LSM9>:
            self->after = NULL;
    38ce:	1e 02 78    	mov.w     [w14], w4
    38d0:	80 02 eb    	clr.w     w5
    38d2:	25 0a 98    	mov.w     w5, [w4+20]
    38d4:	02 00 37    	bra       0x38da <.L1>

000038d6 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    38d6:	1e 00 78    	mov.w     [w14], w0
    38d8:	14 02 07    	rcall     0x3d02 <_timer_disableInterrupt>

000038da <.L1>:
    }
}
    38da:	00 80 fa    	ulnk      
    38dc:	00 00 06    	return    

000038de <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    38de:	36 00 f8    	push      0x36
    38e0:	80 9f be    	mov.d     w0, [w15++]
    38e2:	82 9f be    	mov.d     w2, [w15++]
    38e4:	84 9f be    	mov.d     w4, [w15++]
    38e6:	86 9f be    	mov.d     w6, [w15++]
    38e8:	32 00 f8    	push      0x32
    38ea:	00 20 20    	mov.w     #0x200, w0
    38ec:	90 01 88    	mov.w     w0, 0x32
    38ee:	00 00 fa    	lnk       #0x0

000038f0 <.LSM13>:
    timer_serviceInterrupt(&timer1);
    38f0:	80 c1 20    	mov.w     #0xc18, w0
    38f2:	cc ff 07    	rcall     0x388c <_timer_serviceInterrupt>

000038f4 <.LSM14>:
}
    38f4:	00 80 fa    	ulnk      
    38f6:	32 00 f9    	pop       0x32
    38f8:	4f 03 be    	mov.d     [--w15], w6
    38fa:	4f 02 be    	mov.d     [--w15], w4
    38fc:	4f 01 be    	mov.d     [--w15], w2
    38fe:	4f 00 be    	mov.d     [--w15], w0
    3900:	36 00 f9    	pop       0x36
    3902:	00 40 06    	retfie    

00003904 <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    3904:	36 00 f8    	push      0x36
    3906:	80 9f be    	mov.d     w0, [w15++]
    3908:	82 9f be    	mov.d     w2, [w15++]
    390a:	84 9f be    	mov.d     w4, [w15++]
    390c:	86 9f be    	mov.d     w6, [w15++]
    390e:	32 00 f8    	push      0x32
    3910:	00 20 20    	mov.w     #0x200, w0
    3912:	90 01 88    	mov.w     w0, 0x32
    3914:	00 00 fa    	lnk       #0x0

00003916 <.LSM16>:
    timer_serviceInterrupt(&timer2);
    3916:	e0 c2 20    	mov.w     #0xc2e, w0
    3918:	b9 ff 07    	rcall     0x388c <_timer_serviceInterrupt>

0000391a <.LSM17>:
}
    391a:	00 80 fa    	ulnk      
    391c:	32 00 f9    	pop       0x32
    391e:	4f 03 be    	mov.d     [--w15], w6
    3920:	4f 02 be    	mov.d     [--w15], w4
    3922:	4f 01 be    	mov.d     [--w15], w2
    3924:	4f 00 be    	mov.d     [--w15], w0
    3926:	36 00 f9    	pop       0x36
    3928:	00 40 06    	retfie    

0000392a <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    392a:	36 00 f8    	push      0x36
    392c:	80 9f be    	mov.d     w0, [w15++]
    392e:	82 9f be    	mov.d     w2, [w15++]
    3930:	84 9f be    	mov.d     w4, [w15++]
    3932:	86 9f be    	mov.d     w6, [w15++]
    3934:	32 00 f8    	push      0x32
    3936:	00 20 20    	mov.w     #0x200, w0
    3938:	90 01 88    	mov.w     w0, 0x32
    393a:	00 00 fa    	lnk       #0x0

0000393c <.LSM19>:
    timer_serviceInterrupt(&timer3);
    393c:	40 c4 20    	mov.w     #0xc44, w0
    393e:	a6 ff 07    	rcall     0x388c <_timer_serviceInterrupt>

00003940 <.LSM20>:
}
    3940:	00 80 fa    	ulnk      
    3942:	32 00 f9    	pop       0x32
    3944:	4f 03 be    	mov.d     [--w15], w6
    3946:	4f 02 be    	mov.d     [--w15], w4
    3948:	4f 01 be    	mov.d     [--w15], w2
    394a:	4f 00 be    	mov.d     [--w15], w0
    394c:	36 00 f9    	pop       0x36
    394e:	00 40 06    	retfie    

00003950 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    3950:	36 00 f8    	push      0x36
    3952:	80 9f be    	mov.d     w0, [w15++]
    3954:	82 9f be    	mov.d     w2, [w15++]
    3956:	84 9f be    	mov.d     w4, [w15++]
    3958:	86 9f be    	mov.d     w6, [w15++]
    395a:	32 00 f8    	push      0x32
    395c:	00 20 20    	mov.w     #0x200, w0
    395e:	90 01 88    	mov.w     w0, 0x32
    3960:	00 00 fa    	lnk       #0x0

00003962 <.LSM22>:
    timer_serviceInterrupt(&timer4);
    3962:	a0 c5 20    	mov.w     #0xc5a, w0
    3964:	93 ff 07    	rcall     0x388c <_timer_serviceInterrupt>

00003966 <.LSM23>:
}
    3966:	00 80 fa    	ulnk      
    3968:	32 00 f9    	pop       0x32
    396a:	4f 03 be    	mov.d     [--w15], w6
    396c:	4f 02 be    	mov.d     [--w15], w4
    396e:	4f 01 be    	mov.d     [--w15], w2
    3970:	4f 00 be    	mov.d     [--w15], w0
    3972:	36 00 f9    	pop       0x36
    3974:	00 40 06    	retfie    

00003976 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    3976:	36 00 f8    	push      0x36
    3978:	80 9f be    	mov.d     w0, [w15++]
    397a:	82 9f be    	mov.d     w2, [w15++]
    397c:	84 9f be    	mov.d     w4, [w15++]
    397e:	86 9f be    	mov.d     w6, [w15++]
    3980:	32 00 f8    	push      0x32
    3982:	00 20 20    	mov.w     #0x200, w0
    3984:	90 01 88    	mov.w     w0, 0x32
    3986:	00 00 fa    	lnk       #0x0

00003988 <.LSM25>:
    timer_serviceInterrupt(&timer5);
    3988:	00 c7 20    	mov.w     #0xc70, w0
    398a:	80 ff 07    	rcall     0x388c <_timer_serviceInterrupt>

0000398c <.LSM26>:
}
    398c:	00 80 fa    	ulnk      
    398e:	32 00 f9    	pop       0x32
    3990:	4f 03 be    	mov.d     [--w15], w6
    3992:	4f 02 be    	mov.d     [--w15], w4
    3994:	4f 01 be    	mov.d     [--w15], w2
    3996:	4f 00 be    	mov.d     [--w15], w0
    3998:	36 00 f9    	pop       0x36
    399a:	00 40 06    	retfie    

0000399c <_init_timer>:

void init_timer(void) {
    399c:	00 00 fa    	lnk       #0x0

0000399e <.LSM28>:
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    399e:	b4 00 20    	mov.w     #0xb, w4
    39a0:	84 1f 78    	mov.w     w4, [w15++]
    39a2:	47 00 20    	mov.w     #0x4, w7
    39a4:	36 c0 b3    	mov.b     #0x3, w6
    39a6:	45 09 20    	mov.w     #0x94, w5
    39a8:	44 08 20    	mov.w     #0x84, w4
    39aa:	03 10 20    	mov.w     #0x100, w3
    39ac:	22 10 20    	mov.w     #0x102, w2
    39ae:	41 10 20    	mov.w     #0x104, w1
    39b0:	80 c1 20    	mov.w     #0xc18, w0
    39b2:	33 00 07    	rcall     0x3a1a <_timer_init>
    39b4:	8f 87 e9    	dec2.w    w15, w15

000039b6 <.LSM29>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    39b6:	c4 00 20    	mov.w     #0xc, w4
    39b8:	84 1f 78    	mov.w     w4, [w15++]
    39ba:	80 03 eb    	clr.w     w7
    39bc:	76 c0 b3    	mov.b     #0x7, w6
    39be:	45 09 20    	mov.w     #0x94, w5
    39c0:	44 08 20    	mov.w     #0x84, w4
    39c2:	63 10 20    	mov.w     #0x106, w3
    39c4:	c2 10 20    	mov.w     #0x10c, w2
    39c6:	01 11 20    	mov.w     #0x110, w1
    39c8:	e0 c2 20    	mov.w     #0xc2e, w0
    39ca:	27 00 07    	rcall     0x3a1a <_timer_init>
    39cc:	8f 87 e9    	dec2.w    w15, w15

000039ce <.LSM30>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    39ce:	d4 00 20    	mov.w     #0xd, w4
    39d0:	84 1f 78    	mov.w     w4, [w15++]
    39d2:	17 00 20    	mov.w     #0x1, w7
    39d4:	86 c0 b3    	mov.b     #0x8, w6
    39d6:	45 09 20    	mov.w     #0x94, w5
    39d8:	44 08 20    	mov.w     #0x84, w4
    39da:	a3 10 20    	mov.w     #0x10a, w3
    39dc:	e2 10 20    	mov.w     #0x10e, w2
    39de:	21 11 20    	mov.w     #0x112, w1
    39e0:	40 c4 20    	mov.w     #0xc44, w0
    39e2:	1b 00 07    	rcall     0x3a1a <_timer_init>
    39e4:	8f 87 e9    	dec2.w    w15, w15

000039e6 <.LSM31>:
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    39e6:	e4 00 20    	mov.w     #0xe, w4
    39e8:	84 1f 78    	mov.w     w4, [w15++]
    39ea:	27 00 20    	mov.w     #0x2, w7
    39ec:	b6 c0 b3    	mov.b     #0xb, w6
    39ee:	65 09 20    	mov.w     #0x96, w5
    39f0:	64 08 20    	mov.w     #0x86, w4
    39f2:	43 11 20    	mov.w     #0x114, w3
    39f4:	a2 11 20    	mov.w     #0x11a, w2
    39f6:	e1 11 20    	mov.w     #0x11e, w1
    39f8:	a0 c5 20    	mov.w     #0xc5a, w0
    39fa:	0f 00 07    	rcall     0x3a1a <_timer_init>
    39fc:	8f 87 e9    	dec2.w    w15, w15

000039fe <.LSM32>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    39fe:	f4 00 20    	mov.w     #0xf, w4
    3a00:	84 1f 78    	mov.w     w4, [w15++]
    3a02:	37 00 20    	mov.w     #0x3, w7
    3a04:	c6 c0 b3    	mov.b     #0xc, w6
    3a06:	65 09 20    	mov.w     #0x96, w5
    3a08:	64 08 20    	mov.w     #0x86, w4
    3a0a:	83 11 20    	mov.w     #0x118, w3
    3a0c:	c2 11 20    	mov.w     #0x11c, w2
    3a0e:	01 12 20    	mov.w     #0x120, w1
    3a10:	00 c7 20    	mov.w     #0xc70, w0
    3a12:	03 00 07    	rcall     0x3a1a <_timer_init>
    3a14:	8f 87 e9    	dec2.w    w15, w15

00003a16 <.LSM33>:
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    3a16:	00 80 fa    	ulnk      
    3a18:	00 00 06    	return    

00003a1a <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    3a1a:	10 00 fa    	lnk       #0x10
    3a1c:	00 0f 78    	mov.w     w0, [w14]
    3a1e:	11 07 98    	mov.w     w1, [w14+2]
    3a20:	22 07 98    	mov.w     w2, [w14+4]
    3a22:	33 07 98    	mov.w     w3, [w14+6]
    3a24:	44 07 98    	mov.w     w4, [w14+8]
    3a26:	55 07 98    	mov.w     w5, [w14+10]
    3a28:	46 4f 98    	mov.b     w6, [w14+12]
    3a2a:	77 07 98    	mov.w     w7, [w14+14]

00003a2c <.LSM35>:
    self->TxCON = TxCON;
    3a2c:	1e 02 78    	mov.w     [w14], w4
    3a2e:	9e 02 90    	mov.w     [w14+2], w5
    3a30:	05 0a 78    	mov.w     w5, [w4]

00003a32 <.LSM36>:
    self->PRx = PRx;
    3a32:	1e 02 78    	mov.w     [w14], w4
    3a34:	ae 02 90    	mov.w     [w14+4], w5
    3a36:	15 02 98    	mov.w     w5, [w4+2]

00003a38 <.LSM37>:
    self->TMRx = TMRx;
    3a38:	1e 02 78    	mov.w     [w14], w4
    3a3a:	be 02 90    	mov.w     [w14+6], w5
    3a3c:	25 02 98    	mov.w     w5, [w4+4]

00003a3e <.LSM38>:
    self->IFSy = IFSy;
    3a3e:	1e 02 78    	mov.w     [w14], w4
    3a40:	ce 02 90    	mov.w     [w14+8], w5
    3a42:	35 02 98    	mov.w     w5, [w4+6]

00003a44 <.LSM39>:
    self->IECy = IECy;
    3a44:	1e 02 78    	mov.w     [w14], w4
    3a46:	de 02 90    	mov.w     [w14+10], w5
    3a48:	45 02 98    	mov.w     w5, [w4+8]

00003a4a <.LSM40>:
    self->flagbit = flagbit;
    3a4a:	1e 02 78    	mov.w     [w14], w4
    3a4c:	ce 4a 90    	mov.b     [w14+12], w5
    3a4e:	25 4a 98    	mov.b     w5, [w4+10]

00003a50 <.LSM41>:
    self->octselnum = octselnum;
    3a50:	1e 02 78    	mov.w     [w14], w4
    3a52:	fe 02 90    	mov.w     [w14+14], w5
    3a54:	65 02 98    	mov.w     w5, [w4+12]

00003a56 <.LSM42>:
    self->ocsyncselnum = ocsyncselnum;
    3a56:	1e 02 78    	mov.w     [w14], w4
    3a58:	ce ba 97    	mov.w     [w14-8], w5
    3a5a:	75 02 98    	mov.w     w5, [w4+14]

00003a5c <.LSM43>:
    self->aftercount = 0;
    3a5c:	1e 02 78    	mov.w     [w14], w4
    3a5e:	80 02 eb    	clr.w     w5
    3a60:	05 0a 98    	mov.w     w5, [w4+16]

00003a62 <.LSM44>:
    self->every = NULL;
    3a62:	1e 02 78    	mov.w     [w14], w4
    3a64:	80 02 eb    	clr.w     w5
    3a66:	15 0a 98    	mov.w     w5, [w4+18]

00003a68 <.LSM45>:
    self->after = NULL;
    3a68:	1e 02 78    	mov.w     [w14], w4
    3a6a:	80 02 eb    	clr.w     w5
    3a6c:	25 0a 98    	mov.w     w5, [w4+20]

00003a6e <.LSM46>:
}
    3a6e:	00 80 fa    	ulnk      
    3a70:	00 00 06    	return    

00003a72 <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    3a72:	06 00 fa    	lnk       #0x6
    3a74:	88 1f 78    	mov.w     w8, [w15++]
    3a76:	00 0f 78    	mov.w     w0, [w14]
    3a78:	12 07 98    	mov.w     w2, [w14+2]
    3a7a:	23 07 98    	mov.w     w3, [w14+4]

00003a7c <.LSM48>:
    if (period>(256.*65536.*TCY)) {
    3a7c:	18 c0 b3    	mov.b     #0x1, w8
    3a7e:	d2 7b 23    	mov.w     #0x37bd, w2
    3a80:	63 f8 23    	mov.w     #0x3f86, w3
    3a82:	1e 00 90    	mov.w     [w14+2], w0
    3a84:	ae 00 90    	mov.w     [w14+4], w1
    3a86:	65 ec 07    	rcall     0x1352 <___gesf2>
    3a88:	00 02 78    	mov.w     w0, w4
    3a8a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3a8c:	01 00 3c    	bra       GT, 0x3a90 <.L14>
    3a8e:	00 44 eb    	clr.b     w8

00003a90 <.L14>:
    3a90:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    3a92:	78 00 3a    	bra       NZ, 0x3b84 <.L23>

00003a94 <.LSM49>:
        return;
    } else if (period>(64.*65536.*TCY)) {
    3a94:	18 c0 b3    	mov.b     #0x1, w8
    3a96:	d2 7b 23    	mov.w     #0x37bd, w2
    3a98:	63 e8 23    	mov.w     #0x3e86, w3
    3a9a:	1e 00 90    	mov.w     [w14+2], w0
    3a9c:	ae 00 90    	mov.w     [w14+4], w1
    3a9e:	59 ec 07    	rcall     0x1352 <___gesf2>
    3aa0:	00 02 78    	mov.w     w0, w4
    3aa2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3aa4:	01 00 3c    	bra       GT, 0x3aa8 <.L17>
    3aa6:	00 44 eb    	clr.b     w8

00003aa8 <.L17>:
    3aa8:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    3aaa:	15 00 32    	bra       Z, 0x3ad6 <.L18>

00003aac <.LSM50>:
        timer_stop(self);
    3aac:	1e 00 78    	mov.w     [w14], w0
    3aae:	e2 00 07    	rcall     0x3c74 <_timer_stop>

00003ab0 <.LSM51>:
        poke(self->TxCON, 0x0030);
    3ab0:	1e 02 78    	mov.w     [w14], w4
    3ab2:	14 02 78    	mov.w     [w4], w4
    3ab4:	05 03 20    	mov.w     #0x30, w5
    3ab6:	05 0a 78    	mov.w     w5, [w4]

00003ab8 <.LSM52>:
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    3ab8:	1e 02 78    	mov.w     [w14], w4
    3aba:	14 04 90    	mov.w     [w4+2], w8
    3abc:	02 40 22    	mov.w     #0x2400, w2
    3abe:	43 77 24    	mov.w     #0x4774, w3
    3ac0:	1e 00 90    	mov.w     [w14+2], w0
    3ac2:	ae 00 90    	mov.w     [w14+4], w1
    3ac4:	b8 ec 07    	rcall     0x1436 <___mulsf3>
    3ac6:	00 02 be    	mov.d     w0, w4
    3ac8:	04 00 be    	mov.d     w4, w0
    3aca:	45 ec 07    	rcall     0x1356 <___fixunssfsi>
    3acc:	00 02 be    	mov.d     w0, w4
    3ace:	04 02 78    	mov.w     w4, w4
    3ad0:	04 02 e9    	dec.w     w4, w4
    3ad2:	04 0c 78    	mov.w     w4, [w8]
    3ad4:	58 00 37    	bra       0x3b86 <.L13>

00003ad6 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    3ad6:	18 c0 b3    	mov.b     #0x1, w8
    3ad8:	d2 7b 23    	mov.w     #0x37bd, w2
    3ada:	63 d0 23    	mov.w     #0x3d06, w3
    3adc:	1e 00 90    	mov.w     [w14+2], w0
    3ade:	ae 00 90    	mov.w     [w14+4], w1
    3ae0:	38 ec 07    	rcall     0x1352 <___gesf2>
    3ae2:	00 02 78    	mov.w     w0, w4
    3ae4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3ae6:	01 00 3c    	bra       GT, 0x3aea <.L19>
    3ae8:	00 44 eb    	clr.b     w8

00003aea <.L19>:
    3aea:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    3aec:	15 00 32    	bra       Z, 0x3b18 <.L20>

00003aee <.LSM54>:
        timer_stop(self);
    3aee:	1e 00 78    	mov.w     [w14], w0
    3af0:	c1 00 07    	rcall     0x3c74 <_timer_stop>

00003af2 <.LSM55>:
        poke(self->TxCON, 0x0020);
    3af2:	1e 02 78    	mov.w     [w14], w4
    3af4:	14 02 78    	mov.w     [w4], w4
    3af6:	05 02 20    	mov.w     #0x20, w5
    3af8:	05 0a 78    	mov.w     w5, [w4]

00003afa <.LSM56>:
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    3afa:	1e 02 78    	mov.w     [w14], w4
    3afc:	14 04 90    	mov.w     [w4+2], w8
    3afe:	02 40 22    	mov.w     #0x2400, w2
    3b00:	43 87 24    	mov.w     #0x4874, w3
    3b02:	1e 00 90    	mov.w     [w14+2], w0
    3b04:	ae 00 90    	mov.w     [w14+4], w1
    3b06:	97 ec 07    	rcall     0x1436 <___mulsf3>
    3b08:	00 02 be    	mov.d     w0, w4
    3b0a:	04 00 be    	mov.d     w4, w0
    3b0c:	24 ec 07    	rcall     0x1356 <___fixunssfsi>
    3b0e:	00 02 be    	mov.d     w0, w4
    3b10:	04 02 78    	mov.w     w4, w4
    3b12:	04 02 e9    	dec.w     w4, w4
    3b14:	04 0c 78    	mov.w     w4, [w8]
    3b16:	37 00 37    	bra       0x3b86 <.L13>

00003b18 <.L20>:
    } else if (period>(65536.*TCY)) {
    3b18:	18 c0 b3    	mov.b     #0x1, w8
    3b1a:	d2 7b 23    	mov.w     #0x37bd, w2
    3b1c:	63 b8 23    	mov.w     #0x3b86, w3
    3b1e:	1e 00 90    	mov.w     [w14+2], w0
    3b20:	ae 00 90    	mov.w     [w14+4], w1
    3b22:	17 ec 07    	rcall     0x1352 <___gesf2>
    3b24:	00 02 78    	mov.w     w0, w4
    3b26:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3b28:	01 00 3c    	bra       GT, 0x3b2c <.L21>
    3b2a:	00 44 eb    	clr.b     w8

00003b2c <.L21>:
    3b2c:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    3b2e:	15 00 32    	bra       Z, 0x3b5a <.L22>

00003b30 <.LSM58>:
        timer_stop(self);
    3b30:	1e 00 78    	mov.w     [w14], w0
    3b32:	a0 00 07    	rcall     0x3c74 <_timer_stop>

00003b34 <.LSM59>:
        poke(self->TxCON, 0x0010);
    3b34:	1e 02 78    	mov.w     [w14], w4
    3b36:	14 02 78    	mov.w     [w4], w4
    3b38:	05 01 20    	mov.w     #0x10, w5
    3b3a:	05 0a 78    	mov.w     w5, [w4]

00003b3c <.LSM60>:
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    3b3c:	1e 02 78    	mov.w     [w14], w4
    3b3e:	14 04 90    	mov.w     [w4+2], w8
    3b40:	02 40 22    	mov.w     #0x2400, w2
    3b42:	43 9f 24    	mov.w     #0x49f4, w3
    3b44:	1e 00 90    	mov.w     [w14+2], w0
    3b46:	ae 00 90    	mov.w     [w14+4], w1
    3b48:	76 ec 07    	rcall     0x1436 <___mulsf3>
    3b4a:	00 02 be    	mov.d     w0, w4
    3b4c:	04 00 be    	mov.d     w4, w0
    3b4e:	03 ec 07    	rcall     0x1356 <___fixunssfsi>
    3b50:	00 02 be    	mov.d     w0, w4
    3b52:	04 02 78    	mov.w     w4, w4
    3b54:	04 02 e9    	dec.w     w4, w4
    3b56:	04 0c 78    	mov.w     w4, [w8]
    3b58:	16 00 37    	bra       0x3b86 <.L13>

00003b5a <.L22>:
    } else {
        timer_stop(self);
    3b5a:	1e 00 78    	mov.w     [w14], w0
    3b5c:	8b 00 07    	rcall     0x3c74 <_timer_stop>

00003b5e <.LSM62>:
        poke(self->TxCON, 0x0000);
    3b5e:	1e 02 78    	mov.w     [w14], w4
    3b60:	14 02 78    	mov.w     [w4], w4
    3b62:	80 02 eb    	clr.w     w5
    3b64:	05 0a 78    	mov.w     w5, [w4]

00003b66 <.LSM63>:
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    3b66:	1e 02 78    	mov.w     [w14], w4
    3b68:	14 04 90    	mov.w     [w4+2], w8
    3b6a:	02 40 22    	mov.w     #0x2400, w2
    3b6c:	43 b7 24    	mov.w     #0x4b74, w3
    3b6e:	1e 00 90    	mov.w     [w14+2], w0
    3b70:	ae 00 90    	mov.w     [w14+4], w1
    3b72:	61 ec 07    	rcall     0x1436 <___mulsf3>
    3b74:	00 02 be    	mov.d     w0, w4
    3b76:	04 00 be    	mov.d     w4, w0
    3b78:	ee eb 07    	rcall     0x1356 <___fixunssfsi>
    3b7a:	00 02 be    	mov.d     w0, w4
    3b7c:	04 02 78    	mov.w     w4, w4
    3b7e:	04 02 e9    	dec.w     w4, w4
    3b80:	04 0c 78    	mov.w     w4, [w8]
    3b82:	01 00 37    	bra       0x3b86 <.L13>

00003b84 <.L23>:
    3b84:	00 00 00    	nop       

00003b86 <.L13>:
    }
}
    3b86:	4f 04 78    	mov.w     [--w15], w8
    3b88:	00 80 fa    	ulnk      
    3b8a:	00 00 06    	return    

00003b8c <_timer_period>:

float timer_period(_TIMER *self) {
    3b8c:	04 00 fa    	lnk       #0x4
    3b8e:	88 9f be    	mov.d     w8, [w15++]
    3b90:	10 07 98    	mov.w     w0, [w14+2]

00003b92 <.LSM67>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3b92:	1e 02 90    	mov.w     [w14+2], w4
    3b94:	14 02 78    	mov.w     [w4], w4
    3b96:	94 02 78    	mov.w     [w4], w5
    3b98:	04 03 20    	mov.w     #0x30, w4
    3b9a:	04 82 62    	and.w     w5, w4, w4
    3b9c:	44 22 de    	lsr.w     w4, #0x4, w4
    3b9e:	04 0f 78    	mov.w     w4, [w14]

00003ba0 <.LSM68>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3ba0:	1e 02 78    	mov.w     [w14], w4
    3ba2:	c2 22 dd    	sl.w      w4, #0x2, w5
    3ba4:	64 cb 20    	mov.w     #0xcb6, w4
    3ba6:	04 82 42    	add.w     w5, w4, w4
    3ba8:	14 04 be    	mov.d     [w4], w8
    3baa:	1e 02 90    	mov.w     [w14+2], w4
    3bac:	14 02 90    	mov.w     [w4+2], w4
    3bae:	14 02 78    	mov.w     [w4], w4
    3bb0:	05 00 20    	mov.w     #0x0, w5
    3bb2:	04 00 be    	mov.d     w4, w0
    3bb4:	eb eb 07    	rcall     0x138c <___floatunsisf>
    3bb6:	00 02 be    	mov.d     w0, w4
    3bb8:	02 00 20    	mov.w     #0x0, w2
    3bba:	03 f8 23    	mov.w     #0x3f80, w3
    3bbc:	04 00 be    	mov.d     w4, w0
    3bbe:	28 eb 07    	rcall     0x1210 <___addsf3>
    3bc0:	00 02 be    	mov.d     w0, w4
    3bc2:	04 01 be    	mov.d     w4, w2
    3bc4:	08 00 be    	mov.d     w8, w0
    3bc6:	37 ec 07    	rcall     0x1436 <___mulsf3>
    3bc8:	00 02 be    	mov.d     w0, w4

00003bca <.LSM69>:
}
    3bca:	04 00 be    	mov.d     w4, w0
    3bcc:	4f 04 be    	mov.d     [--w15], w8
    3bce:	00 80 fa    	ulnk      
    3bd0:	00 00 06    	return    

00003bd2 <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    3bd2:	06 00 fa    	lnk       #0x6
    3bd4:	00 0f 78    	mov.w     w0, [w14]
    3bd6:	12 07 98    	mov.w     w2, [w14+2]
    3bd8:	23 07 98    	mov.w     w3, [w14+4]

00003bda <.LSM71>:
    timer_setPeriod(self, 1./freq);
    3bda:	1e 01 90    	mov.w     [w14+2], w2
    3bdc:	ae 01 90    	mov.w     [w14+4], w3
    3bde:	00 00 20    	mov.w     #0x0, w0
    3be0:	01 f8 23    	mov.w     #0x3f80, w1
    3be2:	73 eb 07    	rcall     0x12ca <___divsf3>
    3be4:	00 02 be    	mov.d     w0, w4
    3be6:	04 01 be    	mov.d     w4, w2
    3be8:	1e 00 78    	mov.w     [w14], w0
    3bea:	43 ff 07    	rcall     0x3a72 <_timer_setPeriod>

00003bec <.LSM72>:
}
    3bec:	00 80 fa    	ulnk      
    3bee:	00 00 06    	return    

00003bf0 <_timer_freq>:

float timer_freq(_TIMER *self) {
    3bf0:	02 00 fa    	lnk       #0x2
    3bf2:	00 0f 78    	mov.w     w0, [w14]

00003bf4 <.LSM74>:
    return 1./timer_period(self);
    3bf4:	1e 00 78    	mov.w     [w14], w0
    3bf6:	ca ff 07    	rcall     0x3b8c <_timer_period>
    3bf8:	00 02 be    	mov.d     w0, w4
    3bfa:	04 01 be    	mov.d     w4, w2
    3bfc:	00 00 20    	mov.w     #0x0, w0
    3bfe:	01 f8 23    	mov.w     #0x3f80, w1
    3c00:	64 eb 07    	rcall     0x12ca <___divsf3>
    3c02:	00 02 be    	mov.d     w0, w4

00003c04 <.LSM75>:
}
    3c04:	04 00 be    	mov.d     w4, w0
    3c06:	00 80 fa    	ulnk      
    3c08:	00 00 06    	return    

00003c0a <_timer_time>:

float timer_time(_TIMER *self) {
    3c0a:	04 00 fa    	lnk       #0x4
    3c0c:	88 9f be    	mov.d     w8, [w15++]
    3c0e:	10 07 98    	mov.w     w0, [w14+2]

00003c10 <.LSM77>:
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    3c10:	1e 02 90    	mov.w     [w14+2], w4
    3c12:	14 02 78    	mov.w     [w4], w4
    3c14:	94 02 78    	mov.w     [w4], w5
    3c16:	04 03 20    	mov.w     #0x30, w4
    3c18:	04 82 62    	and.w     w5, w4, w4
    3c1a:	44 22 de    	lsr.w     w4, #0x4, w4
    3c1c:	04 0f 78    	mov.w     w4, [w14]

00003c1e <.LSM78>:

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    3c1e:	1e 02 78    	mov.w     [w14], w4
    3c20:	c2 22 dd    	sl.w      w4, #0x2, w5
    3c22:	64 cb 20    	mov.w     #0xcb6, w4
    3c24:	04 82 42    	add.w     w5, w4, w4
    3c26:	14 04 be    	mov.d     [w4], w8
    3c28:	1e 02 90    	mov.w     [w14+2], w4
    3c2a:	14 02 90    	mov.w     [w4+2], w4
    3c2c:	14 02 78    	mov.w     [w4], w4
    3c2e:	05 00 20    	mov.w     #0x0, w5
    3c30:	04 00 be    	mov.d     w4, w0
    3c32:	ac eb 07    	rcall     0x138c <___floatunsisf>
    3c34:	00 02 be    	mov.d     w0, w4
    3c36:	02 00 20    	mov.w     #0x0, w2
    3c38:	03 f8 23    	mov.w     #0x3f80, w3
    3c3a:	04 00 be    	mov.d     w4, w0
    3c3c:	e9 ea 07    	rcall     0x1210 <___addsf3>
    3c3e:	00 02 be    	mov.d     w0, w4
    3c40:	04 01 be    	mov.d     w4, w2
    3c42:	08 00 be    	mov.d     w8, w0
    3c44:	f8 eb 07    	rcall     0x1436 <___mulsf3>
    3c46:	00 02 be    	mov.d     w0, w4

00003c48 <.LSM79>:
}
    3c48:	04 00 be    	mov.d     w4, w0
    3c4a:	4f 04 be    	mov.d     [--w15], w8
    3c4c:	00 80 fa    	ulnk      
    3c4e:	00 00 06    	return    

00003c50 <_timer_start>:

void timer_start(_TIMER *self) {
    3c50:	02 00 fa    	lnk       #0x2
    3c52:	00 0f 78    	mov.w     w0, [w14]

00003c54 <.LSM81>:
    timer_lower(self);
    3c54:	1e 00 78    	mov.w     [w14], w0
    3c56:	2c 00 07    	rcall     0x3cb0 <_timer_lower>

00003c58 <.LSM82>:
    poke(self->TMRx, 0);
    3c58:	1e 02 78    	mov.w     [w14], w4
    3c5a:	24 02 90    	mov.w     [w4+4], w4
    3c5c:	80 02 eb    	clr.w     w5
    3c5e:	05 0a 78    	mov.w     w5, [w4]

00003c60 <.LSM83>:
    bitset(self->TxCON, 15);
    3c60:	1e 02 78    	mov.w     [w14], w4
    3c62:	14 02 78    	mov.w     [w4], w4
    3c64:	9e 02 78    	mov.w     [w14], w5
    3c66:	95 02 78    	mov.w     [w5], w5
    3c68:	15 03 78    	mov.w     [w5], w6
    3c6a:	05 00 28    	mov.w     #0x8000, w5
    3c6c:	86 82 72    	ior.w     w5, w6, w5
    3c6e:	05 0a 78    	mov.w     w5, [w4]

00003c70 <.LSM84>:
}
    3c70:	00 80 fa    	ulnk      
    3c72:	00 00 06    	return    

00003c74 <_timer_stop>:

void timer_stop(_TIMER *self) {
    3c74:	02 00 fa    	lnk       #0x2
    3c76:	00 0f 78    	mov.w     w0, [w14]

00003c78 <.LSM86>:
    bitclear(self->TxCON, 15);
    3c78:	1e 02 78    	mov.w     [w14], w4
    3c7a:	14 02 78    	mov.w     [w4], w4
    3c7c:	9e 02 78    	mov.w     [w14], w5
    3c7e:	95 02 78    	mov.w     [w5], w5
    3c80:	15 03 78    	mov.w     [w5], w6
    3c82:	f5 ff 27    	mov.w     #0x7fff, w5
    3c84:	85 02 63    	and.w     w6, w5, w5
    3c86:	05 0a 78    	mov.w     w5, [w4]

00003c88 <.LSM87>:
}
    3c88:	00 80 fa    	ulnk      
    3c8a:	00 00 06    	return    

00003c8c <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    3c8c:	02 00 fa    	lnk       #0x2
    3c8e:	00 0f 78    	mov.w     w0, [w14]

00003c90 <.LSM89>:
    return bitread(self->IFSy, self->flagbit);
    3c90:	1e 02 78    	mov.w     [w14], w4
    3c92:	34 02 90    	mov.w     [w4+6], w4
    3c94:	94 02 78    	mov.w     [w4], w5
    3c96:	1e 02 78    	mov.w     [w14], w4
    3c98:	24 4a 90    	mov.b     [w4+10], w4
    3c9a:	04 82 fb    	ze        w4, w4
    3c9c:	16 00 20    	mov.w     #0x1, w6
    3c9e:	04 32 dd    	sl.w      w6, w4, w4
    3ca0:	04 82 62    	and.w     w5, w4, w4
    3ca2:	04 f0 a7    	btsc.w    w4, #0xf
    3ca4:	04 02 ea    	neg.w     w4, w4
    3ca6:	04 02 ea    	neg.w     w4, w4
    3ca8:	4f 22 de    	lsr.w     w4, #0xf, w4

00003caa <.LSM90>:
}
    3caa:	04 00 78    	mov.w     w4, w0
    3cac:	00 80 fa    	ulnk      
    3cae:	00 00 06    	return    

00003cb0 <_timer_lower>:

void timer_lower(_TIMER *self) {
    3cb0:	02 00 fa    	lnk       #0x2
    3cb2:	00 0f 78    	mov.w     w0, [w14]

00003cb4 <.LSM92>:
    bitclear(self->IFSy, self->flagbit);
    3cb4:	1e 02 78    	mov.w     [w14], w4
    3cb6:	34 02 90    	mov.w     [w4+6], w4
    3cb8:	9e 02 78    	mov.w     [w14], w5
    3cba:	b5 02 90    	mov.w     [w5+6], w5
    3cbc:	15 03 78    	mov.w     [w5], w6
    3cbe:	9e 02 78    	mov.w     [w14], w5
    3cc0:	a5 4a 90    	mov.b     [w5+10], w5
    3cc2:	85 82 fb    	ze        w5, w5
    3cc4:	17 00 20    	mov.w     #0x1, w7
    3cc6:	85 3a dd    	sl.w      w7, w5, w5
    3cc8:	85 82 ea    	com.w     w5, w5
    3cca:	85 02 63    	and.w     w6, w5, w5
    3ccc:	05 0a 78    	mov.w     w5, [w4]

00003cce <.LSM93>:
}
    3cce:	00 80 fa    	ulnk      
    3cd0:	00 00 06    	return    

00003cd2 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    3cd2:	02 00 fa    	lnk       #0x2
    3cd4:	00 0f 78    	mov.w     w0, [w14]

00003cd6 <.LSM95>:
    return peek(self->TMRx);
    3cd6:	1e 02 78    	mov.w     [w14], w4
    3cd8:	24 02 90    	mov.w     [w4+4], w4
    3cda:	14 02 78    	mov.w     [w4], w4

00003cdc <.LSM96>:
}
    3cdc:	04 00 78    	mov.w     w4, w0
    3cde:	00 80 fa    	ulnk      
    3ce0:	00 00 06    	return    

00003ce2 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    3ce2:	02 00 fa    	lnk       #0x2
    3ce4:	00 0f 78    	mov.w     w0, [w14]

00003ce6 <.LSM98>:
    bitset(self->IECy, self->flagbit);
    3ce6:	1e 02 78    	mov.w     [w14], w4
    3ce8:	44 02 90    	mov.w     [w4+8], w4
    3cea:	9e 02 78    	mov.w     [w14], w5
    3cec:	c5 02 90    	mov.w     [w5+8], w5
    3cee:	15 03 78    	mov.w     [w5], w6
    3cf0:	9e 02 78    	mov.w     [w14], w5
    3cf2:	a5 4a 90    	mov.b     [w5+10], w5
    3cf4:	85 82 fb    	ze        w5, w5
    3cf6:	17 00 20    	mov.w     #0x1, w7
    3cf8:	85 3a dd    	sl.w      w7, w5, w5
    3cfa:	86 82 72    	ior.w     w5, w6, w5
    3cfc:	05 0a 78    	mov.w     w5, [w4]

00003cfe <.LSM99>:
}
    3cfe:	00 80 fa    	ulnk      
    3d00:	00 00 06    	return    

00003d02 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    3d02:	02 00 fa    	lnk       #0x2
    3d04:	00 0f 78    	mov.w     w0, [w14]

00003d06 <.LSM101>:
    bitclear(self->IECy, self->flagbit);
    3d06:	1e 02 78    	mov.w     [w14], w4
    3d08:	44 02 90    	mov.w     [w4+8], w4
    3d0a:	9e 02 78    	mov.w     [w14], w5
    3d0c:	c5 02 90    	mov.w     [w5+8], w5
    3d0e:	15 03 78    	mov.w     [w5], w6
    3d10:	9e 02 78    	mov.w     [w14], w5
    3d12:	a5 4a 90    	mov.b     [w5+10], w5
    3d14:	85 82 fb    	ze        w5, w5
    3d16:	17 00 20    	mov.w     #0x1, w7
    3d18:	85 3a dd    	sl.w      w7, w5, w5
    3d1a:	85 82 ea    	com.w     w5, w5
    3d1c:	85 02 63    	and.w     w6, w5, w5
    3d1e:	05 0a 78    	mov.w     w5, [w4]

00003d20 <.LSM102>:
}
    3d20:	00 80 fa    	ulnk      
    3d22:	00 00 06    	return    

00003d24 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    3d24:	08 00 fa    	lnk       #0x8
    3d26:	00 0f 78    	mov.w     w0, [w14]
    3d28:	12 07 98    	mov.w     w2, [w14+2]
    3d2a:	23 07 98    	mov.w     w3, [w14+4]
    3d2c:	31 07 98    	mov.w     w1, [w14+6]

00003d2e <.LSM104>:
    timer_disableInterrupt(self);
    3d2e:	1e 00 78    	mov.w     [w14], w0
    3d30:	e8 ff 07    	rcall     0x3d02 <_timer_disableInterrupt>

00003d32 <.LSM105>:
    timer_setPeriod(self, interval);
    3d32:	1e 01 90    	mov.w     [w14+2], w2
    3d34:	ae 01 90    	mov.w     [w14+4], w3
    3d36:	1e 00 78    	mov.w     [w14], w0
    3d38:	9c fe 07    	rcall     0x3a72 <_timer_setPeriod>

00003d3a <.LSM106>:
    self->aftercount = 0;
    3d3a:	1e 02 78    	mov.w     [w14], w4
    3d3c:	80 02 eb    	clr.w     w5
    3d3e:	05 0a 98    	mov.w     w5, [w4+16]

00003d40 <.LSM107>:
    self->every = callback;
    3d40:	1e 02 78    	mov.w     [w14], w4
    3d42:	be 02 90    	mov.w     [w14+6], w5
    3d44:	15 0a 98    	mov.w     w5, [w4+18]

00003d46 <.LSM108>:
    self->after = NULL;
    3d46:	1e 02 78    	mov.w     [w14], w4
    3d48:	80 02 eb    	clr.w     w5
    3d4a:	25 0a 98    	mov.w     w5, [w4+20]

00003d4c <.LSM109>:
    timer_enableInterrupt(self);
    3d4c:	1e 00 78    	mov.w     [w14], w0
    3d4e:	c9 ff 07    	rcall     0x3ce2 <_timer_enableInterrupt>

00003d50 <.LSM110>:
    timer_start(self);
    3d50:	1e 00 78    	mov.w     [w14], w0
    3d52:	7e ff 07    	rcall     0x3c50 <_timer_start>

00003d54 <.LSM111>:
}
    3d54:	00 80 fa    	ulnk      
    3d56:	00 00 06    	return    

00003d58 <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    3d58:	0a 00 fa    	lnk       #0xa
    3d5a:	00 0f 78    	mov.w     w0, [w14]
    3d5c:	12 07 98    	mov.w     w2, [w14+2]
    3d5e:	23 07 98    	mov.w     w3, [w14+4]
    3d60:	31 07 98    	mov.w     w1, [w14+6]
    3d62:	44 07 98    	mov.w     w4, [w14+8]

00003d64 <.LSM113>:
    timer_disableInterrupt(self);
    3d64:	1e 00 78    	mov.w     [w14], w0
    3d66:	cd ff 07    	rcall     0x3d02 <_timer_disableInterrupt>

00003d68 <.LSM114>:
    timer_setPeriod(self, delay);
    3d68:	1e 01 90    	mov.w     [w14+2], w2
    3d6a:	ae 01 90    	mov.w     [w14+4], w3
    3d6c:	1e 00 78    	mov.w     [w14], w0
    3d6e:	81 fe 07    	rcall     0x3a72 <_timer_setPeriod>

00003d70 <.LSM115>:
    self->aftercount = num_times;
    3d70:	1e 02 78    	mov.w     [w14], w4
    3d72:	be 02 90    	mov.w     [w14+6], w5
    3d74:	05 0a 98    	mov.w     w5, [w4+16]

00003d76 <.LSM116>:
    self->every = NULL;
    3d76:	1e 02 78    	mov.w     [w14], w4
    3d78:	80 02 eb    	clr.w     w5
    3d7a:	15 0a 98    	mov.w     w5, [w4+18]

00003d7c <.LSM117>:
    self->after = callback;
    3d7c:	1e 02 78    	mov.w     [w14], w4
    3d7e:	ce 02 90    	mov.w     [w14+8], w5
    3d80:	25 0a 98    	mov.w     w5, [w4+20]

00003d82 <.LSM118>:
    timer_enableInterrupt(self);
    3d82:	1e 00 78    	mov.w     [w14], w0
    3d84:	ae ff 07    	rcall     0x3ce2 <_timer_enableInterrupt>

00003d86 <.LSM119>:
    timer_start(self);
    3d86:	1e 00 78    	mov.w     [w14], w0
    3d88:	63 ff 07    	rcall     0x3c50 <_timer_start>

00003d8a <.LSM120>:
}
    3d8a:	00 80 fa    	ulnk      
    3d8c:	00 00 06    	return    

00003d8e <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    3d8e:	02 00 fa    	lnk       #0x2
    3d90:	00 0f 78    	mov.w     w0, [w14]

00003d92 <.LSM122>:
    timer_disableInterrupt(self);
    3d92:	1e 00 78    	mov.w     [w14], w0
    3d94:	b6 ff 07    	rcall     0x3d02 <_timer_disableInterrupt>

00003d96 <.LSM123>:
    timer_lower(self);
    3d96:	1e 00 78    	mov.w     [w14], w0
    3d98:	8b ff 07    	rcall     0x3cb0 <_timer_lower>

00003d9a <.LSM124>:
    timer_stop(self);
    3d9a:	1e 00 78    	mov.w     [w14], w0
    3d9c:	6b ff 07    	rcall     0x3c74 <_timer_stop>

00003d9e <.LSM125>:
    self->aftercount = 0;
    3d9e:	1e 02 78    	mov.w     [w14], w4
    3da0:	80 02 eb    	clr.w     w5
    3da2:	05 0a 98    	mov.w     w5, [w4+16]

00003da4 <.LSM126>:
    self->every = NULL;
    3da4:	1e 02 78    	mov.w     [w14], w4
    3da6:	80 02 eb    	clr.w     w5
    3da8:	15 0a 98    	mov.w     w5, [w4+18]

00003daa <.LSM127>:
    self->after = NULL;
    3daa:	1e 02 78    	mov.w     [w14], w4
    3dac:	80 02 eb    	clr.w     w5
    3dae:	25 0a 98    	mov.w     w5, [w4+20]

00003db0 <.LSM128>:
}
    3db0:	00 80 fa    	ulnk      
    3db2:	00 00 06    	return    

00003db4 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    3db4:	08 00 fa    	lnk       #0x8
    3db6:	30 07 98    	mov.w     w0, [w14+6]

00003db8 <.LSM1>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3db8:	3e 02 90    	mov.w     [w14+6], w4
    3dba:	04 0a 90    	mov.w     [w4+16], w4
    3dbc:	04 0f 78    	mov.w     w4, [w14]

00003dbe <.LSM2>:
    temp.w[0] = 0;
    3dbe:	00 02 eb    	clr.w     w4
    3dc0:	14 07 98    	mov.w     w4, [w14+2]

00003dc2 <.LSM3>:
    temp.w[1] = *(oc->OCxR);
    3dc2:	1e 02 78    	mov.w     [w14], w4
    3dc4:	34 02 90    	mov.w     [w4+6], w4
    3dc6:	14 02 78    	mov.w     [w4], w4
    3dc8:	24 07 98    	mov.w     w4, [w14+4]

00003dca <.LSM4>:
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    3dca:	1e 03 90    	mov.w     [w14+2], w6
    3dcc:	ae 03 90    	mov.w     [w14+4], w7
    3dce:	1e 02 78    	mov.w     [w14], w4
    3dd0:	24 02 90    	mov.w     [w4+4], w4
    3dd2:	14 02 78    	mov.w     [w4], w4
    3dd4:	05 00 20    	mov.w     #0x0, w5
    3dd6:	04 01 be    	mov.d     w4, w2
    3dd8:	06 00 be    	mov.d     w6, w0
    3dda:	61 eb 07    	rcall     0x149e <___udivsi3>
    3ddc:	00 02 be    	mov.d     w0, w4
    3dde:	04 02 78    	mov.w     w4, w4

00003de0 <.LSM5>:
}
    3de0:	04 00 78    	mov.w     w4, w0
    3de2:	00 80 fa    	ulnk      
    3de4:	00 00 06    	return    

00003de6 <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    3de6:	0a 00 fa    	lnk       #0xa
    3de8:	30 07 98    	mov.w     w0, [w14+6]
    3dea:	41 07 98    	mov.w     w1, [w14+8]

00003dec <.LSM7>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3dec:	3e 02 90    	mov.w     [w14+6], w4
    3dee:	04 0a 90    	mov.w     [w4+16], w4
    3df0:	04 0f 78    	mov.w     w4, [w14]

00003df2 <.LSM8>:
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    3df2:	4e 02 90    	mov.w     [w14+8], w4
    3df4:	61 23 b8    	mul.uu    w4, #0x1, w6
    3df6:	1e 02 78    	mov.w     [w14], w4
    3df8:	24 02 90    	mov.w     [w4+4], w4
    3dfa:	14 02 78    	mov.w     [w4], w4
    3dfc:	05 00 20    	mov.w     #0x0, w5
    3dfe:	04 b8 b9    	mul.ss    w7, w4, w0
    3e00:	00 00 78    	mov.w     w0, w0
    3e02:	06 a9 b9    	mul.ss    w5, w6, w2
    3e04:	82 00 78    	mov.w     w2, w1
    3e06:	01 00 40    	add.w     w0, w1, w0
    3e08:	06 03 78    	mov.w     w6, w6
    3e0a:	04 02 78    	mov.w     w4, w4
    3e0c:	04 32 b8    	mul.uu    w6, w4, w4
    3e0e:	05 00 40    	add.w     w0, w5, w0
    3e10:	80 02 78    	mov.w     w0, w5
    3e12:	14 07 98    	mov.w     w4, [w14+2]
    3e14:	25 07 98    	mov.w     w5, [w14+4]

00003e16 <.LSM9>:
    *(oc->OCxR) = temp.w[1];
    3e16:	1e 02 78    	mov.w     [w14], w4
    3e18:	34 02 90    	mov.w     [w4+6], w4
    3e1a:	ae 02 90    	mov.w     [w14+4], w5
    3e1c:	05 0a 78    	mov.w     w5, [w4]

00003e1e <.LSM10>:
}
    3e1e:	00 80 fa    	ulnk      
    3e20:	00 00 06    	return    

00003e22 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    3e22:	08 00 fa    	lnk       #0x8
    3e24:	30 07 98    	mov.w     w0, [w14+6]

00003e26 <.LSM12>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3e26:	3e 02 90    	mov.w     [w14+6], w4
    3e28:	04 0a 90    	mov.w     [w4+16], w4
    3e2a:	04 0f 78    	mov.w     w4, [w14]

00003e2c <.LSM13>:
    temp.w[0] = 0;
    3e2c:	00 02 eb    	clr.w     w4
    3e2e:	14 07 98    	mov.w     w4, [w14+2]

00003e30 <.LSM14>:
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    3e30:	1e 02 78    	mov.w     [w14], w4
    3e32:	24 02 90    	mov.w     [w4+4], w4
    3e34:	94 02 78    	mov.w     [w4], w5
    3e36:	1e 02 78    	mov.w     [w14], w4
    3e38:	64 02 90    	mov.w     [w4+12], w4
    3e3a:	04 82 52    	sub.w     w5, w4, w4
    3e3c:	24 07 98    	mov.w     w4, [w14+4]

00003e3e <.LSM15>:
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    3e3e:	1e 03 90    	mov.w     [w14+2], w6
    3e40:	ae 03 90    	mov.w     [w14+4], w7
    3e42:	1e 02 78    	mov.w     [w14], w4
    3e44:	74 02 90    	mov.w     [w4+14], w4
    3e46:	05 00 20    	mov.w     #0x0, w5
    3e48:	04 01 be    	mov.d     w4, w2
    3e4a:	06 00 be    	mov.d     w6, w0
    3e4c:	28 eb 07    	rcall     0x149e <___udivsi3>
    3e4e:	00 02 be    	mov.d     w0, w4
    3e50:	04 02 78    	mov.w     w4, w4

00003e52 <.LSM16>:
}
    3e52:	04 00 78    	mov.w     w4, w0
    3e54:	00 80 fa    	ulnk      
    3e56:	00 00 06    	return    

00003e58 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    3e58:	0a 00 fa    	lnk       #0xa
    3e5a:	30 07 98    	mov.w     w0, [w14+6]
    3e5c:	41 07 98    	mov.w     w1, [w14+8]

00003e5e <.LSM18>:
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    3e5e:	3e 02 90    	mov.w     [w14+6], w4
    3e60:	04 0a 90    	mov.w     [w4+16], w4
    3e62:	04 0f 78    	mov.w     w4, [w14]

00003e64 <.LSM19>:
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    3e64:	4e 02 90    	mov.w     [w14+8], w4
    3e66:	61 23 b8    	mul.uu    w4, #0x1, w6
    3e68:	1e 02 78    	mov.w     [w14], w4
    3e6a:	74 02 90    	mov.w     [w4+14], w4
    3e6c:	05 00 20    	mov.w     #0x0, w5
    3e6e:	04 b8 b9    	mul.ss    w7, w4, w0
    3e70:	00 00 78    	mov.w     w0, w0
    3e72:	06 a9 b9    	mul.ss    w5, w6, w2
    3e74:	82 00 78    	mov.w     w2, w1
    3e76:	01 00 40    	add.w     w0, w1, w0
    3e78:	06 03 78    	mov.w     w6, w6
    3e7a:	04 02 78    	mov.w     w4, w4
    3e7c:	04 32 b8    	mul.uu    w6, w4, w4
    3e7e:	05 00 40    	add.w     w0, w5, w0
    3e80:	80 02 78    	mov.w     w0, w5
    3e82:	14 07 98    	mov.w     w4, [w14+2]
    3e84:	25 07 98    	mov.w     w5, [w14+4]

00003e86 <.LSM20>:
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    3e86:	1e 02 78    	mov.w     [w14], w4
    3e88:	24 02 90    	mov.w     [w4+4], w4
    3e8a:	9e 02 78    	mov.w     [w14], w5
    3e8c:	65 03 90    	mov.w     [w5+12], w6
    3e8e:	ae 02 90    	mov.w     [w14+4], w5
    3e90:	85 02 43    	add.w     w6, w5, w5
    3e92:	05 0a 78    	mov.w     w5, [w4]

00003e94 <.LSM21>:
}
    3e94:	00 80 fa    	ulnk      
    3e96:	00 00 06    	return    

00003e98 <_init_oc>:

void init_oc(void) {
    3e98:	00 00 fa    	lnk       #0x0

00003e9a <.LSM23>:
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    3e9a:	26 01 20    	mov.w     #0x12, w6
    3e9c:	85 19 20    	mov.w     #0x198, w5
    3e9e:	64 19 20    	mov.w     #0x196, w4
    3ea0:	43 19 20    	mov.w     #0x194, w3
    3ea2:	22 19 20    	mov.w     #0x192, w2
    3ea4:	01 19 20    	mov.w     #0x190, w1
    3ea6:	80 ad 20    	mov.w     #0xad8, w0
    3ea8:	42 00 07    	rcall     0x3f2e <_oc_init>

00003eaa <.LSM24>:
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    3eaa:	36 01 20    	mov.w     #0x13, w6
    3eac:	25 1a 20    	mov.w     #0x1a2, w5
    3eae:	04 1a 20    	mov.w     #0x1a0, w4
    3eb0:	e3 19 20    	mov.w     #0x19e, w3
    3eb2:	c2 19 20    	mov.w     #0x19c, w2
    3eb4:	a1 19 20    	mov.w     #0x19a, w1
    3eb6:	a0 ae 20    	mov.w     #0xaea, w0
    3eb8:	3a 00 07    	rcall     0x3f2e <_oc_init>

00003eba <.LSM25>:
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    3eba:	46 01 20    	mov.w     #0x14, w6
    3ebc:	c5 1a 20    	mov.w     #0x1ac, w5
    3ebe:	a4 1a 20    	mov.w     #0x1aa, w4
    3ec0:	83 1a 20    	mov.w     #0x1a8, w3
    3ec2:	62 1a 20    	mov.w     #0x1a6, w2
    3ec4:	41 1a 20    	mov.w     #0x1a4, w1
    3ec6:	c0 af 20    	mov.w     #0xafc, w0
    3ec8:	32 00 07    	rcall     0x3f2e <_oc_init>

00003eca <.LSM26>:
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    3eca:	56 01 20    	mov.w     #0x15, w6
    3ecc:	65 1b 20    	mov.w     #0x1b6, w5
    3ece:	44 1b 20    	mov.w     #0x1b4, w4
    3ed0:	23 1b 20    	mov.w     #0x1b2, w3
    3ed2:	02 1b 20    	mov.w     #0x1b0, w2
    3ed4:	e1 1a 20    	mov.w     #0x1ae, w1
    3ed6:	e0 b0 20    	mov.w     #0xb0e, w0
    3ed8:	2a 00 07    	rcall     0x3f2e <_oc_init>

00003eda <.LSM27>:
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    3eda:	66 01 20    	mov.w     #0x16, w6
    3edc:	05 1c 20    	mov.w     #0x1c0, w5
    3ede:	e4 1b 20    	mov.w     #0x1be, w4
    3ee0:	c3 1b 20    	mov.w     #0x1bc, w3
    3ee2:	a2 1b 20    	mov.w     #0x1ba, w2
    3ee4:	81 1b 20    	mov.w     #0x1b8, w1
    3ee6:	00 b2 20    	mov.w     #0xb20, w0
    3ee8:	22 00 07    	rcall     0x3f2e <_oc_init>

00003eea <.LSM28>:
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    3eea:	76 01 20    	mov.w     #0x17, w6
    3eec:	a5 1c 20    	mov.w     #0x1ca, w5
    3eee:	84 1c 20    	mov.w     #0x1c8, w4
    3ef0:	63 1c 20    	mov.w     #0x1c6, w3
    3ef2:	42 1c 20    	mov.w     #0x1c4, w2
    3ef4:	21 1c 20    	mov.w     #0x1c2, w1
    3ef6:	20 b3 20    	mov.w     #0xb32, w0
    3ef8:	1a 00 07    	rcall     0x3f2e <_oc_init>

00003efa <.LSM29>:
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    3efa:	86 01 20    	mov.w     #0x18, w6
    3efc:	45 1d 20    	mov.w     #0x1d4, w5
    3efe:	24 1d 20    	mov.w     #0x1d2, w4
    3f00:	03 1d 20    	mov.w     #0x1d0, w3
    3f02:	e2 1c 20    	mov.w     #0x1ce, w2
    3f04:	c1 1c 20    	mov.w     #0x1cc, w1
    3f06:	40 b4 20    	mov.w     #0xb44, w0
    3f08:	12 00 07    	rcall     0x3f2e <_oc_init>

00003f0a <.LSM30>:
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    3f0a:	96 01 20    	mov.w     #0x19, w6
    3f0c:	e5 1d 20    	mov.w     #0x1de, w5
    3f0e:	c4 1d 20    	mov.w     #0x1dc, w4
    3f10:	a3 1d 20    	mov.w     #0x1da, w3
    3f12:	82 1d 20    	mov.w     #0x1d8, w2
    3f14:	61 1d 20    	mov.w     #0x1d6, w1
    3f16:	60 b5 20    	mov.w     #0xb56, w0
    3f18:	0a 00 07    	rcall     0x3f2e <_oc_init>

00003f1a <.LSM31>:
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    3f1a:	36 02 20    	mov.w     #0x23, w6
    3f1c:	85 1e 20    	mov.w     #0x1e8, w5
    3f1e:	64 1e 20    	mov.w     #0x1e6, w4
    3f20:	43 1e 20    	mov.w     #0x1e4, w3
    3f22:	22 1e 20    	mov.w     #0x1e2, w2
    3f24:	01 1e 20    	mov.w     #0x1e0, w1
    3f26:	80 b6 20    	mov.w     #0xb68, w0
    3f28:	02 00 07    	rcall     0x3f2e <_oc_init>

00003f2a <.LSM32>:
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    3f2a:	00 80 fa    	ulnk      
    3f2c:	00 00 06    	return    

00003f2e <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    3f2e:	0e 00 fa    	lnk       #0xe
    3f30:	00 0f 78    	mov.w     w0, [w14]
    3f32:	11 07 98    	mov.w     w1, [w14+2]
    3f34:	22 07 98    	mov.w     w2, [w14+4]
    3f36:	33 07 98    	mov.w     w3, [w14+6]
    3f38:	44 07 98    	mov.w     w4, [w14+8]
    3f3a:	55 07 98    	mov.w     w5, [w14+10]
    3f3c:	66 07 98    	mov.w     w6, [w14+12]

00003f3e <.LSM34>:
    self->OCxCON1 = OCxCON1;
    3f3e:	1e 02 78    	mov.w     [w14], w4
    3f40:	9e 02 90    	mov.w     [w14+2], w5
    3f42:	05 0a 78    	mov.w     w5, [w4]

00003f44 <.LSM35>:
    self->OCxCON2 = OCxCON2;
    3f44:	1e 02 78    	mov.w     [w14], w4
    3f46:	ae 02 90    	mov.w     [w14+4], w5
    3f48:	15 02 98    	mov.w     w5, [w4+2]

00003f4a <.LSM36>:
    self->OCxRS = OCxRS;
    3f4a:	1e 02 78    	mov.w     [w14], w4
    3f4c:	be 02 90    	mov.w     [w14+6], w5
    3f4e:	25 02 98    	mov.w     w5, [w4+4]

00003f50 <.LSM37>:
    self->OCxR = OCxR;
    3f50:	1e 02 78    	mov.w     [w14], w4
    3f52:	ce 02 90    	mov.w     [w14+8], w5
    3f54:	35 02 98    	mov.w     w5, [w4+6]

00003f56 <.LSM38>:
    self->OCxTMR = OCxTMR;
    3f56:	1e 02 78    	mov.w     [w14], w4
    3f58:	de 02 90    	mov.w     [w14+10], w5
    3f5a:	45 02 98    	mov.w     w5, [w4+8]

00003f5c <.LSM39>:
    self->servooffset = (uint16_t)(1e-3*FCY);
    3f5c:	1e 02 78    	mov.w     [w14], w4
    3f5e:	05 e8 23    	mov.w     #0x3e80, w5
    3f60:	65 02 98    	mov.w     w5, [w4+12]

00003f62 <.LSM40>:
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    3f62:	1e 02 78    	mov.w     [w14], w4
    3f64:	05 e8 23    	mov.w     #0x3e80, w5
    3f66:	75 02 98    	mov.w     w5, [w4+14]

00003f68 <.LSM41>:
    self->rpnum = rpnum;
    3f68:	1e 02 78    	mov.w     [w14], w4
    3f6a:	ee 02 90    	mov.w     [w14+12], w5
    3f6c:	55 02 98    	mov.w     w5, [w4+10]

00003f6e <.LSM42>:
    self->pin = NULL;
    3f6e:	1e 02 78    	mov.w     [w14], w4
    3f70:	80 02 eb    	clr.w     w5
    3f72:	05 0a 98    	mov.w     w5, [w4+16]

00003f74 <.LSM43>:
}
    3f74:	00 80 fa    	ulnk      
    3f76:	00 00 06    	return    

00003f78 <_oc_free>:

void oc_free(_OC *self) {
    3f78:	02 00 fa    	lnk       #0x2
    3f7a:	00 0f 78    	mov.w     w0, [w14]

00003f7c <.LSM45>:
    *(self->OCxCON1) = 0;
    3f7c:	1e 02 78    	mov.w     [w14], w4
    3f7e:	14 02 78    	mov.w     [w4], w4
    3f80:	80 02 eb    	clr.w     w5
    3f82:	05 0a 78    	mov.w     w5, [w4]

00003f84 <.LSM46>:
    *(self->OCxCON2) = 0;
    3f84:	1e 02 78    	mov.w     [w14], w4
    3f86:	14 02 90    	mov.w     [w4+2], w4
    3f88:	80 02 eb    	clr.w     w5
    3f8a:	05 0a 78    	mov.w     w5, [w4]

00003f8c <.LSM47>:
    if (self->pin) {
    3f8c:	1e 02 78    	mov.w     [w14], w4
    3f8e:	04 0a 90    	mov.w     [w4+16], w4
    3f90:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    3f92:	31 00 32    	bra       Z, 0x3ff6 <.L7>

00003f94 <.LSM48>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    3f94:	15 3a 80    	mov.w     0x742, w5
    3f96:	f4 0b 20    	mov.w     #0xbf, w4
    3f98:	04 83 62    	and.w     w5, w4, w6
    3f9a:	64 04 20    	mov.w     #0x46, w4
    3f9c:	75 05 20    	mov.w     #0x57, w5
    3f9e:	27 74 20    	mov.w     #0x742, w7
    3fa0:	84 4b 78    	mov.b     w4, [w7]
    3fa2:	85 4b 78    	mov.b     w5, [w7]
    3fa4:	86 4b 78    	mov.b     w6, [w7]

00003fa6 <.LSM49>:
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    3fa6:	1e 02 78    	mov.w     [w14], w4
    3fa8:	04 0a 90    	mov.w     [w4+16], w4
    3faa:	74 02 90    	mov.w     [w4+14], w4
    3fac:	9e 02 78    	mov.w     [w14], w5
    3fae:	85 0a 90    	mov.w     [w5+16], w5
    3fb0:	f5 02 90    	mov.w     [w5+14], w5
    3fb2:	15 03 78    	mov.w     [w5], w6
    3fb4:	9e 02 78    	mov.w     [w14], w5
    3fb6:	85 0a 90    	mov.w     [w5+16], w5
    3fb8:	a5 4a 90    	mov.b     [w5+10], w5
    3fba:	85 82 fb    	ze        w5, w5
    3fbc:	f7 03 20    	mov.w     #0x3f, w7
    3fbe:	85 3a dd    	sl.w      w7, w5, w5
    3fc0:	85 82 ea    	com.w     w5, w5
    3fc2:	85 02 63    	and.w     w6, w5, w5
    3fc4:	05 0a 78    	mov.w     w5, [w4]

00003fc6 <.LSM50>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    3fc6:	15 3a 80    	mov.w     0x742, w5
    3fc8:	04 04 20    	mov.w     #0x40, w4
    3fca:	05 03 72    	ior.w     w4, w5, w6
    3fcc:	64 04 20    	mov.w     #0x46, w4
    3fce:	75 05 20    	mov.w     #0x57, w5
    3fd0:	27 74 20    	mov.w     #0x742, w7
    3fd2:	84 4b 78    	mov.b     w4, [w7]
    3fd4:	85 4b 78    	mov.b     w5, [w7]
    3fd6:	86 4b 78    	mov.b     w6, [w7]

00003fd8 <.LSM51>:
        self->pin->owner = NULL;
    3fd8:	1e 02 78    	mov.w     [w14], w4
    3fda:	04 0a 90    	mov.w     [w4+16], w4
    3fdc:	80 02 eb    	clr.w     w5
    3fde:	05 0a 98    	mov.w     w5, [w4+16]

00003fe0 <.LSM52>:
        pin_digitalOut(self->pin);
    3fe0:	1e 02 78    	mov.w     [w14], w4
    3fe2:	04 0a 90    	mov.w     [w4+16], w4
    3fe4:	04 00 78    	mov.w     w4, w0
    3fe6:	10 03 07    	rcall     0x4608 <_pin_digitalOut>

00003fe8 <.LSM53>:
        pin_clear(self->pin);
    3fe8:	1e 02 78    	mov.w     [w14], w4
    3fea:	04 0a 90    	mov.w     [w4+16], w4
    3fec:	04 00 78    	mov.w     w4, w0
    3fee:	7e 03 07    	rcall     0x46ec <_pin_clear>

00003ff0 <.LSM54>:
        self->pin = NULL;
    3ff0:	1e 02 78    	mov.w     [w14], w4
    3ff2:	80 02 eb    	clr.w     w5
    3ff4:	05 0a 98    	mov.w     w5, [w4+16]

00003ff6 <.L7>:
    }
}
    3ff6:	00 80 fa    	ulnk      
    3ff8:	00 00 06    	return    

00003ffa <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    3ffa:	10 00 fa    	lnk       #0x10
    3ffc:	88 1f 78    	mov.w     w8, [w15++]
    3ffe:	20 07 98    	mov.w     w0, [w14+4]
    4000:	31 07 98    	mov.w     w1, [w14+6]
    4002:	42 07 98    	mov.w     w2, [w14+8]
    4004:	54 07 98    	mov.w     w4, [w14+10]
    4006:	65 07 98    	mov.w     w5, [w14+12]
    4008:	73 07 98    	mov.w     w3, [w14+14]

0000400a <.LSM57>:
    WORD32 temp;

    if (pin->rpnum==-1)
    400a:	3e 02 90    	mov.w     [w14+6], w4
    400c:	64 02 90    	mov.w     [w4+12], w4
    400e:	e1 0f 42    	add.w     w4, #0x1, [w15]
    4010:	a4 00 32    	bra       Z, 0x415a <.L18>

00004012 <.LSM58>:
        return;
    if (pin->owner==NULL) {
    4012:	3e 02 90    	mov.w     [w14+6], w4
    4014:	04 0a 90    	mov.w     [w4+16], w4
    4016:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4018:	33 00 3a    	bra       NZ, 0x4080 <.L12>

0000401a <.LSM59>:
        self->pin = pin;
    401a:	2e 02 90    	mov.w     [w14+4], w4
    401c:	be 02 90    	mov.w     [w14+6], w5
    401e:	05 0a 98    	mov.w     w5, [w4+16]

00004020 <.LSM60>:
        pin->owner = (void *)self;
    4020:	3e 02 90    	mov.w     [w14+6], w4
    4022:	ae 02 90    	mov.w     [w14+4], w5
    4024:	05 0a 98    	mov.w     w5, [w4+16]

00004026 <.LSM61>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    4026:	15 3a 80    	mov.w     0x742, w5
    4028:	f4 0b 20    	mov.w     #0xbf, w4
    402a:	04 83 62    	and.w     w5, w4, w6
    402c:	64 04 20    	mov.w     #0x46, w4
    402e:	75 05 20    	mov.w     #0x57, w5
    4030:	27 74 20    	mov.w     #0x742, w7
    4032:	84 4b 78    	mov.b     w4, [w7]
    4034:	85 4b 78    	mov.b     w5, [w7]
    4036:	86 4b 78    	mov.b     w6, [w7]

00004038 <.LSM62>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    4038:	3e 02 90    	mov.w     [w14+6], w4
    403a:	74 02 90    	mov.w     [w4+14], w4
    403c:	be 02 90    	mov.w     [w14+6], w5
    403e:	f5 02 90    	mov.w     [w5+14], w5
    4040:	15 03 78    	mov.w     [w5], w6
    4042:	be 02 90    	mov.w     [w14+6], w5
    4044:	a5 4a 90    	mov.b     [w5+10], w5
    4046:	85 82 fb    	ze        w5, w5
    4048:	f7 03 20    	mov.w     #0x3f, w7
    404a:	85 3a dd    	sl.w      w7, w5, w5
    404c:	85 82 ea    	com.w     w5, w5
    404e:	85 02 63    	and.w     w6, w5, w5
    4050:	05 0a 78    	mov.w     w5, [w4]

00004052 <.LSM63>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    4052:	3e 02 90    	mov.w     [w14+6], w4
    4054:	74 02 90    	mov.w     [w4+14], w4
    4056:	be 02 90    	mov.w     [w14+6], w5
    4058:	f5 02 90    	mov.w     [w5+14], w5
    405a:	15 03 78    	mov.w     [w5], w6
    405c:	ae 02 90    	mov.w     [w14+4], w5
    405e:	d5 03 90    	mov.w     [w5+10], w7
    4060:	be 02 90    	mov.w     [w14+6], w5
    4062:	a5 4a 90    	mov.b     [w5+10], w5
    4064:	85 82 fb    	ze        w5, w5
    4066:	85 3a dd    	sl.w      w7, w5, w5
    4068:	86 82 72    	ior.w     w5, w6, w5
    406a:	05 0a 78    	mov.w     w5, [w4]

0000406c <.LSM64>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    406c:	15 3a 80    	mov.w     0x742, w5
    406e:	04 04 20    	mov.w     #0x40, w4
    4070:	05 03 72    	ior.w     w4, w5, w6
    4072:	64 04 20    	mov.w     #0x46, w4
    4074:	75 05 20    	mov.w     #0x57, w5
    4076:	27 74 20    	mov.w     #0x742, w7
    4078:	84 4b 78    	mov.b     w4, [w7]
    407a:	85 4b 78    	mov.b     w5, [w7]
    407c:	86 4b 78    	mov.b     w6, [w7]
    407e:	05 00 37    	bra       0x408a <.L13>

00004080 <.L12>:
    } else if (pin->owner!=(void *)self) {
    4080:	3e 02 90    	mov.w     [w14+6], w4
    4082:	84 0a 90    	mov.w     [w4+16], w5
    4084:	2e 02 90    	mov.w     [w14+4], w4
    4086:	84 8f 52    	sub.w     w5, w4, [w15]
    4088:	6a 00 3a    	bra       NZ, 0x415e <.L19>

0000408a <.L13>:
        return;
    }
    if (timer) {
    408a:	4e 02 90    	mov.w     [w14+8], w4
    408c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    408e:	1c 00 32    	bra       Z, 0x40c8 <.L14>

00004090 <.LSM67>:
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    4090:	2e 02 90    	mov.w     [w14+4], w4
    4092:	14 02 78    	mov.w     [w4], w4
    4094:	ce 02 90    	mov.w     [w14+8], w5
    4096:	e5 02 90    	mov.w     [w5+12], w5
    4098:	ca 2a dd    	sl.w      w5, #0xa, w5
    409a:	65 00 b3    	ior.w     #0x6, w5
    409c:	05 0a 78    	mov.w     w5, [w4]

0000409e <.LSM68>:
        *(self->OCxCON2) = 0x001F;
    409e:	2e 02 90    	mov.w     [w14+4], w4
    40a0:	14 02 90    	mov.w     [w4+2], w4
    40a2:	f5 01 20    	mov.w     #0x1f, w5
    40a4:	05 0a 78    	mov.w     w5, [w4]

000040a6 <.LSM69>:
        timer_setFreq(timer, freq);
    40a6:	5e 01 90    	mov.w     [w14+10], w2
    40a8:	ee 01 90    	mov.w     [w14+12], w3
    40aa:	4e 00 90    	mov.w     [w14+8], w0
    40ac:	92 fd 07    	rcall     0x3bd2 <_timer_setFreq>

000040ae <.LSM70>:
        *(self->OCxRS) = *(timer->PRx);
    40ae:	2e 02 90    	mov.w     [w14+4], w4
    40b0:	24 02 90    	mov.w     [w4+4], w4
    40b2:	ce 02 90    	mov.w     [w14+8], w5
    40b4:	95 02 90    	mov.w     [w5+2], w5
    40b6:	95 02 78    	mov.w     [w5], w5
    40b8:	05 0a 78    	mov.w     w5, [w4]

000040ba <.LSM71>:
        *(self->OCxTMR) = 0;
    40ba:	2e 02 90    	mov.w     [w14+4], w4
    40bc:	44 02 90    	mov.w     [w4+8], w4
    40be:	80 02 eb    	clr.w     w5
    40c0:	05 0a 78    	mov.w     w5, [w4]

000040c2 <.LSM72>:
        timer_start(timer);
    40c2:	4e 00 90    	mov.w     [w14+8], w0
    40c4:	c5 fd 07    	rcall     0x3c50 <_timer_start>
    40c6:	2b 00 37    	bra       0x411e <.L15>

000040c8 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    40c8:	2e 02 90    	mov.w     [w14+4], w4
    40ca:	14 02 78    	mov.w     [w4], w4
    40cc:	65 c0 21    	mov.w     #0x1c06, w5
    40ce:	05 0a 78    	mov.w     w5, [w4]

000040d0 <.LSM74>:
        *(self->OCxCON2) = 0x001F;
    40d0:	2e 02 90    	mov.w     [w14+4], w4
    40d2:	14 02 90    	mov.w     [w4+2], w4
    40d4:	f5 01 20    	mov.w     #0x1f, w5
    40d6:	05 0a 78    	mov.w     w5, [w4]

000040d8 <.LSM75>:
        if (freq<(FCY/65536.))
    40d8:	18 c0 b3    	mov.b     #0x1, w8
    40da:	02 40 22    	mov.w     #0x2400, w2
    40dc:	43 37 24    	mov.w     #0x4374, w3
    40de:	5e 00 90    	mov.w     [w14+10], w0
    40e0:	ee 00 90    	mov.w     [w14+12], w1
    40e2:	35 e9 07    	rcall     0x134e <___eqsf2>
    40e4:	00 02 78    	mov.w     w0, w4
    40e6:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    40e8:	01 00 35    	bra       LT, 0x40ec <.L16>
    40ea:	00 44 eb    	clr.b     w8

000040ec <.L16>:
    40ec:	e0 4f 54    	sub.b     w8, #0x0, [w15]
    40ee:	05 00 32    	bra       Z, 0x40fa <.L17>

000040f0 <.LSM76>:
            *(self->OCxRS) = 0xFFFF;
    40f0:	2e 02 90    	mov.w     [w14+4], w4
    40f2:	24 02 90    	mov.w     [w4+4], w4
    40f4:	80 82 eb    	setm.w    w5
    40f6:	05 0a 78    	mov.w     w5, [w4]
    40f8:	12 00 37    	bra       0x411e <.L15>

000040fa <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    40fa:	2e 02 90    	mov.w     [w14+4], w4
    40fc:	24 04 90    	mov.w     [w4+4], w8
    40fe:	5e 01 90    	mov.w     [w14+10], w2
    4100:	ee 01 90    	mov.w     [w14+12], w3
    4102:	00 40 22    	mov.w     #0x2400, w0
    4104:	41 b7 24    	mov.w     #0x4b74, w1
    4106:	e1 e8 07    	rcall     0x12ca <___divsf3>
    4108:	00 02 be    	mov.d     w0, w4
    410a:	02 00 20    	mov.w     #0x0, w2
    410c:	03 f8 23    	mov.w     #0x3f80, w3
    410e:	04 00 be    	mov.d     w4, w0
    4110:	7e e8 07    	rcall     0x120e <___subsf3>
    4112:	00 02 be    	mov.d     w0, w4
    4114:	04 00 be    	mov.d     w4, w0
    4116:	1f e9 07    	rcall     0x1356 <___fixunssfsi>
    4118:	00 02 be    	mov.d     w0, w4
    411a:	04 02 78    	mov.w     w4, w4
    411c:	04 0c 78    	mov.w     w4, [w8]

0000411e <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    411e:	7e 02 90    	mov.w     [w14+14], w4
    4120:	61 23 b8    	mul.uu    w4, #0x1, w6
    4122:	2e 02 90    	mov.w     [w14+4], w4
    4124:	24 02 90    	mov.w     [w4+4], w4
    4126:	14 02 78    	mov.w     [w4], w4
    4128:	05 00 20    	mov.w     #0x0, w5
    412a:	04 b8 b9    	mul.ss    w7, w4, w0
    412c:	00 00 78    	mov.w     w0, w0
    412e:	06 a9 b9    	mul.ss    w5, w6, w2
    4130:	82 00 78    	mov.w     w2, w1
    4132:	01 00 40    	add.w     w0, w1, w0
    4134:	06 03 78    	mov.w     w6, w6
    4136:	04 02 78    	mov.w     w4, w4
    4138:	04 32 b8    	mul.uu    w6, w4, w4
    413a:	05 00 40    	add.w     w0, w5, w0
    413c:	80 02 78    	mov.w     w0, w5
    413e:	04 8f be    	mov.d     w4, [w14]

00004140 <.LSM79>:
    *(self->OCxR) = temp.w[1];
    4140:	2e 02 90    	mov.w     [w14+4], w4
    4142:	34 02 90    	mov.w     [w4+6], w4
    4144:	9e 02 90    	mov.w     [w14+2], w5
    4146:	05 0a 78    	mov.w     w5, [w4]

00004148 <.LSM80>:
    self->pin->write = __pwmWrite;
    4148:	2e 02 90    	mov.w     [w14+4], w4
    414a:	04 0a 90    	mov.w     [w4+16], w4
    414c:	65 de 23    	mov.w     #0x3de6, w5
    414e:	15 0a 98    	mov.w     w5, [w4+18]

00004150 <.LSM81>:
    self->pin->read = __pwmRead;
    4150:	2e 02 90    	mov.w     [w14+4], w4
    4152:	04 0a 90    	mov.w     [w4+16], w4
    4154:	45 db 23    	mov.w     #0x3db4, w5
    4156:	25 0a 98    	mov.w     w5, [w4+20]
    4158:	03 00 37    	bra       0x4160 <.L9>

0000415a <.L18>:
    415a:	00 00 00    	nop       
    415c:	01 00 37    	bra       0x4160 <.L9>

0000415e <.L19>:
    415e:	00 00 00    	nop       

00004160 <.L9>:
}
    4160:	4f 04 78    	mov.w     [--w15], w8
    4162:	00 80 fa    	ulnk      
    4164:	00 00 06    	return    

00004166 <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    4166:	14 00 fa    	lnk       #0x14
    4168:	20 07 98    	mov.w     w0, [w14+4]
    416a:	31 07 98    	mov.w     w1, [w14+6]
    416c:	42 07 98    	mov.w     w2, [w14+8]
    416e:	54 07 98    	mov.w     w4, [w14+10]
    4170:	65 07 98    	mov.w     w5, [w14+12]
    4172:	76 07 98    	mov.w     w6, [w14+14]
    4174:	07 0f 98    	mov.w     w7, [w14+16]
    4176:	13 0f 98    	mov.w     w3, [w14+18]

00004178 <.LSM86>:
    WORD32 temp;

    if (pin->rpnum==-1)
    4178:	3e 02 90    	mov.w     [w14+6], w4
    417a:	64 02 90    	mov.w     [w4+12], w4
    417c:	e1 0f 42    	add.w     w4, #0x1, [w15]
    417e:	91 00 32    	bra       Z, 0x42a2 <.L25>

00004180 <.LSM87>:
        return;
    if (pin->owner==NULL) {
    4180:	3e 02 90    	mov.w     [w14+6], w4
    4182:	04 0a 90    	mov.w     [w4+16], w4
    4184:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4186:	33 00 3a    	bra       NZ, 0x41ee <.L23>

00004188 <.LSM88>:
        self->pin = pin;
    4188:	2e 02 90    	mov.w     [w14+4], w4
    418a:	be 02 90    	mov.w     [w14+6], w5
    418c:	05 0a 98    	mov.w     w5, [w4+16]

0000418e <.LSM89>:
        pin->owner = (void *)self;
    418e:	3e 02 90    	mov.w     [w14+6], w4
    4190:	ae 02 90    	mov.w     [w14+4], w5
    4192:	05 0a 98    	mov.w     w5, [w4+16]

00004194 <.LSM90>:
        __builtin_write_OSCCONL(OSCCON&0xBF);
    4194:	15 3a 80    	mov.w     0x742, w5
    4196:	f4 0b 20    	mov.w     #0xbf, w4
    4198:	04 83 62    	and.w     w5, w4, w6
    419a:	64 04 20    	mov.w     #0x46, w4
    419c:	75 05 20    	mov.w     #0x57, w5
    419e:	27 74 20    	mov.w     #0x742, w7
    41a0:	84 4b 78    	mov.b     w4, [w7]
    41a2:	85 4b 78    	mov.b     w5, [w7]
    41a4:	86 4b 78    	mov.b     w6, [w7]

000041a6 <.LSM91>:
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    41a6:	3e 02 90    	mov.w     [w14+6], w4
    41a8:	74 02 90    	mov.w     [w4+14], w4
    41aa:	be 02 90    	mov.w     [w14+6], w5
    41ac:	f5 02 90    	mov.w     [w5+14], w5
    41ae:	15 03 78    	mov.w     [w5], w6
    41b0:	be 02 90    	mov.w     [w14+6], w5
    41b2:	a5 4a 90    	mov.b     [w5+10], w5
    41b4:	85 82 fb    	ze        w5, w5
    41b6:	f7 03 20    	mov.w     #0x3f, w7
    41b8:	85 3a dd    	sl.w      w7, w5, w5
    41ba:	85 82 ea    	com.w     w5, w5
    41bc:	85 02 63    	and.w     w6, w5, w5
    41be:	05 0a 78    	mov.w     w5, [w4]

000041c0 <.LSM92>:
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    41c0:	3e 02 90    	mov.w     [w14+6], w4
    41c2:	74 02 90    	mov.w     [w4+14], w4
    41c4:	be 02 90    	mov.w     [w14+6], w5
    41c6:	f5 02 90    	mov.w     [w5+14], w5
    41c8:	15 03 78    	mov.w     [w5], w6
    41ca:	ae 02 90    	mov.w     [w14+4], w5
    41cc:	d5 03 90    	mov.w     [w5+10], w7
    41ce:	be 02 90    	mov.w     [w14+6], w5
    41d0:	a5 4a 90    	mov.b     [w5+10], w5
    41d2:	85 82 fb    	ze        w5, w5
    41d4:	85 3a dd    	sl.w      w7, w5, w5
    41d6:	86 82 72    	ior.w     w5, w6, w5
    41d8:	05 0a 78    	mov.w     w5, [w4]

000041da <.LSM93>:
        __builtin_write_OSCCONL(OSCCON|0x40);
    41da:	15 3a 80    	mov.w     0x742, w5
    41dc:	04 04 20    	mov.w     #0x40, w4
    41de:	05 03 72    	ior.w     w4, w5, w6
    41e0:	64 04 20    	mov.w     #0x46, w4
    41e2:	75 05 20    	mov.w     #0x57, w5
    41e4:	27 74 20    	mov.w     #0x742, w7
    41e6:	84 4b 78    	mov.b     w4, [w7]
    41e8:	85 4b 78    	mov.b     w5, [w7]
    41ea:	86 4b 78    	mov.b     w6, [w7]
    41ec:	05 00 37    	bra       0x41f8 <.L24>

000041ee <.L23>:
    } else if (pin->owner!=(void *)self) {
    41ee:	3e 02 90    	mov.w     [w14+6], w4
    41f0:	84 0a 90    	mov.w     [w4+16], w5
    41f2:	2e 02 90    	mov.w     [w14+4], w4
    41f4:	84 8f 52    	sub.w     w5, w4, [w15]
    41f6:	57 00 3a    	bra       NZ, 0x42a6 <.L26>

000041f8 <.L24>:
        return;
    }
    if (timer) {
    41f8:	4e 02 90    	mov.w     [w14+8], w4
    41fa:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    41fc:	55 00 32    	bra       Z, 0x42a8 <.L20>

000041fe <.LSM96>:
        self->servooffset = (uint16_t)(FCY*min_width);
    41fe:	02 40 22    	mov.w     #0x2400, w2
    4200:	43 b7 24    	mov.w     #0x4b74, w3
    4202:	7e 00 90    	mov.w     [w14+14], w0
    4204:	8e 08 90    	mov.w     [w14+16], w1
    4206:	17 e9 07    	rcall     0x1436 <___mulsf3>
    4208:	00 02 be    	mov.d     w0, w4
    420a:	04 00 be    	mov.d     w4, w0
    420c:	a4 e8 07    	rcall     0x1356 <___fixunssfsi>
    420e:	00 02 be    	mov.d     w0, w4
    4210:	84 02 78    	mov.w     w4, w5
    4212:	2e 02 90    	mov.w     [w14+4], w4
    4214:	65 02 98    	mov.w     w5, [w4+12]

00004216 <.LSM97>:
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    4216:	7e 01 90    	mov.w     [w14+14], w2
    4218:	8e 09 90    	mov.w     [w14+16], w3
    421a:	3e b8 97    	mov.w     [w14-10], w0
    421c:	ce b8 97    	mov.w     [w14-8], w1
    421e:	f7 e7 07    	rcall     0x120e <___subsf3>
    4220:	00 02 be    	mov.d     w0, w4
    4222:	02 40 22    	mov.w     #0x2400, w2
    4224:	43 b7 24    	mov.w     #0x4b74, w3
    4226:	04 00 be    	mov.d     w4, w0
    4228:	06 e9 07    	rcall     0x1436 <___mulsf3>
    422a:	00 02 be    	mov.d     w0, w4
    422c:	04 00 be    	mov.d     w4, w0
    422e:	93 e8 07    	rcall     0x1356 <___fixunssfsi>
    4230:	00 02 be    	mov.d     w0, w4
    4232:	84 02 78    	mov.w     w4, w5
    4234:	2e 02 90    	mov.w     [w14+4], w4
    4236:	75 02 98    	mov.w     w5, [w4+14]

00004238 <.LSM98>:
        *(self->OCxCON1) = 0x1C0F;
    4238:	2e 02 90    	mov.w     [w14+4], w4
    423a:	14 02 78    	mov.w     [w4], w4
    423c:	f5 c0 21    	mov.w     #0x1c0f, w5
    423e:	05 0a 78    	mov.w     w5, [w4]

00004240 <.LSM99>:
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    4240:	2e 02 90    	mov.w     [w14+4], w4
    4242:	14 02 90    	mov.w     [w4+2], w4
    4244:	ce 02 90    	mov.w     [w14+8], w5
    4246:	75 03 90    	mov.w     [w5+14], w6
    4248:	05 08 20    	mov.w     #0x80, w5
    424a:	86 82 72    	ior.w     w5, w6, w5
    424c:	05 0a 78    	mov.w     w5, [w4]

0000424e <.LSM100>:
        *(self->OCxR) = 1;
    424e:	2e 02 90    	mov.w     [w14+4], w4
    4250:	34 02 90    	mov.w     [w4+6], w4
    4252:	15 00 20    	mov.w     #0x1, w5
    4254:	05 0a 78    	mov.w     w5, [w4]

00004256 <.LSM101>:
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    4256:	1e 0a 90    	mov.w     [w14+18], w4
    4258:	61 23 b8    	mul.uu    w4, #0x1, w6
    425a:	2e 02 90    	mov.w     [w14+4], w4
    425c:	74 02 90    	mov.w     [w4+14], w4
    425e:	05 00 20    	mov.w     #0x0, w5
    4260:	04 b8 b9    	mul.ss    w7, w4, w0
    4262:	00 00 78    	mov.w     w0, w0
    4264:	06 a9 b9    	mul.ss    w5, w6, w2
    4266:	82 00 78    	mov.w     w2, w1
    4268:	01 00 40    	add.w     w0, w1, w0
    426a:	06 03 78    	mov.w     w6, w6
    426c:	04 02 78    	mov.w     w4, w4
    426e:	04 32 b8    	mul.uu    w6, w4, w4
    4270:	05 00 40    	add.w     w0, w5, w0
    4272:	80 02 78    	mov.w     w0, w5
    4274:	04 8f be    	mov.d     w4, [w14]

00004276 <.LSM102>:
        *(self->OCxRS) = self->servooffset+temp.w[1];
    4276:	2e 02 90    	mov.w     [w14+4], w4
    4278:	24 02 90    	mov.w     [w4+4], w4
    427a:	ae 02 90    	mov.w     [w14+4], w5
    427c:	65 03 90    	mov.w     [w5+12], w6
    427e:	9e 02 90    	mov.w     [w14+2], w5
    4280:	85 02 43    	add.w     w6, w5, w5
    4282:	05 0a 78    	mov.w     w5, [w4]

00004284 <.LSM103>:
        timer_setPeriod(timer, interval);
    4284:	5e 01 90    	mov.w     [w14+10], w2
    4286:	ee 01 90    	mov.w     [w14+12], w3
    4288:	4e 00 90    	mov.w     [w14+8], w0
    428a:	f3 fb 07    	rcall     0x3a72 <_timer_setPeriod>

0000428c <.LSM104>:
        timer_start(timer);
    428c:	4e 00 90    	mov.w     [w14+8], w0
    428e:	e0 fc 07    	rcall     0x3c50 <_timer_start>

00004290 <.LSM105>:
        self->pin->write = __servoWrite;
    4290:	2e 02 90    	mov.w     [w14+4], w4
    4292:	04 0a 90    	mov.w     [w4+16], w4
    4294:	85 e5 23    	mov.w     #0x3e58, w5
    4296:	15 0a 98    	mov.w     w5, [w4+18]

00004298 <.LSM106>:
        self->pin->read = __servoRead;
    4298:	2e 02 90    	mov.w     [w14+4], w4
    429a:	04 0a 90    	mov.w     [w4+16], w4
    429c:	25 e2 23    	mov.w     #0x3e22, w5
    429e:	25 0a 98    	mov.w     w5, [w4+20]
    42a0:	03 00 37    	bra       0x42a8 <.L20>

000042a2 <.L25>:
    42a2:	00 00 00    	nop       
    42a4:	01 00 37    	bra       0x42a8 <.L20>

000042a6 <.L26>:
    42a6:	00 00 00    	nop       

000042a8 <.L20>:
    }
}
    42a8:	00 80 fa    	ulnk      
    42aa:	00 00 06    	return    

000042ac <___digitalWrite>:
#include "pin.h"

_PIN D[14], A[6];

void __digitalWrite(_PIN *self, uint16_t val) {
    42ac:	04 00 fa    	lnk       #0x4
    42ae:	00 0f 78    	mov.w     w0, [w14]
    42b0:	11 07 98    	mov.w     w1, [w14+2]

000042b2 <.LSM1>:
    if (val)
    42b2:	1e 02 90    	mov.w     [w14+2], w4
    42b4:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    42b6:	0d 00 32    	bra       Z, 0x42d2 <.L2>

000042b8 <.LSM2>:
        bitset(self->port, self->bit);
    42b8:	1e 02 78    	mov.w     [w14], w4
    42ba:	14 02 78    	mov.w     [w4], w4
    42bc:	9e 02 78    	mov.w     [w14], w5
    42be:	95 02 78    	mov.w     [w5], w5
    42c0:	15 03 78    	mov.w     [w5], w6
    42c2:	9e 02 78    	mov.w     [w14], w5
    42c4:	e5 42 90    	mov.b     [w5+6], w5
    42c6:	85 82 fb    	ze        w5, w5
    42c8:	17 00 20    	mov.w     #0x1, w7
    42ca:	85 3a dd    	sl.w      w7, w5, w5
    42cc:	86 82 72    	ior.w     w5, w6, w5
    42ce:	05 0a 78    	mov.w     w5, [w4]
    42d0:	0d 00 37    	bra       0x42ec <.L1>

000042d2 <.L2>:
    else
        bitclear(self->port, self->bit);
    42d2:	1e 02 78    	mov.w     [w14], w4
    42d4:	14 02 78    	mov.w     [w4], w4
    42d6:	9e 02 78    	mov.w     [w14], w5
    42d8:	95 02 78    	mov.w     [w5], w5
    42da:	15 03 78    	mov.w     [w5], w6
    42dc:	9e 02 78    	mov.w     [w14], w5
    42de:	e5 42 90    	mov.b     [w5+6], w5
    42e0:	85 82 fb    	ze        w5, w5
    42e2:	17 00 20    	mov.w     #0x1, w7
    42e4:	85 3a dd    	sl.w      w7, w5, w5
    42e6:	85 82 ea    	com.w     w5, w5
    42e8:	85 02 63    	and.w     w6, w5, w5
    42ea:	05 0a 78    	mov.w     w5, [w4]

000042ec <.L1>:
}
    42ec:	00 80 fa    	ulnk      
    42ee:	00 00 06    	return    

000042f0 <___digitalRead>:

uint16_t __digitalRead(_PIN *self) {
    42f0:	02 00 fa    	lnk       #0x2
    42f2:	00 0f 78    	mov.w     w0, [w14]

000042f4 <.LSM6>:
    return bitread(self->port, self->bit);
    42f4:	1e 02 78    	mov.w     [w14], w4
    42f6:	14 02 78    	mov.w     [w4], w4
    42f8:	94 02 78    	mov.w     [w4], w5
    42fa:	1e 02 78    	mov.w     [w14], w4
    42fc:	64 42 90    	mov.b     [w4+6], w4
    42fe:	04 82 fb    	ze        w4, w4
    4300:	16 00 20    	mov.w     #0x1, w6
    4302:	04 32 dd    	sl.w      w6, w4, w4
    4304:	04 82 62    	and.w     w5, w4, w4
    4306:	04 f0 a7    	btsc.w    w4, #0xf
    4308:	04 02 ea    	neg.w     w4, w4
    430a:	04 02 ea    	neg.w     w4, w4
    430c:	4f 22 de    	lsr.w     w4, #0xf, w4

0000430e <.LSM7>:
}
    430e:	04 00 78    	mov.w     w4, w0
    4310:	00 80 fa    	ulnk      
    4312:	00 00 06    	return    

00004314 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    4314:	02 00 fa    	lnk       #0x2
    4316:	00 0f 78    	mov.w     w0, [w14]

00004318 <.LSM9>:
    AD1CHS = self->annum;
    4318:	1e 02 78    	mov.w     [w14], w4
    431a:	44 02 90    	mov.w     [w4+8], w4
    431c:	44 19 88    	mov.w     w4, 0x328

0000431e <.LSM10>:
    AD1CON1bits.SAMP = 1;
    431e:	20 23 a8    	bset.b    0x320, #0x1

00004320 <.LSM11>:
    while (AD1CON1bits.DONE==0) {}
    4320:	00 00 00    	nop       

00004322 <.L6>:
    4322:	04 19 80    	mov.w     0x320, w4
    4324:	61 02 62    	and.w     w4, #0x1, w4
    4326:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4328:	fc ff 32    	bra       Z, 0x4322 <.L6>

0000432a <.LSM12>:
    return ADC1BUF0;
    432a:	04 18 80    	mov.w     0x300, w4

0000432c <.LSM13>:
}
    432c:	04 00 78    	mov.w     w4, w0
    432e:	00 80 fa    	ulnk      
    4330:	00 00 06    	return    

00004332 <_init_pin>:

void init_pin(void) {
    4332:	02 00 fa    	lnk       #0x2

00004334 <.LSM15>:
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4334:	44 6d 20    	mov.w     #0x6d4, w4
    4336:	84 1f 78    	mov.w     w4, [w15++]
    4338:	47 01 20    	mov.w     #0x14, w7
    433a:	00 43 eb    	clr.b     w6
    433c:	80 82 eb    	setm.w    w5
    433e:	54 c0 b3    	mov.b     #0x5, w4
    4340:	80 01 eb    	clr.w     w3
    4342:	82 2d 20    	mov.w     #0x2d8, w2
    4344:	a1 2d 20    	mov.w     #0x2da, w1
    4346:	00 80 20    	mov.w     #0x800, w0
    4348:	0c 01 07    	rcall     0x4562 <_pin_init>
    434a:	8f 87 e9    	dec2.w    w15, w15

0000434c <.LSM16>:
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    434c:	84 6d 20    	mov.w     #0x6d8, w4
    434e:	84 1f 78    	mov.w     w4, [w15++]
    4350:	97 01 20    	mov.w     #0x19, w7
    4352:	86 c0 b3    	mov.b     #0x8, w6
    4354:	80 82 eb    	setm.w    w5
    4356:	44 c0 b3    	mov.b     #0x4, w4
    4358:	80 01 eb    	clr.w     w3
    435a:	82 2d 20    	mov.w     #0x2d8, w2
    435c:	a1 2d 20    	mov.w     #0x2da, w1
    435e:	60 81 20    	mov.w     #0x816, w0
    4360:	00 01 07    	rcall     0x4562 <_pin_init>
    4362:	8f 87 e9    	dec2.w    w15, w15

00004364 <.LSM17>:
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4364:	a4 6c 20    	mov.w     #0x6ca, w4
    4366:	84 1f 78    	mov.w     w4, [w15++]
    4368:	a7 00 20    	mov.w     #0xa, w7
    436a:	00 43 eb    	clr.b     w6
    436c:	80 82 eb    	setm.w    w5
    436e:	44 c0 b3    	mov.b     #0x4, w4
    4370:	80 01 eb    	clr.w     w3
    4372:	82 2e 20    	mov.w     #0x2e8, w2
    4374:	a1 2e 20    	mov.w     #0x2ea, w1
    4376:	c0 82 20    	mov.w     #0x82c, w0
    4378:	f4 00 07    	rcall     0x4562 <_pin_init>
    437a:	8f 87 e9    	dec2.w    w15, w15

0000437c <.LSM18>:
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    437c:	04 6d 20    	mov.w     #0x6d0, w4
    437e:	84 1f 78    	mov.w     w4, [w15++]
    4380:	17 01 20    	mov.w     #0x11, w7
    4382:	86 c0 b3    	mov.b     #0x8, w6
    4384:	80 82 eb    	setm.w    w5
    4386:	54 c0 b3    	mov.b     #0x5, w4
    4388:	80 01 eb    	clr.w     w3
    438a:	82 2e 20    	mov.w     #0x2e8, w2
    438c:	a1 2e 20    	mov.w     #0x2ea, w1
    438e:	20 84 20    	mov.w     #0x842, w0
    4390:	e8 00 07    	rcall     0x4562 <_pin_init>
    4392:	8f 87 e9    	dec2.w    w15, w15

00004394 <.LSM19>:
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4394:	c4 6d 20    	mov.w     #0x6dc, w4
    4396:	84 1f 78    	mov.w     w4, [w15++]
    4398:	d7 01 20    	mov.w     #0x1d, w7
    439a:	86 c0 b3    	mov.b     #0x8, w6
    439c:	f5 00 20    	mov.w     #0xf, w5
    439e:	f4 c0 b3    	mov.b     #0xf, w4
    43a0:	23 4e 20    	mov.w     #0x4e2, w3
    43a2:	82 2c 20    	mov.w     #0x2c8, w2
    43a4:	a1 2c 20    	mov.w     #0x2ca, w1
    43a6:	80 85 20    	mov.w     #0x858, w0
    43a8:	dc 00 07    	rcall     0x4562 <_pin_init>
    43aa:	8f 87 e9    	dec2.w    w15, w15

000043ac <.LSM20>:
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    43ac:	04 6d 20    	mov.w     #0x6d0, w4
    43ae:	84 1f 78    	mov.w     w4, [w15++]
    43b0:	07 01 20    	mov.w     #0x10, w7
    43b2:	00 43 eb    	clr.b     w6
    43b4:	80 82 eb    	setm.w    w5
    43b6:	34 c0 b3    	mov.b     #0x3, w4
    43b8:	80 01 eb    	clr.w     w3
    43ba:	82 2e 20    	mov.w     #0x2e8, w2
    43bc:	a1 2e 20    	mov.w     #0x2ea, w1
    43be:	e0 86 20    	mov.w     #0x86e, w0
    43c0:	d0 00 07    	rcall     0x4562 <_pin_init>
    43c2:	8f 87 e9    	dec2.w    w15, w15

000043c4 <.LSM21>:
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    43c4:	24 6c 20    	mov.w     #0x6c2, w4
    43c6:	84 1f 78    	mov.w     w4, [w15++]
    43c8:	27 00 20    	mov.w     #0x2, w7
    43ca:	00 43 eb    	clr.b     w6
    43cc:	80 82 eb    	setm.w    w5
    43ce:	84 c0 b3    	mov.b     #0x8, w4
    43d0:	80 01 eb    	clr.w     w3
    43d2:	82 2d 20    	mov.w     #0x2d8, w2
    43d4:	a1 2d 20    	mov.w     #0x2da, w1
    43d6:	40 88 20    	mov.w     #0x884, w0
    43d8:	c4 00 07    	rcall     0x4562 <_pin_init>
    43da:	8f 87 e9    	dec2.w    w15, w15

000043dc <.LSM22>:
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    43dc:	c4 6c 20    	mov.w     #0x6cc, w4
    43de:	84 1f 78    	mov.w     w4, [w15++]
    43e0:	c7 00 20    	mov.w     #0xc, w7
    43e2:	00 43 eb    	clr.b     w6
    43e4:	80 82 eb    	setm.w    w5
    43e6:	b4 c0 b3    	mov.b     #0xb, w4
    43e8:	80 01 eb    	clr.w     w3
    43ea:	82 2d 20    	mov.w     #0x2d8, w2
    43ec:	a1 2d 20    	mov.w     #0x2da, w1
    43ee:	a0 89 20    	mov.w     #0x89a, w0
    43f0:	b8 00 07    	rcall     0x4562 <_pin_init>
    43f2:	8f 87 e9    	dec2.w    w15, w15

000043f4 <.LSM23>:
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    43f4:	44 6c 20    	mov.w     #0x6c4, w4
    43f6:	84 1f 78    	mov.w     w4, [w15++]
    43f8:	47 00 20    	mov.w     #0x4, w7
    43fa:	00 43 eb    	clr.b     w6
    43fc:	80 82 eb    	setm.w    w5
    43fe:	94 c0 b3    	mov.b     #0x9, w4
    4400:	80 01 eb    	clr.w     w3
    4402:	82 2d 20    	mov.w     #0x2d8, w2
    4404:	a1 2d 20    	mov.w     #0x2da, w1
    4406:	00 8b 20    	mov.w     #0x8b0, w0
    4408:	ac 00 07    	rcall     0x4562 <_pin_init>
    440a:	8f 87 e9    	dec2.w    w15, w15

0000440c <.LSM24>:
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    440c:	24 6c 20    	mov.w     #0x6c2, w4
    440e:	84 1f 78    	mov.w     w4, [w15++]
    4410:	37 00 20    	mov.w     #0x3, w7
    4412:	86 c0 b3    	mov.b     #0x8, w6
    4414:	80 82 eb    	setm.w    w5
    4416:	a4 c0 b3    	mov.b     #0xa, w4
    4418:	80 01 eb    	clr.w     w3
    441a:	82 2d 20    	mov.w     #0x2d8, w2
    441c:	a1 2d 20    	mov.w     #0x2da, w1
    441e:	60 8c 20    	mov.w     #0x8c6, w0
    4420:	a0 00 07    	rcall     0x4562 <_pin_init>
    4422:	8f 87 e9    	dec2.w    w15, w15

00004424 <.LSM25>:
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4424:	a4 6c 20    	mov.w     #0x6ca, w4
    4426:	84 1f 78    	mov.w     w4, [w15++]
    4428:	b7 00 20    	mov.w     #0xb, w7
    442a:	86 c0 b3    	mov.b     #0x8, w6
    442c:	80 82 eb    	setm.w    w5
    442e:	00 42 eb    	clr.b     w4
    4430:	80 01 eb    	clr.w     w3
    4432:	82 2d 20    	mov.w     #0x2d8, w2
    4434:	a1 2d 20    	mov.w     #0x2da, w1
    4436:	c0 8d 20    	mov.w     #0x8dc, w0
    4438:	94 00 07    	rcall     0x4562 <_pin_init>
    443a:	8f 87 e9    	dec2.w    w15, w15

0000443c <.LSM26>:
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    443c:	84 6d 20    	mov.w     #0x6d8, w4
    443e:	84 1f 78    	mov.w     w4, [w15++]
    4440:	87 01 20    	mov.w     #0x18, w7
    4442:	00 43 eb    	clr.b     w6
    4444:	80 82 eb    	setm.w    w5
    4446:	14 c0 b3    	mov.b     #0x1, w4
    4448:	80 01 eb    	clr.w     w3
    444a:	82 2d 20    	mov.w     #0x2d8, w2
    444c:	a1 2d 20    	mov.w     #0x2da, w1
    444e:	20 8f 20    	mov.w     #0x8f2, w0
    4450:	88 00 07    	rcall     0x4562 <_pin_init>
    4452:	8f 87 e9    	dec2.w    w15, w15

00004454 <.LSM27>:
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4454:	64 6d 20    	mov.w     #0x6d6, w4
    4456:	84 1f 78    	mov.w     w4, [w15++]
    4458:	77 01 20    	mov.w     #0x17, w7
    445a:	86 c0 b3    	mov.b     #0x8, w6
    445c:	80 82 eb    	setm.w    w5
    445e:	24 c0 b3    	mov.b     #0x2, w4
    4460:	80 01 eb    	clr.w     w3
    4462:	82 2d 20    	mov.w     #0x2d8, w2
    4464:	a1 2d 20    	mov.w     #0x2da, w1
    4466:	80 90 20    	mov.w     #0x908, w0
    4468:	7c 00 07    	rcall     0x4562 <_pin_init>
    446a:	8f 87 e9    	dec2.w    w15, w15

0000446c <.LSM28>:
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    446c:	64 6d 20    	mov.w     #0x6d6, w4
    446e:	84 1f 78    	mov.w     w4, [w15++]
    4470:	67 01 20    	mov.w     #0x16, w7
    4472:	00 43 eb    	clr.b     w6
    4474:	80 82 eb    	setm.w    w5
    4476:	34 c0 b3    	mov.b     #0x3, w4
    4478:	80 01 eb    	clr.w     w3
    447a:	82 2d 20    	mov.w     #0x2d8, w2
    447c:	a1 2d 20    	mov.w     #0x2da, w1
    447e:	e0 91 20    	mov.w     #0x91e, w0
    4480:	70 00 07    	rcall     0x4562 <_pin_init>
    4482:	8f 87 e9    	dec2.w    w15, w15

00004484 <.LSM29>:
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    4484:	04 6c 20    	mov.w     #0x6c0, w4
    4486:	84 1f 78    	mov.w     w4, [w15++]
    4488:	80 03 eb    	clr.w     w7
    448a:	00 43 eb    	clr.b     w6
    448c:	80 02 eb    	clr.w     w5
    448e:	00 42 eb    	clr.b     w4
    4490:	23 4e 20    	mov.w     #0x4e2, w3
    4492:	82 2c 20    	mov.w     #0x2c8, w2
    4494:	a1 2c 20    	mov.w     #0x2ca, w1
    4496:	20 9a 20    	mov.w     #0x9a2, w0
    4498:	64 00 07    	rcall     0x4562 <_pin_init>
    449a:	8f 87 e9    	dec2.w    w15, w15

0000449c <.LSM30>:
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    449c:	04 6c 20    	mov.w     #0x6c0, w4
    449e:	84 1f 78    	mov.w     w4, [w15++]
    44a0:	17 00 20    	mov.w     #0x1, w7
    44a2:	86 c0 b3    	mov.b     #0x8, w6
    44a4:	15 00 20    	mov.w     #0x1, w5
    44a6:	14 c0 b3    	mov.b     #0x1, w4
    44a8:	23 4e 20    	mov.w     #0x4e2, w3
    44aa:	82 2c 20    	mov.w     #0x2c8, w2
    44ac:	a1 2c 20    	mov.w     #0x2ca, w1
    44ae:	c0 98 20    	mov.w     #0x98c, w0
    44b0:	58 00 07    	rcall     0x4562 <_pin_init>
    44b2:	8f 87 e9    	dec2.w    w15, w15

000044b4 <.LSM31>:
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    44b4:	c4 6c 20    	mov.w     #0x6cc, w4
    44b6:	84 1f 78    	mov.w     w4, [w15++]
    44b8:	d7 00 20    	mov.w     #0xd, w7
    44ba:	86 c0 b3    	mov.b     #0x8, w6
    44bc:	25 00 20    	mov.w     #0x2, w5
    44be:	24 c0 b3    	mov.b     #0x2, w4
    44c0:	23 4e 20    	mov.w     #0x4e2, w3
    44c2:	82 2c 20    	mov.w     #0x2c8, w2
    44c4:	a1 2c 20    	mov.w     #0x2ca, w1
    44c6:	60 97 20    	mov.w     #0x976, w0
    44c8:	4c 00 07    	rcall     0x4562 <_pin_init>
    44ca:	8f 87 e9    	dec2.w    w15, w15

000044cc <.LSM32>:
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    44cc:	00 02 eb    	clr.w     w4
    44ce:	84 1f 78    	mov.w     w4, [w15++]
    44d0:	80 83 eb    	setm.w    w7
    44d2:	00 43 eb    	clr.b     w6
    44d4:	35 00 20    	mov.w     #0x3, w5
    44d6:	34 c0 b3    	mov.b     #0x3, w4
    44d8:	23 4e 20    	mov.w     #0x4e2, w3
    44da:	82 2c 20    	mov.w     #0x2c8, w2
    44dc:	a1 2c 20    	mov.w     #0x2ca, w1
    44de:	00 96 20    	mov.w     #0x960, w0
    44e0:	40 00 07    	rcall     0x4562 <_pin_init>
    44e2:	8f 87 e9    	dec2.w    w15, w15

000044e4 <.LSM33>:
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    44e4:	c4 6d 20    	mov.w     #0x6dc, w4
    44e6:	84 1f 78    	mov.w     w4, [w15++]
    44e8:	c7 01 20    	mov.w     #0x1c, w7
    44ea:	00 43 eb    	clr.b     w6
    44ec:	45 00 20    	mov.w     #0x4, w5
    44ee:	44 c0 b3    	mov.b     #0x4, w4
    44f0:	23 4e 20    	mov.w     #0x4e2, w3
    44f2:	82 2c 20    	mov.w     #0x2c8, w2
    44f4:	a1 2c 20    	mov.w     #0x2ca, w1
    44f6:	a0 94 20    	mov.w     #0x94a, w0
    44f8:	34 00 07    	rcall     0x4562 <_pin_init>
    44fa:	8f 87 e9    	dec2.w    w15, w15

000044fc <.LSM34>:
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    44fc:	24 6d 20    	mov.w     #0x6d2, w4
    44fe:	84 1f 78    	mov.w     w4, [w15++]
    4500:	27 01 20    	mov.w     #0x12, w7
    4502:	00 43 eb    	clr.b     w6
    4504:	55 00 20    	mov.w     #0x5, w5
    4506:	54 c0 b3    	mov.b     #0x5, w4
    4508:	23 4e 20    	mov.w     #0x4e2, w3
    450a:	82 2c 20    	mov.w     #0x2c8, w2
    450c:	a1 2c 20    	mov.w     #0x2ca, w1
    450e:	40 93 20    	mov.w     #0x934, w0
    4510:	28 00 07    	rcall     0x4562 <_pin_init>
    4512:	8f 87 e9    	dec2.w    w15, w15

00004514 <.LSM35>:
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    4514:	00 02 eb    	clr.w     w4
    4516:	04 0f 78    	mov.w     w4, [w14]
    4518:	08 00 37    	bra       0x452a <.L8>

0000451a <.L9>:
        pin_digitalIn(&D[i]);
    451a:	1e 02 78    	mov.w     [w14], w4
    451c:	76 22 b9    	mul.su    w4, #0x16, w4
    451e:	84 02 78    	mov.w     w4, w5
    4520:	04 80 20    	mov.w     #0x800, w4
    4522:	04 82 42    	add.w     w5, w4, w4
    4524:	04 00 78    	mov.w     w4, w0
    4526:	49 00 07    	rcall     0x45ba <_pin_digitalIn>

00004528 <.LSM37>:
    4528:	1e 0f e8    	inc.w     [w14], [w14]

0000452a <.L8>:
    452a:	1e 02 78    	mov.w     [w14], w4
    452c:	ed 0f 52    	sub.w     w4, #0xd, [w15]
    452e:	f5 ff 36    	bra       LEU, 0x451a <.L9>

00004530 <.LSM38>:
    for (i = 0; i<6; i++)
    4530:	00 02 eb    	clr.w     w4
    4532:	04 0f 78    	mov.w     w4, [w14]
    4534:	08 00 37    	bra       0x4546 <.L10>

00004536 <.L11>:
        pin_analogIn(&A[i]);
    4536:	1e 02 78    	mov.w     [w14], w4
    4538:	76 22 b9    	mul.su    w4, #0x16, w4
    453a:	84 02 78    	mov.w     w4, w5
    453c:	44 93 20    	mov.w     #0x934, w4
    453e:	04 82 42    	add.w     w5, w4, w4
    4540:	04 00 78    	mov.w     w4, w0
    4542:	97 00 07    	rcall     0x4672 <_pin_analogIn>

00004544 <.LSM40>:
    4544:	1e 0f e8    	inc.w     [w14], [w14]

00004546 <.L10>:
    4546:	1e 02 78    	mov.w     [w14], w4
    4548:	e5 0f 52    	sub.w     w4, #0x5, [w15]
    454a:	f5 ff 36    	bra       LEU, 0x4536 <.L11>

0000454c <.LSM41>:

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    454c:	04 2e 20    	mov.w     #0x2e0, w4
    454e:	04 19 88    	mov.w     w4, 0x320

00004550 <.LSM42>:
    AD1CON2 = 0;
    4550:	00 02 eb    	clr.w     w4
    4552:	14 19 88    	mov.w     w4, 0x322

00004554 <.LSM43>:
    AD1CON3 = 0x0C40;
    4554:	04 c4 20    	mov.w     #0xc40, w4
    4556:	24 19 88    	mov.w     w4, 0x324

00004558 <.LSM44>:
    AD1CHS = 0;
    4558:	00 02 eb    	clr.w     w4
    455a:	44 19 88    	mov.w     w4, 0x328

0000455c <.LSM45>:
    AD1CON1bits.ADON = 1;
    455c:	21 e3 a8    	bset.b    0x321, #0x7

0000455e <.LSM46>:
}
    455e:	00 80 fa    	ulnk      
    4560:	00 00 06    	return    

00004562 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    4562:	10 00 fa    	lnk       #0x10
    4564:	00 0f 78    	mov.w     w0, [w14]
    4566:	11 07 98    	mov.w     w1, [w14+2]
    4568:	22 07 98    	mov.w     w2, [w14+4]
    456a:	33 07 98    	mov.w     w3, [w14+6]
    456c:	04 4f 98    	mov.b     w4, [w14+8]
    456e:	55 07 98    	mov.w     w5, [w14+10]
    4570:	46 4f 98    	mov.b     w6, [w14+12]
    4572:	77 07 98    	mov.w     w7, [w14+14]

00004574 <.LSM48>:
    self->port = port;
    4574:	1e 02 78    	mov.w     [w14], w4
    4576:	9e 02 90    	mov.w     [w14+2], w5
    4578:	05 0a 78    	mov.w     w5, [w4]

0000457a <.LSM49>:
    self->tris = tris;
    457a:	1e 02 78    	mov.w     [w14], w4
    457c:	ae 02 90    	mov.w     [w14+4], w5
    457e:	15 02 98    	mov.w     w5, [w4+2]

00004580 <.LSM50>:
    self->ans = ans;
    4580:	1e 02 78    	mov.w     [w14], w4
    4582:	be 02 90    	mov.w     [w14+6], w5
    4584:	25 02 98    	mov.w     w5, [w4+4]

00004586 <.LSM51>:
    self->bit = bit;
    4586:	1e 02 78    	mov.w     [w14], w4
    4588:	8e 4a 90    	mov.b     [w14+8], w5
    458a:	65 42 98    	mov.b     w5, [w4+6]

0000458c <.LSM52>:
    self->annum = annum;
    458c:	1e 02 78    	mov.w     [w14], w4
    458e:	de 02 90    	mov.w     [w14+10], w5
    4590:	45 02 98    	mov.w     w5, [w4+8]

00004592 <.LSM53>:
    self->rpshift = rpshift;
    4592:	1e 02 78    	mov.w     [w14], w4
    4594:	ce 4a 90    	mov.b     [w14+12], w5
    4596:	25 4a 98    	mov.b     w5, [w4+10]

00004598 <.LSM54>:
    self->rpnum = rpnum;
    4598:	fe 02 90    	mov.w     [w14+14], w5
    459a:	1e 02 78    	mov.w     [w14], w4
    459c:	65 02 98    	mov.w     w5, [w4+12]

0000459e <.LSM55>:
    self->rpor = rpor;
    459e:	1e 02 78    	mov.w     [w14], w4
    45a0:	ce ba 97    	mov.w     [w14-8], w5
    45a2:	75 02 98    	mov.w     w5, [w4+14]

000045a4 <.LSM56>:
    self->owner = NULL;
    45a4:	1e 02 78    	mov.w     [w14], w4
    45a6:	80 02 eb    	clr.w     w5
    45a8:	05 0a 98    	mov.w     w5, [w4+16]

000045aa <.LSM57>:
    self->write = NULL;
    45aa:	1e 02 78    	mov.w     [w14], w4
    45ac:	80 02 eb    	clr.w     w5
    45ae:	15 0a 98    	mov.w     w5, [w4+18]

000045b0 <.LSM58>:
    self->read = NULL;
    45b0:	1e 02 78    	mov.w     [w14], w4
    45b2:	80 02 eb    	clr.w     w5
    45b4:	25 0a 98    	mov.w     w5, [w4+20]

000045b6 <.LSM59>:
}
    45b6:	00 80 fa    	ulnk      
    45b8:	00 00 06    	return    

000045ba <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    45ba:	02 00 fa    	lnk       #0x2
    45bc:	00 0f 78    	mov.w     w0, [w14]

000045be <.LSM61>:
    if (self->ans)
    45be:	1e 02 78    	mov.w     [w14], w4
    45c0:	24 02 90    	mov.w     [w4+4], w4
    45c2:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    45c4:	0d 00 32    	bra       Z, 0x45e0 <.L14>

000045c6 <.LSM62>:
        bitclear(self->ans, self->bit);
    45c6:	1e 02 78    	mov.w     [w14], w4
    45c8:	24 02 90    	mov.w     [w4+4], w4
    45ca:	9e 02 78    	mov.w     [w14], w5
    45cc:	a5 02 90    	mov.w     [w5+4], w5
    45ce:	15 03 78    	mov.w     [w5], w6
    45d0:	9e 02 78    	mov.w     [w14], w5
    45d2:	e5 42 90    	mov.b     [w5+6], w5
    45d4:	85 82 fb    	ze        w5, w5
    45d6:	17 00 20    	mov.w     #0x1, w7
    45d8:	85 3a dd    	sl.w      w7, w5, w5
    45da:	85 82 ea    	com.w     w5, w5
    45dc:	85 02 63    	and.w     w6, w5, w5
    45de:	05 0a 78    	mov.w     w5, [w4]

000045e0 <.L14>:
    bitset(self->tris, self->bit);
    45e0:	1e 02 78    	mov.w     [w14], w4
    45e2:	14 02 90    	mov.w     [w4+2], w4
    45e4:	9e 02 78    	mov.w     [w14], w5
    45e6:	95 02 90    	mov.w     [w5+2], w5
    45e8:	15 03 78    	mov.w     [w5], w6
    45ea:	9e 02 78    	mov.w     [w14], w5
    45ec:	e5 42 90    	mov.b     [w5+6], w5
    45ee:	85 82 fb    	ze        w5, w5
    45f0:	17 00 20    	mov.w     #0x1, w7
    45f2:	85 3a dd    	sl.w      w7, w5, w5
    45f4:	86 82 72    	ior.w     w5, w6, w5
    45f6:	05 0a 78    	mov.w     w5, [w4]

000045f8 <.LSM64>:
    self->write = NULL;
    45f8:	1e 02 78    	mov.w     [w14], w4
    45fa:	80 02 eb    	clr.w     w5
    45fc:	15 0a 98    	mov.w     w5, [w4+18]

000045fe <.LSM65>:
    self->read = __digitalRead;    
    45fe:	1e 02 78    	mov.w     [w14], w4
    4600:	05 2f 24    	mov.w     #0x42f0, w5
    4602:	25 0a 98    	mov.w     w5, [w4+20]

00004604 <.LSM66>:
}
    4604:	00 80 fa    	ulnk      
    4606:	00 00 06    	return    

00004608 <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    4608:	02 00 fa    	lnk       #0x2
    460a:	00 0f 78    	mov.w     w0, [w14]

0000460c <.LSM68>:
    if (self->ans)
    460c:	1e 02 78    	mov.w     [w14], w4
    460e:	24 02 90    	mov.w     [w4+4], w4
    4610:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4612:	0d 00 32    	bra       Z, 0x462e <.L16>

00004614 <.LSM69>:
        bitclear(self->ans, self->bit);
    4614:	1e 02 78    	mov.w     [w14], w4
    4616:	24 02 90    	mov.w     [w4+4], w4
    4618:	9e 02 78    	mov.w     [w14], w5
    461a:	a5 02 90    	mov.w     [w5+4], w5
    461c:	15 03 78    	mov.w     [w5], w6
    461e:	9e 02 78    	mov.w     [w14], w5
    4620:	e5 42 90    	mov.b     [w5+6], w5
    4622:	85 82 fb    	ze        w5, w5
    4624:	17 00 20    	mov.w     #0x1, w7
    4626:	85 3a dd    	sl.w      w7, w5, w5
    4628:	85 82 ea    	com.w     w5, w5
    462a:	85 02 63    	and.w     w6, w5, w5
    462c:	05 0a 78    	mov.w     w5, [w4]

0000462e <.L16>:
    bitclear(self->port, self->bit);
    462e:	1e 02 78    	mov.w     [w14], w4
    4630:	14 02 78    	mov.w     [w4], w4
    4632:	9e 02 78    	mov.w     [w14], w5
    4634:	95 02 78    	mov.w     [w5], w5
    4636:	15 03 78    	mov.w     [w5], w6
    4638:	9e 02 78    	mov.w     [w14], w5
    463a:	e5 42 90    	mov.b     [w5+6], w5
    463c:	85 82 fb    	ze        w5, w5
    463e:	17 00 20    	mov.w     #0x1, w7
    4640:	85 3a dd    	sl.w      w7, w5, w5
    4642:	85 82 ea    	com.w     w5, w5
    4644:	85 02 63    	and.w     w6, w5, w5
    4646:	05 0a 78    	mov.w     w5, [w4]

00004648 <.LSM71>:
    bitclear(self->tris, self->bit);
    4648:	1e 02 78    	mov.w     [w14], w4
    464a:	14 02 90    	mov.w     [w4+2], w4
    464c:	9e 02 78    	mov.w     [w14], w5
    464e:	95 02 90    	mov.w     [w5+2], w5
    4650:	15 03 78    	mov.w     [w5], w6
    4652:	9e 02 78    	mov.w     [w14], w5
    4654:	e5 42 90    	mov.b     [w5+6], w5
    4656:	85 82 fb    	ze        w5, w5
    4658:	17 00 20    	mov.w     #0x1, w7
    465a:	85 3a dd    	sl.w      w7, w5, w5
    465c:	85 82 ea    	com.w     w5, w5
    465e:	85 02 63    	and.w     w6, w5, w5
    4660:	05 0a 78    	mov.w     w5, [w4]

00004662 <.LSM72>:
    self->write = __digitalWrite;
    4662:	1e 02 78    	mov.w     [w14], w4
    4664:	c5 2a 24    	mov.w     #0x42ac, w5
    4666:	15 0a 98    	mov.w     w5, [w4+18]

00004668 <.LSM73>:
    self->read = __digitalRead;
    4668:	1e 02 78    	mov.w     [w14], w4
    466a:	05 2f 24    	mov.w     #0x42f0, w5
    466c:	25 0a 98    	mov.w     w5, [w4+20]

0000466e <.LSM74>:
}
    466e:	00 80 fa    	ulnk      
    4670:	00 00 06    	return    

00004672 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    4672:	02 00 fa    	lnk       #0x2
    4674:	00 0f 78    	mov.w     w0, [w14]

00004676 <.LSM76>:
    if (!(self->ans))
    4676:	1e 02 78    	mov.w     [w14], w4
    4678:	24 02 90    	mov.w     [w4+4], w4
    467a:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    467c:	1f 00 32    	bra       Z, 0x46bc <.L20>

0000467e <.LSM77>:
        return;
    bitset(self->tris, self->bit);
    467e:	1e 02 78    	mov.w     [w14], w4
    4680:	14 02 90    	mov.w     [w4+2], w4
    4682:	9e 02 78    	mov.w     [w14], w5
    4684:	95 02 90    	mov.w     [w5+2], w5
    4686:	15 03 78    	mov.w     [w5], w6
    4688:	9e 02 78    	mov.w     [w14], w5
    468a:	e5 42 90    	mov.b     [w5+6], w5
    468c:	85 82 fb    	ze        w5, w5
    468e:	17 00 20    	mov.w     #0x1, w7
    4690:	85 3a dd    	sl.w      w7, w5, w5
    4692:	86 82 72    	ior.w     w5, w6, w5
    4694:	05 0a 78    	mov.w     w5, [w4]

00004696 <.LSM78>:
    bitset(self->ans, self->bit);
    4696:	1e 02 78    	mov.w     [w14], w4
    4698:	24 02 90    	mov.w     [w4+4], w4
    469a:	9e 02 78    	mov.w     [w14], w5
    469c:	a5 02 90    	mov.w     [w5+4], w5
    469e:	15 03 78    	mov.w     [w5], w6
    46a0:	9e 02 78    	mov.w     [w14], w5
    46a2:	e5 42 90    	mov.b     [w5+6], w5
    46a4:	85 82 fb    	ze        w5, w5
    46a6:	17 00 20    	mov.w     #0x1, w7
    46a8:	85 3a dd    	sl.w      w7, w5, w5
    46aa:	86 82 72    	ior.w     w5, w6, w5
    46ac:	05 0a 78    	mov.w     w5, [w4]

000046ae <.LSM79>:
    self->write = NULL;
    46ae:	1e 02 78    	mov.w     [w14], w4
    46b0:	80 02 eb    	clr.w     w5
    46b2:	15 0a 98    	mov.w     w5, [w4+18]

000046b4 <.LSM80>:
    self->read = __analogRead;
    46b4:	1e 02 78    	mov.w     [w14], w4
    46b6:	45 31 24    	mov.w     #0x4314, w5
    46b8:	25 0a 98    	mov.w     w5, [w4+20]
    46ba:	01 00 37    	bra       0x46be <.L17>

000046bc <.L20>:
    46bc:	00 00 00    	nop       

000046be <.L17>:
}
    46be:	00 80 fa    	ulnk      
    46c0:	00 00 06    	return    

000046c2 <_pin_set>:

void pin_set(_PIN *self) {
    46c2:	02 00 fa    	lnk       #0x2
    46c4:	00 0f 78    	mov.w     w0, [w14]

000046c6 <.LSM84>:
    if (self->write==__digitalWrite)
    46c6:	1e 02 78    	mov.w     [w14], w4
    46c8:	94 0a 90    	mov.w     [w4+18], w5
    46ca:	c4 2a 24    	mov.w     #0x42ac, w4
    46cc:	84 8f 52    	sub.w     w5, w4, [w15]
    46ce:	0c 00 3a    	bra       NZ, 0x46e8 <.L21>

000046d0 <.LSM85>:
        bitset(self->port, self->bit);
    46d0:	1e 02 78    	mov.w     [w14], w4
    46d2:	14 02 78    	mov.w     [w4], w4
    46d4:	9e 02 78    	mov.w     [w14], w5
    46d6:	95 02 78    	mov.w     [w5], w5
    46d8:	15 03 78    	mov.w     [w5], w6
    46da:	9e 02 78    	mov.w     [w14], w5
    46dc:	e5 42 90    	mov.b     [w5+6], w5
    46de:	85 82 fb    	ze        w5, w5
    46e0:	17 00 20    	mov.w     #0x1, w7
    46e2:	85 3a dd    	sl.w      w7, w5, w5
    46e4:	86 82 72    	ior.w     w5, w6, w5
    46e6:	05 0a 78    	mov.w     w5, [w4]

000046e8 <.L21>:
}
    46e8:	00 80 fa    	ulnk      
    46ea:	00 00 06    	return    

000046ec <_pin_clear>:

void pin_clear(_PIN *self) {
    46ec:	02 00 fa    	lnk       #0x2
    46ee:	00 0f 78    	mov.w     w0, [w14]

000046f0 <.LSM88>:
    if (self->write==__digitalWrite)
    46f0:	1e 02 78    	mov.w     [w14], w4
    46f2:	94 0a 90    	mov.w     [w4+18], w5
    46f4:	c4 2a 24    	mov.w     #0x42ac, w4
    46f6:	84 8f 52    	sub.w     w5, w4, [w15]
    46f8:	0d 00 3a    	bra       NZ, 0x4714 <.L23>

000046fa <.LSM89>:
        bitclear(self->port, self->bit);
    46fa:	1e 02 78    	mov.w     [w14], w4
    46fc:	14 02 78    	mov.w     [w4], w4
    46fe:	9e 02 78    	mov.w     [w14], w5
    4700:	95 02 78    	mov.w     [w5], w5
    4702:	15 03 78    	mov.w     [w5], w6
    4704:	9e 02 78    	mov.w     [w14], w5
    4706:	e5 42 90    	mov.b     [w5+6], w5
    4708:	85 82 fb    	ze        w5, w5
    470a:	17 00 20    	mov.w     #0x1, w7
    470c:	85 3a dd    	sl.w      w7, w5, w5
    470e:	85 82 ea    	com.w     w5, w5
    4710:	85 02 63    	and.w     w6, w5, w5
    4712:	05 0a 78    	mov.w     w5, [w4]

00004714 <.L23>:
}
    4714:	00 80 fa    	ulnk      
    4716:	00 00 06    	return    

00004718 <_pin_toggle>:

void pin_toggle(_PIN *self) {
    4718:	02 00 fa    	lnk       #0x2
    471a:	00 0f 78    	mov.w     w0, [w14]

0000471c <.LSM92>:
    if (self->write==__digitalWrite)
    471c:	1e 02 78    	mov.w     [w14], w4
    471e:	94 0a 90    	mov.w     [w4+18], w5
    4720:	c4 2a 24    	mov.w     #0x42ac, w4
    4722:	84 8f 52    	sub.w     w5, w4, [w15]
    4724:	0c 00 3a    	bra       NZ, 0x473e <.L25>

00004726 <.LSM93>:
        bitflip(self->port, self->bit);
    4726:	1e 02 78    	mov.w     [w14], w4
    4728:	14 02 78    	mov.w     [w4], w4
    472a:	9e 02 78    	mov.w     [w14], w5
    472c:	95 02 78    	mov.w     [w5], w5
    472e:	15 03 78    	mov.w     [w5], w6
    4730:	9e 02 78    	mov.w     [w14], w5
    4732:	e5 42 90    	mov.b     [w5+6], w5
    4734:	85 82 fb    	ze        w5, w5
    4736:	17 00 20    	mov.w     #0x1, w7
    4738:	85 3a dd    	sl.w      w7, w5, w5
    473a:	85 02 6b    	xor.w     w6, w5, w5
    473c:	05 0a 78    	mov.w     w5, [w4]

0000473e <.L25>:
}
    473e:	00 80 fa    	ulnk      
    4740:	00 00 06    	return    

00004742 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    4742:	04 00 fa    	lnk       #0x4
    4744:	00 0f 78    	mov.w     w0, [w14]
    4746:	11 07 98    	mov.w     w1, [w14+2]

00004748 <.LSM96>:
    if (self->write)
    4748:	1e 02 78    	mov.w     [w14], w4
    474a:	14 0a 90    	mov.w     [w4+18], w4
    474c:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    474e:	05 00 32    	bra       Z, 0x475a <.L27>

00004750 <.LSM97>:
        self->write(self, val);
    4750:	1e 02 78    	mov.w     [w14], w4
    4752:	14 0a 90    	mov.w     [w4+18], w4
    4754:	9e 00 90    	mov.w     [w14+2], w1
    4756:	1e 00 78    	mov.w     [w14], w0
    4758:	04 00 01    	call      w4

0000475a <.L27>:
}
    475a:	00 80 fa    	ulnk      
    475c:	00 00 06    	return    

0000475e <_pin_read>:

uint16_t pin_read(_PIN *self) {
    475e:	02 00 fa    	lnk       #0x2
    4760:	00 0f 78    	mov.w     w0, [w14]

00004762 <.LSM100>:
    if (self->read)
    4762:	1e 02 78    	mov.w     [w14], w4
    4764:	24 0a 90    	mov.w     [w4+20], w4
    4766:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    4768:	06 00 32    	bra       Z, 0x4776 <.L30>

0000476a <.LSM101>:
        return self->read(self);
    476a:	1e 02 78    	mov.w     [w14], w4
    476c:	24 0a 90    	mov.w     [w4+20], w4
    476e:	1e 00 78    	mov.w     [w14], w0
    4770:	04 00 01    	call      w4
    4772:	00 02 78    	mov.w     w0, w4
    4774:	01 00 37    	bra       0x4778 <.L31>

00004776 <.L30>:
    else
        return 0xFFFF;
    4776:	00 82 eb    	setm.w    w4

00004778 <.L31>:
}
    4778:	04 00 78    	mov.w     w4, w0
    477a:	00 80 fa    	ulnk      
    477c:	00 00 06    	return    

0000477e <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    477e:	00 00 fa    	lnk       #0x0

00004780 <.LSM1>:
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    4780:	74 c0 b3    	mov.b     #0x7, w4
    4782:	63 4e 20    	mov.w     #0x4e6, w3
    4784:	82 2d 20    	mov.w     #0x2d8, w2
    4786:	a1 2d 20    	mov.w     #0x2da, w1
    4788:	60 c8 20    	mov.w     #0xc86, w0
    478a:	20 00 07    	rcall     0x47cc <_led_init>

0000478c <.LSM2>:
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    478c:	00 42 eb    	clr.b     w4
    478e:	a3 4e 20    	mov.w     #0x4ea, w3
    4790:	82 2e 20    	mov.w     #0x2e8, w2
    4792:	a1 2e 20    	mov.w     #0x2ea, w1
    4794:	e0 c8 20    	mov.w     #0xc8e, w0
    4796:	1a 00 07    	rcall     0x47cc <_led_init>

00004798 <.LSM3>:
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    4798:	14 c0 b3    	mov.b     #0x1, w4
    479a:	a3 4e 20    	mov.w     #0x4ea, w3
    479c:	82 2e 20    	mov.w     #0x2e8, w2
    479e:	a1 2e 20    	mov.w     #0x2ea, w1
    47a0:	60 c9 20    	mov.w     #0xc96, w0
    47a2:	14 00 07    	rcall     0x47cc <_led_init>

000047a4 <.LSM4>:
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    47a4:	f4 c0 b3    	mov.b     #0xf, w4
    47a6:	43 4e 20    	mov.w     #0x4e4, w3
    47a8:	02 2d 20    	mov.w     #0x2d0, w2
    47aa:	21 2d 20    	mov.w     #0x2d2, w1
    47ac:	e0 c9 20    	mov.w     #0xc9e, w0
    47ae:	ae 00 07    	rcall     0x490c <_sw_init>

000047b0 <.LSM5>:
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    47b0:	c4 c0 b3    	mov.b     #0xc, w4
    47b2:	43 4e 20    	mov.w     #0x4e4, w3
    47b4:	02 2d 20    	mov.w     #0x2d0, w2
    47b6:	21 2d 20    	mov.w     #0x2d2, w1
    47b8:	60 ca 20    	mov.w     #0xca6, w0
    47ba:	a8 00 07    	rcall     0x490c <_sw_init>

000047bc <.LSM6>:
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    47bc:	c4 c0 b3    	mov.b     #0xc, w4
    47be:	23 4e 20    	mov.w     #0x4e2, w3
    47c0:	82 2c 20    	mov.w     #0x2c8, w2
    47c2:	a1 2c 20    	mov.w     #0x2ca, w1
    47c4:	e0 ca 20    	mov.w     #0xcae, w0
    47c6:	a2 00 07    	rcall     0x490c <_sw_init>

000047c8 <.LSM7>:
            (uint16_t *)&ANSB, 12);
}
    47c8:	00 80 fa    	ulnk      
    47ca:	00 00 06    	return    

000047cc <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    47cc:	0a 00 fa    	lnk       #0xa
    47ce:	00 0f 78    	mov.w     w0, [w14]
    47d0:	11 07 98    	mov.w     w1, [w14+2]
    47d2:	22 07 98    	mov.w     w2, [w14+4]
    47d4:	33 07 98    	mov.w     w3, [w14+6]
    47d6:	04 4f 98    	mov.b     w4, [w14+8]

000047d8 <.LSM9>:
    self->port = port;
    47d8:	1e 02 78    	mov.w     [w14], w4
    47da:	9e 02 90    	mov.w     [w14+2], w5
    47dc:	05 0a 78    	mov.w     w5, [w4]

000047de <.LSM10>:
    self->tris = tris;
    47de:	1e 02 78    	mov.w     [w14], w4
    47e0:	ae 02 90    	mov.w     [w14+4], w5
    47e2:	15 02 98    	mov.w     w5, [w4+2]

000047e4 <.LSM11>:
    self->ans = ans;
    47e4:	1e 02 78    	mov.w     [w14], w4
    47e6:	be 02 90    	mov.w     [w14+6], w5
    47e8:	25 02 98    	mov.w     w5, [w4+4]

000047ea <.LSM12>:
    self->bit = bit;
    47ea:	1e 02 78    	mov.w     [w14], w4
    47ec:	8e 4a 90    	mov.b     [w14+8], w5
    47ee:	65 42 98    	mov.b     w5, [w4+6]

000047f0 <.LSM13>:

    bitclear(self->ans, self->bit);
    47f0:	1e 02 78    	mov.w     [w14], w4
    47f2:	24 02 90    	mov.w     [w4+4], w4
    47f4:	9e 02 78    	mov.w     [w14], w5
    47f6:	a5 02 90    	mov.w     [w5+4], w5
    47f8:	15 03 78    	mov.w     [w5], w6
    47fa:	9e 02 78    	mov.w     [w14], w5
    47fc:	e5 42 90    	mov.b     [w5+6], w5
    47fe:	85 82 fb    	ze        w5, w5
    4800:	17 00 20    	mov.w     #0x1, w7
    4802:	85 3a dd    	sl.w      w7, w5, w5
    4804:	85 82 ea    	com.w     w5, w5
    4806:	85 02 63    	and.w     w6, w5, w5
    4808:	05 0a 78    	mov.w     w5, [w4]

0000480a <.LSM14>:
    bitclear(self->port, self->bit);
    480a:	1e 02 78    	mov.w     [w14], w4
    480c:	14 02 78    	mov.w     [w4], w4
    480e:	9e 02 78    	mov.w     [w14], w5
    4810:	95 02 78    	mov.w     [w5], w5
    4812:	15 03 78    	mov.w     [w5], w6
    4814:	9e 02 78    	mov.w     [w14], w5
    4816:	e5 42 90    	mov.b     [w5+6], w5
    4818:	85 82 fb    	ze        w5, w5
    481a:	17 00 20    	mov.w     #0x1, w7
    481c:	85 3a dd    	sl.w      w7, w5, w5
    481e:	85 82 ea    	com.w     w5, w5
    4820:	85 02 63    	and.w     w6, w5, w5
    4822:	05 0a 78    	mov.w     w5, [w4]

00004824 <.LSM15>:
    bitclear(self->tris, self->bit);
    4824:	1e 02 78    	mov.w     [w14], w4
    4826:	14 02 90    	mov.w     [w4+2], w4
    4828:	9e 02 78    	mov.w     [w14], w5
    482a:	95 02 90    	mov.w     [w5+2], w5
    482c:	15 03 78    	mov.w     [w5], w6
    482e:	9e 02 78    	mov.w     [w14], w5
    4830:	e5 42 90    	mov.b     [w5+6], w5
    4832:	85 82 fb    	ze        w5, w5
    4834:	17 00 20    	mov.w     #0x1, w7
    4836:	85 3a dd    	sl.w      w7, w5, w5
    4838:	85 82 ea    	com.w     w5, w5
    483a:	85 02 63    	and.w     w6, w5, w5
    483c:	05 0a 78    	mov.w     w5, [w4]

0000483e <.LSM16>:
}
    483e:	00 80 fa    	ulnk      
    4840:	00 00 06    	return    

00004842 <_led_on>:

void led_on(_LED *self) {
    4842:	02 00 fa    	lnk       #0x2
    4844:	00 0f 78    	mov.w     w0, [w14]

00004846 <.LSM18>:
    bitset(self->port, self->bit);
    4846:	1e 02 78    	mov.w     [w14], w4
    4848:	14 02 78    	mov.w     [w4], w4
    484a:	9e 02 78    	mov.w     [w14], w5
    484c:	95 02 78    	mov.w     [w5], w5
    484e:	15 03 78    	mov.w     [w5], w6
    4850:	9e 02 78    	mov.w     [w14], w5
    4852:	e5 42 90    	mov.b     [w5+6], w5
    4854:	85 82 fb    	ze        w5, w5
    4856:	17 00 20    	mov.w     #0x1, w7
    4858:	85 3a dd    	sl.w      w7, w5, w5
    485a:	86 82 72    	ior.w     w5, w6, w5
    485c:	05 0a 78    	mov.w     w5, [w4]

0000485e <.LSM19>:
}
    485e:	00 80 fa    	ulnk      
    4860:	00 00 06    	return    

00004862 <_led_off>:

void led_off(_LED *self) {
    4862:	02 00 fa    	lnk       #0x2
    4864:	00 0f 78    	mov.w     w0, [w14]

00004866 <.LSM21>:
    bitclear(self->port, self->bit);
    4866:	1e 02 78    	mov.w     [w14], w4
    4868:	14 02 78    	mov.w     [w4], w4
    486a:	9e 02 78    	mov.w     [w14], w5
    486c:	95 02 78    	mov.w     [w5], w5
    486e:	15 03 78    	mov.w     [w5], w6
    4870:	9e 02 78    	mov.w     [w14], w5
    4872:	e5 42 90    	mov.b     [w5+6], w5
    4874:	85 82 fb    	ze        w5, w5
    4876:	17 00 20    	mov.w     #0x1, w7
    4878:	85 3a dd    	sl.w      w7, w5, w5
    487a:	85 82 ea    	com.w     w5, w5
    487c:	85 02 63    	and.w     w6, w5, w5
    487e:	05 0a 78    	mov.w     w5, [w4]

00004880 <.LSM22>:
}
    4880:	00 80 fa    	ulnk      
    4882:	00 00 06    	return    

00004884 <_led_toggle>:

void led_toggle(_LED *self) {
    4884:	02 00 fa    	lnk       #0x2
    4886:	00 0f 78    	mov.w     w0, [w14]

00004888 <.LSM24>:
    bitflip(self->port, self->bit);
    4888:	1e 02 78    	mov.w     [w14], w4
    488a:	14 02 78    	mov.w     [w4], w4
    488c:	9e 02 78    	mov.w     [w14], w5
    488e:	95 02 78    	mov.w     [w5], w5
    4890:	15 03 78    	mov.w     [w5], w6
    4892:	9e 02 78    	mov.w     [w14], w5
    4894:	e5 42 90    	mov.b     [w5+6], w5
    4896:	85 82 fb    	ze        w5, w5
    4898:	17 00 20    	mov.w     #0x1, w7
    489a:	85 3a dd    	sl.w      w7, w5, w5
    489c:	85 02 6b    	xor.w     w6, w5, w5
    489e:	05 0a 78    	mov.w     w5, [w4]

000048a0 <.LSM25>:
}
    48a0:	00 80 fa    	ulnk      
    48a2:	00 00 06    	return    

000048a4 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    48a4:	04 00 fa    	lnk       #0x4
    48a6:	00 0f 78    	mov.w     w0, [w14]
    48a8:	11 07 98    	mov.w     w1, [w14+2]

000048aa <.LSM27>:
    if (val)
    48aa:	1e 02 90    	mov.w     [w14+2], w4
    48ac:	e0 0f 52    	sub.w     w4, #0x0, [w15]
    48ae:	0d 00 32    	bra       Z, 0x48ca <.L7>

000048b0 <.LSM28>:
        bitset(self->port, self->bit);
    48b0:	1e 02 78    	mov.w     [w14], w4
    48b2:	14 02 78    	mov.w     [w4], w4
    48b4:	9e 02 78    	mov.w     [w14], w5
    48b6:	95 02 78    	mov.w     [w5], w5
    48b8:	15 03 78    	mov.w     [w5], w6
    48ba:	9e 02 78    	mov.w     [w14], w5
    48bc:	e5 42 90    	mov.b     [w5+6], w5
    48be:	85 82 fb    	ze        w5, w5
    48c0:	17 00 20    	mov.w     #0x1, w7
    48c2:	85 3a dd    	sl.w      w7, w5, w5
    48c4:	86 82 72    	ior.w     w5, w6, w5
    48c6:	05 0a 78    	mov.w     w5, [w4]
    48c8:	0d 00 37    	bra       0x48e4 <.L6>

000048ca <.L7>:
    else
        bitclear(self->port, self->bit);
    48ca:	1e 02 78    	mov.w     [w14], w4
    48cc:	14 02 78    	mov.w     [w4], w4
    48ce:	9e 02 78    	mov.w     [w14], w5
    48d0:	95 02 78    	mov.w     [w5], w5
    48d2:	15 03 78    	mov.w     [w5], w6
    48d4:	9e 02 78    	mov.w     [w14], w5
    48d6:	e5 42 90    	mov.b     [w5+6], w5
    48d8:	85 82 fb    	ze        w5, w5
    48da:	17 00 20    	mov.w     #0x1, w7
    48dc:	85 3a dd    	sl.w      w7, w5, w5
    48de:	85 82 ea    	com.w     w5, w5
    48e0:	85 02 63    	and.w     w6, w5, w5
    48e2:	05 0a 78    	mov.w     w5, [w4]

000048e4 <.L6>:
}
    48e4:	00 80 fa    	ulnk      
    48e6:	00 00 06    	return    

000048e8 <_led_read>:

uint16_t led_read(_LED *self) {
    48e8:	02 00 fa    	lnk       #0x2
    48ea:	00 0f 78    	mov.w     w0, [w14]

000048ec <.LSM32>:
    return bitread(self->port, self->bit);
    48ec:	1e 02 78    	mov.w     [w14], w4
    48ee:	14 02 78    	mov.w     [w4], w4
    48f0:	94 02 78    	mov.w     [w4], w5
    48f2:	1e 02 78    	mov.w     [w14], w4
    48f4:	64 42 90    	mov.b     [w4+6], w4
    48f6:	04 82 fb    	ze        w4, w4
    48f8:	16 00 20    	mov.w     #0x1, w6
    48fa:	04 32 dd    	sl.w      w6, w4, w4
    48fc:	04 82 62    	and.w     w5, w4, w4
    48fe:	04 f0 a7    	btsc.w    w4, #0xf
    4900:	04 02 ea    	neg.w     w4, w4
    4902:	04 02 ea    	neg.w     w4, w4
    4904:	4f 22 de    	lsr.w     w4, #0xf, w4

00004906 <.LSM33>:
}
    4906:	04 00 78    	mov.w     w4, w0
    4908:	00 80 fa    	ulnk      
    490a:	00 00 06    	return    

0000490c <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    490c:	0a 00 fa    	lnk       #0xa
    490e:	00 0f 78    	mov.w     w0, [w14]
    4910:	11 07 98    	mov.w     w1, [w14+2]
    4912:	22 07 98    	mov.w     w2, [w14+4]
    4914:	33 07 98    	mov.w     w3, [w14+6]
    4916:	04 4f 98    	mov.b     w4, [w14+8]

00004918 <.LSM35>:
    self->port = port;
    4918:	1e 02 78    	mov.w     [w14], w4
    491a:	9e 02 90    	mov.w     [w14+2], w5
    491c:	05 0a 78    	mov.w     w5, [w4]

0000491e <.LSM36>:
    self->tris = tris;
    491e:	1e 02 78    	mov.w     [w14], w4
    4920:	ae 02 90    	mov.w     [w14+4], w5
    4922:	15 02 98    	mov.w     w5, [w4+2]

00004924 <.LSM37>:
    self->ans = ans;
    4924:	1e 02 78    	mov.w     [w14], w4
    4926:	be 02 90    	mov.w     [w14+6], w5
    4928:	25 02 98    	mov.w     w5, [w4+4]

0000492a <.LSM38>:
    self->bit = bit;
    492a:	1e 02 78    	mov.w     [w14], w4
    492c:	8e 4a 90    	mov.b     [w14+8], w5
    492e:	65 42 98    	mov.b     w5, [w4+6]

00004930 <.LSM39>:

    bitclear(self->ans, self->bit);
    4930:	1e 02 78    	mov.w     [w14], w4
    4932:	24 02 90    	mov.w     [w4+4], w4
    4934:	9e 02 78    	mov.w     [w14], w5
    4936:	a5 02 90    	mov.w     [w5+4], w5
    4938:	15 03 78    	mov.w     [w5], w6
    493a:	9e 02 78    	mov.w     [w14], w5
    493c:	e5 42 90    	mov.b     [w5+6], w5
    493e:	85 82 fb    	ze        w5, w5
    4940:	17 00 20    	mov.w     #0x1, w7
    4942:	85 3a dd    	sl.w      w7, w5, w5
    4944:	85 82 ea    	com.w     w5, w5
    4946:	85 02 63    	and.w     w6, w5, w5
    4948:	05 0a 78    	mov.w     w5, [w4]

0000494a <.LSM40>:
    bitset(self->tris, self->bit);
    494a:	1e 02 78    	mov.w     [w14], w4
    494c:	14 02 90    	mov.w     [w4+2], w4
    494e:	9e 02 78    	mov.w     [w14], w5
    4950:	95 02 90    	mov.w     [w5+2], w5
    4952:	15 03 78    	mov.w     [w5], w6
    4954:	9e 02 78    	mov.w     [w14], w5
    4956:	e5 42 90    	mov.b     [w5+6], w5
    4958:	85 82 fb    	ze        w5, w5
    495a:	17 00 20    	mov.w     #0x1, w7
    495c:	85 3a dd    	sl.w      w7, w5, w5
    495e:	86 82 72    	ior.w     w5, w6, w5
    4960:	05 0a 78    	mov.w     w5, [w4]

00004962 <.LSM41>:
}
    4962:	00 80 fa    	ulnk      
    4964:	00 00 06    	return    

00004966 <_sw_read>:

uint16_t sw_read(_SW *self) {
    4966:	02 00 fa    	lnk       #0x2
    4968:	00 0f 78    	mov.w     w0, [w14]

0000496a <.LSM43>:
    return bitread(self->port, self->bit);
    496a:	1e 02 78    	mov.w     [w14], w4
    496c:	14 02 78    	mov.w     [w4], w4
    496e:	94 02 78    	mov.w     [w4], w5
    4970:	1e 02 78    	mov.w     [w14], w4
    4972:	64 42 90    	mov.b     [w4+6], w4
    4974:	04 82 fb    	ze        w4, w4
    4976:	16 00 20    	mov.w     #0x1, w6
    4978:	04 32 dd    	sl.w      w6, w4, w4
    497a:	04 82 62    	and.w     w5, w4, w4
    497c:	04 f0 a7    	btsc.w    w4, #0xf
    497e:	04 02 ea    	neg.w     w4, w4
    4980:	04 02 ea    	neg.w     w4, w4
    4982:	4f 22 de    	lsr.w     w4, #0xf, w4

00004984 <.LSM44>:
}
    4984:	04 00 78    	mov.w     w4, w0
    4986:	00 80 fa    	ulnk      
    4988:	00 00 06    	return    
Disassembly of section .dinit:

0000498a <.dinit>:
    498a:	c6 0c 00    	nop       
    498c:	04 00 00    	nop       
    498e:	80 00 00    	nop       
    4990:	00 0e 00    	nop       
    4992:	80 00 00    	nop       
    4994:	80 00 00    	nop       
    4996:	7a 0b 00    	nop       
    4998:	9e 00 00    	nop       
    499a:	80 00 00    	nop       
    499c:	18 0c 00    	nop       
    499e:	6e 00 00    	nop       
    49a0:	80 00 00    	nop       
    49a2:	b6 0c 00    	nop       
    49a4:	10 00 00    	nop       
    49a6:	82 00 00    	nop       
    49a8:	bd 37 86    	mov.w     0xc6f6, w13
    49aa:	33 bd 37    	bra       0xffffc412
    49ac:	06 35 bd    	subr.w    0x1506
    49ae:	37 86 36    	bra       LEU, 0xffff561e
    49b0:	bd 37 86    	mov.w     0xc6f6, w13
    49b2:	37 00 00    	nop       
    49b4:	86 0c 00    	nop       
    49b6:	30 00 00    	nop       
    49b8:	80 00 00    	nop       
    49ba:	00 08 00    	nop       
    49bc:	b8 01 00    	nop       
    49be:	80 00 00    	nop       
    49c0:	d8 0a 00    	nop       
    49c2:	a2 00 00    	nop       
    49c4:	80 00 00    	nop       
    49c6:	b8 09 00    	nop       
    49c8:	20 01 00    	nop       
    49ca:	80 00 00    	nop       
    49cc:	94 0d 00    	nop       
    49ce:	24 00 00    	nop       
    49d0:	82 00 00    	nop       
    49d2:	bc 0d 00    	nop       
    49d4:	00 bc 0d    	bra       OB, 0xffffc1d6
    49d6:	09 00 00    	nop       
    49d8:	00 02 00    	nop       
    49da:	be 0d 00    	nop       
    49dc:	00 be 0d    	bra       OB, 0xffffc5de
    49de:	0e 02 01    	.pword 0x01020e
	...
    49e6:	06 02 02    	call      0x206 <__DEFAULT_VECTOR-0xf06>
    49e8:	00 00 00 
    49ea:	b8 0d 00    	nop       
    49ec:	02 00 00    	nop       
    49ee:	82 00 00    	nop       
    49f0:	94 0d 00    	nop       
    49f2:	ba 0d 00    	nop       
    49f4:	02 00 00    	nop       
    49f6:	80 00 00    	nop       
    49f8:	bc 0d 00    	nop       
    49fa:	02 00 00    	nop       
    49fc:	80 00 00    	nop       
    49fe:	be 0d 00    	nop       
    4a00:	02 00 00    	nop       
    4a02:	80 00 00    	nop       
    4a04:	6a 0d 00    	nop       
    4a06:	2a 00 00    	nop       
    4a08:	82 00 00    	nop       
    4a0a:	30 31 32    	bra       Z, 0xac6c
    4a0c:	33 34 35    	bra       LT, 0xb274
    4a0e:	36 37 38    	bra       NOV, 0xb87c
    4a10:	39 41 42    	add.b     w4, [w9++], w2
    4a12:	43 44 45    	add.b     w10, [--w3], w8
    4a14:	46 00 30    	bra       OV, 0x4aa2
    4a16:	31 32 33    	bra       N, 0xae7a
    4a18:	34 35 36    	bra       LEU, 0xb482
    4a1a:	37 38 39    	bra       NC, 0xba8a
    4a1c:	61 62 63    	and.b     w6, #0x1, [--w4]
    4a1e:	64 65 66    	and.b     w12, #0x4, [--w10]
    4a20:	00 28 6e    	xor.w     w12, w0, [++w0]
    4a22:	75 6c 6c    	xor.b     w8, #0x15, [++w8]
    4a24:	29 00 00    	nop       
    4a26:	ca 0c 00    	nop       
    4a28:	a0 00 00    	nop       
    4a2a:	82 00 00    	nop       
    4a2c:	01 00 00    	nop       
    4a2e:	00 00 00    	nop       
    4a30:	00 00 0a    	.pword 0x0a0000
	...
    4a36:	00 64 00    	nop       
	...
    4a3c:	e8 03 00    	nop       
    4a3e:	00 00 00    	nop       
    4a40:	00 00 10    	subr.w    w0, w0, w0
    4a42:	27 00 00    	nop       
    4a44:	00 00 00    	nop       
    4a46:	00 a0 86    	mov.w     0xd400, w0
    4a48:	01 00 00    	nop       
    4a4a:	00 00 00    	nop       
    4a4c:	40 42 0f    	bra       SB, 0xcece
    4a4e:	00 00 00    	nop       
    4a50:	00 00 80    	mov.w     0x0, w0
    4a52:	96 98 00    	nop       
    4a54:	00 00 00    	nop       
    4a56:	00 00 e1    	cp.w      w0, w0
    4a58:	f5 05 00    	nop       
    4a5a:	00 00 00    	nop       
    4a5c:	00 ca 9a    	mov.b     w0, [w4+328]
    4a5e:	3b 00 00    	nop       
    4a60:	00 00 00    	nop       
    4a62:	e4 0b 54    	sub.w     w8, #0x4, [w7]
    4a64:	02 00 00    	nop       
    4a66:	00 00 e8    	inc.w     w0, w0
    4a68:	76 48 17    	subr.b    w14, #0x16, [w0]
    4a6a:	00 00 00    	nop       
    4a6c:	00 10 a5    	btst.c    w0, w2
    4a6e:	d4 e8 00    	nop       
    4a70:	00 00 00    	nop       
    4a72:	a0 72 4e    	.pword 0x4e72a0
    4a74:	18 09 00    	nop       
    4a76:	00 00 40    	add.w     w0, w0, w0
    4a78:	7a 10 f3    	.pword 0xf3107a
    4a7a:	5a 00 00    	nop       
    4a7c:	00 80 c6    	mac       w6 * w7, B, [w8], w4, [w10], w4, w13
    4a7e:	a4 7e 8d    	mov.w     w4, 0xafd4
    4a80:	03 00 00    	nop       
    4a82:	00 c1 6f    	xor.b     w15, w0, w2
    4a84:	f2 86 23    	mov.w     #0x386f, w2
    4a86:	00 00 00    	nop       
    4a88:	8a 5d 78    	mov.b     w10, [w11++]
    4a8a:	45 63 01    	.pword 0x016345
    4a8c:	00 00 64    	and.w     w8, w0, w0
    4a8e:	a7 b3 b6    	xor.w     0x13a7
    4a90:	e0 0d 00    	nop       
    4a92:	00 e8 89    	mov.w     w0, 0x3d00
    4a94:	04 23 c7    	movsac    A, [w9+w12], w6, [w10]+=2, w4, w13
    4a96:	8a 00 00    	nop       
    4a98:	00 00 00    	nop       
Disassembly of section .text:

00004a9a <_VendorRequests>:
//            USB_error_flags |= 0x01;                    // set Request Error Flag
//    }
//}

void VendorRequests(void) {
    4a9a:	02 00 fa    	lnk       #0x2

00004a9c <.LSM1>:
    WORD temp;

    switch (USB_setup.bRequest) {
    4a9c:	e4 bf 20    	mov.w     #0xbfe, w4
    4a9e:	14 42 90    	mov.b     [w4+1], w4
    4aa0:	04 82 fb    	ze        w4, w4
    4aa2:	cf a2 de    	asr.w     w4, #0xf, w5
    4aa4:	36 00 20    	mov.w     #0x3, w6
    4aa6:	07 00 20    	mov.w     #0x0, w7
    4aa8:	86 0f 52    	sub.w     w4, w6, [w15]
    4aaa:	87 8f 5a    	subb.w    w5, w7, [w15]
    4aac:	42 00 3e    	bra       GTU, 0x4b32 <.L2>
    4aae:	04 60 01    	bra       w4
    4ab0:	03 00 37    	bra       0x4ab8 <.L3>
    4ab2:	0d 00 37    	bra       0x4ace <.L4>
    4ab4:	1b 00 37    	bra       0x4aec <.L5>
    4ab6:	2c 00 37    	bra       0x4b10 <.L6>

00004ab8 <.L3>:
        case HELLO:
            printf("Hello World!\n");
    4ab8:	40 0e 2a    	mov.w     #0xa0e4, w0
    4aba:	59 e5 07    	rcall     0x156e <_puts>

00004abc <.LSM3>:
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    4abc:	00 42 eb    	clr.b     w4
    4abe:	04 43 78    	mov.b     w4, w6
    4ac0:	45 e0 20    	mov.w     #0xe04, w5
    4ac2:	86 4a 78    	mov.b     w6, [w5]

00004ac4 <.LSM4>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4ac4:	84 cc b3    	mov.b     #0xc8, w4
    4ac6:	04 43 78    	mov.b     w4, w6
    4ac8:	55 e0 20    	mov.w     #0xe05, w5
    4aca:	86 4a 78    	mov.b     w6, [w5]

00004acc <.LSM5>:
            break;
    4acc:	38 00 37    	bra       0x4b3e <.L1>

00004ace <.L4>:
        case SET_VALS:
            val1 = USB_setup.wValue.w;
    4ace:	e4 bf 20    	mov.w     #0xbfe, w4
    4ad0:	14 02 90    	mov.w     [w4+2], w4
    4ad2:	34 66 88    	mov.w     w4, 0xcc6

00004ad4 <.LSM7>:
            val2 = USB_setup.wIndex.w;
    4ad4:	e4 bf 20    	mov.w     #0xbfe, w4
    4ad6:	24 02 90    	mov.w     [w4+4], w4
    4ad8:	44 66 88    	mov.w     w4, 0xcc8

00004ada <.LSM8>:
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0 
    4ada:	00 42 eb    	clr.b     w4
    4adc:	04 43 78    	mov.b     w4, w6
    4ade:	45 e0 20    	mov.w     #0xe04, w5
    4ae0:	86 4a 78    	mov.b     w6, [w5]

00004ae2 <.LSM9>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4ae2:	84 cc b3    	mov.b     #0xc8, w4
    4ae4:	04 43 78    	mov.b     w4, w6
    4ae6:	55 e0 20    	mov.w     #0xe05, w5
    4ae8:	86 4a 78    	mov.b     w6, [w5]

00004aea <.LSM10>:
            break;
    4aea:	29 00 37    	bra       0x4b3e <.L1>

00004aec <.L5>:
        case GET_VALS:
            temp.w = val1;
    4aec:	34 66 80    	mov.w     0xcc6, w4
    4aee:	04 0f 78    	mov.w     w4, [w14]

00004af0 <.LSM12>:
            BD[EP0IN].address[0] = temp.b[0];
    4af0:	34 70 80    	mov.w     0xe06, w4
    4af2:	9e 42 78    	mov.b     [w14], w5
    4af4:	05 4a 78    	mov.b     w5, [w4]

00004af6 <.LSM13>:
            BD[EP0IN].address[1] = temp.b[1];
    4af6:	34 70 80    	mov.w     0xe06, w4
    4af8:	04 02 e8    	inc.w     w4, w4
    4afa:	9e 42 90    	mov.b     [w14+1], w5
    4afc:	05 4a 78    	mov.b     w5, [w4]

00004afe <.LSM14>:
            //temp.w = val2;
            //BD[EP0IN].address[2] = temp.b[0];
            //BD[EP0IN].address[3] = temp.b[1];
            BD[EP0IN].bytecount = 2;    // set EP0 IN byte count to 4
    4afe:	24 c0 b3    	mov.b     #0x2, w4
    4b00:	04 43 78    	mov.b     w4, w6
    4b02:	45 e0 20    	mov.w     #0xe04, w5
    4b04:	86 4a 78    	mov.b     w6, [w5]

00004b06 <.LSM15>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4b06:	84 cc b3    	mov.b     #0xc8, w4
    4b08:	04 43 78    	mov.b     w4, w6
    4b0a:	55 e0 20    	mov.w     #0xe05, w5
    4b0c:	86 4a 78    	mov.b     w6, [w5]

00004b0e <.LSM16>:
            break;            
    4b0e:	17 00 37    	bra       0x4b3e <.L1>

00004b10 <.L6>:
        case PRINT_VALS:
            printf("val1 = %u, val2 = %u\n", val1, val2);
    4b10:	45 66 80    	mov.w     0xcc8, w5
    4b12:	34 66 80    	mov.w     0xcc6, w4
    4b14:	85 1f 78    	mov.w     w5, [w15++]
    4b16:	84 1f 78    	mov.w     w4, [w15++]
    4b18:	14 0f 2a    	mov.w     #0xa0f1, w4
    4b1a:	84 1f 78    	mov.w     w4, [w15++]
    4b1c:	32 e5 07    	rcall     0x1582 <__printf_cdnopuxX>
    4b1e:	e6 87 57    	sub.w     w15, #0x6, w15

00004b20 <.LSM18>:
            BD[EP0IN].bytecount = 0;    // set EP0 IN byte count to 0
    4b20:	00 42 eb    	clr.b     w4
    4b22:	04 43 78    	mov.b     w4, w6
    4b24:	45 e0 20    	mov.w     #0xe04, w5
    4b26:	86 4a 78    	mov.b     w6, [w5]

00004b28 <.LSM19>:
            BD[EP0IN].status = 0xC8;    // send packet as DATA1, set UOWN bit
    4b28:	84 cc b3    	mov.b     #0xc8, w4
    4b2a:	04 43 78    	mov.b     w4, w6
    4b2c:	55 e0 20    	mov.w     #0xe05, w5
    4b2e:	86 4a 78    	mov.b     w6, [w5]

00004b30 <.LSM20>:
            break;
    4b30:	06 00 37    	bra       0x4b3e <.L1>

00004b32 <.L2>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    4b32:	24 c1 20    	mov.w     #0xc12, w4
    4b34:	14 42 78    	mov.b     [w4], w4
    4b36:	04 04 a0    	bset.b    w4, #0x0
    4b38:	04 43 78    	mov.b     w4, w6
    4b3a:	25 c1 20    	mov.w     #0xc12, w5
    4b3c:	86 4a 78    	mov.b     w6, [w5]

00004b3e <.L1>:
    }
}
    4b3e:	00 80 fa    	ulnk      
    4b40:	00 00 06    	return    

00004b42 <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    4b42:	00 00 fa    	lnk       #0x0

00004b44 <.LSM24>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4b44:	24 c1 20    	mov.w     #0xc12, w4
    4b46:	14 42 78    	mov.b     [w4], w4
    4b48:	04 04 a0    	bset.b    w4, #0x0
    4b4a:	04 43 78    	mov.b     w4, w6
    4b4c:	25 c1 20    	mov.w     #0xc12, w5
    4b4e:	86 4a 78    	mov.b     w6, [w5]

00004b50 <.LSM25>:
    }
}
    4b50:	00 80 fa    	ulnk      
    4b52:	00 00 06    	return    

00004b54 <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    4b54:	00 00 fa    	lnk       #0x0

00004b56 <.LSM27>:
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    4b56:	24 c1 20    	mov.w     #0xc12, w4
    4b58:	14 42 78    	mov.b     [w4], w4
    4b5a:	04 04 a0    	bset.b    w4, #0x0
    4b5c:	04 43 78    	mov.b     w4, w6
    4b5e:	25 c1 20    	mov.w     #0xc12, w5
    4b60:	86 4a 78    	mov.b     w6, [w5]

00004b62 <.LSM28>:
    }
}
    4b62:	00 80 fa    	ulnk      
    4b64:	00 00 06    	return    

00004b66 <_main>:

int16_t main(void) {
    4b66:	00 00 fa    	lnk       #0x0

00004b68 <.LSM30>:
    init_clock();
    4b68:	04 10 20    	mov.w     #0x100, w4
    4b6a:	24 3a 88    	mov.w     w4, 0x744

00004b6c <.LSM31>:
    init_uart();
    4b6c:	8d ec 07    	rcall     0x2488 <_init_uart>

00004b6e <.LSM32>:
    init_ui();
    4b6e:	07 fe 07    	rcall     0x477e <_init_ui>

00004b70 <.LSM33>:

    val1 = 0;
    4b70:	00 02 eb    	clr.w     w4
    4b72:	34 66 88    	mov.w     w4, 0xcc6

00004b74 <.LSM34>:
    val2 = 0;
    4b74:	00 02 eb    	clr.w     w4
    4b76:	44 66 88    	mov.w     w4, 0xcc8

00004b78 <.LSM35>:

    //led_on()
    InitUSB();                              // initialize the USB registers and serial interface engine
    4b78:	a2 f1 07    	rcall     0x2ebe <_InitUSB>

00004b7a <.LSM36>:
    while (USB_USWSTAT!=CONFIG_STATE) {     // while the peripheral is not configured...
    4b7a:	03 00 37    	bra       0x4b82 <.L12>

00004b7c <.L13>:
        ServiceUSB();
    4b7c:	f0 f1 07    	rcall     0x2f5e <_ServiceUSB>

00004b7e <.LSM38>:
    led_on(&led2);
    4b7e:	e0 c8 20    	mov.w     #0xc8e, w0
    4b80:	60 fe 07    	rcall     0x4842 <_led_on>

00004b82 <.L12>:
    4b82:	64 c1 20    	mov.w     #0xc16, w4
    4b84:	14 42 78    	mov.b     [w4], w4
    4b86:	e3 4f 52    	sub.b     w4, #0x3, [w15]
    4b88:	f9 ff 3a    	bra       NZ, 0x4b7c <.L13>

00004b8a <.L14>:
                           // ...service USB requests
    }
    while (1) {
        ServiceUSB();                       // service any pending USB requests
    4b8a:	e9 f1 07    	rcall     0x2f5e <_ServiceUSB>

00004b8c <.LBE3>:
    }
    4b8c:	fe ff 37    	bra       0x4b8a <.L14>
Disassembly of section .isr:

00004b8e <__DefaultInterrupt>:
    4b8e:	00 40 da    	.pword 0xda4000
    4b90:	00 00 fe    	reset     
